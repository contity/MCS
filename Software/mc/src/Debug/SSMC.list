
SSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a6c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004df0  08004df0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004df0  08004df0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004df0  08004df0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004df4  08004df4  00014df4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004df8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000070  08004e68  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b0  08004e68  000201b0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000de6c  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000276c  00000000  00000000  0002df05  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e00  00000000  00000000  00030678  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c78  00000000  00000000  00031478  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   00009186  00000000  00000000  000320f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003d83  00000000  00000000  0003b276  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0003eff9  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d58  00000000  00000000  0003f074  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004b60 	.word	0x08004b60

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004b60 	.word	0x08004b60

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b28      	ldr	r3, [pc, #160]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a27      	ldr	r2, [pc, #156]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b25      	ldr	r3, [pc, #148]	; (8000204 <MX_GPIO_Init+0xb8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b22      	ldr	r3, [pc, #136]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a21      	ldr	r2, [pc, #132]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1b      	ldr	r2, [pc, #108]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <MX_GPIO_Init+0xb8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001b0:	f001 f806 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80001ba:	4814      	ldr	r0, [pc, #80]	; (800020c <MX_GPIO_Init+0xc0>)
 80001bc:	f001 f800 	bl	80011c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001da:	f000 fdb7 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001de:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80001e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	2301      	movs	r3, #1
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	4619      	mov	r1, r3
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <MX_GPIO_Init+0xc0>)
 80001f8:	f000 fda8 	bl	8000d4c <HAL_GPIO_Init>

}
 80001fc:	bf00      	nop
 80001fe:	3720      	adds	r7, #32
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 fb98 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f80d 	bl	8000236 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f7ff ff96 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000220:	f000 f98e 	bl	8000540 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000224:	f000 fa06 	bl	8000634 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000228:	f000 faea 	bl	8000800 <MX_USART1_UART_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  scheduler_init();
 800022c:	f003 fcfa 	bl	8003c24 <scheduler_init>
  scheduler_main();
 8000230:	f003 fd0a 	bl	8003c48 <scheduler_main>

  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x24>

08000236 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	b090      	sub	sp, #64	; 0x40
 800023a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	2228      	movs	r2, #40	; 0x28
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f003 fd95 	bl	8003d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ffd0 	bl	8001224 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028a:	f000 f819 	bl	80002c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2102      	movs	r1, #2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fb2b 	bl	8001904 <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b4:	f000 f804 	bl	80002c0 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3740      	adds	r7, #64	; 0x40
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <HAL_MspInit+0x5c>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <HAL_MspInit+0x5c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <HAL_MspInit+0x5c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <HAL_MspInit+0x5c>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <HAL_MspInit+0x60>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_MspInit+0x60>)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000
 8000340:	40010000 	.word	0x40010000

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <HardFault_Handler+0x4>

08000356 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <MemManage_Handler+0x4>

0800035c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <BusFault_Handler+0x4>

08000362 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <UsageFault_Handler+0x4>

08000368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	scheduler_ei_tickUp_ISR();
 8000390:	f003 fcb8 	bl	8003d04 <scheduler_ei_tickUp_ISR>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}

08000398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800039c:	4802      	ldr	r0, [pc, #8]	; (80003a8 <USART1_IRQHandler+0x10>)
 800039e:	f002 fdc9 	bl	8002f34 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000012c 	.word	0x2000012c

080003ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	e00a      	b.n	80003d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003be:	f3af 8000 	nop.w
 80003c2:	4601      	mov	r1, r0
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	60ba      	str	r2, [r7, #8]
 80003ca:	b2ca      	uxtb	r2, r1
 80003cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	3301      	adds	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	429a      	cmp	r2, r3
 80003da:	dbf0      	blt.n	80003be <_read+0x12>
	}

return len;
 80003dc:	687b      	ldr	r3, [r7, #4]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	60b9      	str	r1, [r7, #8]
 80003f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e009      	b.n	800040c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	60ba      	str	r2, [r7, #8]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4618      	mov	r0, r3
 8000402:	f003 fbb3 	bl	8003b6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3301      	adds	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	dbf1      	blt.n	80003f8 <_write+0x12>
	}
	return len;
 8000414:	687b      	ldr	r3, [r7, #4]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <_close>:

int _close(int file)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
	return -1;
 8000426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000444:	605a      	str	r2, [r3, #4]
	return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <_isatty>:

int _isatty(int file)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	return 1;
 800045a:	2301      	movs	r3, #1
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000466:	b480      	push	{r7}
 8000468:	b085      	sub	sp, #20
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
	return 0;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
	...

08000480 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <_sbrk+0x50>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d102      	bne.n	8000496 <_sbrk+0x16>
		heap_end = &end;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <_sbrk+0x50>)
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <_sbrk+0x54>)
 8000494:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <_sbrk+0x50>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <_sbrk+0x50>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	466a      	mov	r2, sp
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d907      	bls.n	80004ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004aa:	f003 fc39 	bl	8003d20 <__errno>
 80004ae:	4602      	mov	r2, r0
 80004b0:	230c      	movs	r3, #12
 80004b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	e006      	b.n	80004c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <_sbrk+0x50>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <_sbrk+0x50>)
 80004c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000008c 	.word	0x2000008c
 80004d4:	200001b0 	.word	0x200001b0

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <SystemInit+0x5c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <SystemInit+0x5c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <SystemInit+0x5c>)
 80004ea:	685a      	ldr	r2, [r3, #4]
 80004ec:	4911      	ldr	r1, [pc, #68]	; (8000534 <SystemInit+0x5c>)
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <SystemInit+0x60>)
 80004f0:	4013      	ands	r3, r2
 80004f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <SystemInit+0x5c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <SystemInit+0x5c>)
 80004fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000502:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <SystemInit+0x5c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <SystemInit+0x5c>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <SystemInit+0x5c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <SystemInit+0x5c>)
 8000516:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800051a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <SystemInit+0x5c>)
 800051e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000522:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <SystemInit+0x64>)
 8000526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800052a:	609a      	str	r2, [r3, #8]
#endif 
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	f8ff0000 	.word	0xf8ff0000
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800055e:	463b      	mov	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <MX_TIM2_Init+0xf0>)
 800056c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000574:	2247      	movs	r2, #71	; 0x47
 8000576:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_TIM2_Init+0xf0>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000584:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_TIM2_Init+0xf0>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000592:	4827      	ldr	r0, [pc, #156]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000594:	f001 fbf8 	bl	8001d88 <HAL_TIM_Base_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800059e:	f7ff fe8f 	bl	80002c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	4619      	mov	r1, r3
 80005ae:	4820      	ldr	r0, [pc, #128]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005b0:	f001 fe50 	bl	8002254 <HAL_TIM_ConfigClockSource>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005ba:	f7ff fe81 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005be:	481c      	ldr	r0, [pc, #112]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005c0:	f001 fc68 	bl	8001e94 <HAL_TIM_IC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005ca:	f7ff fe79 	bl	80002c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005de:	f002 fad1 	bl	8002b84 <HAL_TIMEx_MasterConfigSynchronization>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80005e8:	f7ff fe6a 	bl	80002c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2208      	movs	r2, #8
 8000600:	4619      	mov	r1, r3
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000604:	f001 fcd6 	bl	8001fb4 <HAL_TIM_IC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800060e:	f7ff fe57 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	220c      	movs	r2, #12
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_TIM2_Init+0xf0>)
 800061a:	f001 fccb 	bl	8001fb4 <HAL_TIM_IC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000624:	f7ff fe4c 	bl	80002c0 <Error_Handler>
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000ec 	.word	0x200000ec

08000634 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000660:	4a31      	ldr	r2, [pc, #196]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000662:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000666:	2247      	movs	r2, #71	; 0x47
 8000668:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <MX_TIM3_Init+0xf0>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000676:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <MX_TIM3_Init+0xf0>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000684:	4827      	ldr	r0, [pc, #156]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000686:	f001 fb7f 	bl	8001d88 <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000690:	f7ff fe16 	bl	80002c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	4619      	mov	r1, r3
 80006a0:	4820      	ldr	r0, [pc, #128]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006a2:	f001 fdd7 	bl	8002254 <HAL_TIM_ConfigClockSource>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006ac:	f7ff fe08 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006b2:	f001 fbef 	bl	8001e94 <HAL_TIM_IC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f7ff fe00 	bl	80002c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4815      	ldr	r0, [pc, #84]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006d0:	f002 fa58 	bl	8002b84 <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80006da:	f7ff fdf1 	bl	80002c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006e2:	2301      	movs	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2208      	movs	r2, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006f6:	f001 fc5d 	bl	8001fb4 <HAL_TIM_IC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000700:	f7ff fdde 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	220c      	movs	r2, #12
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_TIM3_Init+0xf0>)
 800070c:	f001 fc52 	bl	8001fb4 <HAL_TIM_IC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000716:	f7ff fdd3 	bl	80002c0 <Error_Handler>
  }

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000ac 	.word	0x200000ac
 8000728:	40000400 	.word	0x40000400

0800072c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074a:	d124      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	61d3      	str	r3, [r2, #28]
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077c:	230c      	movs	r3, #12
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4619      	mov	r1, r3
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <HAL_TIM_Base_MspInit+0xc8>)
 8000790:	f000 fadc 	bl	8000d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000794:	e028      	b.n	80007e8 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_TIM_Base_MspInit+0xcc>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d123      	bne.n	80007e8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	61d3      	str	r3, [r2, #28]
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007be:	f043 0308 	orr.w	r3, r3, #8
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d0:	2303      	movs	r3, #3
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_TIM_Base_MspInit+0xd0>)
 80007e4:	f000 fab2 	bl	8000d4c <HAL_GPIO_Init>
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010800 	.word	0x40010800
 80007f8:	40000400 	.word	0x40000400
 80007fc:	40010c00 	.word	0x40010c00

08000800 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <MX_USART1_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000826:	2208      	movs	r2, #8
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000838:	f002 fa3a 	bl	8002cb0 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f7ff fd3d 	bl	80002c0 <Error_Handler>
  }

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000012c 	.word	0x2000012c
 8000850:	40013800 	.word	0x40013800

08000854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <HAL_UART_MspInit+0x9c>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d139      	bne.n	80008e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <HAL_UART_MspInit+0xa4>)
 80008ba:	f000 fa47 	bl	8000d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_UART_MspInit+0xa4>)
 80008d4:	f000 fa3a 	bl	8000d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2025      	movs	r0, #37	; 0x25
 80008de:	f000 f96f 	bl	8000bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e2:	2025      	movs	r0, #37	; 0x25
 80008e4:	f000 f998 	bl	8000c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40013800 	.word	0x40013800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008fe:	e003      	b.n	8000908 <LoopCopyDataInit>

08000900 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000902:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000904:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000906:	3104      	adds	r1, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800090c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800090e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000910:	d3f6      	bcc.n	8000900 <CopyDataInit>
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000914:	e002      	b.n	800091c <LoopFillZerobss>

08000916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000918:	f842 3b04 	str.w	r3, [r2], #4

0800091c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000920:	d3f9      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff fdd9 	bl	80004d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f003 fa01 	bl	8003d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc71 	bl	8000210 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r3, =_sidata
 8000930:	08004df8 	.word	0x08004df8
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000938:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800093c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000940:	200001b0 	.word	0x200001b0

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f911 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fcbc 	bl	80002e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f958 	bl	8000c48 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f906 	bl	8000bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	2000016c 	.word	0x2000016c

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4906      	ldr	r1, [pc, #24]	; (8000a80 <__NVIC_EnableIRQ+0x34>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff90 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	d00f      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d00c      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	d009      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d006      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d003      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ba6:	2192      	movs	r1, #146	; 0x92
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000baa:	f7ff fb8f 	bl	80002cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff1a 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	08004b78 	.word	0x08004b78

08000bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d903      	bls.n	8000be0 <HAL_NVIC_SetPriority+0x20>
 8000bd8:	21aa      	movs	r1, #170	; 0xaa
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <HAL_NVIC_SetPriority+0x54>)
 8000bdc:	f7ff fb76 	bl	80002cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	d903      	bls.n	8000bee <HAL_NVIC_SetPriority+0x2e>
 8000be6:	21ab      	movs	r1, #171	; 0xab
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <HAL_NVIC_SetPriority+0x54>)
 8000bea:	f7ff fb6f 	bl	80002cc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff1f 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ff6d 	bl	8000ad8 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff3c 	bl	8000a84 <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08004b78 	.word	0x08004b78

08000c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da03      	bge.n	8000c32 <HAL_NVIC_EnableIRQ+0x1a>
 8000c2a:	21be      	movs	r1, #190	; 0xbe
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_NVIC_EnableIRQ+0x2c>)
 8000c2e:	f7ff fb4d 	bl	80002cc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff08 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08004b78 	.word	0x08004b78

08000c48 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff73 	bl	8000b3c <SysTick_Config>
 8000c56:	4603      	mov	r3, r0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d005      	beq.n	8000c82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2204      	movs	r2, #4
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	e051      	b.n	8000d26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 020e 	bic.w	r2, r2, #14
 8000c90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0201 	bic.w	r2, r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <HAL_DMA_Abort_IT+0xd0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d029      	beq.n	8000d00 <HAL_DMA_Abort_IT+0xa0>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <HAL_DMA_Abort_IT+0xd4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d022      	beq.n	8000cfc <HAL_DMA_Abort_IT+0x9c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <HAL_DMA_Abort_IT+0xd8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d01a      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0x96>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_DMA_Abort_IT+0xdc>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d012      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0x90>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <HAL_DMA_Abort_IT+0xe0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d00a      	beq.n	8000cea <HAL_DMA_Abort_IT+0x8a>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <HAL_DMA_Abort_IT+0xe4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d102      	bne.n	8000ce4 <HAL_DMA_Abort_IT+0x84>
 8000cde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ce2:	e00e      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce8:	e00b      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cee:	e008      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	e005      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfa:	e002      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	e000      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000d00:	2301      	movs	r3, #1
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <HAL_DMA_Abort_IT+0xe8>)
 8000d04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	4798      	blx	r3
    } 
  }
  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40020008 	.word	0x40020008
 8000d34:	4002001c 	.word	0x4002001c
 8000d38:	40020030 	.word	0x40020030
 8000d3c:	40020044 	.word	0x40020044
 8000d40:	40020058 	.word	0x40020058
 8000d44:	4002006c 	.word	0x4002006c
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a9c      	ldr	r2, [pc, #624]	; (8000fd4 <HAL_GPIO_Init+0x288>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a9b      	ldr	r2, [pc, #620]	; (8000fd8 <HAL_GPIO_Init+0x28c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00f      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a9a      	ldr	r2, [pc, #616]	; (8000fdc <HAL_GPIO_Init+0x290>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00b      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a99      	ldr	r2, [pc, #612]	; (8000fe0 <HAL_GPIO_Init+0x294>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a98      	ldr	r2, [pc, #608]	; (8000fe4 <HAL_GPIO_Init+0x298>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d86:	21bd      	movs	r1, #189	; 0xbd
 8000d88:	4897      	ldr	r0, [pc, #604]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000d8a:	f7ff fa9f 	bl	80002cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x58>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x60>
 8000da4:	21be      	movs	r1, #190	; 0xbe
 8000da6:	4890      	ldr	r0, [pc, #576]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000da8:	f7ff fa90 	bl	80002cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 81eb 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	f000 81e6 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b11      	cmp	r3, #17
 8000dc6:	f000 81e1 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	f000 81dc 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b12      	cmp	r3, #18
 8000dda:	f000 81d7 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a82      	ldr	r2, [pc, #520]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	f000 81d1 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4a80      	ldr	r2, [pc, #512]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	f000 81cb 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	f000 81c5 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a7c      	ldr	r2, [pc, #496]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	f000 81bf 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	4a7a      	ldr	r2, [pc, #488]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	f000 81b9 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a78      	ldr	r2, [pc, #480]	; (8001000 <HAL_GPIO_Init+0x2b4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	f000 81b3 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	f000 81ae 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e30:	21bf      	movs	r1, #191	; 0xbf
 8000e32:	486d      	ldr	r0, [pc, #436]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000e34:	f7ff fa4a 	bl	80002cc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	e1a8      	b.n	800118c <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	f040 8197 	bne.w	8001186 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a5e      	ldr	r2, [pc, #376]	; (8000fd4 <HAL_GPIO_Init+0x288>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a5d      	ldr	r2, [pc, #372]	; (8000fd8 <HAL_GPIO_Init+0x28c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00f      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a5c      	ldr	r2, [pc, #368]	; (8000fdc <HAL_GPIO_Init+0x290>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00b      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a5b      	ldr	r2, [pc, #364]	; (8000fe0 <HAL_GPIO_Init+0x294>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a5a      	ldr	r2, [pc, #360]	; (8000fe4 <HAL_GPIO_Init+0x298>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e80:	21cd      	movs	r1, #205	; 0xcd
 8000e82:	4859      	ldr	r0, [pc, #356]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000e84:	f7ff fa22 	bl	80002cc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d065      	beq.n	8000f5c <HAL_GPIO_Init+0x210>
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d80e      	bhi.n	8000eb2 <HAL_GPIO_Init+0x166>
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d04c      	beq.n	8000f32 <HAL_GPIO_Init+0x1e6>
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d804      	bhi.n	8000ea6 <HAL_GPIO_Init+0x15a>
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d072      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d01d      	beq.n	8000ee0 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea4:	e0b1      	b.n	800100a <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	f000 80ac 	beq.w	8001004 <HAL_GPIO_Init+0x2b8>
 8000eac:	2b11      	cmp	r3, #17
 8000eae:	d02b      	beq.n	8000f08 <HAL_GPIO_Init+0x1bc>
          break;
 8000eb0:	e0ab      	b.n	800100a <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000eb2:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d066      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d806      	bhi.n	8000ecc <HAL_GPIO_Init+0x180>
 8000ebe:	4a4b      	ldr	r2, [pc, #300]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d060      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ec4:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d05d      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
          break;
 8000eca:	e09e      	b.n	800100a <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000ecc:	4a49      	ldr	r2, [pc, #292]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d059      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ed2:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x2b4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d056      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d053      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
          break;
 8000ede:	e094      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d00b      	beq.n	8000f00 <HAL_GPIO_Init+0x1b4>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x1b4>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x1b4>
 8000ef8:	21d5      	movs	r1, #213	; 0xd5
 8000efa:	483b      	ldr	r0, [pc, #236]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000efc:	f7ff f9e6 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e080      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d00b      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000f20:	21dc      	movs	r1, #220	; 0xdc
 8000f22:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000f24:	f7ff f9d2 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e06b      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d00b      	beq.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f4a:	21e3      	movs	r1, #227	; 0xe3
 8000f4c:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000f4e:	f7ff f9bd 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	3308      	adds	r3, #8
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e056      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d00b      	beq.n	8000f7c <HAL_GPIO_Init+0x230>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x230>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x230>
 8000f74:	21ea      	movs	r1, #234	; 0xea
 8000f76:	481c      	ldr	r0, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000f78:	f7ff f9a8 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	330c      	adds	r3, #12
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e041      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_GPIO_Init+0x25a>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x25a>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x25a>
 8000f9e:	21f7      	movs	r1, #247	; 0xf7
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000fa2:	f7ff f993 	bl	80002cc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e02a      	b.n	800100a <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d105      	bne.n	8000fc8 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	611a      	str	r2, [r3, #16]
          break;
 8000fc6:	e020      	b.n	800100a <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	615a      	str	r2, [r3, #20]
          break;
 8000fd2:	e01a      	b.n	800100a <HAL_GPIO_Init+0x2be>
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40011400 	.word	0x40011400
 8000fe4:	40011800 	.word	0x40011800
 8000fe8:	08004bb4 	.word	0x08004bb4
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	10210000 	.word	0x10210000
 8000ff4:	10310000 	.word	0x10310000
 8000ff8:	10120000 	.word	0x10120000
 8000ffc:	10220000 	.word	0x10220000
 8001000:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
          break;
 8001008:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2bff      	cmp	r3, #255	; 0xff
 800100e:	d801      	bhi.n	8001014 <HAL_GPIO_Init+0x2c8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	e001      	b.n	8001018 <HAL_GPIO_Init+0x2cc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3304      	adds	r3, #4
 8001018:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2bff      	cmp	r3, #255	; 0xff
 800101e:	d802      	bhi.n	8001026 <HAL_GPIO_Init+0x2da>
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x2e0>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	3b08      	subs	r3, #8
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	210f      	movs	r1, #15
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	401a      	ands	r2, r3
 800103e:	6a39      	ldr	r1, [r7, #32]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	431a      	orrs	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8096 	beq.w	8001186 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <HAL_GPIO_Init+0x458>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a51      	ldr	r2, [pc, #324]	; (80011a4 <HAL_GPIO_Init+0x458>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x458>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001072:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x45c>)
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a44      	ldr	r2, [pc, #272]	; (80011ac <HAL_GPIO_Init+0x460>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x37a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a43      	ldr	r2, [pc, #268]	; (80011b0 <HAL_GPIO_Init+0x464>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x376>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_GPIO_Init+0x468>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x372>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <HAL_GPIO_Init+0x46c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x36e>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010c6:	2300      	movs	r3, #0
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d8:	4933      	ldr	r1, [pc, #204]	; (80011a8 <HAL_GPIO_Init+0x45c>)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x470>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4931      	ldr	r1, [pc, #196]	; (80011bc <HAL_GPIO_Init+0x470>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	43db      	mvns	r3, r3
 8001108:	492c      	ldr	r1, [pc, #176]	; (80011bc <HAL_GPIO_Init+0x470>)
 800110a:	4013      	ands	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_GPIO_Init+0x470>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4927      	ldr	r1, [pc, #156]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_GPIO_Init+0x470>)
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	43db      	mvns	r3, r3
 8001130:	4922      	ldr	r1, [pc, #136]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001132:	4013      	ands	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	491d      	ldr	r1, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
 800114e:	e006      	b.n	800115e <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	43db      	mvns	r3, r3
 8001158:	4918      	ldr	r1, [pc, #96]	; (80011bc <HAL_GPIO_Init+0x470>)
 800115a:	4013      	ands	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_GPIO_Init+0x470>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	4913      	ldr	r1, [pc, #76]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	60cb      	str	r3, [r1, #12]
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_GPIO_Init+0x470>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	490e      	ldr	r1, [pc, #56]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001182:	4013      	ands	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae4f 	bne.w	8000e3a <HAL_GPIO_Init+0xee>
  }
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40011400 	.word	0x40011400
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_GPIO_WritePin+0x20>
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	0c1b      	lsrs	r3, r3, #16
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <HAL_GPIO_WritePin+0x2a>
 80011e0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <HAL_GPIO_WritePin+0x60>)
 80011e6:	f7ff f871 	bl	80002cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011ea:	787b      	ldrb	r3, [r7, #1]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_WritePin+0x40>
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d004      	beq.n	8001200 <HAL_GPIO_WritePin+0x40>
 80011f6:	f240 11d5 	movw	r1, #469	; 0x1d5
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <HAL_GPIO_WritePin+0x60>)
 80011fc:	f7ff f866 	bl	80002cc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	08004bb4 	.word	0x08004bb4

08001224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e35c      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d01c      	beq.n	8001278 <HAL_RCC_OscConfig+0x54>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d110      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 800126e:	f240 1167 	movw	r1, #359	; 0x167
 8001272:	48a5      	ldr	r0, [pc, #660]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 8001274:	f7ff f82a 	bl	80002cc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 809a 	beq.w	80013ba <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00e      	beq.n	80012ac <HAL_RCC_OscConfig+0x88>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001296:	d009      	beq.n	80012ac <HAL_RCC_OscConfig+0x88>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a0:	d004      	beq.n	80012ac <HAL_RCC_OscConfig+0x88>
 80012a2:	f240 116d 	movw	r1, #365	; 0x16d
 80012a6:	4898      	ldr	r0, [pc, #608]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80012a8:	f7ff f810 	bl	80002cc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ac:	4b97      	ldr	r3, [pc, #604]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d00c      	beq.n	80012d2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b8:	4b94      	ldr	r3, [pc, #592]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d112      	bne.n	80012ea <HAL_RCC_OscConfig+0xc6>
 80012c4:	4b91      	ldr	r3, [pc, #580]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d10b      	bne.n	80012ea <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d2:	4b8e      	ldr	r3, [pc, #568]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x194>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d168      	bne.n	80013b8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e302      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0xde>
 80012f4:	4b85      	ldr	r3, [pc, #532]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a84      	ldr	r2, [pc, #528]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e02e      	b.n	8001360 <HAL_RCC_OscConfig+0x13c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x100>
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a7f      	ldr	r2, [pc, #508]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b7d      	ldr	r3, [pc, #500]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7c      	ldr	r2, [pc, #496]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800131c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0x13c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x124>
 800132e:	4b77      	ldr	r3, [pc, #476]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a76      	ldr	r2, [pc, #472]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a73      	ldr	r2, [pc, #460]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0x13c>
 8001348:	4b70      	ldr	r3, [pc, #448]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a6f      	ldr	r2, [pc, #444]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b6d      	ldr	r3, [pc, #436]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6c      	ldr	r2, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fb34 	bl	80009d4 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fb30 	bl	80009d4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e2b6      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x14c>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fb20 	bl	80009d4 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fb1c 	bl	80009d4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2a2      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x174>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d079      	beq.n	80014ba <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1bc>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d004      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1bc>
 80013d6:	f240 11a1 	movw	r1, #417	; 0x1a1
 80013da:	484b      	ldr	r0, [pc, #300]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80013dc:	f7fe ff76 	bl	80002cc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d904      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1ce>
 80013e8:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80013ec:	4846      	ldr	r0, [pc, #280]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80013ee:	f7fe ff6d 	bl	80002cc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d11c      	bne.n	8001444 <HAL_RCC_OscConfig+0x220>
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d116      	bne.n	8001444 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x20a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e260      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4933      	ldr	r1, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	e03a      	b.n	80014ba <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x2ec>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fabf 	bl	80009d4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fabb 	bl	80009d4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e241      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4921      	ldr	r1, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
 800148c:	e015      	b.n	80014ba <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_OscConfig+0x2ec>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fa9e 	bl	80009d4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fa9a 	bl	80009d4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e220      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d048      	beq.n	8001558 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2bc>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d004      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2bc>
 80014d6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80014dc:	f7fe fef6 	bl	80002cc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d021      	beq.n	800152c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x2f0>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fa71 	bl	80009d4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f4:	e010      	b.n	8001518 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fa6d 	bl	80009d4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d909      	bls.n	8001518 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1f3      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
 8001508:	08004bf0 	.word	0x08004bf0
 800150c:	40021000 	.word	0x40021000
 8001510:	42420000 	.word	0x42420000
 8001514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001518:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0e8      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 fc11 	bl	8001d4c <RCC_Delay>
 800152a:	e015      	b.n	8001558 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152c:	4b63      	ldr	r3, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x498>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fa4f 	bl	80009d4 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fa4b 	bl	80009d4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1d1      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80c0 	beq.w	80016e6 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00c      	beq.n	800158c <HAL_RCC_OscConfig+0x368>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d008      	beq.n	800158c <HAL_RCC_OscConfig+0x368>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d004      	beq.n	800158c <HAL_RCC_OscConfig+0x368>
 8001582:	f240 2111 	movw	r1, #529	; 0x211
 8001586:	484e      	ldr	r0, [pc, #312]	; (80016c0 <HAL_RCC_OscConfig+0x49c>)
 8001588:	f7fe fea0 	bl	80002cc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a46      	ldr	r2, [pc, #280]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	61d3      	str	r3, [r2, #28]
 80015a4:	4b44      	ldr	r3, [pc, #272]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d118      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c0:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa02 	bl	80009d4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d4:	f7ff f9fe 	bl	80009d4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e184      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x3e4>
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a2e      	ldr	r2, [pc, #184]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e02d      	b.n	8001664 <HAL_RCC_OscConfig+0x440>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x406>
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x440>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x428>
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x440>
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff f9b2 	bl	80009d4 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff f9ae 	bl	80009d4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e132      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ee      	beq.n	8001674 <HAL_RCC_OscConfig+0x450>
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff f99c 	bl	80009d4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169e:	e013      	b.n	80016c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff f998 	bl	80009d4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d90a      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e11c      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	42420480 	.word	0x42420480
 80016c0:	08004bf0 	.word	0x08004bf0
 80016c4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e5      	bne.n	80016a0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4b87      	ldr	r3, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a86      	ldr	r2, [pc, #536]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d008      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d004      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e4>
 80016fe:	f240 21af 	movw	r1, #687	; 0x2af
 8001702:	487e      	ldr	r0, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 8001704:	f7fe fde2 	bl	80002cc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ee 	beq.w	80018ee <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001712:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	f000 80ce 	beq.w	80018bc <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b02      	cmp	r3, #2
 8001726:	f040 80b2 	bne.w	800188e <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_OscConfig+0x522>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d004      	beq.n	8001746 <HAL_RCC_OscConfig+0x522>
 800173c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001740:	486e      	ldr	r0, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 8001742:	f7fe fdc3 	bl	80002cc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d04a      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001756:	d045      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001760:	d040      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800176a:	d03b      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001774:	d036      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800177e:	d031      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001788:	d02c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001792:	d027      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800179c:	d022      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80017a6:	d01d      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80017b0:	d018      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80017c4:	d00e      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80017ce:	d009      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80017d8:	d004      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017da:	f240 21b9 	movw	r1, #697	; 0x2b9
 80017de:	4847      	ldr	r0, [pc, #284]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 80017e0:	f7fe fd74 	bl	80002cc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x6dc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f8f3 	bl	80009d4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff f8ef 	bl	80009d4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e075      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_OscConfig+0x612>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800182a:	d004      	beq.n	8001836 <HAL_RCC_OscConfig+0x612>
 800182c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001830:	4832      	ldr	r0, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 8001832:	f7fe fd4b 	bl	80002cc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	492d      	ldr	r1, [pc, #180]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a19      	ldr	r1, [r3, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	430b      	orrs	r3, r1
 800185a:	4927      	ldr	r1, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x6dc>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f8b5 	bl	80009d4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f8b1 	bl	80009d4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e037      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x64a>
 800188c:	e02f      	b.n	80018ee <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_RCC_OscConfig+0x6dc>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff f89e 	bl	80009d4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f89a 	bl	80009d4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e020      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x678>
 80018ba:	e018      	b.n	80018ee <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e013      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08004bf0 	.word	0x08004bf0
 8001900:	42420060 	.word	0x42420060

08001904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e176      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d116      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d110      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d104      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 8001948:	f44f 714e 	mov.w	r1, #824	; 0x338
 800194c:	4874      	ldr	r0, [pc, #464]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 800194e:	f7fe fcbd 	bl	80002cc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <HAL_RCC_ClockConfig+0x6a>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d007      	beq.n	800196e <HAL_RCC_ClockConfig+0x6a>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d004      	beq.n	800196e <HAL_RCC_ClockConfig+0x6a>
 8001964:	f240 3139 	movw	r1, #825	; 0x339
 8001968:	486d      	ldr	r0, [pc, #436]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 800196a:	f7fe fcaf 	bl	80002cc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196e:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d910      	bls.n	800199e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197c:	4b69      	ldr	r3, [pc, #420]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0207 	bic.w	r2, r3, #7
 8001984:	4967      	ldr	r1, [pc, #412]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e133      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d049      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b6:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a5b      	ldr	r2, [pc, #364]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019c0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ce:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a55      	ldr	r2, [pc, #340]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019d4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019d8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d024      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b80      	cmp	r3, #128	; 0x80
 80019e8:	d020      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b90      	cmp	r3, #144	; 0x90
 80019f0:	d01c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2ba0      	cmp	r3, #160	; 0xa0
 80019f8:	d018      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2bb0      	cmp	r3, #176	; 0xb0
 8001a00:	d014      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2bc0      	cmp	r3, #192	; 0xc0
 8001a08:	d010      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2bd0      	cmp	r3, #208	; 0xd0
 8001a10:	d00c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2be0      	cmp	r3, #224	; 0xe0
 8001a18:	d008      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2bf0      	cmp	r3, #240	; 0xf0
 8001a20:	d004      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a22:	f240 315f 	movw	r1, #863	; 0x35f
 8001a26:	483e      	ldr	r0, [pc, #248]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 8001a28:	f7fe fc50 	bl	80002cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d051      	beq.n	8001aee <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x168>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d008      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x168>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d004      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x168>
 8001a62:	f240 3166 	movw	r1, #870	; 0x366
 8001a66:	482e      	ldr	r0, [pc, #184]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 8001a68:	f7fe fc30 	bl	80002cc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d115      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0c0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8c:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b4      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0ac      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 0203 	bic.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	491b      	ldr	r1, [pc, #108]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abe:	f7fe ff89 	bl	80009d4 <HAL_GetTick>
 8001ac2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac6:	f7fe ff85 	bl	80009d4 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e094      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 020c 	and.w	r2, r3, #12
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d1eb      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d217      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d008      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e073      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
 8001b1e:	bf00      	nop
 8001b20:	08004bf0 	.word	0x08004bf0
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d025      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d018      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d013      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b52:	d00e      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b66:	d004      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b68:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001b6c:	4828      	ldr	r0, [pc, #160]	; (8001c10 <HAL_RCC_ClockConfig+0x30c>)
 8001b6e:	f7fe fbad 	bl	80002cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4925      	ldr	r1, [pc, #148]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d026      	beq.n	8001bde <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d018      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba0:	d013      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001baa:	d00e      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bbe:	d004      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001bc0:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x30c>)
 8001bc6:	f7fe fb81 	bl	80002cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4601      	mov	r1, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x314>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x318>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x31c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe feb8 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08004bf0 	.word	0x08004bf0
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08004d18 	.word	0x08004d18
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x46>
 8001c62:	e02d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c66:	623b      	str	r3, [r7, #32]
      break;
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	0c9b      	lsrs	r3, r3, #18
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c5b      	lsrs	r3, r3, #17
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c96:	4413      	add	r3, r2
 8001c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca2:	fb02 f203 	mul.w	r2, r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e004      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc2:	623b      	str	r3, [r7, #32]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc90      	pop	{r4, r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	08004c28 	.word	0x08004c28
 8001cd8:	08004c38 	.word	0x08004c38
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	003d0900 	.word	0x003d0900

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff2 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08004d28 	.word	0x08004d28

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4601      	mov	r1, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08004d28 	.word	0x08004d28

08001d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <RCC_Delay+0x34>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <RCC_Delay+0x38>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0a5b      	lsrs	r3, r3, #9
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d68:	bf00      	nop
  }
  while (Delay --);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	60fa      	str	r2, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f9      	bne.n	8001d68 <RCC_Delay+0x1c>
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000
 8001d84:	10624dd3 	.word	0x10624dd3

08001d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06f      	b.n	8001e7a <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <HAL_TIM_Base_Init+0xfc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d00e      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <HAL_TIM_Base_Init+0x100>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_TIM_Base_Init+0x104>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001dc2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8001dc6:	4832      	ldr	r0, [pc, #200]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001dc8:	f7fe fa80 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d014      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d010      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d00c      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d008      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b60      	cmp	r3, #96	; 0x60
 8001df2:	d004      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001df4:	f240 1113 	movw	r1, #275	; 0x113
 8001df8:	4825      	ldr	r0, [pc, #148]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001dfa:	f7fe fa67 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00e      	beq.n	8001e24 <HAL_TIM_Base_Init+0x9c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_Base_Init+0x9c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Init+0x9c>
 8001e1a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001e1e:	481c      	ldr	r0, [pc, #112]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001e20:	f7fe fa54 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_TIM_Base_Init+0xb6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b80      	cmp	r3, #128	; 0x80
 8001e32:	d004      	beq.n	8001e3e <HAL_TIM_Base_Init+0xb6>
 8001e34:	f240 1115 	movw	r1, #277	; 0x115
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001e3a:	f7fe fa47 	bl	80002cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fc6a 	bl	800072c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 fc84 	bl	8002778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	08004c3c 	.word	0x08004c3c

08001e94 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b082      	sub	sp, #8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d101      	bne.n	8001ea6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e06f      	b.n	8001f86 <HAL_TIM_IC_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	4a39      	ldr	r2, [pc, #228]	; (8001f90 <HAL_TIM_IC_Init+0xfc>)
 8001eac:	4293      	cmp	r3, r2
 8001eae:	d013      	beq.n	8001ed8 <HAL_TIM_IC_Init+0x44>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eb8:	d00e      	beq.n	8001ed8 <HAL_TIM_IC_Init+0x44>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a35      	ldr	r2, [pc, #212]	; (8001f94 <HAL_TIM_IC_Init+0x100>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d009      	beq.n	8001ed8 <HAL_TIM_IC_Init+0x44>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a33      	ldr	r2, [pc, #204]	; (8001f98 <HAL_TIM_IC_Init+0x104>)
 8001eca:	4293      	cmp	r3, r2
 8001ecc:	d004      	beq.n	8001ed8 <HAL_TIM_IC_Init+0x44>
 8001ece:	f240 61d9 	movw	r1, #1753	; 0x6d9
 8001ed2:	4832      	ldr	r0, [pc, #200]	; (8001f9c <HAL_TIM_IC_Init+0x108>)
 8001ed4:	f7fe f9fa 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d014      	beq.n	8001f0a <HAL_TIM_IC_Init+0x76>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689b      	ldr	r3, [r3, #8]
 8001ee4:	2b10      	cmp	r3, #16
 8001ee6:	d010      	beq.n	8001f0a <HAL_TIM_IC_Init+0x76>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	2b20      	cmp	r3, #32
 8001eee:	d00c      	beq.n	8001f0a <HAL_TIM_IC_Init+0x76>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	689b      	ldr	r3, [r3, #8]
 8001ef4:	2b40      	cmp	r3, #64	; 0x40
 8001ef6:	d008      	beq.n	8001f0a <HAL_TIM_IC_Init+0x76>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	2b60      	cmp	r3, #96	; 0x60
 8001efe:	d004      	beq.n	8001f0a <HAL_TIM_IC_Init+0x76>
 8001f00:	f240 61da 	movw	r1, #1754	; 0x6da
 8001f04:	4825      	ldr	r0, [pc, #148]	; (8001f9c <HAL_TIM_IC_Init+0x108>)
 8001f06:	f7fe f9e1 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	691b      	ldr	r3, [r3, #16]
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d00e      	beq.n	8001f30 <HAL_TIM_IC_Init+0x9c>
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	691b      	ldr	r3, [r3, #16]
 8001f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f1a:	d009      	beq.n	8001f30 <HAL_TIM_IC_Init+0x9c>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	691b      	ldr	r3, [r3, #16]
 8001f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f24:	d004      	beq.n	8001f30 <HAL_TIM_IC_Init+0x9c>
 8001f26:	f240 61db 	movw	r1, #1755	; 0x6db
 8001f2a:	481c      	ldr	r0, [pc, #112]	; (8001f9c <HAL_TIM_IC_Init+0x108>)
 8001f2c:	f7fe f9ce 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	699b      	ldr	r3, [r3, #24]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d008      	beq.n	8001f4a <HAL_TIM_IC_Init+0xb6>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	699b      	ldr	r3, [r3, #24]
 8001f3c:	2b80      	cmp	r3, #128	; 0x80
 8001f3e:	d004      	beq.n	8001f4a <HAL_TIM_IC_Init+0xb6>
 8001f40:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8001f44:	4815      	ldr	r0, [pc, #84]	; (8001f9c <HAL_TIM_IC_Init+0x108>)
 8001f46:	f7fe f9c1 	bl	80002cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d106      	bne.n	8001f64 <HAL_TIM_IC_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2200      	movs	r2, #0
 8001f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001f5e:	6878      	ldr	r0, [r7, #4]
 8001f60:	f000 f81e 	bl	8001fa0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2202      	movs	r2, #2
 8001f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	3304      	adds	r3, #4
 8001f74:	4619      	mov	r1, r3
 8001f76:	4610      	mov	r0, r2
 8001f78:	f000 fbfe 	bl	8002778 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001f84:	2300      	movs	r3, #0
}
 8001f86:	4618      	mov	r0, r3
 8001f88:	3708      	adds	r7, #8
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	bd80      	pop	{r7, pc}
 8001f8e:	bf00      	nop
 8001f90:	40012c00 	.word	0x40012c00
 8001f94:	40000400 	.word	0x40000400
 8001f98:	40000800 	.word	0x40000800
 8001f9c:	08004c3c 	.word	0x08004c3c

08001fa0 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc80      	pop	{r7}
 8001fb0:	4770      	bx	lr
	...

08001fb4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0
 8001fba:	60f8      	str	r0, [r7, #12]
 8001fbc:	60b9      	str	r1, [r7, #8]
 8001fbe:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a7a      	ldr	r2, [pc, #488]	; (80021b0 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 8001fc6:	4293      	cmp	r3, r2
 8001fc8:	d013      	beq.n	8001ff2 <HAL_TIM_IC_ConfigChannel+0x3e>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fd2:	d00e      	beq.n	8001ff2 <HAL_TIM_IC_ConfigChannel+0x3e>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4a76      	ldr	r2, [pc, #472]	; (80021b4 <HAL_TIM_IC_ConfigChannel+0x200>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d009      	beq.n	8001ff2 <HAL_TIM_IC_ConfigChannel+0x3e>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a75      	ldr	r2, [pc, #468]	; (80021b8 <HAL_TIM_IC_ConfigChannel+0x204>)
 8001fe4:	4293      	cmp	r3, r2
 8001fe6:	d004      	beq.n	8001ff2 <HAL_TIM_IC_ConfigChannel+0x3e>
 8001fe8:	f640 5188 	movw	r1, #3464	; 0xd88
 8001fec:	4873      	ldr	r0, [pc, #460]	; (80021bc <HAL_TIM_IC_ConfigChannel+0x208>)
 8001fee:	f7fe f96d 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d00c      	beq.n	8002014 <HAL_TIM_IC_ConfigChannel+0x60>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2b02      	cmp	r3, #2
 8002000:	d008      	beq.n	8002014 <HAL_TIM_IC_ConfigChannel+0x60>
 8002002:	68bb      	ldr	r3, [r7, #8]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2b0a      	cmp	r3, #10
 8002008:	d004      	beq.n	8002014 <HAL_TIM_IC_ConfigChannel+0x60>
 800200a:	f640 5189 	movw	r1, #3465	; 0xd89
 800200e:	486b      	ldr	r0, [pc, #428]	; (80021bc <HAL_TIM_IC_ConfigChannel+0x208>)
 8002010:	f7fe f95c 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	2b01      	cmp	r3, #1
 800201a:	d00c      	beq.n	8002036 <HAL_TIM_IC_ConfigChannel+0x82>
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	2b02      	cmp	r3, #2
 8002022:	d008      	beq.n	8002036 <HAL_TIM_IC_ConfigChannel+0x82>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	2b03      	cmp	r3, #3
 800202a:	d004      	beq.n	8002036 <HAL_TIM_IC_ConfigChannel+0x82>
 800202c:	f640 518a 	movw	r1, #3466	; 0xd8a
 8002030:	4862      	ldr	r0, [pc, #392]	; (80021bc <HAL_TIM_IC_ConfigChannel+0x208>)
 8002032:	f7fe f94b 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b00      	cmp	r3, #0
 800203c:	d010      	beq.n	8002060 <HAL_TIM_IC_ConfigChannel+0xac>
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	689b      	ldr	r3, [r3, #8]
 8002042:	2b04      	cmp	r3, #4
 8002044:	d00c      	beq.n	8002060 <HAL_TIM_IC_ConfigChannel+0xac>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	689b      	ldr	r3, [r3, #8]
 800204a:	2b08      	cmp	r3, #8
 800204c:	d008      	beq.n	8002060 <HAL_TIM_IC_ConfigChannel+0xac>
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d004      	beq.n	8002060 <HAL_TIM_IC_ConfigChannel+0xac>
 8002056:	f640 518b 	movw	r1, #3467	; 0xd8b
 800205a:	4858      	ldr	r0, [pc, #352]	; (80021bc <HAL_TIM_IC_ConfigChannel+0x208>)
 800205c:	f7fe f936 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	68db      	ldr	r3, [r3, #12]
 8002064:	2b0f      	cmp	r3, #15
 8002066:	d904      	bls.n	8002072 <HAL_TIM_IC_ConfigChannel+0xbe>
 8002068:	f640 518c 	movw	r1, #3468	; 0xd8c
 800206c:	4853      	ldr	r0, [pc, #332]	; (80021bc <HAL_TIM_IC_ConfigChannel+0x208>)
 800206e:	f7fe f92d 	bl	80002cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002078:	2b01      	cmp	r3, #1
 800207a:	d101      	bne.n	8002080 <HAL_TIM_IC_ConfigChannel+0xcc>
 800207c:	2302      	movs	r3, #2
 800207e:	e0dd      	b.n	800223c <HAL_TIM_IC_ConfigChannel+0x288>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	2201      	movs	r2, #1
 8002084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	2202      	movs	r2, #2
 800208c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d11b      	bne.n	80020ce <HAL_TIM_IC_ConfigChannel+0x11a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	68bb      	ldr	r3, [r7, #8]
 800209c:	6819      	ldr	r1, [r3, #0]
 800209e:	68bb      	ldr	r3, [r7, #8]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	68db      	ldr	r3, [r3, #12]
 80020a6:	f000 fbc9 	bl	800283c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	699a      	ldr	r2, [r3, #24]
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 020c 	bic.w	r2, r2, #12
 80020b8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6999      	ldr	r1, [r3, #24]
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	689a      	ldr	r2, [r3, #8]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	619a      	str	r2, [r3, #24]
 80020cc:	e0ad      	b.n	800222a <HAL_TIM_IC_ConfigChannel+0x276>
  }
  else if (Channel == TIM_CHANNEL_2)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2b04      	cmp	r3, #4
 80020d2:	d135      	bne.n	8002140 <HAL_TIM_IC_ConfigChannel+0x18c>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a35      	ldr	r2, [pc, #212]	; (80021b0 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d013      	beq.n	8002106 <HAL_TIM_IC_ConfigChannel+0x152>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80020e6:	d00e      	beq.n	8002106 <HAL_TIM_IC_ConfigChannel+0x152>
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a31      	ldr	r2, [pc, #196]	; (80021b4 <HAL_TIM_IC_ConfigChannel+0x200>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d009      	beq.n	8002106 <HAL_TIM_IC_ConfigChannel+0x152>
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a30      	ldr	r2, [pc, #192]	; (80021b8 <HAL_TIM_IC_ConfigChannel+0x204>)
 80020f8:	4293      	cmp	r3, r2
 80020fa:	d004      	beq.n	8002106 <HAL_TIM_IC_ConfigChannel+0x152>
 80020fc:	f640 51a4 	movw	r1, #3492	; 0xda4
 8002100:	482e      	ldr	r0, [pc, #184]	; (80021bc <HAL_TIM_IC_ConfigChannel+0x208>)
 8002102:	f7fe f8e3 	bl	80002cc <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	6818      	ldr	r0, [r3, #0]
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	6819      	ldr	r1, [r3, #0]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	685a      	ldr	r2, [r3, #4]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	68db      	ldr	r3, [r3, #12]
 8002116:	f000 fc19 	bl	800294c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	699a      	ldr	r2, [r3, #24]
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002128:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	6999      	ldr	r1, [r3, #24]
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	689b      	ldr	r3, [r3, #8]
 8002134:	021a      	lsls	r2, r3, #8
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	430a      	orrs	r2, r1
 800213c:	619a      	str	r2, [r3, #24]
 800213e:	e074      	b.n	800222a <HAL_TIM_IC_ConfigChannel+0x276>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2b08      	cmp	r3, #8
 8002144:	d13c      	bne.n	80021c0 <HAL_TIM_IC_ConfigChannel+0x20c>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4a19      	ldr	r2, [pc, #100]	; (80021b0 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d013      	beq.n	8002178 <HAL_TIM_IC_ConfigChannel+0x1c4>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002158:	d00e      	beq.n	8002178 <HAL_TIM_IC_ConfigChannel+0x1c4>
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a15      	ldr	r2, [pc, #84]	; (80021b4 <HAL_TIM_IC_ConfigChannel+0x200>)
 8002160:	4293      	cmp	r3, r2
 8002162:	d009      	beq.n	8002178 <HAL_TIM_IC_ConfigChannel+0x1c4>
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	4a13      	ldr	r2, [pc, #76]	; (80021b8 <HAL_TIM_IC_ConfigChannel+0x204>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d004      	beq.n	8002178 <HAL_TIM_IC_ConfigChannel+0x1c4>
 800216e:	f640 51b4 	movw	r1, #3508	; 0xdb4
 8002172:	4812      	ldr	r0, [pc, #72]	; (80021bc <HAL_TIM_IC_ConfigChannel+0x208>)
 8002174:	f7fe f8aa 	bl	80002cc <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	6819      	ldr	r1, [r3, #0]
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	685a      	ldr	r2, [r3, #4]
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	68db      	ldr	r3, [r3, #12]
 8002188:	f000 fc4b 	bl	8002a22 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	69da      	ldr	r2, [r3, #28]
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f022 020c 	bic.w	r2, r2, #12
 800219a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	69d9      	ldr	r1, [r3, #28]
 80021a2:	68bb      	ldr	r3, [r7, #8]
 80021a4:	689a      	ldr	r2, [r3, #8]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	430a      	orrs	r2, r1
 80021ac:	61da      	str	r2, [r3, #28]
 80021ae:	e03c      	b.n	800222a <HAL_TIM_IC_ConfigChannel+0x276>
 80021b0:	40012c00 	.word	0x40012c00
 80021b4:	40000400 	.word	0x40000400
 80021b8:	40000800 	.word	0x40000800
 80021bc:	08004c3c 	.word	0x08004c3c
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4a1f      	ldr	r2, [pc, #124]	; (8002244 <HAL_TIM_IC_ConfigChannel+0x290>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d013      	beq.n	80021f2 <HAL_TIM_IC_ConfigChannel+0x23e>
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d00e      	beq.n	80021f2 <HAL_TIM_IC_ConfigChannel+0x23e>
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a1b      	ldr	r2, [pc, #108]	; (8002248 <HAL_TIM_IC_ConfigChannel+0x294>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d009      	beq.n	80021f2 <HAL_TIM_IC_ConfigChannel+0x23e>
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a1a      	ldr	r2, [pc, #104]	; (800224c <HAL_TIM_IC_ConfigChannel+0x298>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d004      	beq.n	80021f2 <HAL_TIM_IC_ConfigChannel+0x23e>
 80021e8:	f640 51c4 	movw	r1, #3524	; 0xdc4
 80021ec:	4818      	ldr	r0, [pc, #96]	; (8002250 <HAL_TIM_IC_ConfigChannel+0x29c>)
 80021ee:	f7fe f86d 	bl	80002cc <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	6818      	ldr	r0, [r3, #0]
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	6819      	ldr	r1, [r3, #0]
 80021fa:	68bb      	ldr	r3, [r7, #8]
 80021fc:	685a      	ldr	r2, [r3, #4]
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f000 fc49 	bl	8002a98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	69da      	ldr	r2, [r3, #28]
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002214:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	69d9      	ldr	r1, [r3, #28]
 800221c:	68bb      	ldr	r3, [r7, #8]
 800221e:	689b      	ldr	r3, [r3, #8]
 8002220:	021a      	lsls	r2, r3, #8
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	430a      	orrs	r2, r1
 8002228:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	2201      	movs	r2, #1
 800222e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	2200      	movs	r2, #0
 8002236:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800223a:	2300      	movs	r3, #0
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}
 8002244:	40012c00 	.word	0x40012c00
 8002248:	40000400 	.word	0x40000400
 800224c:	40000800 	.word	0x40000800
 8002250:	08004c3c 	.word	0x08004c3c

08002254 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
 800225c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002264:	2b01      	cmp	r3, #1
 8002266:	d101      	bne.n	800226c <HAL_TIM_ConfigClockSource+0x18>
 8002268:	2302      	movs	r3, #2
 800226a:	e279      	b.n	8002760 <HAL_TIM_ConfigClockSource+0x50c>
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2202      	movs	r2, #2
 8002278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002284:	d029      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800228e:	d024      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d020      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	2b10      	cmp	r3, #16
 800229e:	d01c      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 80022a0:	683b      	ldr	r3, [r7, #0]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b20      	cmp	r3, #32
 80022a6:	d018      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b30      	cmp	r3, #48	; 0x30
 80022ae:	d014      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2b40      	cmp	r3, #64	; 0x40
 80022b6:	d010      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 80022b8:	683b      	ldr	r3, [r7, #0]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2b50      	cmp	r3, #80	; 0x50
 80022be:	d00c      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	2b60      	cmp	r3, #96	; 0x60
 80022c6:	d008      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2b70      	cmp	r3, #112	; 0x70
 80022ce:	d004      	beq.n	80022da <HAL_TIM_ConfigClockSource+0x86>
 80022d0:	f241 118a 	movw	r1, #4490	; 0x118a
 80022d4:	4896      	ldr	r0, [pc, #600]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 80022d6:	f7fd fff9 	bl	80002cc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80022e8:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80022f0:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	68fa      	ldr	r2, [r7, #12]
 80022f8:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2b40      	cmp	r3, #64	; 0x40
 8002300:	f000 81b6 	beq.w	8002670 <HAL_TIM_ConfigClockSource+0x41c>
 8002304:	2b40      	cmp	r3, #64	; 0x40
 8002306:	d80f      	bhi.n	8002328 <HAL_TIM_ConfigClockSource+0xd4>
 8002308:	2b10      	cmp	r3, #16
 800230a:	f000 81fd 	beq.w	8002708 <HAL_TIM_ConfigClockSource+0x4b4>
 800230e:	2b10      	cmp	r3, #16
 8002310:	d803      	bhi.n	800231a <HAL_TIM_ConfigClockSource+0xc6>
 8002312:	2b00      	cmp	r3, #0
 8002314:	f000 81f8 	beq.w	8002708 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002318:	e219      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800231a:	2b20      	cmp	r3, #32
 800231c:	f000 81f4 	beq.w	8002708 <HAL_TIM_ConfigClockSource+0x4b4>
 8002320:	2b30      	cmp	r3, #48	; 0x30
 8002322:	f000 81f1 	beq.w	8002708 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 8002326:	e212      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8002328:	2b70      	cmp	r3, #112	; 0x70
 800232a:	d02e      	beq.n	800238a <HAL_TIM_ConfigClockSource+0x136>
 800232c:	2b70      	cmp	r3, #112	; 0x70
 800232e:	d806      	bhi.n	800233e <HAL_TIM_ConfigClockSource+0xea>
 8002330:	2b50      	cmp	r3, #80	; 0x50
 8002332:	f000 8105 	beq.w	8002540 <HAL_TIM_ConfigClockSource+0x2ec>
 8002336:	2b60      	cmp	r3, #96	; 0x60
 8002338:	f000 814e 	beq.w	80025d8 <HAL_TIM_ConfigClockSource+0x384>
      break;
 800233c:	e207      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800233e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002342:	d004      	beq.n	800234e <HAL_TIM_ConfigClockSource+0xfa>
 8002344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002348:	f000 808a 	beq.w	8002460 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800234c:	e1ff      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a78      	ldr	r2, [pc, #480]	; (8002534 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002354:	4293      	cmp	r3, r2
 8002356:	f000 81f9 	beq.w	800274c <HAL_TIM_ConfigClockSource+0x4f8>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002362:	f000 81f3 	beq.w	800274c <HAL_TIM_ConfigClockSource+0x4f8>
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4a73      	ldr	r2, [pc, #460]	; (8002538 <HAL_TIM_ConfigClockSource+0x2e4>)
 800236c:	4293      	cmp	r3, r2
 800236e:	f000 81ed 	beq.w	800274c <HAL_TIM_ConfigClockSource+0x4f8>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a71      	ldr	r2, [pc, #452]	; (800253c <HAL_TIM_ConfigClockSource+0x2e8>)
 8002378:	4293      	cmp	r3, r2
 800237a:	f000 81e7 	beq.w	800274c <HAL_TIM_ConfigClockSource+0x4f8>
 800237e:	f241 1196 	movw	r1, #4502	; 0x1196
 8002382:	486b      	ldr	r0, [pc, #428]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002384:	f7fd ffa2 	bl	80002cc <assert_failed>
      break;
 8002388:	e1e0      	b.n	800274c <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	4a69      	ldr	r2, [pc, #420]	; (8002534 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d013      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800239c:	d00e      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a65      	ldr	r2, [pc, #404]	; (8002538 <HAL_TIM_ConfigClockSource+0x2e4>)
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d009      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a63      	ldr	r2, [pc, #396]	; (800253c <HAL_TIM_ConfigClockSource+0x2e8>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d004      	beq.n	80023bc <HAL_TIM_ConfigClockSource+0x168>
 80023b2:	f241 119d 	movw	r1, #4509	; 0x119d
 80023b6:	485e      	ldr	r0, [pc, #376]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 80023b8:	f7fd ff88 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689b      	ldr	r3, [r3, #8]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d013      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0x198>
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023cc:	d00e      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0x198>
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023d6:	d009      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0x198>
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80023e0:	d004      	beq.n	80023ec <HAL_TIM_ConfigClockSource+0x198>
 80023e2:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 80023e6:	4852      	ldr	r0, [pc, #328]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 80023e8:	f7fd ff70 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80023f4:	d014      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0x1cc>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d010      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0x1cc>
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00c      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0x1cc>
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b02      	cmp	r3, #2
 800240c:	d008      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0x1cc>
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	2b0a      	cmp	r3, #10
 8002414:	d004      	beq.n	8002420 <HAL_TIM_ConfigClockSource+0x1cc>
 8002416:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800241a:	4845      	ldr	r0, [pc, #276]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 800241c:	f7fd ff56 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	2b0f      	cmp	r3, #15
 8002426:	d904      	bls.n	8002432 <HAL_TIM_ConfigClockSource+0x1de>
 8002428:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800242c:	4840      	ldr	r0, [pc, #256]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 800242e:	f7fd ff4d 	bl	80002cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6818      	ldr	r0, [r3, #0]
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	6899      	ldr	r1, [r3, #8]
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	683b      	ldr	r3, [r7, #0]
 8002440:	68db      	ldr	r3, [r3, #12]
 8002442:	f000 fb7f 	bl	8002b44 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002454:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	68fa      	ldr	r2, [r7, #12]
 800245c:	609a      	str	r2, [r3, #8]
      break;
 800245e:	e176      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4a33      	ldr	r2, [pc, #204]	; (8002534 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d013      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x23e>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002472:	d00e      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x23e>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a2f      	ldr	r2, [pc, #188]	; (8002538 <HAL_TIM_ConfigClockSource+0x2e4>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x23e>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2e      	ldr	r2, [pc, #184]	; (800253c <HAL_TIM_ConfigClockSource+0x2e8>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d004      	beq.n	8002492 <HAL_TIM_ConfigClockSource+0x23e>
 8002488:	f241 11b5 	movw	r1, #4533	; 0x11b5
 800248c:	4828      	ldr	r0, [pc, #160]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 800248e:	f7fd ff1d 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	689b      	ldr	r3, [r3, #8]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d013      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x26e>
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024a2:	d00e      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x26e>
 80024a4:	683b      	ldr	r3, [r7, #0]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024ac:	d009      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x26e>
 80024ae:	683b      	ldr	r3, [r7, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80024b6:	d004      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0x26e>
 80024b8:	f241 11b8 	movw	r1, #4536	; 0x11b8
 80024bc:	481c      	ldr	r0, [pc, #112]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 80024be:	f7fd ff05 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ca:	d014      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x2a2>
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d010      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x2a2>
 80024d4:	683b      	ldr	r3, [r7, #0]
 80024d6:	685b      	ldr	r3, [r3, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d00c      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x2a2>
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	685b      	ldr	r3, [r3, #4]
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d008      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x2a2>
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	685b      	ldr	r3, [r3, #4]
 80024e8:	2b0a      	cmp	r3, #10
 80024ea:	d004      	beq.n	80024f6 <HAL_TIM_ConfigClockSource+0x2a2>
 80024ec:	f241 11b9 	movw	r1, #4537	; 0x11b9
 80024f0:	480f      	ldr	r0, [pc, #60]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 80024f2:	f7fd feeb 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2b0f      	cmp	r3, #15
 80024fc:	d904      	bls.n	8002508 <HAL_TIM_ConfigClockSource+0x2b4>
 80024fe:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8002502:	480b      	ldr	r0, [pc, #44]	; (8002530 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002504:	f7fd fee2 	bl	80002cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	6899      	ldr	r1, [r3, #8]
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	685a      	ldr	r2, [r3, #4]
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	68db      	ldr	r3, [r3, #12]
 8002518:	f000 fb14 	bl	8002b44 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	689a      	ldr	r2, [r3, #8]
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800252a:	609a      	str	r2, [r3, #8]
      break;
 800252c:	e10f      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
 800252e:	bf00      	nop
 8002530:	08004c3c 	.word	0x08004c3c
 8002534:	40012c00 	.word	0x40012c00
 8002538:	40000400 	.word	0x40000400
 800253c:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a88      	ldr	r2, [pc, #544]	; (8002768 <HAL_TIM_ConfigClockSource+0x514>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d013      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x31e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002552:	d00e      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x31e>
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a84      	ldr	r2, [pc, #528]	; (800276c <HAL_TIM_ConfigClockSource+0x518>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d009      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x31e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4a83      	ldr	r2, [pc, #524]	; (8002770 <HAL_TIM_ConfigClockSource+0x51c>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d004      	beq.n	8002572 <HAL_TIM_ConfigClockSource+0x31e>
 8002568:	f241 11c9 	movw	r1, #4553	; 0x11c9
 800256c:	4881      	ldr	r0, [pc, #516]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 800256e:	f7fd fead 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800257a:	d014      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x352>
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b00      	cmp	r3, #0
 8002582:	d010      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x352>
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	685b      	ldr	r3, [r3, #4]
 8002588:	2b00      	cmp	r3, #0
 800258a:	d00c      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x352>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b02      	cmp	r3, #2
 8002592:	d008      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x352>
 8002594:	683b      	ldr	r3, [r7, #0]
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	2b0a      	cmp	r3, #10
 800259a:	d004      	beq.n	80025a6 <HAL_TIM_ConfigClockSource+0x352>
 800259c:	f241 11cc 	movw	r1, #4556	; 0x11cc
 80025a0:	4874      	ldr	r0, [pc, #464]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 80025a2:	f7fd fe93 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	68db      	ldr	r3, [r3, #12]
 80025aa:	2b0f      	cmp	r3, #15
 80025ac:	d904      	bls.n	80025b8 <HAL_TIM_ConfigClockSource+0x364>
 80025ae:	f241 11cd 	movw	r1, #4557	; 0x11cd
 80025b2:	4870      	ldr	r0, [pc, #448]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 80025b4:	f7fd fe8a 	bl	80002cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6818      	ldr	r0, [r3, #0]
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	68db      	ldr	r3, [r3, #12]
 80025c4:	461a      	mov	r2, r3
 80025c6:	f000 f993 	bl	80028f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	2150      	movs	r1, #80	; 0x50
 80025d0:	4618      	mov	r0, r3
 80025d2:	f000 fa9d 	bl	8002b10 <TIM_ITRx_SetConfig>
      break;
 80025d6:	e0ba      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	4a62      	ldr	r2, [pc, #392]	; (8002768 <HAL_TIM_ConfigClockSource+0x514>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d013      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x3b6>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ea:	d00e      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x3b6>
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a5e      	ldr	r2, [pc, #376]	; (800276c <HAL_TIM_ConfigClockSource+0x518>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d009      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x3b6>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4a5d      	ldr	r2, [pc, #372]	; (8002770 <HAL_TIM_ConfigClockSource+0x51c>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d004      	beq.n	800260a <HAL_TIM_ConfigClockSource+0x3b6>
 8002600:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8002604:	485b      	ldr	r0, [pc, #364]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 8002606:	f7fd fe61 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	685b      	ldr	r3, [r3, #4]
 800260e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002612:	d014      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x3ea>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d010      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x3ea>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d00c      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x3ea>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d008      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x3ea>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b0a      	cmp	r3, #10
 8002632:	d004      	beq.n	800263e <HAL_TIM_ConfigClockSource+0x3ea>
 8002634:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8002638:	484e      	ldr	r0, [pc, #312]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 800263a:	f7fd fe47 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	68db      	ldr	r3, [r3, #12]
 8002642:	2b0f      	cmp	r3, #15
 8002644:	d904      	bls.n	8002650 <HAL_TIM_ConfigClockSource+0x3fc>
 8002646:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800264a:	484a      	ldr	r0, [pc, #296]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 800264c:	f7fd fe3e 	bl	80002cc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6818      	ldr	r0, [r3, #0]
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	6859      	ldr	r1, [r3, #4]
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	68db      	ldr	r3, [r3, #12]
 800265c:	461a      	mov	r2, r3
 800265e:	f000 f9b1 	bl	80029c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	2160      	movs	r1, #96	; 0x60
 8002668:	4618      	mov	r0, r3
 800266a:	f000 fa51 	bl	8002b10 <TIM_ITRx_SetConfig>
      break;
 800266e:	e06e      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a3c      	ldr	r2, [pc, #240]	; (8002768 <HAL_TIM_ConfigClockSource+0x514>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d013      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x44e>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002682:	d00e      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x44e>
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4a38      	ldr	r2, [pc, #224]	; (800276c <HAL_TIM_ConfigClockSource+0x518>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d009      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x44e>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	4a37      	ldr	r2, [pc, #220]	; (8002770 <HAL_TIM_ConfigClockSource+0x51c>)
 8002694:	4293      	cmp	r3, r2
 8002696:	d004      	beq.n	80026a2 <HAL_TIM_ConfigClockSource+0x44e>
 8002698:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800269c:	4835      	ldr	r0, [pc, #212]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 800269e:	f7fd fe15 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026aa:	d014      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x482>
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d010      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x482>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00c      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x482>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	2b02      	cmp	r3, #2
 80026c2:	d008      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x482>
 80026c4:	683b      	ldr	r3, [r7, #0]
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	2b0a      	cmp	r3, #10
 80026ca:	d004      	beq.n	80026d6 <HAL_TIM_ConfigClockSource+0x482>
 80026cc:	f241 11ec 	movw	r1, #4588	; 0x11ec
 80026d0:	4828      	ldr	r0, [pc, #160]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 80026d2:	f7fd fdfb 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80026d6:	683b      	ldr	r3, [r7, #0]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	2b0f      	cmp	r3, #15
 80026dc:	d904      	bls.n	80026e8 <HAL_TIM_ConfigClockSource+0x494>
 80026de:	f241 11ed 	movw	r1, #4589	; 0x11ed
 80026e2:	4824      	ldr	r0, [pc, #144]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 80026e4:	f7fd fdf2 	bl	80002cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	68db      	ldr	r3, [r3, #12]
 80026f4:	461a      	mov	r2, r3
 80026f6:	f000 f8fb 	bl	80028f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2140      	movs	r1, #64	; 0x40
 8002700:	4618      	mov	r0, r3
 8002702:	f000 fa05 	bl	8002b10 <TIM_ITRx_SetConfig>
      break;
 8002706:	e022      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a16      	ldr	r2, [pc, #88]	; (8002768 <HAL_TIM_ConfigClockSource+0x514>)
 800270e:	4293      	cmp	r3, r2
 8002710:	d013      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x4e6>
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800271a:	d00e      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x4e6>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	4a12      	ldr	r2, [pc, #72]	; (800276c <HAL_TIM_ConfigClockSource+0x518>)
 8002722:	4293      	cmp	r3, r2
 8002724:	d009      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x4e6>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	4a11      	ldr	r2, [pc, #68]	; (8002770 <HAL_TIM_ConfigClockSource+0x51c>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d004      	beq.n	800273a <HAL_TIM_ConfigClockSource+0x4e6>
 8002730:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8002734:	480f      	ldr	r0, [pc, #60]	; (8002774 <HAL_TIM_ConfigClockSource+0x520>)
 8002736:	f7fd fdc9 	bl	80002cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4619      	mov	r1, r3
 8002744:	4610      	mov	r0, r2
 8002746:	f000 f9e3 	bl	8002b10 <TIM_ITRx_SetConfig>
      break;
 800274a:	e000      	b.n	800274e <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800274c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2201      	movs	r2, #1
 8002752:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3710      	adds	r7, #16
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}
 8002768:	40012c00 	.word	0x40012c00
 800276c:	40000400 	.word	0x40000400
 8002770:	40000800 	.word	0x40000800
 8002774:	08004c3c 	.word	0x08004c3c

08002778 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002778:	b480      	push	{r7}
 800277a:	b085      	sub	sp, #20
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
 8002780:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	4a29      	ldr	r2, [pc, #164]	; (8002830 <TIM_Base_SetConfig+0xb8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d00b      	beq.n	80027a8 <TIM_Base_SetConfig+0x30>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002796:	d007      	beq.n	80027a8 <TIM_Base_SetConfig+0x30>
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	4a26      	ldr	r2, [pc, #152]	; (8002834 <TIM_Base_SetConfig+0xbc>)
 800279c:	4293      	cmp	r3, r2
 800279e:	d003      	beq.n	80027a8 <TIM_Base_SetConfig+0x30>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	4a25      	ldr	r2, [pc, #148]	; (8002838 <TIM_Base_SetConfig+0xc0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d108      	bne.n	80027ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80027ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	68fa      	ldr	r2, [r7, #12]
 80027b6:	4313      	orrs	r3, r2
 80027b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4a1c      	ldr	r2, [pc, #112]	; (8002830 <TIM_Base_SetConfig+0xb8>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d00b      	beq.n	80027da <TIM_Base_SetConfig+0x62>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027c8:	d007      	beq.n	80027da <TIM_Base_SetConfig+0x62>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a19      	ldr	r2, [pc, #100]	; (8002834 <TIM_Base_SetConfig+0xbc>)
 80027ce:	4293      	cmp	r3, r2
 80027d0:	d003      	beq.n	80027da <TIM_Base_SetConfig+0x62>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	4a18      	ldr	r2, [pc, #96]	; (8002838 <TIM_Base_SetConfig+0xc0>)
 80027d6:	4293      	cmp	r3, r2
 80027d8:	d108      	bne.n	80027ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80027e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	68fa      	ldr	r2, [r7, #12]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	695b      	ldr	r3, [r3, #20]
 80027f6:	4313      	orrs	r3, r2
 80027f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	68fa      	ldr	r2, [r7, #12]
 80027fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002800:	683b      	ldr	r3, [r7, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a07      	ldr	r2, [pc, #28]	; (8002830 <TIM_Base_SetConfig+0xb8>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d103      	bne.n	8002820 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	691a      	ldr	r2, [r3, #16]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	615a      	str	r2, [r3, #20]
}
 8002826:	bf00      	nop
 8002828:	3714      	adds	r7, #20
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	40012c00 	.word	0x40012c00
 8002834:	40000400 	.word	0x40000400
 8002838:	40000800 	.word	0x40000800

0800283c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800283c:	b480      	push	{r7}
 800283e:	b087      	sub	sp, #28
 8002840:	af00      	add	r7, sp, #0
 8002842:	60f8      	str	r0, [r7, #12]
 8002844:	60b9      	str	r1, [r7, #8]
 8002846:	607a      	str	r2, [r7, #4]
 8002848:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	f023 0201 	bic.w	r2, r3, #1
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	699b      	ldr	r3, [r3, #24]
 800285a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	4a1f      	ldr	r2, [pc, #124]	; (80028e4 <TIM_TI1_SetConfig+0xa8>)
 8002866:	4293      	cmp	r3, r2
 8002868:	d00b      	beq.n	8002882 <TIM_TI1_SetConfig+0x46>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002870:	d007      	beq.n	8002882 <TIM_TI1_SetConfig+0x46>
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	4a1c      	ldr	r2, [pc, #112]	; (80028e8 <TIM_TI1_SetConfig+0xac>)
 8002876:	4293      	cmp	r3, r2
 8002878:	d003      	beq.n	8002882 <TIM_TI1_SetConfig+0x46>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	4a1b      	ldr	r2, [pc, #108]	; (80028ec <TIM_TI1_SetConfig+0xb0>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d101      	bne.n	8002886 <TIM_TI1_SetConfig+0x4a>
 8002882:	2301      	movs	r3, #1
 8002884:	e000      	b.n	8002888 <TIM_TI1_SetConfig+0x4c>
 8002886:	2300      	movs	r3, #0
 8002888:	2b00      	cmp	r3, #0
 800288a:	d008      	beq.n	800289e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f023 0303 	bic.w	r3, r3, #3
 8002892:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002894:	697a      	ldr	r2, [r7, #20]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	4313      	orrs	r3, r2
 800289a:	617b      	str	r3, [r7, #20]
 800289c:	e003      	b.n	80028a6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800289e:	697b      	ldr	r3, [r7, #20]
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80028ac:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	011b      	lsls	r3, r3, #4
 80028b2:	b2db      	uxtb	r3, r3
 80028b4:	697a      	ldr	r2, [r7, #20]
 80028b6:	4313      	orrs	r3, r2
 80028b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	f023 030a 	bic.w	r3, r3, #10
 80028c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80028c2:	68bb      	ldr	r3, [r7, #8]
 80028c4:	f003 030a 	and.w	r3, r3, #10
 80028c8:	693a      	ldr	r2, [r7, #16]
 80028ca:	4313      	orrs	r3, r2
 80028cc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	693a      	ldr	r2, [r7, #16]
 80028d8:	621a      	str	r2, [r3, #32]
}
 80028da:	bf00      	nop
 80028dc:	371c      	adds	r7, #28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bc80      	pop	{r7}
 80028e2:	4770      	bx	lr
 80028e4:	40012c00 	.word	0x40012c00
 80028e8:	40000400 	.word	0x40000400
 80028ec:	40000800 	.word	0x40000800

080028f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b087      	sub	sp, #28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a1b      	ldr	r3, [r3, #32]
 8002900:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	6a1b      	ldr	r3, [r3, #32]
 8002906:	f023 0201 	bic.w	r2, r3, #1
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	699b      	ldr	r3, [r3, #24]
 8002912:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002914:	693b      	ldr	r3, [r7, #16]
 8002916:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800291a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	011b      	lsls	r3, r3, #4
 8002920:	693a      	ldr	r2, [r7, #16]
 8002922:	4313      	orrs	r3, r2
 8002924:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002926:	697b      	ldr	r3, [r7, #20]
 8002928:	f023 030a 	bic.w	r3, r3, #10
 800292c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	68bb      	ldr	r3, [r7, #8]
 8002932:	4313      	orrs	r3, r2
 8002934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	693a      	ldr	r2, [r7, #16]
 800293a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	697a      	ldr	r2, [r7, #20]
 8002940:	621a      	str	r2, [r3, #32]
}
 8002942:	bf00      	nop
 8002944:	371c      	adds	r7, #28
 8002946:	46bd      	mov	sp, r7
 8002948:	bc80      	pop	{r7}
 800294a:	4770      	bx	lr

0800294c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800294c:	b480      	push	{r7}
 800294e:	b087      	sub	sp, #28
 8002950:	af00      	add	r7, sp, #0
 8002952:	60f8      	str	r0, [r7, #12]
 8002954:	60b9      	str	r1, [r7, #8]
 8002956:	607a      	str	r2, [r7, #4]
 8002958:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	6a1b      	ldr	r3, [r3, #32]
 800295e:	f023 0210 	bic.w	r2, r3, #16
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	6a1b      	ldr	r3, [r3, #32]
 8002970:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002972:	697b      	ldr	r3, [r7, #20]
 8002974:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002978:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	021b      	lsls	r3, r3, #8
 800297e:	697a      	ldr	r2, [r7, #20]
 8002980:	4313      	orrs	r3, r2
 8002982:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800298a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	031b      	lsls	r3, r3, #12
 8002990:	b29b      	uxth	r3, r3
 8002992:	697a      	ldr	r2, [r7, #20]
 8002994:	4313      	orrs	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800299e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	4313      	orrs	r3, r2
 80029ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	697a      	ldr	r2, [r7, #20]
 80029b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029b4:	68fb      	ldr	r3, [r7, #12]
 80029b6:	693a      	ldr	r2, [r7, #16]
 80029b8:	621a      	str	r2, [r3, #32]
}
 80029ba:	bf00      	nop
 80029bc:	371c      	adds	r7, #28
 80029be:	46bd      	mov	sp, r7
 80029c0:	bc80      	pop	{r7}
 80029c2:	4770      	bx	lr

080029c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b087      	sub	sp, #28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	6a1b      	ldr	r3, [r3, #32]
 80029d4:	f023 0210 	bic.w	r2, r3, #16
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80029ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	031b      	lsls	r3, r3, #12
 80029f4:	697a      	ldr	r2, [r7, #20]
 80029f6:	4313      	orrs	r3, r2
 80029f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a00:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	011b      	lsls	r3, r3, #4
 8002a06:	693a      	ldr	r2, [r7, #16]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	697a      	ldr	r2, [r7, #20]
 8002a10:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	693a      	ldr	r2, [r7, #16]
 8002a16:	621a      	str	r2, [r3, #32]
}
 8002a18:	bf00      	nop
 8002a1a:	371c      	adds	r7, #28
 8002a1c:	46bd      	mov	sp, r7
 8002a1e:	bc80      	pop	{r7}
 8002a20:	4770      	bx	lr

08002a22 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a22:	b480      	push	{r7}
 8002a24:	b087      	sub	sp, #28
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	60f8      	str	r0, [r7, #12]
 8002a2a:	60b9      	str	r1, [r7, #8]
 8002a2c:	607a      	str	r2, [r7, #4]
 8002a2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	6a1b      	ldr	r3, [r3, #32]
 8002a34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	6a1b      	ldr	r3, [r3, #32]
 8002a46:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f023 0303 	bic.w	r3, r3, #3
 8002a4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002a50:	697a      	ldr	r2, [r7, #20]
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4313      	orrs	r3, r2
 8002a56:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002a58:	697b      	ldr	r3, [r7, #20]
 8002a5a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a5e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	011b      	lsls	r3, r3, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a72:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	021b      	lsls	r3, r3, #8
 8002a78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002a7c:	693a      	ldr	r2, [r7, #16]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	693a      	ldr	r2, [r7, #16]
 8002a8c:	621a      	str	r2, [r3, #32]
}
 8002a8e:	bf00      	nop
 8002a90:	371c      	adds	r7, #28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bc80      	pop	{r7}
 8002a96:	4770      	bx	lr

08002a98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a98:	b480      	push	{r7}
 8002a9a:	b087      	sub	sp, #28
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6a1b      	ldr	r3, [r3, #32]
 8002abc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	697a      	ldr	r2, [r7, #20]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ad6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	031b      	lsls	r3, r3, #12
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002aea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002aec:	68bb      	ldr	r3, [r7, #8]
 8002aee:	031b      	lsls	r3, r3, #12
 8002af0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002af4:	693a      	ldr	r2, [r7, #16]
 8002af6:	4313      	orrs	r3, r2
 8002af8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	697a      	ldr	r2, [r7, #20]
 8002afe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	621a      	str	r2, [r3, #32]
}
 8002b06:	bf00      	nop
 8002b08:	371c      	adds	r7, #28
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr

08002b10 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002b10:	b480      	push	{r7}
 8002b12:	b085      	sub	sp, #20
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b26:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002b28:	683a      	ldr	r2, [r7, #0]
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	f043 0307 	orr.w	r3, r3, #7
 8002b32:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	68fa      	ldr	r2, [r7, #12]
 8002b38:	609a      	str	r2, [r3, #8]
}
 8002b3a:	bf00      	nop
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr

08002b44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	60f8      	str	r0, [r7, #12]
 8002b4c:	60b9      	str	r1, [r7, #8]
 8002b4e:	607a      	str	r2, [r7, #4]
 8002b50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	689b      	ldr	r3, [r3, #8]
 8002b56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002b5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	021a      	lsls	r2, r3, #8
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	431a      	orrs	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	609a      	str	r2, [r3, #8]
}
 8002b78:	bf00      	nop
 8002b7a:	371c      	adds	r7, #28
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bc80      	pop	{r7}
 8002b80:	4770      	bx	lr
	...

08002b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a43      	ldr	r2, [pc, #268]	; (8002ca0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d013      	beq.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba0:	d00e      	beq.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a3f      	ldr	r2, [pc, #252]	; (8002ca4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002ba8:	4293      	cmp	r3, r2
 8002baa:	d009      	beq.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a3d      	ldr	r2, [pc, #244]	; (8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d004      	beq.n	8002bc0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002bb6:	f240 6164 	movw	r1, #1636	; 0x664
 8002bba:	483c      	ldr	r0, [pc, #240]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002bbc:	f7fd fb86 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002bc0:	683b      	ldr	r3, [r7, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d020      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	2b10      	cmp	r3, #16
 8002bce:	d01c      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	2b20      	cmp	r3, #32
 8002bd6:	d018      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002bd8:	683b      	ldr	r3, [r7, #0]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	2b30      	cmp	r3, #48	; 0x30
 8002bde:	d014      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2b40      	cmp	r3, #64	; 0x40
 8002be6:	d010      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b50      	cmp	r3, #80	; 0x50
 8002bee:	d00c      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002bf0:	683b      	ldr	r3, [r7, #0]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2b60      	cmp	r3, #96	; 0x60
 8002bf6:	d008      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	2b70      	cmp	r3, #112	; 0x70
 8002bfe:	d004      	beq.n	8002c0a <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002c00:	f240 6165 	movw	r1, #1637	; 0x665
 8002c04:	4829      	ldr	r0, [pc, #164]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002c06:	f7fd fb61 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	685b      	ldr	r3, [r3, #4]
 8002c0e:	2b80      	cmp	r3, #128	; 0x80
 8002c10:	d008      	beq.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	685b      	ldr	r3, [r3, #4]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d004      	beq.n	8002c24 <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002c1a:	f240 6166 	movw	r1, #1638	; 0x666
 8002c1e:	4823      	ldr	r0, [pc, #140]	; (8002cac <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002c20:	f7fd fb54 	bl	80002cc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c2a:	2b01      	cmp	r3, #1
 8002c2c:	d101      	bne.n	8002c32 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002c2e:	2302      	movs	r3, #2
 8002c30:	e032      	b.n	8002c98 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	2201      	movs	r2, #1
 8002c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2202      	movs	r2, #2
 8002c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c58:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	68fa      	ldr	r2, [r7, #12]
 8002c60:	4313      	orrs	r3, r2
 8002c62:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002c6a:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	68ba      	ldr	r2, [r7, #8]
 8002c72:	4313      	orrs	r3, r2
 8002c74:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	68fa      	ldr	r2, [r7, #12]
 8002c7c:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68ba      	ldr	r2, [r7, #8]
 8002c84:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	2201      	movs	r2, #1
 8002c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002c96:	2300      	movs	r3, #0
}
 8002c98:	4618      	mov	r0, r3
 8002c9a:	3710      	adds	r7, #16
 8002c9c:	46bd      	mov	sp, r7
 8002c9e:	bd80      	pop	{r7, pc}
 8002ca0:	40012c00 	.word	0x40012c00
 8002ca4:	40000400 	.word	0x40000400
 8002ca8:	40000800 	.word	0x40000800
 8002cac:	08004c74 	.word	0x08004c74

08002cb0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b082      	sub	sp, #8
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e092      	b.n	8002de8 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d02c      	beq.n	8002d24 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	4a48      	ldr	r2, [pc, #288]	; (8002df0 <HAL_UART_Init+0x140>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d00e      	beq.n	8002cf2 <HAL_UART_Init+0x42>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a46      	ldr	r2, [pc, #280]	; (8002df4 <HAL_UART_Init+0x144>)
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d009      	beq.n	8002cf2 <HAL_UART_Init+0x42>
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4a45      	ldr	r2, [pc, #276]	; (8002df8 <HAL_UART_Init+0x148>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d004      	beq.n	8002cf2 <HAL_UART_Init+0x42>
 8002ce8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002cec:	4843      	ldr	r0, [pc, #268]	; (8002dfc <HAL_UART_Init+0x14c>)
 8002cee:	f7fd faed 	bl	80002cc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d028      	beq.n	8002d4c <HAL_UART_Init+0x9c>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d023      	beq.n	8002d4c <HAL_UART_Init+0x9c>
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d0c:	d01e      	beq.n	8002d4c <HAL_UART_Init+0x9c>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	699b      	ldr	r3, [r3, #24]
 8002d12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d16:	d019      	beq.n	8002d4c <HAL_UART_Init+0x9c>
 8002d18:	f240 1147 	movw	r1, #327	; 0x147
 8002d1c:	4837      	ldr	r0, [pc, #220]	; (8002dfc <HAL_UART_Init+0x14c>)
 8002d1e:	f7fd fad5 	bl	80002cc <assert_failed>
 8002d22:	e013      	b.n	8002d4c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a31      	ldr	r2, [pc, #196]	; (8002df0 <HAL_UART_Init+0x140>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d00e      	beq.n	8002d4c <HAL_UART_Init+0x9c>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a30      	ldr	r2, [pc, #192]	; (8002df4 <HAL_UART_Init+0x144>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d009      	beq.n	8002d4c <HAL_UART_Init+0x9c>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a2e      	ldr	r2, [pc, #184]	; (8002df8 <HAL_UART_Init+0x148>)
 8002d3e:	4293      	cmp	r3, r2
 8002d40:	d004      	beq.n	8002d4c <HAL_UART_Init+0x9c>
 8002d42:	f240 114b 	movw	r1, #331	; 0x14b
 8002d46:	482d      	ldr	r0, [pc, #180]	; (8002dfc <HAL_UART_Init+0x14c>)
 8002d48:	f7fd fac0 	bl	80002cc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d009      	beq.n	8002d68 <HAL_UART_Init+0xb8>
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d5c:	d004      	beq.n	8002d68 <HAL_UART_Init+0xb8>
 8002d5e:	f240 114d 	movw	r1, #333	; 0x14d
 8002d62:	4826      	ldr	r0, [pc, #152]	; (8002dfc <HAL_UART_Init+0x14c>)
 8002d64:	f7fd fab2 	bl	80002cc <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002d6e:	b2db      	uxtb	r3, r3
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d106      	bne.n	8002d82 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2200      	movs	r2, #0
 8002d78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f7fd fd69 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2224      	movs	r2, #36	; 0x24
 8002d86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	68da      	ldr	r2, [r3, #12]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002d98:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 fb4a 	bl	8003434 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	691a      	ldr	r2, [r3, #16]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	695a      	ldr	r2, [r3, #20]
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dbe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	68da      	ldr	r2, [r3, #12]
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002dce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2200      	movs	r2, #0
 8002dd4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2220      	movs	r2, #32
 8002dda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	2220      	movs	r2, #32
 8002de2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002de6:	2300      	movs	r3, #0
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3708      	adds	r7, #8
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	40013800 	.word	0x40013800
 8002df4:	40004400 	.word	0x40004400
 8002df8:	40004800 	.word	0x40004800
 8002dfc:	08004cb0 	.word	0x08004cb0

08002e00 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	b088      	sub	sp, #32
 8002e04:	af02      	add	r7, sp, #8
 8002e06:	60f8      	str	r0, [r7, #12]
 8002e08:	60b9      	str	r1, [r7, #8]
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	4613      	mov	r3, r2
 8002e0e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002e1a:	b2db      	uxtb	r3, r3
 8002e1c:	2b20      	cmp	r3, #32
 8002e1e:	f040 8083 	bne.w	8002f28 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d002      	beq.n	8002e2e <HAL_UART_Transmit+0x2e>
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e07b      	b.n	8002f2a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d101      	bne.n	8002e40 <HAL_UART_Transmit+0x40>
 8002e3c:	2302      	movs	r3, #2
 8002e3e:	e074      	b.n	8002f2a <HAL_UART_Transmit+0x12a>
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2221      	movs	r2, #33	; 0x21
 8002e52:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002e56:	f7fd fdbd 	bl	80009d4 <HAL_GetTick>
 8002e5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	88fa      	ldrh	r2, [r7, #6]
 8002e60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	88fa      	ldrh	r2, [r7, #6]
 8002e66:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002e68:	e042      	b.n	8002ef0 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	3b01      	subs	r3, #1
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e80:	d122      	bne.n	8002ec8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	9300      	str	r3, [sp, #0]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	2180      	movs	r1, #128	; 0x80
 8002e8c:	68f8      	ldr	r0, [r7, #12]
 8002e8e:	f000 f968 	bl	8003162 <UART_WaitOnFlagUntilTimeout>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8002e98:	2303      	movs	r3, #3
 8002e9a:	e046      	b.n	8002f2a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	881b      	ldrh	r3, [r3, #0]
 8002ea4:	461a      	mov	r2, r3
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eae:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d103      	bne.n	8002ec0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	3302      	adds	r3, #2
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	e017      	b.n	8002ef0 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	3301      	adds	r3, #1
 8002ec4:	60bb      	str	r3, [r7, #8]
 8002ec6:	e013      	b.n	8002ef0 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	9300      	str	r3, [sp, #0]
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	2180      	movs	r1, #128	; 0x80
 8002ed2:	68f8      	ldr	r0, [r7, #12]
 8002ed4:	f000 f945 	bl	8003162 <UART_WaitOnFlagUntilTimeout>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e023      	b.n	8002f2a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	1c5a      	adds	r2, r3, #1
 8002ee6:	60ba      	str	r2, [r7, #8]
 8002ee8:	781a      	ldrb	r2, [r3, #0]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1b7      	bne.n	8002e6a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	9300      	str	r3, [sp, #0]
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	2200      	movs	r2, #0
 8002f02:	2140      	movs	r1, #64	; 0x40
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f000 f92c 	bl	8003162 <UART_WaitOnFlagUntilTimeout>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e00a      	b.n	8002f2a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2220      	movs	r2, #32
 8002f18:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e000      	b.n	8002f2a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8002f28:	2302      	movs	r3, #2
  }
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b088      	sub	sp, #32
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	68db      	ldr	r3, [r3, #12]
 8002f4a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	695b      	ldr	r3, [r3, #20]
 8002f52:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8002f54:	2300      	movs	r3, #0
 8002f56:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	f003 030f 	and.w	r3, r3, #15
 8002f62:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10d      	bne.n	8002f86 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	f003 0320 	and.w	r3, r3, #32
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d008      	beq.n	8002f86 <HAL_UART_IRQHandler+0x52>
 8002f74:	69bb      	ldr	r3, [r7, #24]
 8002f76:	f003 0320 	and.w	r3, r3, #32
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 f9d7 	bl	8003332 <UART_Receive_IT>
      return;
 8002f84:	e0cc      	b.n	8003120 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	f000 80ab 	beq.w	80030e4 <HAL_UART_IRQHandler+0x1b0>
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d105      	bne.n	8002fa4 <HAL_UART_IRQHandler+0x70>
 8002f98:	69bb      	ldr	r3, [r7, #24]
 8002f9a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	f000 80a0 	beq.w	80030e4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	f003 0301 	and.w	r3, r3, #1
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d00a      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x90>
 8002fae:	69bb      	ldr	r3, [r7, #24]
 8002fb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d005      	beq.n	8002fc4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fbc:	f043 0201 	orr.w	r2, r3, #1
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f003 0304 	and.w	r3, r3, #4
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00a      	beq.n	8002fe4 <HAL_UART_IRQHandler+0xb0>
 8002fce:	697b      	ldr	r3, [r7, #20]
 8002fd0:	f003 0301 	and.w	r3, r3, #1
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d005      	beq.n	8002fe4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fdc:	f043 0202 	orr.w	r2, r3, #2
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fe4:	69fb      	ldr	r3, [r7, #28]
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <HAL_UART_IRQHandler+0xd0>
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	f003 0301 	and.w	r3, r3, #1
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d005      	beq.n	8003004 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffc:	f043 0204 	orr.w	r2, r3, #4
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d00a      	beq.n	8003024 <HAL_UART_IRQHandler+0xf0>
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	f003 0301 	and.w	r3, r3, #1
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	f043 0208 	orr.w	r2, r3, #8
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003028:	2b00      	cmp	r3, #0
 800302a:	d078      	beq.n	800311e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	f003 0320 	and.w	r3, r3, #32
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_UART_IRQHandler+0x112>
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 f976 	bl	8003332 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003060:	f003 0308 	and.w	r3, r3, #8
 8003064:	2b00      	cmp	r3, #0
 8003066:	d102      	bne.n	800306e <HAL_UART_IRQHandler+0x13a>
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d031      	beq.n	80030d2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f8c1 	bl	80031f6 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	695b      	ldr	r3, [r3, #20]
 800307a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800307e:	2b00      	cmp	r3, #0
 8003080:	d023      	beq.n	80030ca <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	695a      	ldr	r2, [r3, #20]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003090:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003096:	2b00      	cmp	r3, #0
 8003098:	d013      	beq.n	80030c2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309e:	4a22      	ldr	r2, [pc, #136]	; (8003128 <HAL_UART_IRQHandler+0x1f4>)
 80030a0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030a6:	4618      	mov	r0, r3
 80030a8:	f7fd fdda 	bl	8000c60 <HAL_DMA_Abort_IT>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d016      	beq.n	80030e0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030b8:	687a      	ldr	r2, [r7, #4]
 80030ba:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80030bc:	4610      	mov	r0, r2
 80030be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c0:	e00e      	b.n	80030e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 f844 	bl	8003150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030c8:	e00a      	b.n	80030e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f000 f840 	bl	8003150 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030d0:	e006      	b.n	80030e0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f83c 	bl	8003150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80030de:	e01e      	b.n	800311e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80030e0:	bf00      	nop
    return;
 80030e2:	e01c      	b.n	800311e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d008      	beq.n	8003100 <HAL_UART_IRQHandler+0x1cc>
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d003      	beq.n	8003100 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f000 f8ad 	bl	8003258 <UART_Transmit_IT>
    return;
 80030fe:	e00f      	b.n	8003120 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00a      	beq.n	8003120 <HAL_UART_IRQHandler+0x1ec>
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003110:	2b00      	cmp	r3, #0
 8003112:	d005      	beq.n	8003120 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8003114:	6878      	ldr	r0, [r7, #4]
 8003116:	f000 f8f4 	bl	8003302 <UART_EndTransmit_IT>
    return;
 800311a:	bf00      	nop
 800311c:	e000      	b.n	8003120 <HAL_UART_IRQHandler+0x1ec>
    return;
 800311e:	bf00      	nop
  }
}
 8003120:	3720      	adds	r7, #32
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	08003231 	.word	0x08003231

0800312c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800312c:	b480      	push	{r7}
 800312e:	b083      	sub	sp, #12
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003134:	bf00      	nop
 8003136:	370c      	adds	r7, #12
 8003138:	46bd      	mov	sp, r7
 800313a:	bc80      	pop	{r7}
 800313c:	4770      	bx	lr

0800313e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	bc80      	pop	{r7}
 800314e:	4770      	bx	lr

08003150 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003150:	b480      	push	{r7}
 8003152:	b083      	sub	sp, #12
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003158:	bf00      	nop
 800315a:	370c      	adds	r7, #12
 800315c:	46bd      	mov	sp, r7
 800315e:	bc80      	pop	{r7}
 8003160:	4770      	bx	lr

08003162 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b084      	sub	sp, #16
 8003166:	af00      	add	r7, sp, #0
 8003168:	60f8      	str	r0, [r7, #12]
 800316a:	60b9      	str	r1, [r7, #8]
 800316c:	603b      	str	r3, [r7, #0]
 800316e:	4613      	mov	r3, r2
 8003170:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003172:	e02c      	b.n	80031ce <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003174:	69bb      	ldr	r3, [r7, #24]
 8003176:	f1b3 3fff 	cmp.w	r3, #4294967295
 800317a:	d028      	beq.n	80031ce <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800317c:	69bb      	ldr	r3, [r7, #24]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <UART_WaitOnFlagUntilTimeout+0x30>
 8003182:	f7fd fc27 	bl	80009d4 <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	429a      	cmp	r2, r3
 8003190:	d21d      	bcs.n	80031ce <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	68da      	ldr	r2, [r3, #12]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80031a0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	695a      	ldr	r2, [r3, #20]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f022 0201 	bic.w	r2, r2, #1
 80031b0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2220      	movs	r2, #32
 80031b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2220      	movs	r2, #32
 80031be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80031ca:	2303      	movs	r3, #3
 80031cc:	e00f      	b.n	80031ee <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	4013      	ands	r3, r2
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	429a      	cmp	r2, r3
 80031dc:	bf0c      	ite	eq
 80031de:	2301      	moveq	r3, #1
 80031e0:	2300      	movne	r3, #0
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	461a      	mov	r2, r3
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d0c3      	beq.n	8003174 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80031ec:	2300      	movs	r3, #0
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}

080031f6 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80031f6:	b480      	push	{r7}
 80031f8:	b083      	sub	sp, #12
 80031fa:	af00      	add	r7, sp, #0
 80031fc:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800320c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	695a      	ldr	r2, [r3, #20]
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f022 0201 	bic.w	r2, r2, #1
 800321c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2220      	movs	r2, #32
 8003222:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8003226:	bf00      	nop
 8003228:	370c      	adds	r7, #12
 800322a:	46bd      	mov	sp, r7
 800322c:	bc80      	pop	{r7}
 800322e:	4770      	bx	lr

08003230 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2200      	movs	r2, #0
 8003242:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800324a:	68f8      	ldr	r0, [r7, #12]
 800324c:	f7ff ff80 	bl	8003150 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003250:	bf00      	nop
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003266:	b2db      	uxtb	r3, r3
 8003268:	2b21      	cmp	r3, #33	; 0x21
 800326a:	d144      	bne.n	80032f6 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	689b      	ldr	r3, [r3, #8]
 8003270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003274:	d11a      	bne.n	80032ac <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6a1b      	ldr	r3, [r3, #32]
 800327a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	461a      	mov	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800328a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	691b      	ldr	r3, [r3, #16]
 8003290:	2b00      	cmp	r3, #0
 8003292:	d105      	bne.n	80032a0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a1b      	ldr	r3, [r3, #32]
 8003298:	1c9a      	adds	r2, r3, #2
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	621a      	str	r2, [r3, #32]
 800329e:	e00e      	b.n	80032be <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	1c5a      	adds	r2, r3, #1
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	621a      	str	r2, [r3, #32]
 80032aa:	e008      	b.n	80032be <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a1b      	ldr	r3, [r3, #32]
 80032b0:	1c59      	adds	r1, r3, #1
 80032b2:	687a      	ldr	r2, [r7, #4]
 80032b4:	6211      	str	r1, [r2, #32]
 80032b6:	781a      	ldrb	r2, [r3, #0]
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	3b01      	subs	r3, #1
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	4619      	mov	r1, r3
 80032cc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d10f      	bne.n	80032f2 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68da      	ldr	r2, [r3, #12]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	68da      	ldr	r2, [r3, #12]
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80032f2:	2300      	movs	r3, #0
 80032f4:	e000      	b.n	80032f8 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80032f6:	2302      	movs	r3, #2
  }
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	bc80      	pop	{r7}
 8003300:	4770      	bx	lr

08003302 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003302:	b580      	push	{r7, lr}
 8003304:	b082      	sub	sp, #8
 8003306:	af00      	add	r7, sp, #0
 8003308:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	68da      	ldr	r2, [r3, #12]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003318:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2220      	movs	r2, #32
 800331e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003322:	6878      	ldr	r0, [r7, #4]
 8003324:	f7ff ff02 	bl	800312c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3708      	adds	r7, #8
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}

08003332 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b22      	cmp	r3, #34	; 0x22
 8003344:	d171      	bne.n	800342a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800334e:	d123      	bne.n	8003398 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	691b      	ldr	r3, [r3, #16]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d10e      	bne.n	800337c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	b29b      	uxth	r3, r3
 8003366:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800336a:	b29a      	uxth	r2, r3
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003374:	1c9a      	adds	r2, r3, #2
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	629a      	str	r2, [r3, #40]	; 0x28
 800337a:	e029      	b.n	80033d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	685b      	ldr	r3, [r3, #4]
 8003382:	b29b      	uxth	r3, r3
 8003384:	b2db      	uxtb	r3, r3
 8003386:	b29a      	uxth	r2, r3
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	1c5a      	adds	r2, r3, #1
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	629a      	str	r2, [r3, #40]	; 0x28
 8003396:	e01b      	b.n	80033d0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	691b      	ldr	r3, [r3, #16]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d10a      	bne.n	80033b6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	6858      	ldr	r0, [r3, #4]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	1c59      	adds	r1, r3, #1
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	6291      	str	r1, [r2, #40]	; 0x28
 80033b0:	b2c2      	uxtb	r2, r0
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e00c      	b.n	80033d0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	b2da      	uxtb	r2, r3
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033c2:	1c58      	adds	r0, r3, #1
 80033c4:	6879      	ldr	r1, [r7, #4]
 80033c6:	6288      	str	r0, [r1, #40]	; 0x28
 80033c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80033cc:	b2d2      	uxtb	r2, r2
 80033ce:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80033d4:	b29b      	uxth	r3, r3
 80033d6:	3b01      	subs	r3, #1
 80033d8:	b29b      	uxth	r3, r3
 80033da:	687a      	ldr	r2, [r7, #4]
 80033dc:	4619      	mov	r1, r3
 80033de:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d120      	bne.n	8003426 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0220 	bic.w	r2, r2, #32
 80033f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	68da      	ldr	r2, [r3, #12]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003402:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f022 0201 	bic.w	r2, r2, #1
 8003412:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fe8e 	bl	800313e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8003422:	2300      	movs	r3, #0
 8003424:	e002      	b.n	800342c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8003426:	2300      	movs	r3, #0
 8003428:	e000      	b.n	800342c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800342a:	2302      	movs	r3, #2
  }
}
 800342c:	4618      	mov	r0, r3
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}

08003434 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b084      	sub	sp, #16
 8003438:	af00      	add	r7, sp, #0
 800343a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	4a84      	ldr	r2, [pc, #528]	; (8003654 <UART_SetConfig+0x220>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d904      	bls.n	8003450 <UART_SetConfig+0x1c>
 8003446:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800344a:	4883      	ldr	r0, [pc, #524]	; (8003658 <UART_SetConfig+0x224>)
 800344c:	f7fc ff3e 	bl	80002cc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	68db      	ldr	r3, [r3, #12]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d009      	beq.n	800346c <UART_SetConfig+0x38>
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003460:	d004      	beq.n	800346c <UART_SetConfig+0x38>
 8003462:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8003466:	487c      	ldr	r0, [pc, #496]	; (8003658 <UART_SetConfig+0x224>)
 8003468:	f7fc ff30 	bl	80002cc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00e      	beq.n	8003492 <UART_SetConfig+0x5e>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800347c:	d009      	beq.n	8003492 <UART_SetConfig+0x5e>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	691b      	ldr	r3, [r3, #16]
 8003482:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8003486:	d004      	beq.n	8003492 <UART_SetConfig+0x5e>
 8003488:	f640 31ff 	movw	r1, #3071	; 0xbff
 800348c:	4872      	ldr	r0, [pc, #456]	; (8003658 <UART_SetConfig+0x224>)
 800348e:	f7fc ff1d 	bl	80002cc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	695a      	ldr	r2, [r3, #20]
 8003496:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800349a:	4013      	ands	r3, r2
 800349c:	2b00      	cmp	r3, #0
 800349e:	d103      	bne.n	80034a8 <UART_SetConfig+0x74>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	695b      	ldr	r3, [r3, #20]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d104      	bne.n	80034b2 <UART_SetConfig+0x7e>
 80034a8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80034ac:	486a      	ldr	r0, [pc, #424]	; (8003658 <UART_SetConfig+0x224>)
 80034ae:	f7fc ff0d 	bl	80002cc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	430a      	orrs	r2, r1
 80034c6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	431a      	orrs	r2, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695b      	ldr	r3, [r3, #20]
 80034d6:	4313      	orrs	r3, r2
 80034d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68db      	ldr	r3, [r3, #12]
 80034e0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80034e4:	f023 030c 	bic.w	r3, r3, #12
 80034e8:	687a      	ldr	r2, [r7, #4]
 80034ea:	6812      	ldr	r2, [r2, #0]
 80034ec:	68f9      	ldr	r1, [r7, #12]
 80034ee:	430b      	orrs	r3, r1
 80034f0:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	695b      	ldr	r3, [r3, #20]
 80034f8:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	699a      	ldr	r2, [r3, #24]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4a53      	ldr	r2, [pc, #332]	; (800365c <UART_SetConfig+0x228>)
 800350e:	4293      	cmp	r3, r2
 8003510:	d14e      	bne.n	80035b0 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003512:	f7fe fc07 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 8003516:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	4613      	mov	r3, r2
 800351c:	009b      	lsls	r3, r3, #2
 800351e:	4413      	add	r3, r2
 8003520:	009a      	lsls	r2, r3, #2
 8003522:	441a      	add	r2, r3
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	009b      	lsls	r3, r3, #2
 800352a:	fbb2 f3f3 	udiv	r3, r2, r3
 800352e:	4a4c      	ldr	r2, [pc, #304]	; (8003660 <UART_SetConfig+0x22c>)
 8003530:	fba2 2303 	umull	r2, r3, r2, r3
 8003534:	095b      	lsrs	r3, r3, #5
 8003536:	0119      	lsls	r1, r3, #4
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	4613      	mov	r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	4413      	add	r3, r2
 8003540:	009a      	lsls	r2, r3, #2
 8003542:	441a      	add	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	009b      	lsls	r3, r3, #2
 800354a:	fbb2 f2f3 	udiv	r2, r2, r3
 800354e:	4b44      	ldr	r3, [pc, #272]	; (8003660 <UART_SetConfig+0x22c>)
 8003550:	fba3 0302 	umull	r0, r3, r3, r2
 8003554:	095b      	lsrs	r3, r3, #5
 8003556:	2064      	movs	r0, #100	; 0x64
 8003558:	fb00 f303 	mul.w	r3, r0, r3
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	3332      	adds	r3, #50	; 0x32
 8003562:	4a3f      	ldr	r2, [pc, #252]	; (8003660 <UART_SetConfig+0x22c>)
 8003564:	fba2 2303 	umull	r2, r3, r2, r3
 8003568:	095b      	lsrs	r3, r3, #5
 800356a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800356e:	4419      	add	r1, r3
 8003570:	68ba      	ldr	r2, [r7, #8]
 8003572:	4613      	mov	r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	4413      	add	r3, r2
 8003578:	009a      	lsls	r2, r3, #2
 800357a:	441a      	add	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	fbb2 f2f3 	udiv	r2, r2, r3
 8003586:	4b36      	ldr	r3, [pc, #216]	; (8003660 <UART_SetConfig+0x22c>)
 8003588:	fba3 0302 	umull	r0, r3, r3, r2
 800358c:	095b      	lsrs	r3, r3, #5
 800358e:	2064      	movs	r0, #100	; 0x64
 8003590:	fb00 f303 	mul.w	r3, r0, r3
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	3332      	adds	r3, #50	; 0x32
 800359a:	4a31      	ldr	r2, [pc, #196]	; (8003660 <UART_SetConfig+0x22c>)
 800359c:	fba2 2303 	umull	r2, r3, r2, r3
 80035a0:	095b      	lsrs	r3, r3, #5
 80035a2:	f003 020f 	and.w	r2, r3, #15
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	440a      	add	r2, r1
 80035ac:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80035ae:	e04d      	b.n	800364c <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80035b0:	f7fe fba4 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 80035b4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80035b6:	68ba      	ldr	r2, [r7, #8]
 80035b8:	4613      	mov	r3, r2
 80035ba:	009b      	lsls	r3, r3, #2
 80035bc:	4413      	add	r3, r2
 80035be:	009a      	lsls	r2, r3, #2
 80035c0:	441a      	add	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80035cc:	4a24      	ldr	r2, [pc, #144]	; (8003660 <UART_SetConfig+0x22c>)
 80035ce:	fba2 2303 	umull	r2, r3, r2, r3
 80035d2:	095b      	lsrs	r3, r3, #5
 80035d4:	0119      	lsls	r1, r3, #4
 80035d6:	68ba      	ldr	r2, [r7, #8]
 80035d8:	4613      	mov	r3, r2
 80035da:	009b      	lsls	r3, r3, #2
 80035dc:	4413      	add	r3, r2
 80035de:	009a      	lsls	r2, r3, #2
 80035e0:	441a      	add	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80035ec:	4b1c      	ldr	r3, [pc, #112]	; (8003660 <UART_SetConfig+0x22c>)
 80035ee:	fba3 0302 	umull	r0, r3, r3, r2
 80035f2:	095b      	lsrs	r3, r3, #5
 80035f4:	2064      	movs	r0, #100	; 0x64
 80035f6:	fb00 f303 	mul.w	r3, r0, r3
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	011b      	lsls	r3, r3, #4
 80035fe:	3332      	adds	r3, #50	; 0x32
 8003600:	4a17      	ldr	r2, [pc, #92]	; (8003660 <UART_SetConfig+0x22c>)
 8003602:	fba2 2303 	umull	r2, r3, r2, r3
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800360c:	4419      	add	r1, r3
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	4613      	mov	r3, r2
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	009a      	lsls	r2, r3, #2
 8003618:	441a      	add	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	fbb2 f2f3 	udiv	r2, r2, r3
 8003624:	4b0e      	ldr	r3, [pc, #56]	; (8003660 <UART_SetConfig+0x22c>)
 8003626:	fba3 0302 	umull	r0, r3, r3, r2
 800362a:	095b      	lsrs	r3, r3, #5
 800362c:	2064      	movs	r0, #100	; 0x64
 800362e:	fb00 f303 	mul.w	r3, r0, r3
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	011b      	lsls	r3, r3, #4
 8003636:	3332      	adds	r3, #50	; 0x32
 8003638:	4a09      	ldr	r2, [pc, #36]	; (8003660 <UART_SetConfig+0x22c>)
 800363a:	fba2 2303 	umull	r2, r3, r2, r3
 800363e:	095b      	lsrs	r3, r3, #5
 8003640:	f003 020f 	and.w	r2, r3, #15
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	440a      	add	r2, r1
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	3710      	adds	r7, #16
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}
 8003654:	0044aa20 	.word	0x0044aa20
 8003658:	08004cb0 	.word	0x08004cb0
 800365c:	40013800 	.word	0x40013800
 8003660:	51eb851f 	.word	0x51eb851f

08003664 <siro_init>:
siro_t;

siro_t siro;

static void siro_init(void)
{
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
	siro.powerPlus = 0;
 8003668:	4b07      	ldr	r3, [pc, #28]	; (8003688 <siro_init+0x24>)
 800366a:	2200      	movs	r2, #0
 800366c:	601a      	str	r2, [r3, #0]
	siro.powerMinus = 0;
 800366e:	4b06      	ldr	r3, [pc, #24]	; (8003688 <siro_init+0x24>)
 8003670:	2200      	movs	r2, #0
 8003672:	605a      	str	r2, [r3, #4]
	siro.extResist = 0;
 8003674:	4b04      	ldr	r3, [pc, #16]	; (8003688 <siro_init+0x24>)
 8003676:	2200      	movs	r2, #0
 8003678:	609a      	str	r2, [r3, #8]
	siro.intResist = 1;
 800367a:	4b03      	ldr	r3, [pc, #12]	; (8003688 <siro_init+0x24>)
 800367c:	2201      	movs	r2, #1
 800367e:	60da      	str	r2, [r3, #12]
}
 8003680:	bf00      	nop
 8003682:	46bd      	mov	sp, r7
 8003684:	bc80      	pop	{r7}
 8003686:	4770      	bx	lr
 8003688:	20000170 	.word	0x20000170

0800368c <siro_task1ms>:

static void siro_task1ms(void)
{
 800368c:	b480      	push	{r7}
 800368e:	af00      	add	r7, sp, #0
	/* process, all in unit of 256 */
	siro.exAcc_U256 = U256 * (siro.powerPlus-siro.powerMinus);
 8003690:	4b22      	ldr	r3, [pc, #136]	; (800371c <siro_task1ms+0x90>)
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	4b21      	ldr	r3, [pc, #132]	; (800371c <siro_task1ms+0x90>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	021b      	lsls	r3, r3, #8
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <siro_task1ms+0x90>)
 800369e:	6113      	str	r3, [r2, #16]
	siro.deAcc_U256 = siro.speed_U256 * (siro.extResist+siro.intResist) / U256;
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <siro_task1ms+0x90>)
 80036a2:	69db      	ldr	r3, [r3, #28]
 80036a4:	4a1d      	ldr	r2, [pc, #116]	; (800371c <siro_task1ms+0x90>)
 80036a6:	6891      	ldr	r1, [r2, #8]
 80036a8:	4a1c      	ldr	r2, [pc, #112]	; (800371c <siro_task1ms+0x90>)
 80036aa:	68d2      	ldr	r2, [r2, #12]
 80036ac:	440a      	add	r2, r1
 80036ae:	fb02 f303 	mul.w	r3, r2, r3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	da00      	bge.n	80036b8 <siro_task1ms+0x2c>
 80036b6:	33ff      	adds	r3, #255	; 0xff
 80036b8:	121b      	asrs	r3, r3, #8
 80036ba:	461a      	mov	r2, r3
 80036bc:	4b17      	ldr	r3, [pc, #92]	; (800371c <siro_task1ms+0x90>)
 80036be:	615a      	str	r2, [r3, #20]
	siro.acc_U256 = siro.exAcc_U256 - siro.deAcc_U256;
 80036c0:	4b16      	ldr	r3, [pc, #88]	; (800371c <siro_task1ms+0x90>)
 80036c2:	691a      	ldr	r2, [r3, #16]
 80036c4:	4b15      	ldr	r3, [pc, #84]	; (800371c <siro_task1ms+0x90>)
 80036c6:	695b      	ldr	r3, [r3, #20]
 80036c8:	1ad3      	subs	r3, r2, r3
 80036ca:	4a14      	ldr	r2, [pc, #80]	; (800371c <siro_task1ms+0x90>)
 80036cc:	6193      	str	r3, [r2, #24]
	siro.speed_U256 += siro.acc_U256;
 80036ce:	4b13      	ldr	r3, [pc, #76]	; (800371c <siro_task1ms+0x90>)
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	4b12      	ldr	r3, [pc, #72]	; (800371c <siro_task1ms+0x90>)
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	4413      	add	r3, r2
 80036d8:	4a10      	ldr	r2, [pc, #64]	; (800371c <siro_task1ms+0x90>)
 80036da:	61d3      	str	r3, [r2, #28]
	if( siro.speed_U256<U256 && siro.speed_U256>-U256) siro.speed_U256 = 0;
 80036dc:	4b0f      	ldr	r3, [pc, #60]	; (800371c <siro_task1ms+0x90>)
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	2bff      	cmp	r3, #255	; 0xff
 80036e2:	dc07      	bgt.n	80036f4 <siro_task1ms+0x68>
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <siro_task1ms+0x90>)
 80036e6:	69db      	ldr	r3, [r3, #28]
 80036e8:	f113 0fff 	cmn.w	r3, #255	; 0xff
 80036ec:	db02      	blt.n	80036f4 <siro_task1ms+0x68>
 80036ee:	4b0b      	ldr	r3, [pc, #44]	; (800371c <siro_task1ms+0x90>)
 80036f0:	2200      	movs	r2, #0
 80036f2:	61da      	str	r2, [r3, #28]
	siro.pos_U256 += siro.speed_U256;
 80036f4:	4b09      	ldr	r3, [pc, #36]	; (800371c <siro_task1ms+0x90>)
 80036f6:	6a1a      	ldr	r2, [r3, #32]
 80036f8:	4b08      	ldr	r3, [pc, #32]	; (800371c <siro_task1ms+0x90>)
 80036fa:	69db      	ldr	r3, [r3, #28]
 80036fc:	4413      	add	r3, r2
 80036fe:	4a07      	ldr	r2, [pc, #28]	; (800371c <siro_task1ms+0x90>)
 8003700:	6213      	str	r3, [r2, #32]
	/* output */
	siro.pos = (uint16)(siro.pos_U256/U256);
 8003702:	4b06      	ldr	r3, [pc, #24]	; (800371c <siro_task1ms+0x90>)
 8003704:	6a1b      	ldr	r3, [r3, #32]
 8003706:	2b00      	cmp	r3, #0
 8003708:	da00      	bge.n	800370c <siro_task1ms+0x80>
 800370a:	33ff      	adds	r3, #255	; 0xff
 800370c:	121b      	asrs	r3, r3, #8
 800370e:	b29a      	uxth	r2, r3
 8003710:	4b02      	ldr	r3, [pc, #8]	; (800371c <siro_task1ms+0x90>)
 8003712:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8003714:	bf00      	nop
 8003716:	46bd      	mov	sp, r7
 8003718:	bc80      	pop	{r7}
 800371a:	4770      	bx	lr
 800371c:	20000170 	.word	0x20000170

08003720 <rola_init>:
rola_t rola;

const uint8 phase2ledMask[8] = { 0x01u, 0x02u, 0x04u, 0x08u, 0x10u, 0x20u, 0x40u, 0x80u };

void rola_init(void)
{
 8003720:	b580      	push	{r7, lr}
 8003722:	af00      	add	r7, sp, #0
	rola.step = 0;
 8003724:	4b03      	ldr	r3, [pc, #12]	; (8003734 <rola_init+0x14>)
 8003726:	2200      	movs	r2, #0
 8003728:	701a      	strb	r2, [r3, #0]
	siro_init();
 800372a:	f7ff ff9b 	bl	8003664 <siro_init>
}
 800372e:	bf00      	nop
 8003730:	bd80      	pop	{r7, pc}
 8003732:	bf00      	nop
 8003734:	20000198 	.word	0x20000198

08003738 <rola_task1ms>:

void rola_task1ms(void)
{
 8003738:	b598      	push	{r3, r4, r7, lr}
 800373a:	af00      	add	r7, sp, #0
	/* rotator input */
	siro.powerPlus = pbut_getButton(0);
 800373c:	2000      	movs	r0, #0
 800373e:	f000 f993 	bl	8003a68 <pbut_getButton>
 8003742:	4603      	mov	r3, r0
 8003744:	461a      	mov	r2, r3
 8003746:	4b45      	ldr	r3, [pc, #276]	; (800385c <rola_task1ms+0x124>)
 8003748:	601a      	str	r2, [r3, #0]
	siro.powerMinus = pbut_getButton(1);
 800374a:	2001      	movs	r0, #1
 800374c:	f000 f98c 	bl	8003a68 <pbut_getButton>
 8003750:	4603      	mov	r3, r0
 8003752:	461a      	mov	r2, r3
 8003754:	4b41      	ldr	r3, [pc, #260]	; (800385c <rola_task1ms+0x124>)
 8003756:	605a      	str	r2, [r3, #4]
	siro.extResist = (pbut_getButton(2)-1)*2+(pbut_getButton(3)-1)*4;
 8003758:	2002      	movs	r0, #2
 800375a:	f000 f985 	bl	8003a68 <pbut_getButton>
 800375e:	4603      	mov	r3, r0
 8003760:	1e5c      	subs	r4, r3, #1
 8003762:	2003      	movs	r0, #3
 8003764:	f000 f980 	bl	8003a68 <pbut_getButton>
 8003768:	4603      	mov	r3, r0
 800376a:	3b01      	subs	r3, #1
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	4423      	add	r3, r4
 8003770:	005b      	lsls	r3, r3, #1
 8003772:	4a3a      	ldr	r2, [pc, #232]	; (800385c <rola_task1ms+0x124>)
 8003774:	6093      	str	r3, [r2, #8]
	siro.intResist = 1;
 8003776:	4b39      	ldr	r3, [pc, #228]	; (800385c <rola_task1ms+0x124>)
 8003778:	2201      	movs	r2, #1
 800377a:	60da      	str	r2, [r3, #12]

	/* simulated rotator */
	siro_task1ms();
 800377c:	f7ff ff86 	bl	800368c <siro_task1ms>

	/* rotator - output */
	rola.phase = siro.pos>>13u;
 8003780:	4b36      	ldr	r3, [pc, #216]	; (800385c <rola_task1ms+0x124>)
 8003782:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8003784:	0b5b      	lsrs	r3, r3, #13
 8003786:	b29b      	uxth	r3, r3
 8003788:	b2da      	uxtb	r2, r3
 800378a:	4b35      	ldr	r3, [pc, #212]	; (8003860 <rola_task1ms+0x128>)
 800378c:	705a      	strb	r2, [r3, #1]
	rola.ledMask = phase2ledMask[rola.phase];
 800378e:	4b34      	ldr	r3, [pc, #208]	; (8003860 <rola_task1ms+0x128>)
 8003790:	785b      	ldrb	r3, [r3, #1]
 8003792:	461a      	mov	r2, r3
 8003794:	4b33      	ldr	r3, [pc, #204]	; (8003864 <rola_task1ms+0x12c>)
 8003796:	5c9a      	ldrb	r2, [r3, r2]
 8003798:	4b31      	ldr	r3, [pc, #196]	; (8003860 <rola_task1ms+0x128>)
 800379a:	709a      	strb	r2, [r3, #2]

	/* output to hardware */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (rola.ledMask&0x01u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800379c:	4b30      	ldr	r3, [pc, #192]	; (8003860 <rola_task1ms+0x128>)
 800379e:	789b      	ldrb	r3, [r3, #2]
 80037a0:	f003 0301 	and.w	r3, r3, #1
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	461a      	mov	r2, r3
 80037a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037ac:	482e      	ldr	r0, [pc, #184]	; (8003868 <rola_task1ms+0x130>)
 80037ae:	f7fd fd07 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (rola.ledMask&0x02u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <rola_task1ms+0x128>)
 80037b4:	789b      	ldrb	r3, [r3, #2]
 80037b6:	085b      	lsrs	r3, r3, #1
 80037b8:	b2db      	uxtb	r3, r3
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	b2db      	uxtb	r3, r3
 80037c0:	461a      	mov	r2, r3
 80037c2:	2108      	movs	r1, #8
 80037c4:	4829      	ldr	r0, [pc, #164]	; (800386c <rola_task1ms+0x134>)
 80037c6:	f7fd fcfb 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (rola.ledMask&0x04u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037ca:	4b25      	ldr	r3, [pc, #148]	; (8003860 <rola_task1ms+0x128>)
 80037cc:	789b      	ldrb	r3, [r3, #2]
 80037ce:	089b      	lsrs	r3, r3, #2
 80037d0:	b2db      	uxtb	r3, r3
 80037d2:	f003 0301 	and.w	r3, r3, #1
 80037d6:	b2db      	uxtb	r3, r3
 80037d8:	461a      	mov	r2, r3
 80037da:	2110      	movs	r1, #16
 80037dc:	4823      	ldr	r0, [pc, #140]	; (800386c <rola_task1ms+0x134>)
 80037de:	f7fd fcef 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (rola.ledMask&0x08u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037e2:	4b1f      	ldr	r3, [pc, #124]	; (8003860 <rola_task1ms+0x128>)
 80037e4:	789b      	ldrb	r3, [r3, #2]
 80037e6:	08db      	lsrs	r3, r3, #3
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	f003 0301 	and.w	r3, r3, #1
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	461a      	mov	r2, r3
 80037f2:	2120      	movs	r1, #32
 80037f4:	481d      	ldr	r0, [pc, #116]	; (800386c <rola_task1ms+0x134>)
 80037f6:	f7fd fce3 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  (rola.ledMask&0x10u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80037fa:	4b19      	ldr	r3, [pc, #100]	; (8003860 <rola_task1ms+0x128>)
 80037fc:	789b      	ldrb	r3, [r3, #2]
 80037fe:	091b      	lsrs	r3, r3, #4
 8003800:	b2db      	uxtb	r3, r3
 8003802:	f003 0301 	and.w	r3, r3, #1
 8003806:	b2db      	uxtb	r3, r3
 8003808:	461a      	mov	r2, r3
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	4817      	ldr	r0, [pc, #92]	; (800386c <rola_task1ms+0x134>)
 800380e:	f7fd fcd7 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  (rola.ledMask&0x20u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003812:	4b13      	ldr	r3, [pc, #76]	; (8003860 <rola_task1ms+0x128>)
 8003814:	789b      	ldrb	r3, [r3, #2]
 8003816:	095b      	lsrs	r3, r3, #5
 8003818:	b2db      	uxtb	r3, r3
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	b2db      	uxtb	r3, r3
 8003820:	461a      	mov	r2, r3
 8003822:	2180      	movs	r1, #128	; 0x80
 8003824:	4811      	ldr	r0, [pc, #68]	; (800386c <rola_task1ms+0x134>)
 8003826:	f7fd fccb 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  (rola.ledMask&0x40u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800382a:	4b0d      	ldr	r3, [pc, #52]	; (8003860 <rola_task1ms+0x128>)
 800382c:	789b      	ldrb	r3, [r3, #2]
 800382e:	099b      	lsrs	r3, r3, #6
 8003830:	b2db      	uxtb	r3, r3
 8003832:	f003 0301 	and.w	r3, r3, #1
 8003836:	b2db      	uxtb	r3, r3
 8003838:	461a      	mov	r2, r3
 800383a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800383e:	480b      	ldr	r0, [pc, #44]	; (800386c <rola_task1ms+0x134>)
 8003840:	f7fd fcbe 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  (rola.ledMask&0x80u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003844:	4b06      	ldr	r3, [pc, #24]	; (8003860 <rola_task1ms+0x128>)
 8003846:	789b      	ldrb	r3, [r3, #2]
 8003848:	09db      	lsrs	r3, r3, #7
 800384a:	b2db      	uxtb	r3, r3
 800384c:	461a      	mov	r2, r3
 800384e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003852:	4806      	ldr	r0, [pc, #24]	; (800386c <rola_task1ms+0x134>)
 8003854:	f7fd fcb4 	bl	80011c0 <HAL_GPIO_WritePin>
}
 8003858:	bf00      	nop
 800385a:	bd98      	pop	{r3, r4, r7, pc}
 800385c:	20000170 	.word	0x20000170
 8003860:	20000198 	.word	0x20000198
 8003864:	08004d30 	.word	0x08004d30
 8003868:	40010800 	.word	0x40010800
 800386c:	40010c00 	.word	0x40010c00

08003870 <rola_task>:

void rola_task(void)
{
 8003870:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003872:	b085      	sub	sp, #20
 8003874:	af04      	add	r7, sp, #16
	rola.step++;
 8003876:	4b12      	ldr	r3, [pc, #72]	; (80038c0 <rola_task+0x50>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	3301      	adds	r3, #1
 800387c:	b2da      	uxtb	r2, r3
 800387e:	4b10      	ldr	r3, [pc, #64]	; (80038c0 <rola_task+0x50>)
 8003880:	701a      	strb	r2, [r3, #0]

	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
			rola.step,
 8003882:	4b0f      	ldr	r3, [pc, #60]	; (80038c0 <rola_task+0x50>)
 8003884:	781b      	ldrb	r3, [r3, #0]
	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
 8003886:	461e      	mov	r6, r3
 8003888:	4b0e      	ldr	r3, [pc, #56]	; (80038c4 <rola_task+0x54>)
 800388a:	6918      	ldr	r0, [r3, #16]
 800388c:	4b0d      	ldr	r3, [pc, #52]	; (80038c4 <rola_task+0x54>)
 800388e:	695c      	ldr	r4, [r3, #20]
 8003890:	4b0c      	ldr	r3, [pc, #48]	; (80038c4 <rola_task+0x54>)
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	4a0b      	ldr	r2, [pc, #44]	; (80038c4 <rola_task+0x54>)
 8003896:	69d2      	ldr	r2, [r2, #28]
			siro.exAcc_U256, siro.deAcc_U256, siro.acc_U256,
			siro.speed_U256, siro.pos, rola.phase
 8003898:	490a      	ldr	r1, [pc, #40]	; (80038c4 <rola_task+0x54>)
 800389a:	8c89      	ldrh	r1, [r1, #36]	; 0x24
	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
 800389c:	460d      	mov	r5, r1
			siro.speed_U256, siro.pos, rola.phase
 800389e:	4908      	ldr	r1, [pc, #32]	; (80038c0 <rola_task+0x50>)
 80038a0:	7849      	ldrb	r1, [r1, #1]
	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
 80038a2:	9103      	str	r1, [sp, #12]
 80038a4:	9502      	str	r5, [sp, #8]
 80038a6:	9201      	str	r2, [sp, #4]
 80038a8:	9300      	str	r3, [sp, #0]
 80038aa:	4623      	mov	r3, r4
 80038ac:	4602      	mov	r2, r0
 80038ae:	4631      	mov	r1, r6
 80038b0:	4805      	ldr	r0, [pc, #20]	; (80038c8 <rola_task+0x58>)
 80038b2:	f000 fa67 	bl	8003d84 <iprintf>
			);
}
 80038b6:	bf00      	nop
 80038b8:	3704      	adds	r7, #4
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038be:	bf00      	nop
 80038c0:	20000198 	.word	0x20000198
 80038c4:	20000170 	.word	0x20000170
 80038c8:	08004cec 	.word	0x08004cec

080038cc <tapp_init>:
#include "BasicSoftware/PushButton/pushbutton.h"

uint32 cnt = 0u;

void tapp_init(void)
{
 80038cc:	b480      	push	{r7}
 80038ce:	af00      	add	r7, sp, #0
	cnt = 0u;
 80038d0:	4b03      	ldr	r3, [pc, #12]	; (80038e0 <tapp_init+0x14>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	601a      	str	r2, [r3, #0]
}
 80038d6:	bf00      	nop
 80038d8:	46bd      	mov	sp, r7
 80038da:	bc80      	pop	{r7}
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	20000090 	.word	0x20000090

080038e4 <tapp_task>:

void tapp_task(void)
{
 80038e4:	b480      	push	{r7}
 80038e6:	af00      	add	r7, sp, #0
	cnt++;
 80038e8:	4b04      	ldr	r3, [pc, #16]	; (80038fc <tapp_task+0x18>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	3301      	adds	r3, #1
 80038ee:	4a03      	ldr	r2, [pc, #12]	; (80038fc <tapp_task+0x18>)
 80038f0:	6013      	str	r3, [r2, #0]
	printf("%u: [%u] <%u> %u:%u:%u.%u\r\n", (uint)cnt,
			(uint)syti_getBaseTime(),
			(uint)systime.day,
			(uint)systime.hour, (uint)systime.minute, (uint)systime.second, (uint)systime.miniSec);
#endif
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	bc80      	pop	{r7}
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	20000090 	.word	0x20000090

08003900 <pbut_init>:
pushButton_t;

pushButton_t pbut;

void pbut_init(void)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
	/* init data */
	pbut.initCnt = 25u;
 8003906:	4b19      	ldr	r3, [pc, #100]	; (800396c <pbut_init+0x6c>)
 8003908:	2219      	movs	r2, #25
 800390a:	701a      	strb	r2, [r3, #0]
	pbut.state[0] = PBUT_STATE_UNKNOWN;
 800390c:	4b17      	ldr	r3, [pc, #92]	; (800396c <pbut_init+0x6c>)
 800390e:	2200      	movs	r2, #0
 8003910:	705a      	strb	r2, [r3, #1]
	pbut.state[1] = PBUT_STATE_UNKNOWN;
 8003912:	4b16      	ldr	r3, [pc, #88]	; (800396c <pbut_init+0x6c>)
 8003914:	2200      	movs	r2, #0
 8003916:	709a      	strb	r2, [r3, #2]
	pbut.state[2] = PBUT_STATE_UNKNOWN;
 8003918:	4b14      	ldr	r3, [pc, #80]	; (800396c <pbut_init+0x6c>)
 800391a:	2200      	movs	r2, #0
 800391c:	70da      	strb	r2, [r3, #3]
	pbut.state[3] = PBUT_STATE_UNKNOWN;
 800391e:	4b13      	ldr	r3, [pc, #76]	; (800396c <pbut_init+0x6c>)
 8003920:	2200      	movs	r2, #0
 8003922:	711a      	strb	r2, [r3, #4]

	/* input with pull up */
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003924:	463b      	mov	r3, r7
 8003926:	2200      	movs	r2, #0
 8003928:	601a      	str	r2, [r3, #0]
 800392a:	605a      	str	r2, [r3, #4]
 800392c:	609a      	str	r2, [r3, #8]
 800392e:	60da      	str	r2, [r3, #12]
		/* PA2, PA3 */
	    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003930:	230c      	movs	r3, #12
 8003932:	603b      	str	r3, [r7, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003934:	2300      	movs	r3, #0
 8003936:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003938:	2301      	movs	r3, #1
 800393a:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800393c:	2302      	movs	r3, #2
 800393e:	60fb      	str	r3, [r7, #12]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003940:	463b      	mov	r3, r7
 8003942:	4619      	mov	r1, r3
 8003944:	480a      	ldr	r0, [pc, #40]	; (8003970 <pbut_init+0x70>)
 8003946:	f7fd fa01 	bl	8000d4c <HAL_GPIO_Init>
	    /* PB0, PB1 */
	    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800394a:	2303      	movs	r3, #3
 800394c:	603b      	str	r3, [r7, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003952:	2301      	movs	r3, #1
 8003954:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003956:	2302      	movs	r3, #2
 8003958:	60fb      	str	r3, [r7, #12]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800395a:	463b      	mov	r3, r7
 800395c:	4619      	mov	r1, r3
 800395e:	4805      	ldr	r0, [pc, #20]	; (8003974 <pbut_init+0x74>)
 8003960:	f7fd f9f4 	bl	8000d4c <HAL_GPIO_Init>
	}
}
 8003964:	bf00      	nop
 8003966:	3710      	adds	r7, #16
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}
 800396c:	2000019c 	.word	0x2000019c
 8003970:	40010800 	.word	0x40010800
 8003974:	40010c00 	.word	0x40010c00

08003978 <pbut_task4ms>:

void pbut_task4ms(void)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
	uint8 i;
	for(i=0;i<4;i++)
 800397e:	2300      	movs	r3, #0
 8003980:	71fb      	strb	r3, [r7, #7]
 8003982:	e064      	b.n	8003a4e <pbut_task4ms+0xd6>
	{
		/* debounce */
		uint16 input;
		input = (pbutDesc[i].GPIOx->IDR) & (pbutDesc[i].Pin);
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	4a36      	ldr	r2, [pc, #216]	; (8003a60 <pbut_task4ms+0xe8>)
 8003988:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	b29a      	uxth	r2, r3
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	4933      	ldr	r1, [pc, #204]	; (8003a60 <pbut_task4ms+0xe8>)
 8003994:	00db      	lsls	r3, r3, #3
 8003996:	440b      	add	r3, r1
 8003998:	889b      	ldrh	r3, [r3, #4]
 800399a:	4013      	ands	r3, r2
 800399c:	80bb      	strh	r3, [r7, #4]
		pbut.debounce[i] <<= 1u;
 800399e:	79fb      	ldrb	r3, [r7, #7]
 80039a0:	4a30      	ldr	r2, [pc, #192]	; (8003a64 <pbut_task4ms+0xec>)
 80039a2:	005b      	lsls	r3, r3, #1
 80039a4:	4413      	add	r3, r2
 80039a6:	88da      	ldrh	r2, [r3, #6]
 80039a8:	79fb      	ldrb	r3, [r7, #7]
 80039aa:	0052      	lsls	r2, r2, #1
 80039ac:	b291      	uxth	r1, r2
 80039ae:	4a2d      	ldr	r2, [pc, #180]	; (8003a64 <pbut_task4ms+0xec>)
 80039b0:	005b      	lsls	r3, r3, #1
 80039b2:	4413      	add	r3, r2
 80039b4:	460a      	mov	r2, r1
 80039b6:	80da      	strh	r2, [r3, #6]
		if(input) pbut.debounce[i] |= 1u;
 80039b8:	88bb      	ldrh	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00d      	beq.n	80039da <pbut_task4ms+0x62>
 80039be:	79fb      	ldrb	r3, [r7, #7]
 80039c0:	4a28      	ldr	r2, [pc, #160]	; (8003a64 <pbut_task4ms+0xec>)
 80039c2:	005b      	lsls	r3, r3, #1
 80039c4:	4413      	add	r3, r2
 80039c6:	88da      	ldrh	r2, [r3, #6]
 80039c8:	79fb      	ldrb	r3, [r7, #7]
 80039ca:	f042 0201 	orr.w	r2, r2, #1
 80039ce:	b291      	uxth	r1, r2
 80039d0:	4a24      	ldr	r2, [pc, #144]	; (8003a64 <pbut_task4ms+0xec>)
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	460a      	mov	r2, r1
 80039d8:	80da      	strh	r2, [r3, #6]

		/* state */
		if(PBUT_STATE_UNKNOWN==pbut.state[i])
 80039da:	79fb      	ldrb	r3, [r7, #7]
 80039dc:	4a21      	ldr	r2, [pc, #132]	; (8003a64 <pbut_task4ms+0xec>)
 80039de:	4413      	add	r3, r2
 80039e0:	785b      	ldrb	r3, [r3, #1]
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d116      	bne.n	8003a14 <pbut_task4ms+0x9c>
		{
			if(pbut.initCnt)
 80039e6:	4b1f      	ldr	r3, [pc, #124]	; (8003a64 <pbut_task4ms+0xec>)
 80039e8:	781b      	ldrb	r3, [r3, #0]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d006      	beq.n	80039fc <pbut_task4ms+0x84>
			{
				pbut.initCnt--;
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <pbut_task4ms+0xec>)
 80039f0:	781b      	ldrb	r3, [r3, #0]
 80039f2:	3b01      	subs	r3, #1
 80039f4:	b2da      	uxtb	r2, r3
 80039f6:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <pbut_task4ms+0xec>)
 80039f8:	701a      	strb	r2, [r3, #0]
 80039fa:	e025      	b.n	8003a48 <pbut_task4ms+0xd0>
			}
			else
			{
				pbut.state[i] = input? PBUT_STATE_IDLE: PBUT_STATE_ACTIVE;
 80039fc:	88bb      	ldrh	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d001      	beq.n	8003a06 <pbut_task4ms+0x8e>
 8003a02:	2101      	movs	r1, #1
 8003a04:	e000      	b.n	8003a08 <pbut_task4ms+0x90>
 8003a06:	2102      	movs	r1, #2
 8003a08:	79fb      	ldrb	r3, [r7, #7]
 8003a0a:	4a16      	ldr	r2, [pc, #88]	; (8003a64 <pbut_task4ms+0xec>)
 8003a0c:	4413      	add	r3, r2
 8003a0e:	460a      	mov	r2, r1
 8003a10:	705a      	strb	r2, [r3, #1]
 8003a12:	e019      	b.n	8003a48 <pbut_task4ms+0xd0>
			}
		}
		else
		{
			/* debounce is 4ms x 7 = 28ms */
			if( (pbut.debounce[i] & 0xFF)==0x80 ) pbut.state[i] = PBUT_STATE_ACTIVE;
 8003a14:	79fb      	ldrb	r3, [r7, #7]
 8003a16:	4a13      	ldr	r2, [pc, #76]	; (8003a64 <pbut_task4ms+0xec>)
 8003a18:	005b      	lsls	r3, r3, #1
 8003a1a:	4413      	add	r3, r2
 8003a1c:	88db      	ldrh	r3, [r3, #6]
 8003a1e:	b2db      	uxtb	r3, r3
 8003a20:	2b80      	cmp	r3, #128	; 0x80
 8003a22:	d104      	bne.n	8003a2e <pbut_task4ms+0xb6>
 8003a24:	79fb      	ldrb	r3, [r7, #7]
 8003a26:	4a0f      	ldr	r2, [pc, #60]	; (8003a64 <pbut_task4ms+0xec>)
 8003a28:	4413      	add	r3, r2
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	705a      	strb	r2, [r3, #1]
			if( (pbut.debounce[i] & 0xFF)==0x7F ) pbut.state[i] = PBUT_STATE_IDLE;
 8003a2e:	79fb      	ldrb	r3, [r7, #7]
 8003a30:	4a0c      	ldr	r2, [pc, #48]	; (8003a64 <pbut_task4ms+0xec>)
 8003a32:	005b      	lsls	r3, r3, #1
 8003a34:	4413      	add	r3, r2
 8003a36:	88db      	ldrh	r3, [r3, #6]
 8003a38:	b2db      	uxtb	r3, r3
 8003a3a:	2b7f      	cmp	r3, #127	; 0x7f
 8003a3c:	d104      	bne.n	8003a48 <pbut_task4ms+0xd0>
 8003a3e:	79fb      	ldrb	r3, [r7, #7]
 8003a40:	4a08      	ldr	r2, [pc, #32]	; (8003a64 <pbut_task4ms+0xec>)
 8003a42:	4413      	add	r3, r2
 8003a44:	2201      	movs	r2, #1
 8003a46:	705a      	strb	r2, [r3, #1]
	for(i=0;i<4;i++)
 8003a48:	79fb      	ldrb	r3, [r7, #7]
 8003a4a:	3301      	adds	r3, #1
 8003a4c:	71fb      	strb	r3, [r7, #7]
 8003a4e:	79fb      	ldrb	r3, [r7, #7]
 8003a50:	2b03      	cmp	r3, #3
 8003a52:	d997      	bls.n	8003984 <pbut_task4ms+0xc>
		}
	}
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bc80      	pop	{r7}
 8003a5c:	4770      	bx	lr
 8003a5e:	bf00      	nop
 8003a60:	08004d38 	.word	0x08004d38
 8003a64:	2000019c 	.word	0x2000019c

08003a68 <pbut_getButton>:

PBUT_STATE pbut_getButton(uint8 index)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	b083      	sub	sp, #12
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	4603      	mov	r3, r0
 8003a70:	71fb      	strb	r3, [r7, #7]
	if(index<4) return pbut.state[index];
 8003a72:	79fb      	ldrb	r3, [r7, #7]
 8003a74:	2b03      	cmp	r3, #3
 8003a76:	d804      	bhi.n	8003a82 <pbut_getButton+0x1a>
 8003a78:	79fb      	ldrb	r3, [r7, #7]
 8003a7a:	4a05      	ldr	r2, [pc, #20]	; (8003a90 <pbut_getButton+0x28>)
 8003a7c:	4413      	add	r3, r2
 8003a7e:	785b      	ldrb	r3, [r3, #1]
 8003a80:	e000      	b.n	8003a84 <pbut_getButton+0x1c>
	return PBUT_STATE_UNKNOWN;
 8003a82:	2300      	movs	r3, #0
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	370c      	adds	r7, #12
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bc80      	pop	{r7}
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	2000019c 	.word	0x2000019c

08003a94 <syti_init>:

systime_t systime = {0};
uint32 syti_baseTime = 0u;

void syti_init(void)
{
 8003a94:	b480      	push	{r7}
 8003a96:	af00      	add	r7, sp, #0
	syti_baseTime = 0u;
 8003a98:	4b0a      	ldr	r3, [pc, #40]	; (8003ac4 <syti_init+0x30>)
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	601a      	str	r2, [r3, #0]
	systime.miniSec = 0u;
 8003a9e:	4b0a      	ldr	r3, [pc, #40]	; (8003ac8 <syti_init+0x34>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	80da      	strh	r2, [r3, #6]
	systime.second = 0u;
 8003aa4:	4b08      	ldr	r3, [pc, #32]	; (8003ac8 <syti_init+0x34>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	711a      	strb	r2, [r3, #4]
	systime.minute = 0u;
 8003aaa:	4b07      	ldr	r3, [pc, #28]	; (8003ac8 <syti_init+0x34>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	70da      	strb	r2, [r3, #3]
	systime.hour = 0u;
 8003ab0:	4b05      	ldr	r3, [pc, #20]	; (8003ac8 <syti_init+0x34>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	709a      	strb	r2, [r3, #2]
	systime.day = 0u;
 8003ab6:	4b04      	ldr	r3, [pc, #16]	; (8003ac8 <syti_init+0x34>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	801a      	strh	r2, [r3, #0]
}
 8003abc:	bf00      	nop
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	bc80      	pop	{r7}
 8003ac2:	4770      	bx	lr
 8003ac4:	2000009c 	.word	0x2000009c
 8003ac8:	20000094 	.word	0x20000094

08003acc <syti_task>:

void syti_task(void)
{
 8003acc:	b480      	push	{r7}
 8003ace:	af00      	add	r7, sp, #0
	syti_baseTime++;
 8003ad0:	4b24      	ldr	r3, [pc, #144]	; (8003b64 <syti_task+0x98>)
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	4a23      	ldr	r2, [pc, #140]	; (8003b64 <syti_task+0x98>)
 8003ad8:	6013      	str	r3, [r2, #0]
	systime.miniSec++;
 8003ada:	4b23      	ldr	r3, [pc, #140]	; (8003b68 <syti_task+0x9c>)
 8003adc:	88db      	ldrh	r3, [r3, #6]
 8003ade:	3301      	adds	r3, #1
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	4b21      	ldr	r3, [pc, #132]	; (8003b68 <syti_task+0x9c>)
 8003ae4:	80da      	strh	r2, [r3, #6]
	if(systime.miniSec>=1000u)
 8003ae6:	4b20      	ldr	r3, [pc, #128]	; (8003b68 <syti_task+0x9c>)
 8003ae8:	88db      	ldrh	r3, [r3, #6]
 8003aea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003aee:	d335      	bcc.n	8003b5c <syti_task+0x90>
	{
		systime.miniSec = 0u;
 8003af0:	4b1d      	ldr	r3, [pc, #116]	; (8003b68 <syti_task+0x9c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	80da      	strh	r2, [r3, #6]
		systime.second++;
 8003af6:	4b1c      	ldr	r3, [pc, #112]	; (8003b68 <syti_task+0x9c>)
 8003af8:	791b      	ldrb	r3, [r3, #4]
 8003afa:	3301      	adds	r3, #1
 8003afc:	b2da      	uxtb	r2, r3
 8003afe:	4b1a      	ldr	r3, [pc, #104]	; (8003b68 <syti_task+0x9c>)
 8003b00:	711a      	strb	r2, [r3, #4]
		if(systime.second>=60u)
 8003b02:	4b19      	ldr	r3, [pc, #100]	; (8003b68 <syti_task+0x9c>)
 8003b04:	791b      	ldrb	r3, [r3, #4]
 8003b06:	2b3b      	cmp	r3, #59	; 0x3b
 8003b08:	d928      	bls.n	8003b5c <syti_task+0x90>
		{
			systime.second = 0u;
 8003b0a:	4b17      	ldr	r3, [pc, #92]	; (8003b68 <syti_task+0x9c>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	711a      	strb	r2, [r3, #4]
			systime.minute++;
 8003b10:	4b15      	ldr	r3, [pc, #84]	; (8003b68 <syti_task+0x9c>)
 8003b12:	78db      	ldrb	r3, [r3, #3]
 8003b14:	3301      	adds	r3, #1
 8003b16:	b2da      	uxtb	r2, r3
 8003b18:	4b13      	ldr	r3, [pc, #76]	; (8003b68 <syti_task+0x9c>)
 8003b1a:	70da      	strb	r2, [r3, #3]
			if(systime.minute>=60u)
 8003b1c:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <syti_task+0x9c>)
 8003b1e:	78db      	ldrb	r3, [r3, #3]
 8003b20:	2b3b      	cmp	r3, #59	; 0x3b
 8003b22:	d91b      	bls.n	8003b5c <syti_task+0x90>
			{
				systime.minute = 0u;
 8003b24:	4b10      	ldr	r3, [pc, #64]	; (8003b68 <syti_task+0x9c>)
 8003b26:	2200      	movs	r2, #0
 8003b28:	70da      	strb	r2, [r3, #3]
				systime.hour++;
 8003b2a:	4b0f      	ldr	r3, [pc, #60]	; (8003b68 <syti_task+0x9c>)
 8003b2c:	789b      	ldrb	r3, [r3, #2]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	b2da      	uxtb	r2, r3
 8003b32:	4b0d      	ldr	r3, [pc, #52]	; (8003b68 <syti_task+0x9c>)
 8003b34:	709a      	strb	r2, [r3, #2]
				if(systime.hour>=24u)
 8003b36:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <syti_task+0x9c>)
 8003b38:	789b      	ldrb	r3, [r3, #2]
 8003b3a:	2b17      	cmp	r3, #23
 8003b3c:	d90e      	bls.n	8003b5c <syti_task+0x90>
				{
					systime.hour = 0u;
 8003b3e:	4b0a      	ldr	r3, [pc, #40]	; (8003b68 <syti_task+0x9c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	709a      	strb	r2, [r3, #2]
					if(systime.day<0xFFFF)
 8003b44:	4b08      	ldr	r3, [pc, #32]	; (8003b68 <syti_task+0x9c>)
 8003b46:	881b      	ldrh	r3, [r3, #0]
 8003b48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b4c:	4293      	cmp	r3, r2
 8003b4e:	d005      	beq.n	8003b5c <syti_task+0x90>
					{
						systime.day++;
 8003b50:	4b05      	ldr	r3, [pc, #20]	; (8003b68 <syti_task+0x9c>)
 8003b52:	881b      	ldrh	r3, [r3, #0]
 8003b54:	3301      	adds	r3, #1
 8003b56:	b29a      	uxth	r2, r3
 8003b58:	4b03      	ldr	r3, [pc, #12]	; (8003b68 <syti_task+0x9c>)
 8003b5a:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8003b5c:	bf00      	nop
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bc80      	pop	{r7}
 8003b62:	4770      	bx	lr
 8003b64:	2000009c 	.word	0x2000009c
 8003b68:	20000094 	.word	0x20000094

08003b6c <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
	uint8 txdata = ch;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	b2db      	uxtb	r3, r3
 8003b78:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &txdata, 1, 72000);
 8003b7a:	f107 010f 	add.w	r1, r7, #15
 8003b7e:	4b05      	ldr	r3, [pc, #20]	; (8003b94 <__io_putchar+0x28>)
 8003b80:	2201      	movs	r2, #1
 8003b82:	4805      	ldr	r0, [pc, #20]	; (8003b98 <__io_putchar+0x2c>)
 8003b84:	f7ff f93c 	bl	8002e00 <HAL_UART_Transmit>
	return ch;
 8003b88:	687b      	ldr	r3, [r7, #4]
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3710      	adds	r7, #16
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	00011940 	.word	0x00011940
 8003b98:	2000012c 	.word	0x2000012c

08003b9c <task_init>:
#include "BasicSoftware/PushButton/pushbutton.h"
#include "ApplicationSoftware/RotateLamp/rotatelamp.h"
#include "ApplicationSoftware/TestApp/testapp.h"

void task_init(void)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	af00      	add	r7, sp, #0
	syti_init();
 8003ba0:	f7ff ff78 	bl	8003a94 <syti_init>
	rola_init();
 8003ba4:	f7ff fdbc 	bl	8003720 <rola_init>
	pbut_init();
 8003ba8:	f7ff feaa 	bl	8003900 <pbut_init>
//	tkey_init();
	// app
	tapp_init();
 8003bac:	f7ff fe8e 	bl	80038cc <tapp_init>
}
 8003bb0:	bf00      	nop
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <task_1ms>:

void task_1ms(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
	syti_task();
 8003bb8:	f7ff ff88 	bl	8003acc <syti_task>
	rola_task1ms();
 8003bbc:	f7ff fdbc 	bl	8003738 <rola_task1ms>
}
 8003bc0:	bf00      	nop
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <task_2ms>:

void task_2ms(void)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	af00      	add	r7, sp, #0
}
 8003bc8:	bf00      	nop
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bc80      	pop	{r7}
 8003bce:	4770      	bx	lr

08003bd0 <task_4ms>:

void task_4ms(void)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	af00      	add	r7, sp, #0
	pbut_task4ms();
 8003bd4:	f7ff fed0 	bl	8003978 <pbut_task4ms>
}
 8003bd8:	bf00      	nop
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <task_8ms>:

void task_8ms(void)
{
 8003bdc:	b480      	push	{r7}
 8003bde:	af00      	add	r7, sp, #0
}
 8003be0:	bf00      	nop
 8003be2:	46bd      	mov	sp, r7
 8003be4:	bc80      	pop	{r7}
 8003be6:	4770      	bx	lr

08003be8 <task_16ms>:

void task_16ms(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr

08003bf4 <task_32ms>:

void task_32ms(void)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	af00      	add	r7, sp, #0
}
 8003bf8:	bf00      	nop
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <task_64ms>:

void task_64ms(void)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	af00      	add	r7, sp, #0
	rola_task();
 8003c04:	f7ff fe34 	bl	8003870 <rola_task>
}
 8003c08:	bf00      	nop
 8003c0a:	bd80      	pop	{r7, pc}

08003c0c <task_128ms>:

void task_128ms(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
//	tkey_task();
}
 8003c10:	bf00      	nop
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bc80      	pop	{r7}
 8003c16:	4770      	bx	lr

08003c18 <task_256ms>:

void task_256ms(void)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	af00      	add	r7, sp, #0
	tapp_task();
 8003c1c:	f7ff fe62 	bl	80038e4 <tapp_task>
}
 8003c20:	bf00      	nop
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <scheduler_init>:
scheduler_t;

static scheduler_t scheduler;

void scheduler_init(void)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	af00      	add	r7, sp, #0
	scheduler.input.tick = 0u;
 8003c28:	4b06      	ldr	r3, [pc, #24]	; (8003c44 <scheduler_init+0x20>)
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	701a      	strb	r2, [r3, #0]
	scheduler.local.tick = 0u;
 8003c2e:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <scheduler_init+0x20>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	705a      	strb	r2, [r3, #1]
	scheduler.local.count = 0u;
 8003c34:	4b03      	ldr	r3, [pc, #12]	; (8003c44 <scheduler_init+0x20>)
 8003c36:	2200      	movs	r2, #0
 8003c38:	709a      	strb	r2, [r3, #2]

	task_init();
 8003c3a:	f7ff ffaf 	bl	8003b9c <task_init>
}
 8003c3e:	bf00      	nop
 8003c40:	bd80      	pop	{r7, pc}
 8003c42:	bf00      	nop
 8003c44:	200000a0 	.word	0x200000a0

08003c48 <scheduler_main>:

void scheduler_main(void)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	af00      	add	r7, sp, #0
	for(;;)
	{
		if( scheduler.local.tick != scheduler.input.tick )
 8003c4c:	4b2c      	ldr	r3, [pc, #176]	; (8003d00 <scheduler_main+0xb8>)
 8003c4e:	785a      	ldrb	r2, [r3, #1]
 8003c50:	4b2b      	ldr	r3, [pc, #172]	; (8003d00 <scheduler_main+0xb8>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	429a      	cmp	r2, r3
 8003c56:	d0f9      	beq.n	8003c4c <scheduler_main+0x4>
		{
			/* sync */
			scheduler.local.tick = scheduler.input.tick;
 8003c58:	4b29      	ldr	r3, [pc, #164]	; (8003d00 <scheduler_main+0xb8>)
 8003c5a:	781a      	ldrb	r2, [r3, #0]
 8003c5c:	4b28      	ldr	r3, [pc, #160]	; (8003d00 <scheduler_main+0xb8>)
 8003c5e:	705a      	strb	r2, [r3, #1]

			/* schedule tasks */
			                                      task_1ms();
 8003c60:	f7ff ffa8 	bl	8003bb4 <task_1ms>
			     if( scheduler.local.count&0x01 ) task_2ms();
 8003c64:	4b26      	ldr	r3, [pc, #152]	; (8003d00 <scheduler_main+0xb8>)
 8003c66:	789b      	ldrb	r3, [r3, #2]
 8003c68:	f003 0301 	and.w	r3, r3, #1
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d002      	beq.n	8003c76 <scheduler_main+0x2e>
 8003c70:	f7ff ffa8 	bl	8003bc4 <task_2ms>
 8003c74:	e03c      	b.n	8003cf0 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x02 ) task_4ms();
 8003c76:	4b22      	ldr	r3, [pc, #136]	; (8003d00 <scheduler_main+0xb8>)
 8003c78:	789b      	ldrb	r3, [r3, #2]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d002      	beq.n	8003c88 <scheduler_main+0x40>
 8003c82:	f7ff ffa5 	bl	8003bd0 <task_4ms>
 8003c86:	e033      	b.n	8003cf0 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x04 ) task_8ms();
 8003c88:	4b1d      	ldr	r3, [pc, #116]	; (8003d00 <scheduler_main+0xb8>)
 8003c8a:	789b      	ldrb	r3, [r3, #2]
 8003c8c:	f003 0304 	and.w	r3, r3, #4
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d002      	beq.n	8003c9a <scheduler_main+0x52>
 8003c94:	f7ff ffa2 	bl	8003bdc <task_8ms>
 8003c98:	e02a      	b.n	8003cf0 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x08 ) task_16ms();
 8003c9a:	4b19      	ldr	r3, [pc, #100]	; (8003d00 <scheduler_main+0xb8>)
 8003c9c:	789b      	ldrb	r3, [r3, #2]
 8003c9e:	f003 0308 	and.w	r3, r3, #8
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d002      	beq.n	8003cac <scheduler_main+0x64>
 8003ca6:	f7ff ff9f 	bl	8003be8 <task_16ms>
 8003caa:	e021      	b.n	8003cf0 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x10 ) task_32ms();
 8003cac:	4b14      	ldr	r3, [pc, #80]	; (8003d00 <scheduler_main+0xb8>)
 8003cae:	789b      	ldrb	r3, [r3, #2]
 8003cb0:	f003 0310 	and.w	r3, r3, #16
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d002      	beq.n	8003cbe <scheduler_main+0x76>
 8003cb8:	f7ff ff9c 	bl	8003bf4 <task_32ms>
 8003cbc:	e018      	b.n	8003cf0 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x20 ) task_64ms();
 8003cbe:	4b10      	ldr	r3, [pc, #64]	; (8003d00 <scheduler_main+0xb8>)
 8003cc0:	789b      	ldrb	r3, [r3, #2]
 8003cc2:	f003 0320 	and.w	r3, r3, #32
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d002      	beq.n	8003cd0 <scheduler_main+0x88>
 8003cca:	f7ff ff99 	bl	8003c00 <task_64ms>
 8003cce:	e00f      	b.n	8003cf0 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x40 ) task_128ms();
 8003cd0:	4b0b      	ldr	r3, [pc, #44]	; (8003d00 <scheduler_main+0xb8>)
 8003cd2:	789b      	ldrb	r3, [r3, #2]
 8003cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <scheduler_main+0x9a>
 8003cdc:	f7ff ff96 	bl	8003c0c <task_128ms>
 8003ce0:	e006      	b.n	8003cf0 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x80 ) task_256ms();
 8003ce2:	4b07      	ldr	r3, [pc, #28]	; (8003d00 <scheduler_main+0xb8>)
 8003ce4:	789b      	ldrb	r3, [r3, #2]
 8003ce6:	b25b      	sxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	da01      	bge.n	8003cf0 <scheduler_main+0xa8>
 8003cec:	f7ff ff94 	bl	8003c18 <task_256ms>
			else ;

			/* count up */
			scheduler.local.count++;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <scheduler_main+0xb8>)
 8003cf2:	789b      	ldrb	r3, [r3, #2]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	b2da      	uxtb	r2, r3
 8003cf8:	4b01      	ldr	r3, [pc, #4]	; (8003d00 <scheduler_main+0xb8>)
 8003cfa:	709a      	strb	r2, [r3, #2]
		if( scheduler.local.tick != scheduler.input.tick )
 8003cfc:	e7a6      	b.n	8003c4c <scheduler_main+0x4>
 8003cfe:	bf00      	nop
 8003d00:	200000a0 	.word	0x200000a0

08003d04 <scheduler_ei_tickUp_ISR>:
		}
	}
}

void scheduler_ei_tickUp_ISR(void)
{
 8003d04:	b480      	push	{r7}
 8003d06:	af00      	add	r7, sp, #0
	scheduler.input.tick++;
 8003d08:	4b04      	ldr	r3, [pc, #16]	; (8003d1c <scheduler_ei_tickUp_ISR+0x18>)
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b2da      	uxtb	r2, r3
 8003d10:	4b02      	ldr	r3, [pc, #8]	; (8003d1c <scheduler_ei_tickUp_ISR+0x18>)
 8003d12:	701a      	strb	r2, [r3, #0]
}
 8003d14:	bf00      	nop
 8003d16:	46bd      	mov	sp, r7
 8003d18:	bc80      	pop	{r7}
 8003d1a:	4770      	bx	lr
 8003d1c:	200000a0 	.word	0x200000a0

08003d20 <__errno>:
 8003d20:	4b01      	ldr	r3, [pc, #4]	; (8003d28 <__errno+0x8>)
 8003d22:	6818      	ldr	r0, [r3, #0]
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	2000000c 	.word	0x2000000c

08003d2c <__libc_init_array>:
 8003d2c:	b570      	push	{r4, r5, r6, lr}
 8003d2e:	2500      	movs	r5, #0
 8003d30:	4e0c      	ldr	r6, [pc, #48]	; (8003d64 <__libc_init_array+0x38>)
 8003d32:	4c0d      	ldr	r4, [pc, #52]	; (8003d68 <__libc_init_array+0x3c>)
 8003d34:	1ba4      	subs	r4, r4, r6
 8003d36:	10a4      	asrs	r4, r4, #2
 8003d38:	42a5      	cmp	r5, r4
 8003d3a:	d109      	bne.n	8003d50 <__libc_init_array+0x24>
 8003d3c:	f000 ff10 	bl	8004b60 <_init>
 8003d40:	2500      	movs	r5, #0
 8003d42:	4e0a      	ldr	r6, [pc, #40]	; (8003d6c <__libc_init_array+0x40>)
 8003d44:	4c0a      	ldr	r4, [pc, #40]	; (8003d70 <__libc_init_array+0x44>)
 8003d46:	1ba4      	subs	r4, r4, r6
 8003d48:	10a4      	asrs	r4, r4, #2
 8003d4a:	42a5      	cmp	r5, r4
 8003d4c:	d105      	bne.n	8003d5a <__libc_init_array+0x2e>
 8003d4e:	bd70      	pop	{r4, r5, r6, pc}
 8003d50:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d54:	4798      	blx	r3
 8003d56:	3501      	adds	r5, #1
 8003d58:	e7ee      	b.n	8003d38 <__libc_init_array+0xc>
 8003d5a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003d5e:	4798      	blx	r3
 8003d60:	3501      	adds	r5, #1
 8003d62:	e7f2      	b.n	8003d4a <__libc_init_array+0x1e>
 8003d64:	08004df0 	.word	0x08004df0
 8003d68:	08004df0 	.word	0x08004df0
 8003d6c:	08004df0 	.word	0x08004df0
 8003d70:	08004df4 	.word	0x08004df4

08003d74 <memset>:
 8003d74:	4603      	mov	r3, r0
 8003d76:	4402      	add	r2, r0
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d100      	bne.n	8003d7e <memset+0xa>
 8003d7c:	4770      	bx	lr
 8003d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003d82:	e7f9      	b.n	8003d78 <memset+0x4>

08003d84 <iprintf>:
 8003d84:	b40f      	push	{r0, r1, r2, r3}
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <iprintf+0x2c>)
 8003d88:	b513      	push	{r0, r1, r4, lr}
 8003d8a:	681c      	ldr	r4, [r3, #0]
 8003d8c:	b124      	cbz	r4, 8003d98 <iprintf+0x14>
 8003d8e:	69a3      	ldr	r3, [r4, #24]
 8003d90:	b913      	cbnz	r3, 8003d98 <iprintf+0x14>
 8003d92:	4620      	mov	r0, r4
 8003d94:	f000 f84e 	bl	8003e34 <__sinit>
 8003d98:	ab05      	add	r3, sp, #20
 8003d9a:	9a04      	ldr	r2, [sp, #16]
 8003d9c:	68a1      	ldr	r1, [r4, #8]
 8003d9e:	4620      	mov	r0, r4
 8003da0:	9301      	str	r3, [sp, #4]
 8003da2:	f000 f953 	bl	800404c <_vfiprintf_r>
 8003da6:	b002      	add	sp, #8
 8003da8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003dac:	b004      	add	sp, #16
 8003dae:	4770      	bx	lr
 8003db0:	2000000c 	.word	0x2000000c

08003db4 <std>:
 8003db4:	2300      	movs	r3, #0
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
 8003dba:	e9c0 3300 	strd	r3, r3, [r0]
 8003dbe:	6083      	str	r3, [r0, #8]
 8003dc0:	8181      	strh	r1, [r0, #12]
 8003dc2:	6643      	str	r3, [r0, #100]	; 0x64
 8003dc4:	81c2      	strh	r2, [r0, #14]
 8003dc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dca:	6183      	str	r3, [r0, #24]
 8003dcc:	4619      	mov	r1, r3
 8003dce:	2208      	movs	r2, #8
 8003dd0:	305c      	adds	r0, #92	; 0x5c
 8003dd2:	f7ff ffcf 	bl	8003d74 <memset>
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <std+0x38>)
 8003dd8:	6224      	str	r4, [r4, #32]
 8003dda:	6263      	str	r3, [r4, #36]	; 0x24
 8003ddc:	4b04      	ldr	r3, [pc, #16]	; (8003df0 <std+0x3c>)
 8003dde:	62a3      	str	r3, [r4, #40]	; 0x28
 8003de0:	4b04      	ldr	r3, [pc, #16]	; (8003df4 <std+0x40>)
 8003de2:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003de4:	4b04      	ldr	r3, [pc, #16]	; (8003df8 <std+0x44>)
 8003de6:	6323      	str	r3, [r4, #48]	; 0x30
 8003de8:	bd10      	pop	{r4, pc}
 8003dea:	bf00      	nop
 8003dec:	080045a9 	.word	0x080045a9
 8003df0:	080045cb 	.word	0x080045cb
 8003df4:	08004603 	.word	0x08004603
 8003df8:	08004627 	.word	0x08004627

08003dfc <_cleanup_r>:
 8003dfc:	4901      	ldr	r1, [pc, #4]	; (8003e04 <_cleanup_r+0x8>)
 8003dfe:	f000 b885 	b.w	8003f0c <_fwalk_reent>
 8003e02:	bf00      	nop
 8003e04:	08004901 	.word	0x08004901

08003e08 <__sfmoreglue>:
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	2568      	movs	r5, #104	; 0x68
 8003e0c:	1e4a      	subs	r2, r1, #1
 8003e0e:	4355      	muls	r5, r2
 8003e10:	460e      	mov	r6, r1
 8003e12:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e16:	f000 f897 	bl	8003f48 <_malloc_r>
 8003e1a:	4604      	mov	r4, r0
 8003e1c:	b140      	cbz	r0, 8003e30 <__sfmoreglue+0x28>
 8003e1e:	2100      	movs	r1, #0
 8003e20:	e9c0 1600 	strd	r1, r6, [r0]
 8003e24:	300c      	adds	r0, #12
 8003e26:	60a0      	str	r0, [r4, #8]
 8003e28:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e2c:	f7ff ffa2 	bl	8003d74 <memset>
 8003e30:	4620      	mov	r0, r4
 8003e32:	bd70      	pop	{r4, r5, r6, pc}

08003e34 <__sinit>:
 8003e34:	6983      	ldr	r3, [r0, #24]
 8003e36:	b510      	push	{r4, lr}
 8003e38:	4604      	mov	r4, r0
 8003e3a:	bb33      	cbnz	r3, 8003e8a <__sinit+0x56>
 8003e3c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003e40:	6503      	str	r3, [r0, #80]	; 0x50
 8003e42:	4b12      	ldr	r3, [pc, #72]	; (8003e8c <__sinit+0x58>)
 8003e44:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <__sinit+0x5c>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	6282      	str	r2, [r0, #40]	; 0x28
 8003e4a:	4298      	cmp	r0, r3
 8003e4c:	bf04      	itt	eq
 8003e4e:	2301      	moveq	r3, #1
 8003e50:	6183      	streq	r3, [r0, #24]
 8003e52:	f000 f81f 	bl	8003e94 <__sfp>
 8003e56:	6060      	str	r0, [r4, #4]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 f81b 	bl	8003e94 <__sfp>
 8003e5e:	60a0      	str	r0, [r4, #8]
 8003e60:	4620      	mov	r0, r4
 8003e62:	f000 f817 	bl	8003e94 <__sfp>
 8003e66:	2200      	movs	r2, #0
 8003e68:	60e0      	str	r0, [r4, #12]
 8003e6a:	2104      	movs	r1, #4
 8003e6c:	6860      	ldr	r0, [r4, #4]
 8003e6e:	f7ff ffa1 	bl	8003db4 <std>
 8003e72:	2201      	movs	r2, #1
 8003e74:	2109      	movs	r1, #9
 8003e76:	68a0      	ldr	r0, [r4, #8]
 8003e78:	f7ff ff9c 	bl	8003db4 <std>
 8003e7c:	2202      	movs	r2, #2
 8003e7e:	2112      	movs	r1, #18
 8003e80:	68e0      	ldr	r0, [r4, #12]
 8003e82:	f7ff ff97 	bl	8003db4 <std>
 8003e86:	2301      	movs	r3, #1
 8003e88:	61a3      	str	r3, [r4, #24]
 8003e8a:	bd10      	pop	{r4, pc}
 8003e8c:	08004d58 	.word	0x08004d58
 8003e90:	08003dfd 	.word	0x08003dfd

08003e94 <__sfp>:
 8003e94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e96:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <__sfp+0x70>)
 8003e98:	4607      	mov	r7, r0
 8003e9a:	681e      	ldr	r6, [r3, #0]
 8003e9c:	69b3      	ldr	r3, [r6, #24]
 8003e9e:	b913      	cbnz	r3, 8003ea6 <__sfp+0x12>
 8003ea0:	4630      	mov	r0, r6
 8003ea2:	f7ff ffc7 	bl	8003e34 <__sinit>
 8003ea6:	3648      	adds	r6, #72	; 0x48
 8003ea8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003eac:	3b01      	subs	r3, #1
 8003eae:	d503      	bpl.n	8003eb8 <__sfp+0x24>
 8003eb0:	6833      	ldr	r3, [r6, #0]
 8003eb2:	b133      	cbz	r3, 8003ec2 <__sfp+0x2e>
 8003eb4:	6836      	ldr	r6, [r6, #0]
 8003eb6:	e7f7      	b.n	8003ea8 <__sfp+0x14>
 8003eb8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003ebc:	b16d      	cbz	r5, 8003eda <__sfp+0x46>
 8003ebe:	3468      	adds	r4, #104	; 0x68
 8003ec0:	e7f4      	b.n	8003eac <__sfp+0x18>
 8003ec2:	2104      	movs	r1, #4
 8003ec4:	4638      	mov	r0, r7
 8003ec6:	f7ff ff9f 	bl	8003e08 <__sfmoreglue>
 8003eca:	6030      	str	r0, [r6, #0]
 8003ecc:	2800      	cmp	r0, #0
 8003ece:	d1f1      	bne.n	8003eb4 <__sfp+0x20>
 8003ed0:	230c      	movs	r3, #12
 8003ed2:	4604      	mov	r4, r0
 8003ed4:	603b      	str	r3, [r7, #0]
 8003ed6:	4620      	mov	r0, r4
 8003ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003eda:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <__sfp+0x74>)
 8003edc:	6665      	str	r5, [r4, #100]	; 0x64
 8003ede:	e9c4 5500 	strd	r5, r5, [r4]
 8003ee2:	60a5      	str	r5, [r4, #8]
 8003ee4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003ee8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003eec:	2208      	movs	r2, #8
 8003eee:	4629      	mov	r1, r5
 8003ef0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ef4:	f7ff ff3e 	bl	8003d74 <memset>
 8003ef8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003efc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003f00:	e7e9      	b.n	8003ed6 <__sfp+0x42>
 8003f02:	bf00      	nop
 8003f04:	08004d58 	.word	0x08004d58
 8003f08:	ffff0001 	.word	0xffff0001

08003f0c <_fwalk_reent>:
 8003f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f10:	4680      	mov	r8, r0
 8003f12:	4689      	mov	r9, r1
 8003f14:	2600      	movs	r6, #0
 8003f16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f1a:	b914      	cbnz	r4, 8003f22 <_fwalk_reent+0x16>
 8003f1c:	4630      	mov	r0, r6
 8003f1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f22:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003f26:	3f01      	subs	r7, #1
 8003f28:	d501      	bpl.n	8003f2e <_fwalk_reent+0x22>
 8003f2a:	6824      	ldr	r4, [r4, #0]
 8003f2c:	e7f5      	b.n	8003f1a <_fwalk_reent+0xe>
 8003f2e:	89ab      	ldrh	r3, [r5, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d907      	bls.n	8003f44 <_fwalk_reent+0x38>
 8003f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	d003      	beq.n	8003f44 <_fwalk_reent+0x38>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4640      	mov	r0, r8
 8003f40:	47c8      	blx	r9
 8003f42:	4306      	orrs	r6, r0
 8003f44:	3568      	adds	r5, #104	; 0x68
 8003f46:	e7ee      	b.n	8003f26 <_fwalk_reent+0x1a>

08003f48 <_malloc_r>:
 8003f48:	b570      	push	{r4, r5, r6, lr}
 8003f4a:	1ccd      	adds	r5, r1, #3
 8003f4c:	f025 0503 	bic.w	r5, r5, #3
 8003f50:	3508      	adds	r5, #8
 8003f52:	2d0c      	cmp	r5, #12
 8003f54:	bf38      	it	cc
 8003f56:	250c      	movcc	r5, #12
 8003f58:	2d00      	cmp	r5, #0
 8003f5a:	4606      	mov	r6, r0
 8003f5c:	db01      	blt.n	8003f62 <_malloc_r+0x1a>
 8003f5e:	42a9      	cmp	r1, r5
 8003f60:	d903      	bls.n	8003f6a <_malloc_r+0x22>
 8003f62:	230c      	movs	r3, #12
 8003f64:	6033      	str	r3, [r6, #0]
 8003f66:	2000      	movs	r0, #0
 8003f68:	bd70      	pop	{r4, r5, r6, pc}
 8003f6a:	f000 fd77 	bl	8004a5c <__malloc_lock>
 8003f6e:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <_malloc_r+0xac>)
 8003f70:	6814      	ldr	r4, [r2, #0]
 8003f72:	4621      	mov	r1, r4
 8003f74:	b991      	cbnz	r1, 8003f9c <_malloc_r+0x54>
 8003f76:	4c20      	ldr	r4, [pc, #128]	; (8003ff8 <_malloc_r+0xb0>)
 8003f78:	6823      	ldr	r3, [r4, #0]
 8003f7a:	b91b      	cbnz	r3, 8003f84 <_malloc_r+0x3c>
 8003f7c:	4630      	mov	r0, r6
 8003f7e:	f000 fb03 	bl	8004588 <_sbrk_r>
 8003f82:	6020      	str	r0, [r4, #0]
 8003f84:	4629      	mov	r1, r5
 8003f86:	4630      	mov	r0, r6
 8003f88:	f000 fafe 	bl	8004588 <_sbrk_r>
 8003f8c:	1c43      	adds	r3, r0, #1
 8003f8e:	d124      	bne.n	8003fda <_malloc_r+0x92>
 8003f90:	230c      	movs	r3, #12
 8003f92:	4630      	mov	r0, r6
 8003f94:	6033      	str	r3, [r6, #0]
 8003f96:	f000 fd62 	bl	8004a5e <__malloc_unlock>
 8003f9a:	e7e4      	b.n	8003f66 <_malloc_r+0x1e>
 8003f9c:	680b      	ldr	r3, [r1, #0]
 8003f9e:	1b5b      	subs	r3, r3, r5
 8003fa0:	d418      	bmi.n	8003fd4 <_malloc_r+0x8c>
 8003fa2:	2b0b      	cmp	r3, #11
 8003fa4:	d90f      	bls.n	8003fc6 <_malloc_r+0x7e>
 8003fa6:	600b      	str	r3, [r1, #0]
 8003fa8:	18cc      	adds	r4, r1, r3
 8003faa:	50cd      	str	r5, [r1, r3]
 8003fac:	4630      	mov	r0, r6
 8003fae:	f000 fd56 	bl	8004a5e <__malloc_unlock>
 8003fb2:	f104 000b 	add.w	r0, r4, #11
 8003fb6:	1d23      	adds	r3, r4, #4
 8003fb8:	f020 0007 	bic.w	r0, r0, #7
 8003fbc:	1ac3      	subs	r3, r0, r3
 8003fbe:	d0d3      	beq.n	8003f68 <_malloc_r+0x20>
 8003fc0:	425a      	negs	r2, r3
 8003fc2:	50e2      	str	r2, [r4, r3]
 8003fc4:	e7d0      	b.n	8003f68 <_malloc_r+0x20>
 8003fc6:	684b      	ldr	r3, [r1, #4]
 8003fc8:	428c      	cmp	r4, r1
 8003fca:	bf16      	itet	ne
 8003fcc:	6063      	strne	r3, [r4, #4]
 8003fce:	6013      	streq	r3, [r2, #0]
 8003fd0:	460c      	movne	r4, r1
 8003fd2:	e7eb      	b.n	8003fac <_malloc_r+0x64>
 8003fd4:	460c      	mov	r4, r1
 8003fd6:	6849      	ldr	r1, [r1, #4]
 8003fd8:	e7cc      	b.n	8003f74 <_malloc_r+0x2c>
 8003fda:	1cc4      	adds	r4, r0, #3
 8003fdc:	f024 0403 	bic.w	r4, r4, #3
 8003fe0:	42a0      	cmp	r0, r4
 8003fe2:	d005      	beq.n	8003ff0 <_malloc_r+0xa8>
 8003fe4:	1a21      	subs	r1, r4, r0
 8003fe6:	4630      	mov	r0, r6
 8003fe8:	f000 face 	bl	8004588 <_sbrk_r>
 8003fec:	3001      	adds	r0, #1
 8003fee:	d0cf      	beq.n	8003f90 <_malloc_r+0x48>
 8003ff0:	6025      	str	r5, [r4, #0]
 8003ff2:	e7db      	b.n	8003fac <_malloc_r+0x64>
 8003ff4:	200000a4 	.word	0x200000a4
 8003ff8:	200000a8 	.word	0x200000a8

08003ffc <__sfputc_r>:
 8003ffc:	6893      	ldr	r3, [r2, #8]
 8003ffe:	b410      	push	{r4}
 8004000:	3b01      	subs	r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	6093      	str	r3, [r2, #8]
 8004006:	da07      	bge.n	8004018 <__sfputc_r+0x1c>
 8004008:	6994      	ldr	r4, [r2, #24]
 800400a:	42a3      	cmp	r3, r4
 800400c:	db01      	blt.n	8004012 <__sfputc_r+0x16>
 800400e:	290a      	cmp	r1, #10
 8004010:	d102      	bne.n	8004018 <__sfputc_r+0x1c>
 8004012:	bc10      	pop	{r4}
 8004014:	f000 bb0c 	b.w	8004630 <__swbuf_r>
 8004018:	6813      	ldr	r3, [r2, #0]
 800401a:	1c58      	adds	r0, r3, #1
 800401c:	6010      	str	r0, [r2, #0]
 800401e:	7019      	strb	r1, [r3, #0]
 8004020:	4608      	mov	r0, r1
 8004022:	bc10      	pop	{r4}
 8004024:	4770      	bx	lr

08004026 <__sfputs_r>:
 8004026:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004028:	4606      	mov	r6, r0
 800402a:	460f      	mov	r7, r1
 800402c:	4614      	mov	r4, r2
 800402e:	18d5      	adds	r5, r2, r3
 8004030:	42ac      	cmp	r4, r5
 8004032:	d101      	bne.n	8004038 <__sfputs_r+0x12>
 8004034:	2000      	movs	r0, #0
 8004036:	e007      	b.n	8004048 <__sfputs_r+0x22>
 8004038:	463a      	mov	r2, r7
 800403a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800403e:	4630      	mov	r0, r6
 8004040:	f7ff ffdc 	bl	8003ffc <__sfputc_r>
 8004044:	1c43      	adds	r3, r0, #1
 8004046:	d1f3      	bne.n	8004030 <__sfputs_r+0xa>
 8004048:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800404c <_vfiprintf_r>:
 800404c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004050:	460c      	mov	r4, r1
 8004052:	b09d      	sub	sp, #116	; 0x74
 8004054:	4617      	mov	r7, r2
 8004056:	461d      	mov	r5, r3
 8004058:	4606      	mov	r6, r0
 800405a:	b118      	cbz	r0, 8004064 <_vfiprintf_r+0x18>
 800405c:	6983      	ldr	r3, [r0, #24]
 800405e:	b90b      	cbnz	r3, 8004064 <_vfiprintf_r+0x18>
 8004060:	f7ff fee8 	bl	8003e34 <__sinit>
 8004064:	4b7c      	ldr	r3, [pc, #496]	; (8004258 <_vfiprintf_r+0x20c>)
 8004066:	429c      	cmp	r4, r3
 8004068:	d158      	bne.n	800411c <_vfiprintf_r+0xd0>
 800406a:	6874      	ldr	r4, [r6, #4]
 800406c:	89a3      	ldrh	r3, [r4, #12]
 800406e:	0718      	lsls	r0, r3, #28
 8004070:	d55e      	bpl.n	8004130 <_vfiprintf_r+0xe4>
 8004072:	6923      	ldr	r3, [r4, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d05b      	beq.n	8004130 <_vfiprintf_r+0xe4>
 8004078:	2300      	movs	r3, #0
 800407a:	9309      	str	r3, [sp, #36]	; 0x24
 800407c:	2320      	movs	r3, #32
 800407e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004082:	2330      	movs	r3, #48	; 0x30
 8004084:	f04f 0b01 	mov.w	fp, #1
 8004088:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800408c:	9503      	str	r5, [sp, #12]
 800408e:	46b8      	mov	r8, r7
 8004090:	4645      	mov	r5, r8
 8004092:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004096:	b10b      	cbz	r3, 800409c <_vfiprintf_r+0x50>
 8004098:	2b25      	cmp	r3, #37	; 0x25
 800409a:	d154      	bne.n	8004146 <_vfiprintf_r+0xfa>
 800409c:	ebb8 0a07 	subs.w	sl, r8, r7
 80040a0:	d00b      	beq.n	80040ba <_vfiprintf_r+0x6e>
 80040a2:	4653      	mov	r3, sl
 80040a4:	463a      	mov	r2, r7
 80040a6:	4621      	mov	r1, r4
 80040a8:	4630      	mov	r0, r6
 80040aa:	f7ff ffbc 	bl	8004026 <__sfputs_r>
 80040ae:	3001      	adds	r0, #1
 80040b0:	f000 80c2 	beq.w	8004238 <_vfiprintf_r+0x1ec>
 80040b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040b6:	4453      	add	r3, sl
 80040b8:	9309      	str	r3, [sp, #36]	; 0x24
 80040ba:	f898 3000 	ldrb.w	r3, [r8]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	f000 80ba 	beq.w	8004238 <_vfiprintf_r+0x1ec>
 80040c4:	2300      	movs	r3, #0
 80040c6:	f04f 32ff 	mov.w	r2, #4294967295
 80040ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ce:	9304      	str	r3, [sp, #16]
 80040d0:	9307      	str	r3, [sp, #28]
 80040d2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040d6:	931a      	str	r3, [sp, #104]	; 0x68
 80040d8:	46a8      	mov	r8, r5
 80040da:	2205      	movs	r2, #5
 80040dc:	f818 1b01 	ldrb.w	r1, [r8], #1
 80040e0:	485e      	ldr	r0, [pc, #376]	; (800425c <_vfiprintf_r+0x210>)
 80040e2:	f000 fcad 	bl	8004a40 <memchr>
 80040e6:	9b04      	ldr	r3, [sp, #16]
 80040e8:	bb78      	cbnz	r0, 800414a <_vfiprintf_r+0xfe>
 80040ea:	06d9      	lsls	r1, r3, #27
 80040ec:	bf44      	itt	mi
 80040ee:	2220      	movmi	r2, #32
 80040f0:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040f4:	071a      	lsls	r2, r3, #28
 80040f6:	bf44      	itt	mi
 80040f8:	222b      	movmi	r2, #43	; 0x2b
 80040fa:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80040fe:	782a      	ldrb	r2, [r5, #0]
 8004100:	2a2a      	cmp	r2, #42	; 0x2a
 8004102:	d02a      	beq.n	800415a <_vfiprintf_r+0x10e>
 8004104:	46a8      	mov	r8, r5
 8004106:	2000      	movs	r0, #0
 8004108:	250a      	movs	r5, #10
 800410a:	9a07      	ldr	r2, [sp, #28]
 800410c:	4641      	mov	r1, r8
 800410e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004112:	3b30      	subs	r3, #48	; 0x30
 8004114:	2b09      	cmp	r3, #9
 8004116:	d969      	bls.n	80041ec <_vfiprintf_r+0x1a0>
 8004118:	b360      	cbz	r0, 8004174 <_vfiprintf_r+0x128>
 800411a:	e024      	b.n	8004166 <_vfiprintf_r+0x11a>
 800411c:	4b50      	ldr	r3, [pc, #320]	; (8004260 <_vfiprintf_r+0x214>)
 800411e:	429c      	cmp	r4, r3
 8004120:	d101      	bne.n	8004126 <_vfiprintf_r+0xda>
 8004122:	68b4      	ldr	r4, [r6, #8]
 8004124:	e7a2      	b.n	800406c <_vfiprintf_r+0x20>
 8004126:	4b4f      	ldr	r3, [pc, #316]	; (8004264 <_vfiprintf_r+0x218>)
 8004128:	429c      	cmp	r4, r3
 800412a:	bf08      	it	eq
 800412c:	68f4      	ldreq	r4, [r6, #12]
 800412e:	e79d      	b.n	800406c <_vfiprintf_r+0x20>
 8004130:	4621      	mov	r1, r4
 8004132:	4630      	mov	r0, r6
 8004134:	f000 fae0 	bl	80046f8 <__swsetup_r>
 8004138:	2800      	cmp	r0, #0
 800413a:	d09d      	beq.n	8004078 <_vfiprintf_r+0x2c>
 800413c:	f04f 30ff 	mov.w	r0, #4294967295
 8004140:	b01d      	add	sp, #116	; 0x74
 8004142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004146:	46a8      	mov	r8, r5
 8004148:	e7a2      	b.n	8004090 <_vfiprintf_r+0x44>
 800414a:	4a44      	ldr	r2, [pc, #272]	; (800425c <_vfiprintf_r+0x210>)
 800414c:	4645      	mov	r5, r8
 800414e:	1a80      	subs	r0, r0, r2
 8004150:	fa0b f000 	lsl.w	r0, fp, r0
 8004154:	4318      	orrs	r0, r3
 8004156:	9004      	str	r0, [sp, #16]
 8004158:	e7be      	b.n	80040d8 <_vfiprintf_r+0x8c>
 800415a:	9a03      	ldr	r2, [sp, #12]
 800415c:	1d11      	adds	r1, r2, #4
 800415e:	6812      	ldr	r2, [r2, #0]
 8004160:	9103      	str	r1, [sp, #12]
 8004162:	2a00      	cmp	r2, #0
 8004164:	db01      	blt.n	800416a <_vfiprintf_r+0x11e>
 8004166:	9207      	str	r2, [sp, #28]
 8004168:	e004      	b.n	8004174 <_vfiprintf_r+0x128>
 800416a:	4252      	negs	r2, r2
 800416c:	f043 0302 	orr.w	r3, r3, #2
 8004170:	9207      	str	r2, [sp, #28]
 8004172:	9304      	str	r3, [sp, #16]
 8004174:	f898 3000 	ldrb.w	r3, [r8]
 8004178:	2b2e      	cmp	r3, #46	; 0x2e
 800417a:	d10e      	bne.n	800419a <_vfiprintf_r+0x14e>
 800417c:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004180:	2b2a      	cmp	r3, #42	; 0x2a
 8004182:	d138      	bne.n	80041f6 <_vfiprintf_r+0x1aa>
 8004184:	9b03      	ldr	r3, [sp, #12]
 8004186:	f108 0802 	add.w	r8, r8, #2
 800418a:	1d1a      	adds	r2, r3, #4
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	9203      	str	r2, [sp, #12]
 8004190:	2b00      	cmp	r3, #0
 8004192:	bfb8      	it	lt
 8004194:	f04f 33ff 	movlt.w	r3, #4294967295
 8004198:	9305      	str	r3, [sp, #20]
 800419a:	4d33      	ldr	r5, [pc, #204]	; (8004268 <_vfiprintf_r+0x21c>)
 800419c:	2203      	movs	r2, #3
 800419e:	f898 1000 	ldrb.w	r1, [r8]
 80041a2:	4628      	mov	r0, r5
 80041a4:	f000 fc4c 	bl	8004a40 <memchr>
 80041a8:	b140      	cbz	r0, 80041bc <_vfiprintf_r+0x170>
 80041aa:	2340      	movs	r3, #64	; 0x40
 80041ac:	1b40      	subs	r0, r0, r5
 80041ae:	fa03 f000 	lsl.w	r0, r3, r0
 80041b2:	9b04      	ldr	r3, [sp, #16]
 80041b4:	f108 0801 	add.w	r8, r8, #1
 80041b8:	4303      	orrs	r3, r0
 80041ba:	9304      	str	r3, [sp, #16]
 80041bc:	f898 1000 	ldrb.w	r1, [r8]
 80041c0:	2206      	movs	r2, #6
 80041c2:	482a      	ldr	r0, [pc, #168]	; (800426c <_vfiprintf_r+0x220>)
 80041c4:	f108 0701 	add.w	r7, r8, #1
 80041c8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041cc:	f000 fc38 	bl	8004a40 <memchr>
 80041d0:	2800      	cmp	r0, #0
 80041d2:	d037      	beq.n	8004244 <_vfiprintf_r+0x1f8>
 80041d4:	4b26      	ldr	r3, [pc, #152]	; (8004270 <_vfiprintf_r+0x224>)
 80041d6:	bb1b      	cbnz	r3, 8004220 <_vfiprintf_r+0x1d4>
 80041d8:	9b03      	ldr	r3, [sp, #12]
 80041da:	3307      	adds	r3, #7
 80041dc:	f023 0307 	bic.w	r3, r3, #7
 80041e0:	3308      	adds	r3, #8
 80041e2:	9303      	str	r3, [sp, #12]
 80041e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041e6:	444b      	add	r3, r9
 80041e8:	9309      	str	r3, [sp, #36]	; 0x24
 80041ea:	e750      	b.n	800408e <_vfiprintf_r+0x42>
 80041ec:	fb05 3202 	mla	r2, r5, r2, r3
 80041f0:	2001      	movs	r0, #1
 80041f2:	4688      	mov	r8, r1
 80041f4:	e78a      	b.n	800410c <_vfiprintf_r+0xc0>
 80041f6:	2300      	movs	r3, #0
 80041f8:	250a      	movs	r5, #10
 80041fa:	4619      	mov	r1, r3
 80041fc:	f108 0801 	add.w	r8, r8, #1
 8004200:	9305      	str	r3, [sp, #20]
 8004202:	4640      	mov	r0, r8
 8004204:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004208:	3a30      	subs	r2, #48	; 0x30
 800420a:	2a09      	cmp	r2, #9
 800420c:	d903      	bls.n	8004216 <_vfiprintf_r+0x1ca>
 800420e:	2b00      	cmp	r3, #0
 8004210:	d0c3      	beq.n	800419a <_vfiprintf_r+0x14e>
 8004212:	9105      	str	r1, [sp, #20]
 8004214:	e7c1      	b.n	800419a <_vfiprintf_r+0x14e>
 8004216:	fb05 2101 	mla	r1, r5, r1, r2
 800421a:	2301      	movs	r3, #1
 800421c:	4680      	mov	r8, r0
 800421e:	e7f0      	b.n	8004202 <_vfiprintf_r+0x1b6>
 8004220:	ab03      	add	r3, sp, #12
 8004222:	9300      	str	r3, [sp, #0]
 8004224:	4622      	mov	r2, r4
 8004226:	4b13      	ldr	r3, [pc, #76]	; (8004274 <_vfiprintf_r+0x228>)
 8004228:	a904      	add	r1, sp, #16
 800422a:	4630      	mov	r0, r6
 800422c:	f3af 8000 	nop.w
 8004230:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004234:	4681      	mov	r9, r0
 8004236:	d1d5      	bne.n	80041e4 <_vfiprintf_r+0x198>
 8004238:	89a3      	ldrh	r3, [r4, #12]
 800423a:	065b      	lsls	r3, r3, #25
 800423c:	f53f af7e 	bmi.w	800413c <_vfiprintf_r+0xf0>
 8004240:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004242:	e77d      	b.n	8004140 <_vfiprintf_r+0xf4>
 8004244:	ab03      	add	r3, sp, #12
 8004246:	9300      	str	r3, [sp, #0]
 8004248:	4622      	mov	r2, r4
 800424a:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <_vfiprintf_r+0x228>)
 800424c:	a904      	add	r1, sp, #16
 800424e:	4630      	mov	r0, r6
 8004250:	f000 f888 	bl	8004364 <_printf_i>
 8004254:	e7ec      	b.n	8004230 <_vfiprintf_r+0x1e4>
 8004256:	bf00      	nop
 8004258:	08004d7c 	.word	0x08004d7c
 800425c:	08004dbc 	.word	0x08004dbc
 8004260:	08004d9c 	.word	0x08004d9c
 8004264:	08004d5c 	.word	0x08004d5c
 8004268:	08004dc2 	.word	0x08004dc2
 800426c:	08004dc6 	.word	0x08004dc6
 8004270:	00000000 	.word	0x00000000
 8004274:	08004027 	.word	0x08004027

08004278 <_printf_common>:
 8004278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800427c:	4691      	mov	r9, r2
 800427e:	461f      	mov	r7, r3
 8004280:	688a      	ldr	r2, [r1, #8]
 8004282:	690b      	ldr	r3, [r1, #16]
 8004284:	4606      	mov	r6, r0
 8004286:	4293      	cmp	r3, r2
 8004288:	bfb8      	it	lt
 800428a:	4613      	movlt	r3, r2
 800428c:	f8c9 3000 	str.w	r3, [r9]
 8004290:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004294:	460c      	mov	r4, r1
 8004296:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800429a:	b112      	cbz	r2, 80042a2 <_printf_common+0x2a>
 800429c:	3301      	adds	r3, #1
 800429e:	f8c9 3000 	str.w	r3, [r9]
 80042a2:	6823      	ldr	r3, [r4, #0]
 80042a4:	0699      	lsls	r1, r3, #26
 80042a6:	bf42      	ittt	mi
 80042a8:	f8d9 3000 	ldrmi.w	r3, [r9]
 80042ac:	3302      	addmi	r3, #2
 80042ae:	f8c9 3000 	strmi.w	r3, [r9]
 80042b2:	6825      	ldr	r5, [r4, #0]
 80042b4:	f015 0506 	ands.w	r5, r5, #6
 80042b8:	d107      	bne.n	80042ca <_printf_common+0x52>
 80042ba:	f104 0a19 	add.w	sl, r4, #25
 80042be:	68e3      	ldr	r3, [r4, #12]
 80042c0:	f8d9 2000 	ldr.w	r2, [r9]
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	42ab      	cmp	r3, r5
 80042c8:	dc29      	bgt.n	800431e <_printf_common+0xa6>
 80042ca:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80042ce:	6822      	ldr	r2, [r4, #0]
 80042d0:	3300      	adds	r3, #0
 80042d2:	bf18      	it	ne
 80042d4:	2301      	movne	r3, #1
 80042d6:	0692      	lsls	r2, r2, #26
 80042d8:	d42e      	bmi.n	8004338 <_printf_common+0xc0>
 80042da:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042de:	4639      	mov	r1, r7
 80042e0:	4630      	mov	r0, r6
 80042e2:	47c0      	blx	r8
 80042e4:	3001      	adds	r0, #1
 80042e6:	d021      	beq.n	800432c <_printf_common+0xb4>
 80042e8:	6823      	ldr	r3, [r4, #0]
 80042ea:	68e5      	ldr	r5, [r4, #12]
 80042ec:	f003 0306 	and.w	r3, r3, #6
 80042f0:	2b04      	cmp	r3, #4
 80042f2:	bf18      	it	ne
 80042f4:	2500      	movne	r5, #0
 80042f6:	f8d9 2000 	ldr.w	r2, [r9]
 80042fa:	f04f 0900 	mov.w	r9, #0
 80042fe:	bf08      	it	eq
 8004300:	1aad      	subeq	r5, r5, r2
 8004302:	68a3      	ldr	r3, [r4, #8]
 8004304:	6922      	ldr	r2, [r4, #16]
 8004306:	bf08      	it	eq
 8004308:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800430c:	4293      	cmp	r3, r2
 800430e:	bfc4      	itt	gt
 8004310:	1a9b      	subgt	r3, r3, r2
 8004312:	18ed      	addgt	r5, r5, r3
 8004314:	341a      	adds	r4, #26
 8004316:	454d      	cmp	r5, r9
 8004318:	d11a      	bne.n	8004350 <_printf_common+0xd8>
 800431a:	2000      	movs	r0, #0
 800431c:	e008      	b.n	8004330 <_printf_common+0xb8>
 800431e:	2301      	movs	r3, #1
 8004320:	4652      	mov	r2, sl
 8004322:	4639      	mov	r1, r7
 8004324:	4630      	mov	r0, r6
 8004326:	47c0      	blx	r8
 8004328:	3001      	adds	r0, #1
 800432a:	d103      	bne.n	8004334 <_printf_common+0xbc>
 800432c:	f04f 30ff 	mov.w	r0, #4294967295
 8004330:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004334:	3501      	adds	r5, #1
 8004336:	e7c2      	b.n	80042be <_printf_common+0x46>
 8004338:	2030      	movs	r0, #48	; 0x30
 800433a:	18e1      	adds	r1, r4, r3
 800433c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004340:	1c5a      	adds	r2, r3, #1
 8004342:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004346:	4422      	add	r2, r4
 8004348:	3302      	adds	r3, #2
 800434a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800434e:	e7c4      	b.n	80042da <_printf_common+0x62>
 8004350:	2301      	movs	r3, #1
 8004352:	4622      	mov	r2, r4
 8004354:	4639      	mov	r1, r7
 8004356:	4630      	mov	r0, r6
 8004358:	47c0      	blx	r8
 800435a:	3001      	adds	r0, #1
 800435c:	d0e6      	beq.n	800432c <_printf_common+0xb4>
 800435e:	f109 0901 	add.w	r9, r9, #1
 8004362:	e7d8      	b.n	8004316 <_printf_common+0x9e>

08004364 <_printf_i>:
 8004364:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004368:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800436c:	460c      	mov	r4, r1
 800436e:	7e09      	ldrb	r1, [r1, #24]
 8004370:	b085      	sub	sp, #20
 8004372:	296e      	cmp	r1, #110	; 0x6e
 8004374:	4617      	mov	r7, r2
 8004376:	4606      	mov	r6, r0
 8004378:	4698      	mov	r8, r3
 800437a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800437c:	f000 80b3 	beq.w	80044e6 <_printf_i+0x182>
 8004380:	d822      	bhi.n	80043c8 <_printf_i+0x64>
 8004382:	2963      	cmp	r1, #99	; 0x63
 8004384:	d036      	beq.n	80043f4 <_printf_i+0x90>
 8004386:	d80a      	bhi.n	800439e <_printf_i+0x3a>
 8004388:	2900      	cmp	r1, #0
 800438a:	f000 80b9 	beq.w	8004500 <_printf_i+0x19c>
 800438e:	2958      	cmp	r1, #88	; 0x58
 8004390:	f000 8083 	beq.w	800449a <_printf_i+0x136>
 8004394:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004398:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800439c:	e032      	b.n	8004404 <_printf_i+0xa0>
 800439e:	2964      	cmp	r1, #100	; 0x64
 80043a0:	d001      	beq.n	80043a6 <_printf_i+0x42>
 80043a2:	2969      	cmp	r1, #105	; 0x69
 80043a4:	d1f6      	bne.n	8004394 <_printf_i+0x30>
 80043a6:	6820      	ldr	r0, [r4, #0]
 80043a8:	6813      	ldr	r3, [r2, #0]
 80043aa:	0605      	lsls	r5, r0, #24
 80043ac:	f103 0104 	add.w	r1, r3, #4
 80043b0:	d52a      	bpl.n	8004408 <_printf_i+0xa4>
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6011      	str	r1, [r2, #0]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	da03      	bge.n	80043c2 <_printf_i+0x5e>
 80043ba:	222d      	movs	r2, #45	; 0x2d
 80043bc:	425b      	negs	r3, r3
 80043be:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80043c2:	486f      	ldr	r0, [pc, #444]	; (8004580 <_printf_i+0x21c>)
 80043c4:	220a      	movs	r2, #10
 80043c6:	e039      	b.n	800443c <_printf_i+0xd8>
 80043c8:	2973      	cmp	r1, #115	; 0x73
 80043ca:	f000 809d 	beq.w	8004508 <_printf_i+0x1a4>
 80043ce:	d808      	bhi.n	80043e2 <_printf_i+0x7e>
 80043d0:	296f      	cmp	r1, #111	; 0x6f
 80043d2:	d020      	beq.n	8004416 <_printf_i+0xb2>
 80043d4:	2970      	cmp	r1, #112	; 0x70
 80043d6:	d1dd      	bne.n	8004394 <_printf_i+0x30>
 80043d8:	6823      	ldr	r3, [r4, #0]
 80043da:	f043 0320 	orr.w	r3, r3, #32
 80043de:	6023      	str	r3, [r4, #0]
 80043e0:	e003      	b.n	80043ea <_printf_i+0x86>
 80043e2:	2975      	cmp	r1, #117	; 0x75
 80043e4:	d017      	beq.n	8004416 <_printf_i+0xb2>
 80043e6:	2978      	cmp	r1, #120	; 0x78
 80043e8:	d1d4      	bne.n	8004394 <_printf_i+0x30>
 80043ea:	2378      	movs	r3, #120	; 0x78
 80043ec:	4865      	ldr	r0, [pc, #404]	; (8004584 <_printf_i+0x220>)
 80043ee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80043f2:	e055      	b.n	80044a0 <_printf_i+0x13c>
 80043f4:	6813      	ldr	r3, [r2, #0]
 80043f6:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043fa:	1d19      	adds	r1, r3, #4
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	6011      	str	r1, [r2, #0]
 8004400:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004404:	2301      	movs	r3, #1
 8004406:	e08c      	b.n	8004522 <_printf_i+0x1be>
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800440e:	6011      	str	r1, [r2, #0]
 8004410:	bf18      	it	ne
 8004412:	b21b      	sxthne	r3, r3
 8004414:	e7cf      	b.n	80043b6 <_printf_i+0x52>
 8004416:	6813      	ldr	r3, [r2, #0]
 8004418:	6825      	ldr	r5, [r4, #0]
 800441a:	1d18      	adds	r0, r3, #4
 800441c:	6010      	str	r0, [r2, #0]
 800441e:	0628      	lsls	r0, r5, #24
 8004420:	d501      	bpl.n	8004426 <_printf_i+0xc2>
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	e002      	b.n	800442c <_printf_i+0xc8>
 8004426:	0668      	lsls	r0, r5, #25
 8004428:	d5fb      	bpl.n	8004422 <_printf_i+0xbe>
 800442a:	881b      	ldrh	r3, [r3, #0]
 800442c:	296f      	cmp	r1, #111	; 0x6f
 800442e:	bf14      	ite	ne
 8004430:	220a      	movne	r2, #10
 8004432:	2208      	moveq	r2, #8
 8004434:	4852      	ldr	r0, [pc, #328]	; (8004580 <_printf_i+0x21c>)
 8004436:	2100      	movs	r1, #0
 8004438:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800443c:	6865      	ldr	r5, [r4, #4]
 800443e:	2d00      	cmp	r5, #0
 8004440:	60a5      	str	r5, [r4, #8]
 8004442:	f2c0 8095 	blt.w	8004570 <_printf_i+0x20c>
 8004446:	6821      	ldr	r1, [r4, #0]
 8004448:	f021 0104 	bic.w	r1, r1, #4
 800444c:	6021      	str	r1, [r4, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d13d      	bne.n	80044ce <_printf_i+0x16a>
 8004452:	2d00      	cmp	r5, #0
 8004454:	f040 808e 	bne.w	8004574 <_printf_i+0x210>
 8004458:	4665      	mov	r5, ip
 800445a:	2a08      	cmp	r2, #8
 800445c:	d10b      	bne.n	8004476 <_printf_i+0x112>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	07db      	lsls	r3, r3, #31
 8004462:	d508      	bpl.n	8004476 <_printf_i+0x112>
 8004464:	6923      	ldr	r3, [r4, #16]
 8004466:	6862      	ldr	r2, [r4, #4]
 8004468:	429a      	cmp	r2, r3
 800446a:	bfde      	ittt	le
 800446c:	2330      	movle	r3, #48	; 0x30
 800446e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004472:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004476:	ebac 0305 	sub.w	r3, ip, r5
 800447a:	6123      	str	r3, [r4, #16]
 800447c:	f8cd 8000 	str.w	r8, [sp]
 8004480:	463b      	mov	r3, r7
 8004482:	aa03      	add	r2, sp, #12
 8004484:	4621      	mov	r1, r4
 8004486:	4630      	mov	r0, r6
 8004488:	f7ff fef6 	bl	8004278 <_printf_common>
 800448c:	3001      	adds	r0, #1
 800448e:	d14d      	bne.n	800452c <_printf_i+0x1c8>
 8004490:	f04f 30ff 	mov.w	r0, #4294967295
 8004494:	b005      	add	sp, #20
 8004496:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800449a:	4839      	ldr	r0, [pc, #228]	; (8004580 <_printf_i+0x21c>)
 800449c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80044a0:	6813      	ldr	r3, [r2, #0]
 80044a2:	6821      	ldr	r1, [r4, #0]
 80044a4:	1d1d      	adds	r5, r3, #4
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	6015      	str	r5, [r2, #0]
 80044aa:	060a      	lsls	r2, r1, #24
 80044ac:	d50b      	bpl.n	80044c6 <_printf_i+0x162>
 80044ae:	07ca      	lsls	r2, r1, #31
 80044b0:	bf44      	itt	mi
 80044b2:	f041 0120 	orrmi.w	r1, r1, #32
 80044b6:	6021      	strmi	r1, [r4, #0]
 80044b8:	b91b      	cbnz	r3, 80044c2 <_printf_i+0x15e>
 80044ba:	6822      	ldr	r2, [r4, #0]
 80044bc:	f022 0220 	bic.w	r2, r2, #32
 80044c0:	6022      	str	r2, [r4, #0]
 80044c2:	2210      	movs	r2, #16
 80044c4:	e7b7      	b.n	8004436 <_printf_i+0xd2>
 80044c6:	064d      	lsls	r5, r1, #25
 80044c8:	bf48      	it	mi
 80044ca:	b29b      	uxthmi	r3, r3
 80044cc:	e7ef      	b.n	80044ae <_printf_i+0x14a>
 80044ce:	4665      	mov	r5, ip
 80044d0:	fbb3 f1f2 	udiv	r1, r3, r2
 80044d4:	fb02 3311 	mls	r3, r2, r1, r3
 80044d8:	5cc3      	ldrb	r3, [r0, r3]
 80044da:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80044de:	460b      	mov	r3, r1
 80044e0:	2900      	cmp	r1, #0
 80044e2:	d1f5      	bne.n	80044d0 <_printf_i+0x16c>
 80044e4:	e7b9      	b.n	800445a <_printf_i+0xf6>
 80044e6:	6813      	ldr	r3, [r2, #0]
 80044e8:	6825      	ldr	r5, [r4, #0]
 80044ea:	1d18      	adds	r0, r3, #4
 80044ec:	6961      	ldr	r1, [r4, #20]
 80044ee:	6010      	str	r0, [r2, #0]
 80044f0:	0628      	lsls	r0, r5, #24
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	d501      	bpl.n	80044fa <_printf_i+0x196>
 80044f6:	6019      	str	r1, [r3, #0]
 80044f8:	e002      	b.n	8004500 <_printf_i+0x19c>
 80044fa:	066a      	lsls	r2, r5, #25
 80044fc:	d5fb      	bpl.n	80044f6 <_printf_i+0x192>
 80044fe:	8019      	strh	r1, [r3, #0]
 8004500:	2300      	movs	r3, #0
 8004502:	4665      	mov	r5, ip
 8004504:	6123      	str	r3, [r4, #16]
 8004506:	e7b9      	b.n	800447c <_printf_i+0x118>
 8004508:	6813      	ldr	r3, [r2, #0]
 800450a:	1d19      	adds	r1, r3, #4
 800450c:	6011      	str	r1, [r2, #0]
 800450e:	681d      	ldr	r5, [r3, #0]
 8004510:	6862      	ldr	r2, [r4, #4]
 8004512:	2100      	movs	r1, #0
 8004514:	4628      	mov	r0, r5
 8004516:	f000 fa93 	bl	8004a40 <memchr>
 800451a:	b108      	cbz	r0, 8004520 <_printf_i+0x1bc>
 800451c:	1b40      	subs	r0, r0, r5
 800451e:	6060      	str	r0, [r4, #4]
 8004520:	6863      	ldr	r3, [r4, #4]
 8004522:	6123      	str	r3, [r4, #16]
 8004524:	2300      	movs	r3, #0
 8004526:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800452a:	e7a7      	b.n	800447c <_printf_i+0x118>
 800452c:	6923      	ldr	r3, [r4, #16]
 800452e:	462a      	mov	r2, r5
 8004530:	4639      	mov	r1, r7
 8004532:	4630      	mov	r0, r6
 8004534:	47c0      	blx	r8
 8004536:	3001      	adds	r0, #1
 8004538:	d0aa      	beq.n	8004490 <_printf_i+0x12c>
 800453a:	6823      	ldr	r3, [r4, #0]
 800453c:	079b      	lsls	r3, r3, #30
 800453e:	d413      	bmi.n	8004568 <_printf_i+0x204>
 8004540:	68e0      	ldr	r0, [r4, #12]
 8004542:	9b03      	ldr	r3, [sp, #12]
 8004544:	4298      	cmp	r0, r3
 8004546:	bfb8      	it	lt
 8004548:	4618      	movlt	r0, r3
 800454a:	e7a3      	b.n	8004494 <_printf_i+0x130>
 800454c:	2301      	movs	r3, #1
 800454e:	464a      	mov	r2, r9
 8004550:	4639      	mov	r1, r7
 8004552:	4630      	mov	r0, r6
 8004554:	47c0      	blx	r8
 8004556:	3001      	adds	r0, #1
 8004558:	d09a      	beq.n	8004490 <_printf_i+0x12c>
 800455a:	3501      	adds	r5, #1
 800455c:	68e3      	ldr	r3, [r4, #12]
 800455e:	9a03      	ldr	r2, [sp, #12]
 8004560:	1a9b      	subs	r3, r3, r2
 8004562:	42ab      	cmp	r3, r5
 8004564:	dcf2      	bgt.n	800454c <_printf_i+0x1e8>
 8004566:	e7eb      	b.n	8004540 <_printf_i+0x1dc>
 8004568:	2500      	movs	r5, #0
 800456a:	f104 0919 	add.w	r9, r4, #25
 800456e:	e7f5      	b.n	800455c <_printf_i+0x1f8>
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1ac      	bne.n	80044ce <_printf_i+0x16a>
 8004574:	7803      	ldrb	r3, [r0, #0]
 8004576:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800457a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800457e:	e76c      	b.n	800445a <_printf_i+0xf6>
 8004580:	08004dcd 	.word	0x08004dcd
 8004584:	08004dde 	.word	0x08004dde

08004588 <_sbrk_r>:
 8004588:	b538      	push	{r3, r4, r5, lr}
 800458a:	2300      	movs	r3, #0
 800458c:	4c05      	ldr	r4, [pc, #20]	; (80045a4 <_sbrk_r+0x1c>)
 800458e:	4605      	mov	r5, r0
 8004590:	4608      	mov	r0, r1
 8004592:	6023      	str	r3, [r4, #0]
 8004594:	f7fb ff74 	bl	8000480 <_sbrk>
 8004598:	1c43      	adds	r3, r0, #1
 800459a:	d102      	bne.n	80045a2 <_sbrk_r+0x1a>
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	b103      	cbz	r3, 80045a2 <_sbrk_r+0x1a>
 80045a0:	602b      	str	r3, [r5, #0]
 80045a2:	bd38      	pop	{r3, r4, r5, pc}
 80045a4:	200001ac 	.word	0x200001ac

080045a8 <__sread>:
 80045a8:	b510      	push	{r4, lr}
 80045aa:	460c      	mov	r4, r1
 80045ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045b0:	f000 faa2 	bl	8004af8 <_read_r>
 80045b4:	2800      	cmp	r0, #0
 80045b6:	bfab      	itete	ge
 80045b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80045ba:	89a3      	ldrhlt	r3, [r4, #12]
 80045bc:	181b      	addge	r3, r3, r0
 80045be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80045c2:	bfac      	ite	ge
 80045c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80045c6:	81a3      	strhlt	r3, [r4, #12]
 80045c8:	bd10      	pop	{r4, pc}

080045ca <__swrite>:
 80045ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80045ce:	461f      	mov	r7, r3
 80045d0:	898b      	ldrh	r3, [r1, #12]
 80045d2:	4605      	mov	r5, r0
 80045d4:	05db      	lsls	r3, r3, #23
 80045d6:	460c      	mov	r4, r1
 80045d8:	4616      	mov	r6, r2
 80045da:	d505      	bpl.n	80045e8 <__swrite+0x1e>
 80045dc:	2302      	movs	r3, #2
 80045de:	2200      	movs	r2, #0
 80045e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045e4:	f000 f9b6 	bl	8004954 <_lseek_r>
 80045e8:	89a3      	ldrh	r3, [r4, #12]
 80045ea:	4632      	mov	r2, r6
 80045ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045f0:	81a3      	strh	r3, [r4, #12]
 80045f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045f6:	463b      	mov	r3, r7
 80045f8:	4628      	mov	r0, r5
 80045fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045fe:	f000 b869 	b.w	80046d4 <_write_r>

08004602 <__sseek>:
 8004602:	b510      	push	{r4, lr}
 8004604:	460c      	mov	r4, r1
 8004606:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460a:	f000 f9a3 	bl	8004954 <_lseek_r>
 800460e:	1c43      	adds	r3, r0, #1
 8004610:	89a3      	ldrh	r3, [r4, #12]
 8004612:	bf15      	itete	ne
 8004614:	6560      	strne	r0, [r4, #84]	; 0x54
 8004616:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800461a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800461e:	81a3      	strheq	r3, [r4, #12]
 8004620:	bf18      	it	ne
 8004622:	81a3      	strhne	r3, [r4, #12]
 8004624:	bd10      	pop	{r4, pc}

08004626 <__sclose>:
 8004626:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800462a:	f000 b8d3 	b.w	80047d4 <_close_r>
	...

08004630 <__swbuf_r>:
 8004630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004632:	460e      	mov	r6, r1
 8004634:	4614      	mov	r4, r2
 8004636:	4605      	mov	r5, r0
 8004638:	b118      	cbz	r0, 8004642 <__swbuf_r+0x12>
 800463a:	6983      	ldr	r3, [r0, #24]
 800463c:	b90b      	cbnz	r3, 8004642 <__swbuf_r+0x12>
 800463e:	f7ff fbf9 	bl	8003e34 <__sinit>
 8004642:	4b21      	ldr	r3, [pc, #132]	; (80046c8 <__swbuf_r+0x98>)
 8004644:	429c      	cmp	r4, r3
 8004646:	d12a      	bne.n	800469e <__swbuf_r+0x6e>
 8004648:	686c      	ldr	r4, [r5, #4]
 800464a:	69a3      	ldr	r3, [r4, #24]
 800464c:	60a3      	str	r3, [r4, #8]
 800464e:	89a3      	ldrh	r3, [r4, #12]
 8004650:	071a      	lsls	r2, r3, #28
 8004652:	d52e      	bpl.n	80046b2 <__swbuf_r+0x82>
 8004654:	6923      	ldr	r3, [r4, #16]
 8004656:	b363      	cbz	r3, 80046b2 <__swbuf_r+0x82>
 8004658:	6923      	ldr	r3, [r4, #16]
 800465a:	6820      	ldr	r0, [r4, #0]
 800465c:	b2f6      	uxtb	r6, r6
 800465e:	1ac0      	subs	r0, r0, r3
 8004660:	6963      	ldr	r3, [r4, #20]
 8004662:	4637      	mov	r7, r6
 8004664:	4283      	cmp	r3, r0
 8004666:	dc04      	bgt.n	8004672 <__swbuf_r+0x42>
 8004668:	4621      	mov	r1, r4
 800466a:	4628      	mov	r0, r5
 800466c:	f000 f948 	bl	8004900 <_fflush_r>
 8004670:	bb28      	cbnz	r0, 80046be <__swbuf_r+0x8e>
 8004672:	68a3      	ldr	r3, [r4, #8]
 8004674:	3001      	adds	r0, #1
 8004676:	3b01      	subs	r3, #1
 8004678:	60a3      	str	r3, [r4, #8]
 800467a:	6823      	ldr	r3, [r4, #0]
 800467c:	1c5a      	adds	r2, r3, #1
 800467e:	6022      	str	r2, [r4, #0]
 8004680:	701e      	strb	r6, [r3, #0]
 8004682:	6963      	ldr	r3, [r4, #20]
 8004684:	4283      	cmp	r3, r0
 8004686:	d004      	beq.n	8004692 <__swbuf_r+0x62>
 8004688:	89a3      	ldrh	r3, [r4, #12]
 800468a:	07db      	lsls	r3, r3, #31
 800468c:	d519      	bpl.n	80046c2 <__swbuf_r+0x92>
 800468e:	2e0a      	cmp	r6, #10
 8004690:	d117      	bne.n	80046c2 <__swbuf_r+0x92>
 8004692:	4621      	mov	r1, r4
 8004694:	4628      	mov	r0, r5
 8004696:	f000 f933 	bl	8004900 <_fflush_r>
 800469a:	b190      	cbz	r0, 80046c2 <__swbuf_r+0x92>
 800469c:	e00f      	b.n	80046be <__swbuf_r+0x8e>
 800469e:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <__swbuf_r+0x9c>)
 80046a0:	429c      	cmp	r4, r3
 80046a2:	d101      	bne.n	80046a8 <__swbuf_r+0x78>
 80046a4:	68ac      	ldr	r4, [r5, #8]
 80046a6:	e7d0      	b.n	800464a <__swbuf_r+0x1a>
 80046a8:	4b09      	ldr	r3, [pc, #36]	; (80046d0 <__swbuf_r+0xa0>)
 80046aa:	429c      	cmp	r4, r3
 80046ac:	bf08      	it	eq
 80046ae:	68ec      	ldreq	r4, [r5, #12]
 80046b0:	e7cb      	b.n	800464a <__swbuf_r+0x1a>
 80046b2:	4621      	mov	r1, r4
 80046b4:	4628      	mov	r0, r5
 80046b6:	f000 f81f 	bl	80046f8 <__swsetup_r>
 80046ba:	2800      	cmp	r0, #0
 80046bc:	d0cc      	beq.n	8004658 <__swbuf_r+0x28>
 80046be:	f04f 37ff 	mov.w	r7, #4294967295
 80046c2:	4638      	mov	r0, r7
 80046c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046c6:	bf00      	nop
 80046c8:	08004d7c 	.word	0x08004d7c
 80046cc:	08004d9c 	.word	0x08004d9c
 80046d0:	08004d5c 	.word	0x08004d5c

080046d4 <_write_r>:
 80046d4:	b538      	push	{r3, r4, r5, lr}
 80046d6:	4605      	mov	r5, r0
 80046d8:	4608      	mov	r0, r1
 80046da:	4611      	mov	r1, r2
 80046dc:	2200      	movs	r2, #0
 80046de:	4c05      	ldr	r4, [pc, #20]	; (80046f4 <_write_r+0x20>)
 80046e0:	6022      	str	r2, [r4, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	f7fb fe7f 	bl	80003e6 <_write>
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	d102      	bne.n	80046f2 <_write_r+0x1e>
 80046ec:	6823      	ldr	r3, [r4, #0]
 80046ee:	b103      	cbz	r3, 80046f2 <_write_r+0x1e>
 80046f0:	602b      	str	r3, [r5, #0]
 80046f2:	bd38      	pop	{r3, r4, r5, pc}
 80046f4:	200001ac 	.word	0x200001ac

080046f8 <__swsetup_r>:
 80046f8:	4b32      	ldr	r3, [pc, #200]	; (80047c4 <__swsetup_r+0xcc>)
 80046fa:	b570      	push	{r4, r5, r6, lr}
 80046fc:	681d      	ldr	r5, [r3, #0]
 80046fe:	4606      	mov	r6, r0
 8004700:	460c      	mov	r4, r1
 8004702:	b125      	cbz	r5, 800470e <__swsetup_r+0x16>
 8004704:	69ab      	ldr	r3, [r5, #24]
 8004706:	b913      	cbnz	r3, 800470e <__swsetup_r+0x16>
 8004708:	4628      	mov	r0, r5
 800470a:	f7ff fb93 	bl	8003e34 <__sinit>
 800470e:	4b2e      	ldr	r3, [pc, #184]	; (80047c8 <__swsetup_r+0xd0>)
 8004710:	429c      	cmp	r4, r3
 8004712:	d10f      	bne.n	8004734 <__swsetup_r+0x3c>
 8004714:	686c      	ldr	r4, [r5, #4]
 8004716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800471a:	b29a      	uxth	r2, r3
 800471c:	0715      	lsls	r5, r2, #28
 800471e:	d42c      	bmi.n	800477a <__swsetup_r+0x82>
 8004720:	06d0      	lsls	r0, r2, #27
 8004722:	d411      	bmi.n	8004748 <__swsetup_r+0x50>
 8004724:	2209      	movs	r2, #9
 8004726:	6032      	str	r2, [r6, #0]
 8004728:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800472c:	81a3      	strh	r3, [r4, #12]
 800472e:	f04f 30ff 	mov.w	r0, #4294967295
 8004732:	e03e      	b.n	80047b2 <__swsetup_r+0xba>
 8004734:	4b25      	ldr	r3, [pc, #148]	; (80047cc <__swsetup_r+0xd4>)
 8004736:	429c      	cmp	r4, r3
 8004738:	d101      	bne.n	800473e <__swsetup_r+0x46>
 800473a:	68ac      	ldr	r4, [r5, #8]
 800473c:	e7eb      	b.n	8004716 <__swsetup_r+0x1e>
 800473e:	4b24      	ldr	r3, [pc, #144]	; (80047d0 <__swsetup_r+0xd8>)
 8004740:	429c      	cmp	r4, r3
 8004742:	bf08      	it	eq
 8004744:	68ec      	ldreq	r4, [r5, #12]
 8004746:	e7e6      	b.n	8004716 <__swsetup_r+0x1e>
 8004748:	0751      	lsls	r1, r2, #29
 800474a:	d512      	bpl.n	8004772 <__swsetup_r+0x7a>
 800474c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800474e:	b141      	cbz	r1, 8004762 <__swsetup_r+0x6a>
 8004750:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004754:	4299      	cmp	r1, r3
 8004756:	d002      	beq.n	800475e <__swsetup_r+0x66>
 8004758:	4630      	mov	r0, r6
 800475a:	f000 f981 	bl	8004a60 <_free_r>
 800475e:	2300      	movs	r3, #0
 8004760:	6363      	str	r3, [r4, #52]	; 0x34
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	2300      	movs	r3, #0
 800476c:	6063      	str	r3, [r4, #4]
 800476e:	6923      	ldr	r3, [r4, #16]
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	89a3      	ldrh	r3, [r4, #12]
 8004774:	f043 0308 	orr.w	r3, r3, #8
 8004778:	81a3      	strh	r3, [r4, #12]
 800477a:	6923      	ldr	r3, [r4, #16]
 800477c:	b94b      	cbnz	r3, 8004792 <__swsetup_r+0x9a>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004784:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004788:	d003      	beq.n	8004792 <__swsetup_r+0x9a>
 800478a:	4621      	mov	r1, r4
 800478c:	4630      	mov	r0, r6
 800478e:	f000 f917 	bl	80049c0 <__smakebuf_r>
 8004792:	89a2      	ldrh	r2, [r4, #12]
 8004794:	f012 0301 	ands.w	r3, r2, #1
 8004798:	d00c      	beq.n	80047b4 <__swsetup_r+0xbc>
 800479a:	2300      	movs	r3, #0
 800479c:	60a3      	str	r3, [r4, #8]
 800479e:	6963      	ldr	r3, [r4, #20]
 80047a0:	425b      	negs	r3, r3
 80047a2:	61a3      	str	r3, [r4, #24]
 80047a4:	6923      	ldr	r3, [r4, #16]
 80047a6:	b953      	cbnz	r3, 80047be <__swsetup_r+0xc6>
 80047a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80047ac:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80047b0:	d1ba      	bne.n	8004728 <__swsetup_r+0x30>
 80047b2:	bd70      	pop	{r4, r5, r6, pc}
 80047b4:	0792      	lsls	r2, r2, #30
 80047b6:	bf58      	it	pl
 80047b8:	6963      	ldrpl	r3, [r4, #20]
 80047ba:	60a3      	str	r3, [r4, #8]
 80047bc:	e7f2      	b.n	80047a4 <__swsetup_r+0xac>
 80047be:	2000      	movs	r0, #0
 80047c0:	e7f7      	b.n	80047b2 <__swsetup_r+0xba>
 80047c2:	bf00      	nop
 80047c4:	2000000c 	.word	0x2000000c
 80047c8:	08004d7c 	.word	0x08004d7c
 80047cc:	08004d9c 	.word	0x08004d9c
 80047d0:	08004d5c 	.word	0x08004d5c

080047d4 <_close_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	2300      	movs	r3, #0
 80047d8:	4c05      	ldr	r4, [pc, #20]	; (80047f0 <_close_r+0x1c>)
 80047da:	4605      	mov	r5, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	6023      	str	r3, [r4, #0]
 80047e0:	f7fb fe1d 	bl	800041e <_close>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_close_r+0x1a>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_close_r+0x1a>
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	200001ac 	.word	0x200001ac

080047f4 <__sflush_r>:
 80047f4:	898a      	ldrh	r2, [r1, #12]
 80047f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047fa:	4605      	mov	r5, r0
 80047fc:	0710      	lsls	r0, r2, #28
 80047fe:	460c      	mov	r4, r1
 8004800:	d458      	bmi.n	80048b4 <__sflush_r+0xc0>
 8004802:	684b      	ldr	r3, [r1, #4]
 8004804:	2b00      	cmp	r3, #0
 8004806:	dc05      	bgt.n	8004814 <__sflush_r+0x20>
 8004808:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800480a:	2b00      	cmp	r3, #0
 800480c:	dc02      	bgt.n	8004814 <__sflush_r+0x20>
 800480e:	2000      	movs	r0, #0
 8004810:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004814:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004816:	2e00      	cmp	r6, #0
 8004818:	d0f9      	beq.n	800480e <__sflush_r+0x1a>
 800481a:	2300      	movs	r3, #0
 800481c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004820:	682f      	ldr	r7, [r5, #0]
 8004822:	6a21      	ldr	r1, [r4, #32]
 8004824:	602b      	str	r3, [r5, #0]
 8004826:	d032      	beq.n	800488e <__sflush_r+0x9a>
 8004828:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800482a:	89a3      	ldrh	r3, [r4, #12]
 800482c:	075a      	lsls	r2, r3, #29
 800482e:	d505      	bpl.n	800483c <__sflush_r+0x48>
 8004830:	6863      	ldr	r3, [r4, #4]
 8004832:	1ac0      	subs	r0, r0, r3
 8004834:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004836:	b10b      	cbz	r3, 800483c <__sflush_r+0x48>
 8004838:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800483a:	1ac0      	subs	r0, r0, r3
 800483c:	2300      	movs	r3, #0
 800483e:	4602      	mov	r2, r0
 8004840:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004842:	6a21      	ldr	r1, [r4, #32]
 8004844:	4628      	mov	r0, r5
 8004846:	47b0      	blx	r6
 8004848:	1c43      	adds	r3, r0, #1
 800484a:	89a3      	ldrh	r3, [r4, #12]
 800484c:	d106      	bne.n	800485c <__sflush_r+0x68>
 800484e:	6829      	ldr	r1, [r5, #0]
 8004850:	291d      	cmp	r1, #29
 8004852:	d848      	bhi.n	80048e6 <__sflush_r+0xf2>
 8004854:	4a29      	ldr	r2, [pc, #164]	; (80048fc <__sflush_r+0x108>)
 8004856:	40ca      	lsrs	r2, r1
 8004858:	07d6      	lsls	r6, r2, #31
 800485a:	d544      	bpl.n	80048e6 <__sflush_r+0xf2>
 800485c:	2200      	movs	r2, #0
 800485e:	6062      	str	r2, [r4, #4]
 8004860:	6922      	ldr	r2, [r4, #16]
 8004862:	04d9      	lsls	r1, r3, #19
 8004864:	6022      	str	r2, [r4, #0]
 8004866:	d504      	bpl.n	8004872 <__sflush_r+0x7e>
 8004868:	1c42      	adds	r2, r0, #1
 800486a:	d101      	bne.n	8004870 <__sflush_r+0x7c>
 800486c:	682b      	ldr	r3, [r5, #0]
 800486e:	b903      	cbnz	r3, 8004872 <__sflush_r+0x7e>
 8004870:	6560      	str	r0, [r4, #84]	; 0x54
 8004872:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004874:	602f      	str	r7, [r5, #0]
 8004876:	2900      	cmp	r1, #0
 8004878:	d0c9      	beq.n	800480e <__sflush_r+0x1a>
 800487a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800487e:	4299      	cmp	r1, r3
 8004880:	d002      	beq.n	8004888 <__sflush_r+0x94>
 8004882:	4628      	mov	r0, r5
 8004884:	f000 f8ec 	bl	8004a60 <_free_r>
 8004888:	2000      	movs	r0, #0
 800488a:	6360      	str	r0, [r4, #52]	; 0x34
 800488c:	e7c0      	b.n	8004810 <__sflush_r+0x1c>
 800488e:	2301      	movs	r3, #1
 8004890:	4628      	mov	r0, r5
 8004892:	47b0      	blx	r6
 8004894:	1c41      	adds	r1, r0, #1
 8004896:	d1c8      	bne.n	800482a <__sflush_r+0x36>
 8004898:	682b      	ldr	r3, [r5, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d0c5      	beq.n	800482a <__sflush_r+0x36>
 800489e:	2b1d      	cmp	r3, #29
 80048a0:	d001      	beq.n	80048a6 <__sflush_r+0xb2>
 80048a2:	2b16      	cmp	r3, #22
 80048a4:	d101      	bne.n	80048aa <__sflush_r+0xb6>
 80048a6:	602f      	str	r7, [r5, #0]
 80048a8:	e7b1      	b.n	800480e <__sflush_r+0x1a>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b0:	81a3      	strh	r3, [r4, #12]
 80048b2:	e7ad      	b.n	8004810 <__sflush_r+0x1c>
 80048b4:	690f      	ldr	r7, [r1, #16]
 80048b6:	2f00      	cmp	r7, #0
 80048b8:	d0a9      	beq.n	800480e <__sflush_r+0x1a>
 80048ba:	0793      	lsls	r3, r2, #30
 80048bc:	bf18      	it	ne
 80048be:	2300      	movne	r3, #0
 80048c0:	680e      	ldr	r6, [r1, #0]
 80048c2:	bf08      	it	eq
 80048c4:	694b      	ldreq	r3, [r1, #20]
 80048c6:	eba6 0807 	sub.w	r8, r6, r7
 80048ca:	600f      	str	r7, [r1, #0]
 80048cc:	608b      	str	r3, [r1, #8]
 80048ce:	f1b8 0f00 	cmp.w	r8, #0
 80048d2:	dd9c      	ble.n	800480e <__sflush_r+0x1a>
 80048d4:	4643      	mov	r3, r8
 80048d6:	463a      	mov	r2, r7
 80048d8:	6a21      	ldr	r1, [r4, #32]
 80048da:	4628      	mov	r0, r5
 80048dc:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048de:	47b0      	blx	r6
 80048e0:	2800      	cmp	r0, #0
 80048e2:	dc06      	bgt.n	80048f2 <__sflush_r+0xfe>
 80048e4:	89a3      	ldrh	r3, [r4, #12]
 80048e6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048ea:	81a3      	strh	r3, [r4, #12]
 80048ec:	f04f 30ff 	mov.w	r0, #4294967295
 80048f0:	e78e      	b.n	8004810 <__sflush_r+0x1c>
 80048f2:	4407      	add	r7, r0
 80048f4:	eba8 0800 	sub.w	r8, r8, r0
 80048f8:	e7e9      	b.n	80048ce <__sflush_r+0xda>
 80048fa:	bf00      	nop
 80048fc:	20400001 	.word	0x20400001

08004900 <_fflush_r>:
 8004900:	b538      	push	{r3, r4, r5, lr}
 8004902:	690b      	ldr	r3, [r1, #16]
 8004904:	4605      	mov	r5, r0
 8004906:	460c      	mov	r4, r1
 8004908:	b1db      	cbz	r3, 8004942 <_fflush_r+0x42>
 800490a:	b118      	cbz	r0, 8004914 <_fflush_r+0x14>
 800490c:	6983      	ldr	r3, [r0, #24]
 800490e:	b90b      	cbnz	r3, 8004914 <_fflush_r+0x14>
 8004910:	f7ff fa90 	bl	8003e34 <__sinit>
 8004914:	4b0c      	ldr	r3, [pc, #48]	; (8004948 <_fflush_r+0x48>)
 8004916:	429c      	cmp	r4, r3
 8004918:	d109      	bne.n	800492e <_fflush_r+0x2e>
 800491a:	686c      	ldr	r4, [r5, #4]
 800491c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004920:	b17b      	cbz	r3, 8004942 <_fflush_r+0x42>
 8004922:	4621      	mov	r1, r4
 8004924:	4628      	mov	r0, r5
 8004926:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800492a:	f7ff bf63 	b.w	80047f4 <__sflush_r>
 800492e:	4b07      	ldr	r3, [pc, #28]	; (800494c <_fflush_r+0x4c>)
 8004930:	429c      	cmp	r4, r3
 8004932:	d101      	bne.n	8004938 <_fflush_r+0x38>
 8004934:	68ac      	ldr	r4, [r5, #8]
 8004936:	e7f1      	b.n	800491c <_fflush_r+0x1c>
 8004938:	4b05      	ldr	r3, [pc, #20]	; (8004950 <_fflush_r+0x50>)
 800493a:	429c      	cmp	r4, r3
 800493c:	bf08      	it	eq
 800493e:	68ec      	ldreq	r4, [r5, #12]
 8004940:	e7ec      	b.n	800491c <_fflush_r+0x1c>
 8004942:	2000      	movs	r0, #0
 8004944:	bd38      	pop	{r3, r4, r5, pc}
 8004946:	bf00      	nop
 8004948:	08004d7c 	.word	0x08004d7c
 800494c:	08004d9c 	.word	0x08004d9c
 8004950:	08004d5c 	.word	0x08004d5c

08004954 <_lseek_r>:
 8004954:	b538      	push	{r3, r4, r5, lr}
 8004956:	4605      	mov	r5, r0
 8004958:	4608      	mov	r0, r1
 800495a:	4611      	mov	r1, r2
 800495c:	2200      	movs	r2, #0
 800495e:	4c05      	ldr	r4, [pc, #20]	; (8004974 <_lseek_r+0x20>)
 8004960:	6022      	str	r2, [r4, #0]
 8004962:	461a      	mov	r2, r3
 8004964:	f7fb fd7f 	bl	8000466 <_lseek>
 8004968:	1c43      	adds	r3, r0, #1
 800496a:	d102      	bne.n	8004972 <_lseek_r+0x1e>
 800496c:	6823      	ldr	r3, [r4, #0]
 800496e:	b103      	cbz	r3, 8004972 <_lseek_r+0x1e>
 8004970:	602b      	str	r3, [r5, #0]
 8004972:	bd38      	pop	{r3, r4, r5, pc}
 8004974:	200001ac 	.word	0x200001ac

08004978 <__swhatbuf_r>:
 8004978:	b570      	push	{r4, r5, r6, lr}
 800497a:	460e      	mov	r6, r1
 800497c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004980:	b096      	sub	sp, #88	; 0x58
 8004982:	2900      	cmp	r1, #0
 8004984:	4614      	mov	r4, r2
 8004986:	461d      	mov	r5, r3
 8004988:	da07      	bge.n	800499a <__swhatbuf_r+0x22>
 800498a:	2300      	movs	r3, #0
 800498c:	602b      	str	r3, [r5, #0]
 800498e:	89b3      	ldrh	r3, [r6, #12]
 8004990:	061a      	lsls	r2, r3, #24
 8004992:	d410      	bmi.n	80049b6 <__swhatbuf_r+0x3e>
 8004994:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004998:	e00e      	b.n	80049b8 <__swhatbuf_r+0x40>
 800499a:	466a      	mov	r2, sp
 800499c:	f000 f8be 	bl	8004b1c <_fstat_r>
 80049a0:	2800      	cmp	r0, #0
 80049a2:	dbf2      	blt.n	800498a <__swhatbuf_r+0x12>
 80049a4:	9a01      	ldr	r2, [sp, #4]
 80049a6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80049aa:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80049ae:	425a      	negs	r2, r3
 80049b0:	415a      	adcs	r2, r3
 80049b2:	602a      	str	r2, [r5, #0]
 80049b4:	e7ee      	b.n	8004994 <__swhatbuf_r+0x1c>
 80049b6:	2340      	movs	r3, #64	; 0x40
 80049b8:	2000      	movs	r0, #0
 80049ba:	6023      	str	r3, [r4, #0]
 80049bc:	b016      	add	sp, #88	; 0x58
 80049be:	bd70      	pop	{r4, r5, r6, pc}

080049c0 <__smakebuf_r>:
 80049c0:	898b      	ldrh	r3, [r1, #12]
 80049c2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049c4:	079d      	lsls	r5, r3, #30
 80049c6:	4606      	mov	r6, r0
 80049c8:	460c      	mov	r4, r1
 80049ca:	d507      	bpl.n	80049dc <__smakebuf_r+0x1c>
 80049cc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049d0:	6023      	str	r3, [r4, #0]
 80049d2:	6123      	str	r3, [r4, #16]
 80049d4:	2301      	movs	r3, #1
 80049d6:	6163      	str	r3, [r4, #20]
 80049d8:	b002      	add	sp, #8
 80049da:	bd70      	pop	{r4, r5, r6, pc}
 80049dc:	ab01      	add	r3, sp, #4
 80049de:	466a      	mov	r2, sp
 80049e0:	f7ff ffca 	bl	8004978 <__swhatbuf_r>
 80049e4:	9900      	ldr	r1, [sp, #0]
 80049e6:	4605      	mov	r5, r0
 80049e8:	4630      	mov	r0, r6
 80049ea:	f7ff faad 	bl	8003f48 <_malloc_r>
 80049ee:	b948      	cbnz	r0, 8004a04 <__smakebuf_r+0x44>
 80049f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049f4:	059a      	lsls	r2, r3, #22
 80049f6:	d4ef      	bmi.n	80049d8 <__smakebuf_r+0x18>
 80049f8:	f023 0303 	bic.w	r3, r3, #3
 80049fc:	f043 0302 	orr.w	r3, r3, #2
 8004a00:	81a3      	strh	r3, [r4, #12]
 8004a02:	e7e3      	b.n	80049cc <__smakebuf_r+0xc>
 8004a04:	4b0d      	ldr	r3, [pc, #52]	; (8004a3c <__smakebuf_r+0x7c>)
 8004a06:	62b3      	str	r3, [r6, #40]	; 0x28
 8004a08:	89a3      	ldrh	r3, [r4, #12]
 8004a0a:	6020      	str	r0, [r4, #0]
 8004a0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a10:	81a3      	strh	r3, [r4, #12]
 8004a12:	9b00      	ldr	r3, [sp, #0]
 8004a14:	6120      	str	r0, [r4, #16]
 8004a16:	6163      	str	r3, [r4, #20]
 8004a18:	9b01      	ldr	r3, [sp, #4]
 8004a1a:	b15b      	cbz	r3, 8004a34 <__smakebuf_r+0x74>
 8004a1c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a20:	4630      	mov	r0, r6
 8004a22:	f000 f88d 	bl	8004b40 <_isatty_r>
 8004a26:	b128      	cbz	r0, 8004a34 <__smakebuf_r+0x74>
 8004a28:	89a3      	ldrh	r3, [r4, #12]
 8004a2a:	f023 0303 	bic.w	r3, r3, #3
 8004a2e:	f043 0301 	orr.w	r3, r3, #1
 8004a32:	81a3      	strh	r3, [r4, #12]
 8004a34:	89a3      	ldrh	r3, [r4, #12]
 8004a36:	431d      	orrs	r5, r3
 8004a38:	81a5      	strh	r5, [r4, #12]
 8004a3a:	e7cd      	b.n	80049d8 <__smakebuf_r+0x18>
 8004a3c:	08003dfd 	.word	0x08003dfd

08004a40 <memchr>:
 8004a40:	b510      	push	{r4, lr}
 8004a42:	b2c9      	uxtb	r1, r1
 8004a44:	4402      	add	r2, r0
 8004a46:	4290      	cmp	r0, r2
 8004a48:	4603      	mov	r3, r0
 8004a4a:	d101      	bne.n	8004a50 <memchr+0x10>
 8004a4c:	2300      	movs	r3, #0
 8004a4e:	e003      	b.n	8004a58 <memchr+0x18>
 8004a50:	781c      	ldrb	r4, [r3, #0]
 8004a52:	3001      	adds	r0, #1
 8004a54:	428c      	cmp	r4, r1
 8004a56:	d1f6      	bne.n	8004a46 <memchr+0x6>
 8004a58:	4618      	mov	r0, r3
 8004a5a:	bd10      	pop	{r4, pc}

08004a5c <__malloc_lock>:
 8004a5c:	4770      	bx	lr

08004a5e <__malloc_unlock>:
 8004a5e:	4770      	bx	lr

08004a60 <_free_r>:
 8004a60:	b538      	push	{r3, r4, r5, lr}
 8004a62:	4605      	mov	r5, r0
 8004a64:	2900      	cmp	r1, #0
 8004a66:	d043      	beq.n	8004af0 <_free_r+0x90>
 8004a68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6c:	1f0c      	subs	r4, r1, #4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfb8      	it	lt
 8004a72:	18e4      	addlt	r4, r4, r3
 8004a74:	f7ff fff2 	bl	8004a5c <__malloc_lock>
 8004a78:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <_free_r+0x94>)
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	4610      	mov	r0, r2
 8004a7e:	b933      	cbnz	r3, 8004a8e <_free_r+0x2e>
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	6014      	str	r4, [r2, #0]
 8004a84:	4628      	mov	r0, r5
 8004a86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a8a:	f7ff bfe8 	b.w	8004a5e <__malloc_unlock>
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	d90b      	bls.n	8004aaa <_free_r+0x4a>
 8004a92:	6821      	ldr	r1, [r4, #0]
 8004a94:	1862      	adds	r2, r4, r1
 8004a96:	4293      	cmp	r3, r2
 8004a98:	bf01      	itttt	eq
 8004a9a:	681a      	ldreq	r2, [r3, #0]
 8004a9c:	685b      	ldreq	r3, [r3, #4]
 8004a9e:	1852      	addeq	r2, r2, r1
 8004aa0:	6022      	streq	r2, [r4, #0]
 8004aa2:	6063      	str	r3, [r4, #4]
 8004aa4:	6004      	str	r4, [r0, #0]
 8004aa6:	e7ed      	b.n	8004a84 <_free_r+0x24>
 8004aa8:	4613      	mov	r3, r2
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	b10a      	cbz	r2, 8004ab2 <_free_r+0x52>
 8004aae:	42a2      	cmp	r2, r4
 8004ab0:	d9fa      	bls.n	8004aa8 <_free_r+0x48>
 8004ab2:	6819      	ldr	r1, [r3, #0]
 8004ab4:	1858      	adds	r0, r3, r1
 8004ab6:	42a0      	cmp	r0, r4
 8004ab8:	d10b      	bne.n	8004ad2 <_free_r+0x72>
 8004aba:	6820      	ldr	r0, [r4, #0]
 8004abc:	4401      	add	r1, r0
 8004abe:	1858      	adds	r0, r3, r1
 8004ac0:	4282      	cmp	r2, r0
 8004ac2:	6019      	str	r1, [r3, #0]
 8004ac4:	d1de      	bne.n	8004a84 <_free_r+0x24>
 8004ac6:	6810      	ldr	r0, [r2, #0]
 8004ac8:	6852      	ldr	r2, [r2, #4]
 8004aca:	4401      	add	r1, r0
 8004acc:	6019      	str	r1, [r3, #0]
 8004ace:	605a      	str	r2, [r3, #4]
 8004ad0:	e7d8      	b.n	8004a84 <_free_r+0x24>
 8004ad2:	d902      	bls.n	8004ada <_free_r+0x7a>
 8004ad4:	230c      	movs	r3, #12
 8004ad6:	602b      	str	r3, [r5, #0]
 8004ad8:	e7d4      	b.n	8004a84 <_free_r+0x24>
 8004ada:	6820      	ldr	r0, [r4, #0]
 8004adc:	1821      	adds	r1, r4, r0
 8004ade:	428a      	cmp	r2, r1
 8004ae0:	bf01      	itttt	eq
 8004ae2:	6811      	ldreq	r1, [r2, #0]
 8004ae4:	6852      	ldreq	r2, [r2, #4]
 8004ae6:	1809      	addeq	r1, r1, r0
 8004ae8:	6021      	streq	r1, [r4, #0]
 8004aea:	6062      	str	r2, [r4, #4]
 8004aec:	605c      	str	r4, [r3, #4]
 8004aee:	e7c9      	b.n	8004a84 <_free_r+0x24>
 8004af0:	bd38      	pop	{r3, r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	200000a4 	.word	0x200000a4

08004af8 <_read_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4605      	mov	r5, r0
 8004afc:	4608      	mov	r0, r1
 8004afe:	4611      	mov	r1, r2
 8004b00:	2200      	movs	r2, #0
 8004b02:	4c05      	ldr	r4, [pc, #20]	; (8004b18 <_read_r+0x20>)
 8004b04:	6022      	str	r2, [r4, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7fb fc50 	bl	80003ac <_read>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_read_r+0x1e>
 8004b10:	6823      	ldr	r3, [r4, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_read_r+0x1e>
 8004b14:	602b      	str	r3, [r5, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	200001ac 	.word	0x200001ac

08004b1c <_fstat_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	2300      	movs	r3, #0
 8004b20:	4c06      	ldr	r4, [pc, #24]	; (8004b3c <_fstat_r+0x20>)
 8004b22:	4605      	mov	r5, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	6023      	str	r3, [r4, #0]
 8004b2a:	f7fb fc83 	bl	8000434 <_fstat>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d102      	bne.n	8004b38 <_fstat_r+0x1c>
 8004b32:	6823      	ldr	r3, [r4, #0]
 8004b34:	b103      	cbz	r3, 8004b38 <_fstat_r+0x1c>
 8004b36:	602b      	str	r3, [r5, #0]
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	bf00      	nop
 8004b3c:	200001ac 	.word	0x200001ac

08004b40 <_isatty_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	2300      	movs	r3, #0
 8004b44:	4c05      	ldr	r4, [pc, #20]	; (8004b5c <_isatty_r+0x1c>)
 8004b46:	4605      	mov	r5, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	6023      	str	r3, [r4, #0]
 8004b4c:	f7fb fc81 	bl	8000452 <_isatty>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_isatty_r+0x1a>
 8004b54:	6823      	ldr	r3, [r4, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_isatty_r+0x1a>
 8004b58:	602b      	str	r3, [r5, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	200001ac 	.word	0x200001ac

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr


SSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002424  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08002530  08002530  00012530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002678  08002678  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002678  08002678  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002678  08002678  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002678  08002678  00012678  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800267c  0800267c  0001267c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002680  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000068  2000000c  0800268c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800268c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000655b  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000017e5  00000000  00000000  00026590  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000738  00000000  00000000  00027d78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000640  00000000  00000000  000284b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00013093  00000000  00000000  00028af0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000077a6  00000000  00000000  0003bb83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00066554  00000000  00000000  00043329  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a987d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a0c  00000000  00000000  000a98f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002518 	.word	0x08002518

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002518 	.word	0x08002518

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b28      	ldr	r3, [pc, #160]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a27      	ldr	r2, [pc, #156]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b25      	ldr	r3, [pc, #148]	; (8000204 <MX_GPIO_Init+0xb8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b22      	ldr	r3, [pc, #136]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a21      	ldr	r2, [pc, #132]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1b      	ldr	r2, [pc, #108]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <MX_GPIO_Init+0xb8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001b0:	f000 fe0c 	bl	8000dcc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80001ba:	4814      	ldr	r0, [pc, #80]	; (800020c <MX_GPIO_Init+0xc0>)
 80001bc:	f000 fe06 	bl	8000dcc <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001da:	f000 fbbd 	bl	8000958 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001de:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80001e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	2301      	movs	r3, #1
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	4619      	mov	r1, r3
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <MX_GPIO_Init+0xc0>)
 80001f8:	f000 fbae 	bl	8000958 <HAL_GPIO_Init>

}
 80001fc:	bf00      	nop
 80001fe:	3720      	adds	r7, #32
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f99e 	bl	8000554 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f809 	bl	800022e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f7ff ff96 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000220:	f000 f8f4 	bl	800040c <MX_USART1_UART_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  scheduler_init();
 8000224:	f002 f8ce 	bl	80023c4 <scheduler_init>
  scheduler_main();
 8000228:	f002 f8de 	bl	80023e8 <scheduler_main>

  while (1)
 800022c:	e7fe      	b.n	800022c <main+0x1c>

0800022e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	b090      	sub	sp, #64	; 0x40
 8000232:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	2228      	movs	r2, #40	; 0x28
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f002 f963 	bl	8002508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2301      	movs	r3, #1
 8000252:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000270:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fdda 	bl	8000e30 <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000282:	f000 f819 	bl	80002b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2102      	movs	r1, #2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 f935 	bl	8001510 <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ac:	f000 f804 	bl	80002b8 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3740      	adds	r7, #64	; 0x40
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <HAL_MspInit+0x5c>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a14      	ldr	r2, [pc, #80]	; (8000334 <HAL_MspInit+0x5c>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <HAL_MspInit+0x5c>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <HAL_MspInit+0x5c>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <HAL_MspInit+0x5c>)
 80002fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000300:	61d3      	str	r3, [r2, #28]
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <HAL_MspInit+0x5c>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <HAL_MspInit+0x60>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <HAL_MspInit+0x60>)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000
 8000338:	40010000 	.word	0x40010000

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <HardFault_Handler+0x4>

0800034e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <MemManage_Handler+0x4>

08000354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <BusFault_Handler+0x4>

0800035a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035e:	e7fe      	b.n	800035e <UsageFault_Handler+0x4>

08000360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	scheduler_ei_tickUp_ISR();
 8000388:	f002 f88c 	bl	80024a4 <scheduler_ei_tickUp_ISR>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000394:	4802      	ldr	r0, [pc, #8]	; (80003a0 <USART1_IRQHandler+0x10>)
 8000396:	f001 fbe9 	bl	8001b6c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	2000002c 	.word	0x2000002c

080003a4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80003a4:	b480      	push	{r7}
 80003a6:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80003a8:	4b15      	ldr	r3, [pc, #84]	; (8000400 <SystemInit+0x5c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a14      	ldr	r2, [pc, #80]	; (8000400 <SystemInit+0x5c>)
 80003ae:	f043 0301 	orr.w	r3, r3, #1
 80003b2:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80003b4:	4b12      	ldr	r3, [pc, #72]	; (8000400 <SystemInit+0x5c>)
 80003b6:	685a      	ldr	r2, [r3, #4]
 80003b8:	4911      	ldr	r1, [pc, #68]	; (8000400 <SystemInit+0x5c>)
 80003ba:	4b12      	ldr	r3, [pc, #72]	; (8000404 <SystemInit+0x60>)
 80003bc:	4013      	ands	r3, r2
 80003be:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003c0:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x5c>)
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	4a0e      	ldr	r2, [pc, #56]	; (8000400 <SystemInit+0x5c>)
 80003c6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003ce:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003d0:	4b0b      	ldr	r3, [pc, #44]	; (8000400 <SystemInit+0x5c>)
 80003d2:	681b      	ldr	r3, [r3, #0]
 80003d4:	4a0a      	ldr	r2, [pc, #40]	; (8000400 <SystemInit+0x5c>)
 80003d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003da:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003dc:	4b08      	ldr	r3, [pc, #32]	; (8000400 <SystemInit+0x5c>)
 80003de:	685b      	ldr	r3, [r3, #4]
 80003e0:	4a07      	ldr	r2, [pc, #28]	; (8000400 <SystemInit+0x5c>)
 80003e2:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003e6:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003e8:	4b05      	ldr	r3, [pc, #20]	; (8000400 <SystemInit+0x5c>)
 80003ea:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003ee:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003f0:	4b05      	ldr	r3, [pc, #20]	; (8000408 <SystemInit+0x64>)
 80003f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003f6:	609a      	str	r2, [r3, #8]
#endif 
}
 80003f8:	bf00      	nop
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bc80      	pop	{r7}
 80003fe:	4770      	bx	lr
 8000400:	40021000 	.word	0x40021000
 8000404:	f8ff0000 	.word	0xf8ff0000
 8000408:	e000ed00 	.word	0xe000ed00

0800040c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000410:	4b11      	ldr	r3, [pc, #68]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000412:	4a12      	ldr	r2, [pc, #72]	; (800045c <MX_USART1_UART_Init+0x50>)
 8000414:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000416:	4b10      	ldr	r3, [pc, #64]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000418:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800041c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800041e:	4b0e      	ldr	r3, [pc, #56]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000424:	4b0c      	ldr	r3, [pc, #48]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800042a:	4b0b      	ldr	r3, [pc, #44]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800042c:	2200      	movs	r2, #0
 800042e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000430:	4b09      	ldr	r3, [pc, #36]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000432:	2208      	movs	r2, #8
 8000434:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000436:	4b08      	ldr	r3, [pc, #32]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000438:	2200      	movs	r2, #0
 800043a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800043c:	4b06      	ldr	r3, [pc, #24]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 800043e:	2200      	movs	r2, #0
 8000440:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000442:	4805      	ldr	r0, [pc, #20]	; (8000458 <MX_USART1_UART_Init+0x4c>)
 8000444:	f001 faa6 	bl	8001994 <HAL_UART_Init>
 8000448:	4603      	mov	r3, r0
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800044e:	f7ff ff33 	bl	80002b8 <Error_Handler>
  }

}
 8000452:	bf00      	nop
 8000454:	bd80      	pop	{r7, pc}
 8000456:	bf00      	nop
 8000458:	2000002c 	.word	0x2000002c
 800045c:	40013800 	.word	0x40013800

08000460 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000468:	f107 0310 	add.w	r3, r7, #16
 800046c:	2200      	movs	r2, #0
 800046e:	601a      	str	r2, [r3, #0]
 8000470:	605a      	str	r2, [r3, #4]
 8000472:	609a      	str	r2, [r3, #8]
 8000474:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	4a20      	ldr	r2, [pc, #128]	; (80004fc <HAL_UART_MspInit+0x9c>)
 800047c:	4293      	cmp	r3, r2
 800047e:	d139      	bne.n	80004f4 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000480:	4b1f      	ldr	r3, [pc, #124]	; (8000500 <HAL_UART_MspInit+0xa0>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	4a1e      	ldr	r2, [pc, #120]	; (8000500 <HAL_UART_MspInit+0xa0>)
 8000486:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800048a:	6193      	str	r3, [r2, #24]
 800048c:	4b1c      	ldr	r3, [pc, #112]	; (8000500 <HAL_UART_MspInit+0xa0>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000494:	60fb      	str	r3, [r7, #12]
 8000496:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000498:	4b19      	ldr	r3, [pc, #100]	; (8000500 <HAL_UART_MspInit+0xa0>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	4a18      	ldr	r2, [pc, #96]	; (8000500 <HAL_UART_MspInit+0xa0>)
 800049e:	f043 0304 	orr.w	r3, r3, #4
 80004a2:	6193      	str	r3, [r2, #24]
 80004a4:	4b16      	ldr	r3, [pc, #88]	; (8000500 <HAL_UART_MspInit+0xa0>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	f003 0304 	and.w	r3, r3, #4
 80004ac:	60bb      	str	r3, [r7, #8]
 80004ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80004b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004b6:	2302      	movs	r3, #2
 80004b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80004ba:	2303      	movs	r3, #3
 80004bc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004be:	f107 0310 	add.w	r3, r7, #16
 80004c2:	4619      	mov	r1, r3
 80004c4:	480f      	ldr	r0, [pc, #60]	; (8000504 <HAL_UART_MspInit+0xa4>)
 80004c6:	f000 fa47 	bl	8000958 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80004ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80004ce:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004d0:	2300      	movs	r3, #0
 80004d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004d8:	f107 0310 	add.w	r3, r7, #16
 80004dc:	4619      	mov	r1, r3
 80004de:	4809      	ldr	r0, [pc, #36]	; (8000504 <HAL_UART_MspInit+0xa4>)
 80004e0:	f000 fa3a 	bl	8000958 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80004e4:	2200      	movs	r2, #0
 80004e6:	2100      	movs	r1, #0
 80004e8:	2025      	movs	r0, #37	; 0x25
 80004ea:	f000 f96f 	bl	80007cc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80004ee:	2025      	movs	r0, #37	; 0x25
 80004f0:	f000 f998 	bl	8000824 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80004f4:	bf00      	nop
 80004f6:	3720      	adds	r7, #32
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40013800 	.word	0x40013800
 8000500:	40021000 	.word	0x40021000
 8000504:	40010800 	.word	0x40010800

08000508 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000508:	2100      	movs	r1, #0
  b LoopCopyDataInit
 800050a:	e003      	b.n	8000514 <LoopCopyDataInit>

0800050c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 800050c:	4b0b      	ldr	r3, [pc, #44]	; (800053c <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800050e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000510:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000512:	3104      	adds	r1, #4

08000514 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000514:	480a      	ldr	r0, [pc, #40]	; (8000540 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000516:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000518:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800051a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 800051c:	d3f6      	bcc.n	800050c <CopyDataInit>
  ldr r2, =_sbss
 800051e:	4a0a      	ldr	r2, [pc, #40]	; (8000548 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000520:	e002      	b.n	8000528 <LoopFillZerobss>

08000522 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000522:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000524:	f842 3b04 	str.w	r3, [r2], #4

08000528 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000528:	4b08      	ldr	r3, [pc, #32]	; (800054c <LoopFillZerobss+0x24>)
  cmp r2, r3
 800052a:	429a      	cmp	r2, r3
  bcc FillZerobss
 800052c:	d3f9      	bcc.n	8000522 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800052e:	f7ff ff39 	bl	80003a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000532:	f001 ffc5 	bl	80024c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000536:	f7ff fe6b 	bl	8000210 <main>
  bx lr
 800053a:	4770      	bx	lr
  ldr r3, =_sidata
 800053c:	08002680 	.word	0x08002680
  ldr r0, =_sdata
 8000540:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000544:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000548:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 800054c:	20000074 	.word	0x20000074

08000550 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000550:	e7fe      	b.n	8000550 <ADC1_2_IRQHandler>
	...

08000554 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000558:	4b08      	ldr	r3, [pc, #32]	; (800057c <HAL_Init+0x28>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a07      	ldr	r2, [pc, #28]	; (800057c <HAL_Init+0x28>)
 800055e:	f043 0310 	orr.w	r3, r3, #16
 8000562:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000564:	2003      	movs	r0, #3
 8000566:	f000 f911 	bl	800078c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800056a:	2000      	movs	r0, #0
 800056c:	f000 f808 	bl	8000580 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000570:	f7ff feb2 	bl	80002d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	40022000 	.word	0x40022000

08000580 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000588:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <HAL_InitTick+0x54>)
 800058a:	681a      	ldr	r2, [r3, #0]
 800058c:	4b12      	ldr	r3, [pc, #72]	; (80005d8 <HAL_InitTick+0x58>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4619      	mov	r1, r3
 8000592:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000596:	fbb3 f3f1 	udiv	r3, r3, r1
 800059a:	fbb2 f3f3 	udiv	r3, r2, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	f000 f958 	bl	8000854 <HAL_SYSTICK_Config>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005aa:	2301      	movs	r3, #1
 80005ac:	e00e      	b.n	80005cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	2b0f      	cmp	r3, #15
 80005b2:	d80a      	bhi.n	80005ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80005b4:	2200      	movs	r2, #0
 80005b6:	6879      	ldr	r1, [r7, #4]
 80005b8:	f04f 30ff 	mov.w	r0, #4294967295
 80005bc:	f000 f906 	bl	80007cc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80005c0:	4a06      	ldr	r2, [pc, #24]	; (80005dc <HAL_InitTick+0x5c>)
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e000      	b.n	80005cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80005ca:	2301      	movs	r3, #1
}
 80005cc:	4618      	mov	r0, r3
 80005ce:	3708      	adds	r7, #8
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	20000000 	.word	0x20000000
 80005d8:	20000008 	.word	0x20000008
 80005dc:	20000004 	.word	0x20000004

080005e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  return uwTick;
 80005e4:	4b02      	ldr	r3, [pc, #8]	; (80005f0 <HAL_GetTick+0x10>)
 80005e6:	681b      	ldr	r3, [r3, #0]
}
 80005e8:	4618      	mov	r0, r3
 80005ea:	46bd      	mov	sp, r7
 80005ec:	bc80      	pop	{r7}
 80005ee:	4770      	bx	lr
 80005f0:	2000006c 	.word	0x2000006c

080005f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	f003 0307 	and.w	r3, r3, #7
 8000602:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000604:	4b0c      	ldr	r3, [pc, #48]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800060a:	68ba      	ldr	r2, [r7, #8]
 800060c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000610:	4013      	ands	r3, r2
 8000612:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000618:	68bb      	ldr	r3, [r7, #8]
 800061a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800061c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000620:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000624:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000626:	4a04      	ldr	r2, [pc, #16]	; (8000638 <__NVIC_SetPriorityGrouping+0x44>)
 8000628:	68bb      	ldr	r3, [r7, #8]
 800062a:	60d3      	str	r3, [r2, #12]
}
 800062c:	bf00      	nop
 800062e:	3714      	adds	r7, #20
 8000630:	46bd      	mov	sp, r7
 8000632:	bc80      	pop	{r7}
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	e000ed00 	.word	0xe000ed00

0800063c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800063c:	b480      	push	{r7}
 800063e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000640:	4b04      	ldr	r3, [pc, #16]	; (8000654 <__NVIC_GetPriorityGrouping+0x18>)
 8000642:	68db      	ldr	r3, [r3, #12]
 8000644:	0a1b      	lsrs	r3, r3, #8
 8000646:	f003 0307 	and.w	r3, r3, #7
}
 800064a:	4618      	mov	r0, r3
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000ed00 	.word	0xe000ed00

08000658 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	db0b      	blt.n	8000682 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	f003 021f 	and.w	r2, r3, #31
 8000670:	4906      	ldr	r1, [pc, #24]	; (800068c <__NVIC_EnableIRQ+0x34>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	095b      	lsrs	r3, r3, #5
 8000678:	2001      	movs	r0, #1
 800067a:	fa00 f202 	lsl.w	r2, r0, r2
 800067e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000682:	bf00      	nop
 8000684:	370c      	adds	r7, #12
 8000686:	46bd      	mov	sp, r7
 8000688:	bc80      	pop	{r7}
 800068a:	4770      	bx	lr
 800068c:	e000e100 	.word	0xe000e100

08000690 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	4603      	mov	r3, r0
 8000698:	6039      	str	r1, [r7, #0]
 800069a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800069c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	db0a      	blt.n	80006ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a4:	683b      	ldr	r3, [r7, #0]
 80006a6:	b2da      	uxtb	r2, r3
 80006a8:	490c      	ldr	r1, [pc, #48]	; (80006dc <__NVIC_SetPriority+0x4c>)
 80006aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006ae:	0112      	lsls	r2, r2, #4
 80006b0:	b2d2      	uxtb	r2, r2
 80006b2:	440b      	add	r3, r1
 80006b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006b8:	e00a      	b.n	80006d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006ba:	683b      	ldr	r3, [r7, #0]
 80006bc:	b2da      	uxtb	r2, r3
 80006be:	4908      	ldr	r1, [pc, #32]	; (80006e0 <__NVIC_SetPriority+0x50>)
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	f003 030f 	and.w	r3, r3, #15
 80006c6:	3b04      	subs	r3, #4
 80006c8:	0112      	lsls	r2, r2, #4
 80006ca:	b2d2      	uxtb	r2, r2
 80006cc:	440b      	add	r3, r1
 80006ce:	761a      	strb	r2, [r3, #24]
}
 80006d0:	bf00      	nop
 80006d2:	370c      	adds	r7, #12
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bc80      	pop	{r7}
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	e000e100 	.word	0xe000e100
 80006e0:	e000ed00 	.word	0xe000ed00

080006e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b089      	sub	sp, #36	; 0x24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	60f8      	str	r0, [r7, #12]
 80006ec:	60b9      	str	r1, [r7, #8]
 80006ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006f0:	68fb      	ldr	r3, [r7, #12]
 80006f2:	f003 0307 	and.w	r3, r3, #7
 80006f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	f1c3 0307 	rsb	r3, r3, #7
 80006fe:	2b04      	cmp	r3, #4
 8000700:	bf28      	it	cs
 8000702:	2304      	movcs	r3, #4
 8000704:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000706:	69fb      	ldr	r3, [r7, #28]
 8000708:	3304      	adds	r3, #4
 800070a:	2b06      	cmp	r3, #6
 800070c:	d902      	bls.n	8000714 <NVIC_EncodePriority+0x30>
 800070e:	69fb      	ldr	r3, [r7, #28]
 8000710:	3b03      	subs	r3, #3
 8000712:	e000      	b.n	8000716 <NVIC_EncodePriority+0x32>
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000718:	f04f 32ff 	mov.w	r2, #4294967295
 800071c:	69bb      	ldr	r3, [r7, #24]
 800071e:	fa02 f303 	lsl.w	r3, r2, r3
 8000722:	43da      	mvns	r2, r3
 8000724:	68bb      	ldr	r3, [r7, #8]
 8000726:	401a      	ands	r2, r3
 8000728:	697b      	ldr	r3, [r7, #20]
 800072a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800072c:	f04f 31ff 	mov.w	r1, #4294967295
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	fa01 f303 	lsl.w	r3, r1, r3
 8000736:	43d9      	mvns	r1, r3
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800073c:	4313      	orrs	r3, r2
         );
}
 800073e:	4618      	mov	r0, r3
 8000740:	3724      	adds	r7, #36	; 0x24
 8000742:	46bd      	mov	sp, r7
 8000744:	bc80      	pop	{r7}
 8000746:	4770      	bx	lr

08000748 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	3b01      	subs	r3, #1
 8000754:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000758:	d301      	bcc.n	800075e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800075a:	2301      	movs	r3, #1
 800075c:	e00f      	b.n	800077e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800075e:	4a0a      	ldr	r2, [pc, #40]	; (8000788 <SysTick_Config+0x40>)
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	3b01      	subs	r3, #1
 8000764:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000766:	210f      	movs	r1, #15
 8000768:	f04f 30ff 	mov.w	r0, #4294967295
 800076c:	f7ff ff90 	bl	8000690 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000770:	4b05      	ldr	r3, [pc, #20]	; (8000788 <SysTick_Config+0x40>)
 8000772:	2200      	movs	r2, #0
 8000774:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000776:	4b04      	ldr	r3, [pc, #16]	; (8000788 <SysTick_Config+0x40>)
 8000778:	2207      	movs	r2, #7
 800077a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800077c:	2300      	movs	r3, #0
}
 800077e:	4618      	mov	r0, r3
 8000780:	3708      	adds	r7, #8
 8000782:	46bd      	mov	sp, r7
 8000784:	bd80      	pop	{r7, pc}
 8000786:	bf00      	nop
 8000788:	e000e010 	.word	0xe000e010

0800078c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b082      	sub	sp, #8
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	2b07      	cmp	r3, #7
 8000798:	d00f      	beq.n	80007ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	2b06      	cmp	r3, #6
 800079e:	d00c      	beq.n	80007ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2b05      	cmp	r3, #5
 80007a4:	d009      	beq.n	80007ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d006      	beq.n	80007ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	d003      	beq.n	80007ba <HAL_NVIC_SetPriorityGrouping+0x2e>
 80007b2:	2192      	movs	r1, #146	; 0x92
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80007b6:	f7ff fd85 	bl	80002c4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80007ba:	6878      	ldr	r0, [r7, #4]
 80007bc:	f7ff ff1a 	bl	80005f4 <__NVIC_SetPriorityGrouping>
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	08002530 	.word	0x08002530

080007cc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b086      	sub	sp, #24
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	4603      	mov	r3, r0
 80007d4:	60b9      	str	r1, [r7, #8]
 80007d6:	607a      	str	r2, [r7, #4]
 80007d8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80007da:	2300      	movs	r3, #0
 80007dc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d903      	bls.n	80007ec <HAL_NVIC_SetPriority+0x20>
 80007e4:	21aa      	movs	r1, #170	; 0xaa
 80007e6:	480e      	ldr	r0, [pc, #56]	; (8000820 <HAL_NVIC_SetPriority+0x54>)
 80007e8:	f7ff fd6c 	bl	80002c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	2b0f      	cmp	r3, #15
 80007f0:	d903      	bls.n	80007fa <HAL_NVIC_SetPriority+0x2e>
 80007f2:	21ab      	movs	r1, #171	; 0xab
 80007f4:	480a      	ldr	r0, [pc, #40]	; (8000820 <HAL_NVIC_SetPriority+0x54>)
 80007f6:	f7ff fd65 	bl	80002c4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007fa:	f7ff ff1f 	bl	800063c <__NVIC_GetPriorityGrouping>
 80007fe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	68b9      	ldr	r1, [r7, #8]
 8000804:	6978      	ldr	r0, [r7, #20]
 8000806:	f7ff ff6d 	bl	80006e4 <NVIC_EncodePriority>
 800080a:	4602      	mov	r2, r0
 800080c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000810:	4611      	mov	r1, r2
 8000812:	4618      	mov	r0, r3
 8000814:	f7ff ff3c 	bl	8000690 <__NVIC_SetPriority>
}
 8000818:	bf00      	nop
 800081a:	3718      	adds	r7, #24
 800081c:	46bd      	mov	sp, r7
 800081e:	bd80      	pop	{r7, pc}
 8000820:	08002530 	.word	0x08002530

08000824 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	4603      	mov	r3, r0
 800082c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800082e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000832:	2b00      	cmp	r3, #0
 8000834:	da03      	bge.n	800083e <HAL_NVIC_EnableIRQ+0x1a>
 8000836:	21be      	movs	r1, #190	; 0xbe
 8000838:	4805      	ldr	r0, [pc, #20]	; (8000850 <HAL_NVIC_EnableIRQ+0x2c>)
 800083a:	f7ff fd43 	bl	80002c4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800083e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000842:	4618      	mov	r0, r3
 8000844:	f7ff ff08 	bl	8000658 <__NVIC_EnableIRQ>
}
 8000848:	bf00      	nop
 800084a:	3708      	adds	r7, #8
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	08002530 	.word	0x08002530

08000854 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff ff73 	bl	8000748 <SysTick_Config>
 8000862:	4603      	mov	r3, r0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3708      	adds	r7, #8
 8000868:	46bd      	mov	sp, r7
 800086a:	bd80      	pop	{r7, pc}

0800086c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800086c:	b580      	push	{r7, lr}
 800086e:	b084      	sub	sp, #16
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000874:	2300      	movs	r3, #0
 8000876:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800087e:	2b02      	cmp	r3, #2
 8000880:	d005      	beq.n	800088e <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	2204      	movs	r2, #4
 8000886:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000888:	2301      	movs	r3, #1
 800088a:	73fb      	strb	r3, [r7, #15]
 800088c:	e051      	b.n	8000932 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800088e:	687b      	ldr	r3, [r7, #4]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	681a      	ldr	r2, [r3, #0]
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	681b      	ldr	r3, [r3, #0]
 8000898:	f022 020e 	bic.w	r2, r2, #14
 800089c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	681b      	ldr	r3, [r3, #0]
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	f022 0201 	bic.w	r2, r2, #1
 80008ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a22      	ldr	r2, [pc, #136]	; (800093c <HAL_DMA_Abort_IT+0xd0>)
 80008b4:	4293      	cmp	r3, r2
 80008b6:	d029      	beq.n	800090c <HAL_DMA_Abort_IT+0xa0>
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	4a20      	ldr	r2, [pc, #128]	; (8000940 <HAL_DMA_Abort_IT+0xd4>)
 80008be:	4293      	cmp	r3, r2
 80008c0:	d022      	beq.n	8000908 <HAL_DMA_Abort_IT+0x9c>
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a1f      	ldr	r2, [pc, #124]	; (8000944 <HAL_DMA_Abort_IT+0xd8>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d01a      	beq.n	8000902 <HAL_DMA_Abort_IT+0x96>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <HAL_DMA_Abort_IT+0xdc>)
 80008d2:	4293      	cmp	r3, r2
 80008d4:	d012      	beq.n	80008fc <HAL_DMA_Abort_IT+0x90>
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	4a1c      	ldr	r2, [pc, #112]	; (800094c <HAL_DMA_Abort_IT+0xe0>)
 80008dc:	4293      	cmp	r3, r2
 80008de:	d00a      	beq.n	80008f6 <HAL_DMA_Abort_IT+0x8a>
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a1a      	ldr	r2, [pc, #104]	; (8000950 <HAL_DMA_Abort_IT+0xe4>)
 80008e6:	4293      	cmp	r3, r2
 80008e8:	d102      	bne.n	80008f0 <HAL_DMA_Abort_IT+0x84>
 80008ea:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80008ee:	e00e      	b.n	800090e <HAL_DMA_Abort_IT+0xa2>
 80008f0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008f4:	e00b      	b.n	800090e <HAL_DMA_Abort_IT+0xa2>
 80008f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80008fa:	e008      	b.n	800090e <HAL_DMA_Abort_IT+0xa2>
 80008fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000900:	e005      	b.n	800090e <HAL_DMA_Abort_IT+0xa2>
 8000902:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000906:	e002      	b.n	800090e <HAL_DMA_Abort_IT+0xa2>
 8000908:	2310      	movs	r3, #16
 800090a:	e000      	b.n	800090e <HAL_DMA_Abort_IT+0xa2>
 800090c:	2301      	movs	r3, #1
 800090e:	4a11      	ldr	r2, [pc, #68]	; (8000954 <HAL_DMA_Abort_IT+0xe8>)
 8000910:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	2201      	movs	r2, #1
 8000916:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	2200      	movs	r2, #0
 800091e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000926:	2b00      	cmp	r3, #0
 8000928:	d003      	beq.n	8000932 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800092e:	6878      	ldr	r0, [r7, #4]
 8000930:	4798      	blx	r3
    } 
  }
  return status;
 8000932:	7bfb      	ldrb	r3, [r7, #15]
}
 8000934:	4618      	mov	r0, r3
 8000936:	3710      	adds	r7, #16
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40020008 	.word	0x40020008
 8000940:	4002001c 	.word	0x4002001c
 8000944:	40020030 	.word	0x40020030
 8000948:	40020044 	.word	0x40020044
 800094c:	40020058 	.word	0x40020058
 8000950:	4002006c 	.word	0x4002006c
 8000954:	40020000 	.word	0x40020000

08000958 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b08a      	sub	sp, #40	; 0x28
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
 8000960:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000962:	2300      	movs	r3, #0
 8000964:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	4a9c      	ldr	r2, [pc, #624]	; (8000be0 <HAL_GPIO_Init+0x288>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d013      	beq.n	800099a <HAL_GPIO_Init+0x42>
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	4a9b      	ldr	r2, [pc, #620]	; (8000be4 <HAL_GPIO_Init+0x28c>)
 8000976:	4293      	cmp	r3, r2
 8000978:	d00f      	beq.n	800099a <HAL_GPIO_Init+0x42>
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	4a9a      	ldr	r2, [pc, #616]	; (8000be8 <HAL_GPIO_Init+0x290>)
 800097e:	4293      	cmp	r3, r2
 8000980:	d00b      	beq.n	800099a <HAL_GPIO_Init+0x42>
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	4a99      	ldr	r2, [pc, #612]	; (8000bec <HAL_GPIO_Init+0x294>)
 8000986:	4293      	cmp	r3, r2
 8000988:	d007      	beq.n	800099a <HAL_GPIO_Init+0x42>
 800098a:	687b      	ldr	r3, [r7, #4]
 800098c:	4a98      	ldr	r2, [pc, #608]	; (8000bf0 <HAL_GPIO_Init+0x298>)
 800098e:	4293      	cmp	r3, r2
 8000990:	d003      	beq.n	800099a <HAL_GPIO_Init+0x42>
 8000992:	21bd      	movs	r1, #189	; 0xbd
 8000994:	4897      	ldr	r0, [pc, #604]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000996:	f7ff fc95 	bl	80002c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b29b      	uxth	r3, r3
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d005      	beq.n	80009b0 <HAL_GPIO_Init+0x58>
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	0c1b      	lsrs	r3, r3, #16
 80009aa:	041b      	lsls	r3, r3, #16
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d003      	beq.n	80009b8 <HAL_GPIO_Init+0x60>
 80009b0:	21be      	movs	r1, #190	; 0xbe
 80009b2:	4890      	ldr	r0, [pc, #576]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 80009b4:	f7ff fc86 	bl	80002c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80009b8:	683b      	ldr	r3, [r7, #0]
 80009ba:	685b      	ldr	r3, [r3, #4]
 80009bc:	2b00      	cmp	r3, #0
 80009be:	f000 81eb 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	685b      	ldr	r3, [r3, #4]
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	f000 81e6 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	2b11      	cmp	r3, #17
 80009d2:	f000 81e1 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	685b      	ldr	r3, [r3, #4]
 80009da:	2b02      	cmp	r3, #2
 80009dc:	f000 81dc 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 80009e0:	683b      	ldr	r3, [r7, #0]
 80009e2:	685b      	ldr	r3, [r3, #4]
 80009e4:	2b12      	cmp	r3, #18
 80009e6:	f000 81d7 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	4a82      	ldr	r2, [pc, #520]	; (8000bf8 <HAL_GPIO_Init+0x2a0>)
 80009f0:	4293      	cmp	r3, r2
 80009f2:	f000 81d1 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 80009f6:	683b      	ldr	r3, [r7, #0]
 80009f8:	685b      	ldr	r3, [r3, #4]
 80009fa:	4a80      	ldr	r2, [pc, #512]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 80009fc:	4293      	cmp	r3, r2
 80009fe:	f000 81cb 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 8000a02:	683b      	ldr	r3, [r7, #0]
 8000a04:	685b      	ldr	r3, [r3, #4]
 8000a06:	4a7e      	ldr	r2, [pc, #504]	; (8000c00 <HAL_GPIO_Init+0x2a8>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	f000 81c5 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	4a7c      	ldr	r2, [pc, #496]	; (8000c04 <HAL_GPIO_Init+0x2ac>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	f000 81bf 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 8000a1a:	683b      	ldr	r3, [r7, #0]
 8000a1c:	685b      	ldr	r3, [r3, #4]
 8000a1e:	4a7a      	ldr	r2, [pc, #488]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 8000a20:	4293      	cmp	r3, r2
 8000a22:	f000 81b9 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 8000a26:	683b      	ldr	r3, [r7, #0]
 8000a28:	685b      	ldr	r3, [r3, #4]
 8000a2a:	4a78      	ldr	r2, [pc, #480]	; (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	f000 81b3 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 8000a32:	683b      	ldr	r3, [r7, #0]
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	2b03      	cmp	r3, #3
 8000a38:	f000 81ae 	beq.w	8000d98 <HAL_GPIO_Init+0x440>
 8000a3c:	21bf      	movs	r1, #191	; 0xbf
 8000a3e:	486d      	ldr	r0, [pc, #436]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000a40:	f7ff fc40 	bl	80002c4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a44:	e1a8      	b.n	8000d98 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000a46:	2201      	movs	r2, #1
 8000a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	69fa      	ldr	r2, [r7, #28]
 8000a56:	4013      	ands	r3, r2
 8000a58:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	69fb      	ldr	r3, [r7, #28]
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	f040 8197 	bne.w	8000d92 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	4a5e      	ldr	r2, [pc, #376]	; (8000be0 <HAL_GPIO_Init+0x288>)
 8000a68:	4293      	cmp	r3, r2
 8000a6a:	d013      	beq.n	8000a94 <HAL_GPIO_Init+0x13c>
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	4a5d      	ldr	r2, [pc, #372]	; (8000be4 <HAL_GPIO_Init+0x28c>)
 8000a70:	4293      	cmp	r3, r2
 8000a72:	d00f      	beq.n	8000a94 <HAL_GPIO_Init+0x13c>
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	4a5c      	ldr	r2, [pc, #368]	; (8000be8 <HAL_GPIO_Init+0x290>)
 8000a78:	4293      	cmp	r3, r2
 8000a7a:	d00b      	beq.n	8000a94 <HAL_GPIO_Init+0x13c>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4a5b      	ldr	r2, [pc, #364]	; (8000bec <HAL_GPIO_Init+0x294>)
 8000a80:	4293      	cmp	r3, r2
 8000a82:	d007      	beq.n	8000a94 <HAL_GPIO_Init+0x13c>
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	4a5a      	ldr	r2, [pc, #360]	; (8000bf0 <HAL_GPIO_Init+0x298>)
 8000a88:	4293      	cmp	r3, r2
 8000a8a:	d003      	beq.n	8000a94 <HAL_GPIO_Init+0x13c>
 8000a8c:	21cd      	movs	r1, #205	; 0xcd
 8000a8e:	4859      	ldr	r0, [pc, #356]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000a90:	f7ff fc18 	bl	80002c4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b12      	cmp	r3, #18
 8000a9a:	d065      	beq.n	8000b68 <HAL_GPIO_Init+0x210>
 8000a9c:	2b12      	cmp	r3, #18
 8000a9e:	d80e      	bhi.n	8000abe <HAL_GPIO_Init+0x166>
 8000aa0:	2b02      	cmp	r3, #2
 8000aa2:	d04c      	beq.n	8000b3e <HAL_GPIO_Init+0x1e6>
 8000aa4:	2b02      	cmp	r3, #2
 8000aa6:	d804      	bhi.n	8000ab2 <HAL_GPIO_Init+0x15a>
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d072      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
 8000aac:	2b01      	cmp	r3, #1
 8000aae:	d01d      	beq.n	8000aec <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ab0:	e0b1      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000ab2:	2b03      	cmp	r3, #3
 8000ab4:	f000 80ac 	beq.w	8000c10 <HAL_GPIO_Init+0x2b8>
 8000ab8:	2b11      	cmp	r3, #17
 8000aba:	d02b      	beq.n	8000b14 <HAL_GPIO_Init+0x1bc>
          break;
 8000abc:	e0ab      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000abe:	4a4f      	ldr	r2, [pc, #316]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 8000ac0:	4293      	cmp	r3, r2
 8000ac2:	d066      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
 8000ac4:	4a4d      	ldr	r2, [pc, #308]	; (8000bfc <HAL_GPIO_Init+0x2a4>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d806      	bhi.n	8000ad8 <HAL_GPIO_Init+0x180>
 8000aca:	4a4b      	ldr	r2, [pc, #300]	; (8000bf8 <HAL_GPIO_Init+0x2a0>)
 8000acc:	4293      	cmp	r3, r2
 8000ace:	d060      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
 8000ad0:	4a4c      	ldr	r2, [pc, #304]	; (8000c04 <HAL_GPIO_Init+0x2ac>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d05d      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
          break;
 8000ad6:	e09e      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000ad8:	4a49      	ldr	r2, [pc, #292]	; (8000c00 <HAL_GPIO_Init+0x2a8>)
 8000ada:	4293      	cmp	r3, r2
 8000adc:	d059      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
 8000ade:	4a4b      	ldr	r2, [pc, #300]	; (8000c0c <HAL_GPIO_Init+0x2b4>)
 8000ae0:	4293      	cmp	r3, r2
 8000ae2:	d056      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
 8000ae4:	4a48      	ldr	r2, [pc, #288]	; (8000c08 <HAL_GPIO_Init+0x2b0>)
 8000ae6:	4293      	cmp	r3, r2
 8000ae8:	d053      	beq.n	8000b92 <HAL_GPIO_Init+0x23a>
          break;
 8000aea:	e094      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	2b02      	cmp	r3, #2
 8000af2:	d00b      	beq.n	8000b0c <HAL_GPIO_Init+0x1b4>
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	68db      	ldr	r3, [r3, #12]
 8000af8:	2b01      	cmp	r3, #1
 8000afa:	d007      	beq.n	8000b0c <HAL_GPIO_Init+0x1b4>
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	68db      	ldr	r3, [r3, #12]
 8000b00:	2b03      	cmp	r3, #3
 8000b02:	d003      	beq.n	8000b0c <HAL_GPIO_Init+0x1b4>
 8000b04:	21d5      	movs	r1, #213	; 0xd5
 8000b06:	483b      	ldr	r0, [pc, #236]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000b08:	f7ff fbdc 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	68db      	ldr	r3, [r3, #12]
 8000b10:	623b      	str	r3, [r7, #32]
          break;
 8000b12:	e080      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b14:	683b      	ldr	r3, [r7, #0]
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	2b02      	cmp	r3, #2
 8000b1a:	d00b      	beq.n	8000b34 <HAL_GPIO_Init+0x1dc>
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	68db      	ldr	r3, [r3, #12]
 8000b20:	2b01      	cmp	r3, #1
 8000b22:	d007      	beq.n	8000b34 <HAL_GPIO_Init+0x1dc>
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	68db      	ldr	r3, [r3, #12]
 8000b28:	2b03      	cmp	r3, #3
 8000b2a:	d003      	beq.n	8000b34 <HAL_GPIO_Init+0x1dc>
 8000b2c:	21dc      	movs	r1, #220	; 0xdc
 8000b2e:	4831      	ldr	r0, [pc, #196]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000b30:	f7ff fbc8 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000b34:	683b      	ldr	r3, [r7, #0]
 8000b36:	68db      	ldr	r3, [r3, #12]
 8000b38:	3304      	adds	r3, #4
 8000b3a:	623b      	str	r3, [r7, #32]
          break;
 8000b3c:	e06b      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b3e:	683b      	ldr	r3, [r7, #0]
 8000b40:	68db      	ldr	r3, [r3, #12]
 8000b42:	2b02      	cmp	r3, #2
 8000b44:	d00b      	beq.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	68db      	ldr	r3, [r3, #12]
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d007      	beq.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b4e:	683b      	ldr	r3, [r7, #0]
 8000b50:	68db      	ldr	r3, [r3, #12]
 8000b52:	2b03      	cmp	r3, #3
 8000b54:	d003      	beq.n	8000b5e <HAL_GPIO_Init+0x206>
 8000b56:	21e3      	movs	r1, #227	; 0xe3
 8000b58:	4826      	ldr	r0, [pc, #152]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000b5a:	f7ff fbb3 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	68db      	ldr	r3, [r3, #12]
 8000b62:	3308      	adds	r3, #8
 8000b64:	623b      	str	r3, [r7, #32]
          break;
 8000b66:	e056      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	68db      	ldr	r3, [r3, #12]
 8000b6c:	2b02      	cmp	r3, #2
 8000b6e:	d00b      	beq.n	8000b88 <HAL_GPIO_Init+0x230>
 8000b70:	683b      	ldr	r3, [r7, #0]
 8000b72:	68db      	ldr	r3, [r3, #12]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	d007      	beq.n	8000b88 <HAL_GPIO_Init+0x230>
 8000b78:	683b      	ldr	r3, [r7, #0]
 8000b7a:	68db      	ldr	r3, [r3, #12]
 8000b7c:	2b03      	cmp	r3, #3
 8000b7e:	d003      	beq.n	8000b88 <HAL_GPIO_Init+0x230>
 8000b80:	21ea      	movs	r1, #234	; 0xea
 8000b82:	481c      	ldr	r0, [pc, #112]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000b84:	f7ff fb9e 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000b88:	683b      	ldr	r3, [r7, #0]
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	330c      	adds	r3, #12
 8000b8e:	623b      	str	r3, [r7, #32]
          break;
 8000b90:	e041      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000b92:	683b      	ldr	r3, [r7, #0]
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d00b      	beq.n	8000bb2 <HAL_GPIO_Init+0x25a>
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b01      	cmp	r3, #1
 8000ba0:	d007      	beq.n	8000bb2 <HAL_GPIO_Init+0x25a>
 8000ba2:	683b      	ldr	r3, [r7, #0]
 8000ba4:	689b      	ldr	r3, [r3, #8]
 8000ba6:	2b02      	cmp	r3, #2
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_Init+0x25a>
 8000baa:	21f7      	movs	r1, #247	; 0xf7
 8000bac:	4811      	ldr	r0, [pc, #68]	; (8000bf4 <HAL_GPIO_Init+0x29c>)
 8000bae:	f7ff fb89 	bl	80002c4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	689b      	ldr	r3, [r3, #8]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d102      	bne.n	8000bc0 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000bba:	2304      	movs	r3, #4
 8000bbc:	623b      	str	r3, [r7, #32]
          break;
 8000bbe:	e02a      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	2b01      	cmp	r3, #1
 8000bc6:	d105      	bne.n	8000bd4 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bc8:	2308      	movs	r3, #8
 8000bca:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	69fa      	ldr	r2, [r7, #28]
 8000bd0:	611a      	str	r2, [r3, #16]
          break;
 8000bd2:	e020      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000bd4:	2308      	movs	r3, #8
 8000bd6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	69fa      	ldr	r2, [r7, #28]
 8000bdc:	615a      	str	r2, [r3, #20]
          break;
 8000bde:	e01a      	b.n	8000c16 <HAL_GPIO_Init+0x2be>
 8000be0:	40010800 	.word	0x40010800
 8000be4:	40010c00 	.word	0x40010c00
 8000be8:	40011000 	.word	0x40011000
 8000bec:	40011400 	.word	0x40011400
 8000bf0:	40011800 	.word	0x40011800
 8000bf4:	0800256c 	.word	0x0800256c
 8000bf8:	10110000 	.word	0x10110000
 8000bfc:	10210000 	.word	0x10210000
 8000c00:	10310000 	.word	0x10310000
 8000c04:	10120000 	.word	0x10120000
 8000c08:	10220000 	.word	0x10220000
 8000c0c:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000c10:	2300      	movs	r3, #0
 8000c12:	623b      	str	r3, [r7, #32]
          break;
 8000c14:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000c16:	69bb      	ldr	r3, [r7, #24]
 8000c18:	2bff      	cmp	r3, #255	; 0xff
 8000c1a:	d801      	bhi.n	8000c20 <HAL_GPIO_Init+0x2c8>
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	e001      	b.n	8000c24 <HAL_GPIO_Init+0x2cc>
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	3304      	adds	r3, #4
 8000c24:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000c26:	69bb      	ldr	r3, [r7, #24]
 8000c28:	2bff      	cmp	r3, #255	; 0xff
 8000c2a:	d802      	bhi.n	8000c32 <HAL_GPIO_Init+0x2da>
 8000c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c2e:	009b      	lsls	r3, r3, #2
 8000c30:	e002      	b.n	8000c38 <HAL_GPIO_Init+0x2e0>
 8000c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c34:	3b08      	subs	r3, #8
 8000c36:	009b      	lsls	r3, r3, #2
 8000c38:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	681a      	ldr	r2, [r3, #0]
 8000c3e:	210f      	movs	r1, #15
 8000c40:	693b      	ldr	r3, [r7, #16]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43db      	mvns	r3, r3
 8000c48:	401a      	ands	r2, r3
 8000c4a:	6a39      	ldr	r1, [r7, #32]
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c52:	431a      	orrs	r2, r3
 8000c54:	697b      	ldr	r3, [r7, #20]
 8000c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685b      	ldr	r3, [r3, #4]
 8000c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	f000 8096 	beq.w	8000d92 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000c66:	4b52      	ldr	r3, [pc, #328]	; (8000db0 <HAL_GPIO_Init+0x458>)
 8000c68:	699b      	ldr	r3, [r3, #24]
 8000c6a:	4a51      	ldr	r2, [pc, #324]	; (8000db0 <HAL_GPIO_Init+0x458>)
 8000c6c:	f043 0301 	orr.w	r3, r3, #1
 8000c70:	6193      	str	r3, [r2, #24]
 8000c72:	4b4f      	ldr	r3, [pc, #316]	; (8000db0 <HAL_GPIO_Init+0x458>)
 8000c74:	699b      	ldr	r3, [r3, #24]
 8000c76:	f003 0301 	and.w	r3, r3, #1
 8000c7a:	60bb      	str	r3, [r7, #8]
 8000c7c:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000c7e:	4a4d      	ldr	r2, [pc, #308]	; (8000db4 <HAL_GPIO_Init+0x45c>)
 8000c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c82:	089b      	lsrs	r3, r3, #2
 8000c84:	3302      	adds	r3, #2
 8000c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c8a:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8e:	f003 0303 	and.w	r3, r3, #3
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	220f      	movs	r2, #15
 8000c96:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9a:	43db      	mvns	r3, r3
 8000c9c:	68fa      	ldr	r2, [r7, #12]
 8000c9e:	4013      	ands	r3, r2
 8000ca0:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	4a44      	ldr	r2, [pc, #272]	; (8000db8 <HAL_GPIO_Init+0x460>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d013      	beq.n	8000cd2 <HAL_GPIO_Init+0x37a>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4a43      	ldr	r2, [pc, #268]	; (8000dbc <HAL_GPIO_Init+0x464>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d00d      	beq.n	8000cce <HAL_GPIO_Init+0x376>
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	4a42      	ldr	r2, [pc, #264]	; (8000dc0 <HAL_GPIO_Init+0x468>)
 8000cb6:	4293      	cmp	r3, r2
 8000cb8:	d007      	beq.n	8000cca <HAL_GPIO_Init+0x372>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	4a41      	ldr	r2, [pc, #260]	; (8000dc4 <HAL_GPIO_Init+0x46c>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d101      	bne.n	8000cc6 <HAL_GPIO_Init+0x36e>
 8000cc2:	2303      	movs	r3, #3
 8000cc4:	e006      	b.n	8000cd4 <HAL_GPIO_Init+0x37c>
 8000cc6:	2304      	movs	r3, #4
 8000cc8:	e004      	b.n	8000cd4 <HAL_GPIO_Init+0x37c>
 8000cca:	2302      	movs	r3, #2
 8000ccc:	e002      	b.n	8000cd4 <HAL_GPIO_Init+0x37c>
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e000      	b.n	8000cd4 <HAL_GPIO_Init+0x37c>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000cd6:	f002 0203 	and.w	r2, r2, #3
 8000cda:	0092      	lsls	r2, r2, #2
 8000cdc:	4093      	lsls	r3, r2
 8000cde:	68fa      	ldr	r2, [r7, #12]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000ce4:	4933      	ldr	r1, [pc, #204]	; (8000db4 <HAL_GPIO_Init+0x45c>)
 8000ce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce8:	089b      	lsrs	r3, r3, #2
 8000cea:	3302      	adds	r3, #2
 8000cec:	68fa      	ldr	r2, [r7, #12]
 8000cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	685b      	ldr	r3, [r3, #4]
 8000cf6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d006      	beq.n	8000d0c <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000cfe:	4b32      	ldr	r3, [pc, #200]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d00:	681a      	ldr	r2, [r3, #0]
 8000d02:	4931      	ldr	r1, [pc, #196]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d04:	69bb      	ldr	r3, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	600b      	str	r3, [r1, #0]
 8000d0a:	e006      	b.n	8000d1a <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000d0c:	4b2e      	ldr	r3, [pc, #184]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	69bb      	ldr	r3, [r7, #24]
 8000d12:	43db      	mvns	r3, r3
 8000d14:	492c      	ldr	r1, [pc, #176]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d16:	4013      	ands	r3, r2
 8000d18:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d006      	beq.n	8000d34 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000d26:	4b28      	ldr	r3, [pc, #160]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d28:	685a      	ldr	r2, [r3, #4]
 8000d2a:	4927      	ldr	r1, [pc, #156]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d2c:	69bb      	ldr	r3, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	604b      	str	r3, [r1, #4]
 8000d32:	e006      	b.n	8000d42 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000d34:	4b24      	ldr	r3, [pc, #144]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d36:	685a      	ldr	r2, [r3, #4]
 8000d38:	69bb      	ldr	r3, [r7, #24]
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	4922      	ldr	r1, [pc, #136]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d3e:	4013      	ands	r3, r2
 8000d40:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	685b      	ldr	r3, [r3, #4]
 8000d46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d006      	beq.n	8000d5c <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000d4e:	4b1e      	ldr	r3, [pc, #120]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d50:	689a      	ldr	r2, [r3, #8]
 8000d52:	491d      	ldr	r1, [pc, #116]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	4313      	orrs	r3, r2
 8000d58:	608b      	str	r3, [r1, #8]
 8000d5a:	e006      	b.n	8000d6a <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000d5c:	4b1a      	ldr	r3, [pc, #104]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d5e:	689a      	ldr	r2, [r3, #8]
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	43db      	mvns	r3, r3
 8000d64:	4918      	ldr	r1, [pc, #96]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d66:	4013      	ands	r3, r2
 8000d68:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d006      	beq.n	8000d84 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000d76:	4b14      	ldr	r3, [pc, #80]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d78:	68da      	ldr	r2, [r3, #12]
 8000d7a:	4913      	ldr	r1, [pc, #76]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d7c:	69bb      	ldr	r3, [r7, #24]
 8000d7e:	4313      	orrs	r3, r2
 8000d80:	60cb      	str	r3, [r1, #12]
 8000d82:	e006      	b.n	8000d92 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000d84:	4b10      	ldr	r3, [pc, #64]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d86:	68da      	ldr	r2, [r3, #12]
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	43db      	mvns	r3, r3
 8000d8c:	490e      	ldr	r1, [pc, #56]	; (8000dc8 <HAL_GPIO_Init+0x470>)
 8000d8e:	4013      	ands	r3, r2
 8000d90:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000d92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d94:	3301      	adds	r3, #1
 8000d96:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681a      	ldr	r2, [r3, #0]
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	fa22 f303 	lsr.w	r3, r2, r3
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	f47f ae4f 	bne.w	8000a46 <HAL_GPIO_Init+0xee>
  }
}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021000 	.word	0x40021000
 8000db4:	40010000 	.word	0x40010000
 8000db8:	40010800 	.word	0x40010800
 8000dbc:	40010c00 	.word	0x40010c00
 8000dc0:	40011000 	.word	0x40011000
 8000dc4:	40011400 	.word	0x40011400
 8000dc8:	40010400 	.word	0x40010400

08000dcc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	b082      	sub	sp, #8
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
 8000dd4:	460b      	mov	r3, r1
 8000dd6:	807b      	strh	r3, [r7, #2]
 8000dd8:	4613      	mov	r3, r2
 8000dda:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000ddc:	887b      	ldrh	r3, [r7, #2]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d004      	beq.n	8000dec <HAL_GPIO_WritePin+0x20>
 8000de2:	887b      	ldrh	r3, [r7, #2]
 8000de4:	0c1b      	lsrs	r3, r3, #16
 8000de6:	041b      	lsls	r3, r3, #16
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d004      	beq.n	8000df6 <HAL_GPIO_WritePin+0x2a>
 8000dec:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8000df0:	480e      	ldr	r0, [pc, #56]	; (8000e2c <HAL_GPIO_WritePin+0x60>)
 8000df2:	f7ff fa67 	bl	80002c4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000df6:	787b      	ldrb	r3, [r7, #1]
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d007      	beq.n	8000e0c <HAL_GPIO_WritePin+0x40>
 8000dfc:	787b      	ldrb	r3, [r7, #1]
 8000dfe:	2b01      	cmp	r3, #1
 8000e00:	d004      	beq.n	8000e0c <HAL_GPIO_WritePin+0x40>
 8000e02:	f240 11d5 	movw	r1, #469	; 0x1d5
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <HAL_GPIO_WritePin+0x60>)
 8000e08:	f7ff fa5c 	bl	80002c4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000e0c:	787b      	ldrb	r3, [r7, #1]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d003      	beq.n	8000e1a <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000e12:	887a      	ldrh	r2, [r7, #2]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000e18:	e003      	b.n	8000e22 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000e1a:	887b      	ldrh	r3, [r7, #2]
 8000e1c:	041a      	lsls	r2, r3, #16
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	611a      	str	r2, [r3, #16]
}
 8000e22:	bf00      	nop
 8000e24:	3708      	adds	r7, #8
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	0800256c 	.word	0x0800256c

08000e30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b086      	sub	sp, #24
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d101      	bne.n	8000e42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e35c      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d01c      	beq.n	8000e84 <HAL_RCC_OscConfig+0x54>
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d116      	bne.n	8000e84 <HAL_RCC_OscConfig+0x54>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0302 	and.w	r3, r3, #2
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d110      	bne.n	8000e84 <HAL_RCC_OscConfig+0x54>
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	f003 0308 	and.w	r3, r3, #8
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d10a      	bne.n	8000e84 <HAL_RCC_OscConfig+0x54>
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f003 0304 	and.w	r3, r3, #4
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d104      	bne.n	8000e84 <HAL_RCC_OscConfig+0x54>
 8000e7a:	f240 1167 	movw	r1, #359	; 0x167
 8000e7e:	48a5      	ldr	r0, [pc, #660]	; (8001114 <HAL_RCC_OscConfig+0x2e4>)
 8000e80:	f7ff fa20 	bl	80002c4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0301 	and.w	r3, r3, #1
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	f000 809a 	beq.w	8000fc6 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d00e      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x88>
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	685b      	ldr	r3, [r3, #4]
 8000e9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea2:	d009      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x88>
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000eac:	d004      	beq.n	8000eb8 <HAL_RCC_OscConfig+0x88>
 8000eae:	f240 116d 	movw	r1, #365	; 0x16d
 8000eb2:	4898      	ldr	r0, [pc, #608]	; (8001114 <HAL_RCC_OscConfig+0x2e4>)
 8000eb4:	f7ff fa06 	bl	80002c4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000eb8:	4b97      	ldr	r3, [pc, #604]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f003 030c 	and.w	r3, r3, #12
 8000ec0:	2b04      	cmp	r3, #4
 8000ec2:	d00c      	beq.n	8000ede <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ec4:	4b94      	ldr	r3, [pc, #592]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 030c 	and.w	r3, r3, #12
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d112      	bne.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
 8000ed0:	4b91      	ldr	r3, [pc, #580]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000edc:	d10b      	bne.n	8000ef6 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ede:	4b8e      	ldr	r3, [pc, #568]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d06c      	beq.n	8000fc4 <HAL_RCC_OscConfig+0x194>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	685b      	ldr	r3, [r3, #4]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d168      	bne.n	8000fc4 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8000ef2:	2301      	movs	r3, #1
 8000ef4:	e302      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	685b      	ldr	r3, [r3, #4]
 8000efa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000efe:	d106      	bne.n	8000f0e <HAL_RCC_OscConfig+0xde>
 8000f00:	4b85      	ldr	r3, [pc, #532]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a84      	ldr	r2, [pc, #528]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f0a:	6013      	str	r3, [r2, #0]
 8000f0c:	e02e      	b.n	8000f6c <HAL_RCC_OscConfig+0x13c>
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	685b      	ldr	r3, [r3, #4]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d10c      	bne.n	8000f30 <HAL_RCC_OscConfig+0x100>
 8000f16:	4b80      	ldr	r3, [pc, #512]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	4a7f      	ldr	r2, [pc, #508]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f20:	6013      	str	r3, [r2, #0]
 8000f22:	4b7d      	ldr	r3, [pc, #500]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a7c      	ldr	r2, [pc, #496]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f28:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e01d      	b.n	8000f6c <HAL_RCC_OscConfig+0x13c>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	685b      	ldr	r3, [r3, #4]
 8000f34:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000f38:	d10c      	bne.n	8000f54 <HAL_RCC_OscConfig+0x124>
 8000f3a:	4b77      	ldr	r3, [pc, #476]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4a76      	ldr	r2, [pc, #472]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f40:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f44:	6013      	str	r3, [r2, #0]
 8000f46:	4b74      	ldr	r3, [pc, #464]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	4a73      	ldr	r2, [pc, #460]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e00b      	b.n	8000f6c <HAL_RCC_OscConfig+0x13c>
 8000f54:	4b70      	ldr	r3, [pc, #448]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	4a6f      	ldr	r2, [pc, #444]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f5e:	6013      	str	r3, [r2, #0]
 8000f60:	4b6d      	ldr	r3, [pc, #436]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a6c      	ldr	r2, [pc, #432]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f6a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	d013      	beq.n	8000f9c <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f74:	f7ff fb34 	bl	80005e0 <HAL_GetTick>
 8000f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f7a:	e008      	b.n	8000f8e <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000f7c:	f7ff fb30 	bl	80005e0 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	693b      	ldr	r3, [r7, #16]
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b64      	cmp	r3, #100	; 0x64
 8000f88:	d901      	bls.n	8000f8e <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	e2b6      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f8e:	4b62      	ldr	r3, [pc, #392]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d0f0      	beq.n	8000f7c <HAL_RCC_OscConfig+0x14c>
 8000f9a:	e014      	b.n	8000fc6 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f9c:	f7ff fb20 	bl	80005e0 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa2:	e008      	b.n	8000fb6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000fa4:	f7ff fb1c 	bl	80005e0 <HAL_GetTick>
 8000fa8:	4602      	mov	r2, r0
 8000faa:	693b      	ldr	r3, [r7, #16]
 8000fac:	1ad3      	subs	r3, r2, r3
 8000fae:	2b64      	cmp	r3, #100	; 0x64
 8000fb0:	d901      	bls.n	8000fb6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000fb2:	2303      	movs	r3, #3
 8000fb4:	e2a2      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fb6:	4b58      	ldr	r3, [pc, #352]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1f0      	bne.n	8000fa4 <HAL_RCC_OscConfig+0x174>
 8000fc2:	e000      	b.n	8000fc6 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	f003 0302 	and.w	r3, r3, #2
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d079      	beq.n	80010c6 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	691b      	ldr	r3, [r3, #16]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d008      	beq.n	8000fec <HAL_RCC_OscConfig+0x1bc>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	691b      	ldr	r3, [r3, #16]
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d004      	beq.n	8000fec <HAL_RCC_OscConfig+0x1bc>
 8000fe2:	f240 11a1 	movw	r1, #417	; 0x1a1
 8000fe6:	484b      	ldr	r0, [pc, #300]	; (8001114 <HAL_RCC_OscConfig+0x2e4>)
 8000fe8:	f7ff f96c 	bl	80002c4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	695b      	ldr	r3, [r3, #20]
 8000ff0:	2b1f      	cmp	r3, #31
 8000ff2:	d904      	bls.n	8000ffe <HAL_RCC_OscConfig+0x1ce>
 8000ff4:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8000ff8:	4846      	ldr	r0, [pc, #280]	; (8001114 <HAL_RCC_OscConfig+0x2e4>)
 8000ffa:	f7ff f963 	bl	80002c4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ffe:	4b46      	ldr	r3, [pc, #280]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8001000:	685b      	ldr	r3, [r3, #4]
 8001002:	f003 030c 	and.w	r3, r3, #12
 8001006:	2b00      	cmp	r3, #0
 8001008:	d00b      	beq.n	8001022 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800100a:	4b43      	ldr	r3, [pc, #268]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	f003 030c 	and.w	r3, r3, #12
 8001012:	2b08      	cmp	r3, #8
 8001014:	d11c      	bne.n	8001050 <HAL_RCC_OscConfig+0x220>
 8001016:	4b40      	ldr	r3, [pc, #256]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800101e:	2b00      	cmp	r3, #0
 8001020:	d116      	bne.n	8001050 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001022:	4b3d      	ldr	r3, [pc, #244]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	2b00      	cmp	r3, #0
 800102c:	d005      	beq.n	800103a <HAL_RCC_OscConfig+0x20a>
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	691b      	ldr	r3, [r3, #16]
 8001032:	2b01      	cmp	r3, #1
 8001034:	d001      	beq.n	800103a <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e260      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800103a:	4b37      	ldr	r3, [pc, #220]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	695b      	ldr	r3, [r3, #20]
 8001046:	00db      	lsls	r3, r3, #3
 8001048:	4933      	ldr	r1, [pc, #204]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 800104a:	4313      	orrs	r3, r2
 800104c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800104e:	e03a      	b.n	80010c6 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	691b      	ldr	r3, [r3, #16]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d020      	beq.n	800109a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001058:	4b30      	ldr	r3, [pc, #192]	; (800111c <HAL_RCC_OscConfig+0x2ec>)
 800105a:	2201      	movs	r2, #1
 800105c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105e:	f7ff fabf 	bl	80005e0 <HAL_GetTick>
 8001062:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001064:	e008      	b.n	8001078 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff fabb 	bl	80005e0 <HAL_GetTick>
 800106a:	4602      	mov	r2, r0
 800106c:	693b      	ldr	r3, [r7, #16]
 800106e:	1ad3      	subs	r3, r2, r3
 8001070:	2b02      	cmp	r3, #2
 8001072:	d901      	bls.n	8001078 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001074:	2303      	movs	r3, #3
 8001076:	e241      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	4b27      	ldr	r3, [pc, #156]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0302 	and.w	r3, r3, #2
 8001080:	2b00      	cmp	r3, #0
 8001082:	d0f0      	beq.n	8001066 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	695b      	ldr	r3, [r3, #20]
 8001090:	00db      	lsls	r3, r3, #3
 8001092:	4921      	ldr	r1, [pc, #132]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 8001094:	4313      	orrs	r3, r2
 8001096:	600b      	str	r3, [r1, #0]
 8001098:	e015      	b.n	80010c6 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800109a:	4b20      	ldr	r3, [pc, #128]	; (800111c <HAL_RCC_OscConfig+0x2ec>)
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fa9e 	bl	80005e0 <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80010a8:	f7ff fa9a 	bl	80005e0 <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e220      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010ba:	4b17      	ldr	r3, [pc, #92]	; (8001118 <HAL_RCC_OscConfig+0x2e8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d1f0      	bne.n	80010a8 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	f003 0308 	and.w	r3, r3, #8
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d048      	beq.n	8001164 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	699b      	ldr	r3, [r3, #24]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d008      	beq.n	80010ec <HAL_RCC_OscConfig+0x2bc>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	699b      	ldr	r3, [r3, #24]
 80010de:	2b01      	cmp	r3, #1
 80010e0:	d004      	beq.n	80010ec <HAL_RCC_OscConfig+0x2bc>
 80010e2:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80010e6:	480b      	ldr	r0, [pc, #44]	; (8001114 <HAL_RCC_OscConfig+0x2e4>)
 80010e8:	f7ff f8ec 	bl	80002c4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	699b      	ldr	r3, [r3, #24]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d021      	beq.n	8001138 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80010f4:	4b0a      	ldr	r3, [pc, #40]	; (8001120 <HAL_RCC_OscConfig+0x2f0>)
 80010f6:	2201      	movs	r2, #1
 80010f8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010fa:	f7ff fa71 	bl	80005e0 <HAL_GetTick>
 80010fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001100:	e010      	b.n	8001124 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001102:	f7ff fa6d 	bl	80005e0 <HAL_GetTick>
 8001106:	4602      	mov	r2, r0
 8001108:	693b      	ldr	r3, [r7, #16]
 800110a:	1ad3      	subs	r3, r2, r3
 800110c:	2b02      	cmp	r3, #2
 800110e:	d909      	bls.n	8001124 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001110:	2303      	movs	r3, #3
 8001112:	e1f3      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
 8001114:	080025a8 	.word	0x080025a8
 8001118:	40021000 	.word	0x40021000
 800111c:	42420000 	.word	0x42420000
 8001120:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001124:	4b67      	ldr	r3, [pc, #412]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f003 0302 	and.w	r3, r3, #2
 800112c:	2b00      	cmp	r3, #0
 800112e:	d0e8      	beq.n	8001102 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 fc11 	bl	8001958 <RCC_Delay>
 8001136:	e015      	b.n	8001164 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001138:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_RCC_OscConfig+0x498>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800113e:	f7ff fa4f 	bl	80005e0 <HAL_GetTick>
 8001142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001144:	e008      	b.n	8001158 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001146:	f7ff fa4b 	bl	80005e0 <HAL_GetTick>
 800114a:	4602      	mov	r2, r0
 800114c:	693b      	ldr	r3, [r7, #16]
 800114e:	1ad3      	subs	r3, r2, r3
 8001150:	2b02      	cmp	r3, #2
 8001152:	d901      	bls.n	8001158 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001154:	2303      	movs	r3, #3
 8001156:	e1d1      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001158:	4b5a      	ldr	r3, [pc, #360]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800115a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115c:	f003 0302 	and.w	r3, r3, #2
 8001160:	2b00      	cmp	r3, #0
 8001162:	d1f0      	bne.n	8001146 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f003 0304 	and.w	r3, r3, #4
 800116c:	2b00      	cmp	r3, #0
 800116e:	f000 80c0 	beq.w	80012f2 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001172:	2300      	movs	r3, #0
 8001174:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	68db      	ldr	r3, [r3, #12]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00c      	beq.n	8001198 <HAL_RCC_OscConfig+0x368>
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	68db      	ldr	r3, [r3, #12]
 8001182:	2b01      	cmp	r3, #1
 8001184:	d008      	beq.n	8001198 <HAL_RCC_OscConfig+0x368>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	68db      	ldr	r3, [r3, #12]
 800118a:	2b05      	cmp	r3, #5
 800118c:	d004      	beq.n	8001198 <HAL_RCC_OscConfig+0x368>
 800118e:	f240 2111 	movw	r1, #529	; 0x211
 8001192:	484e      	ldr	r0, [pc, #312]	; (80012cc <HAL_RCC_OscConfig+0x49c>)
 8001194:	f7ff f896 	bl	80002c4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001198:	4b4a      	ldr	r3, [pc, #296]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800119a:	69db      	ldr	r3, [r3, #28]
 800119c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d10d      	bne.n	80011c0 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011a4:	4b47      	ldr	r3, [pc, #284]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 80011a6:	69db      	ldr	r3, [r3, #28]
 80011a8:	4a46      	ldr	r2, [pc, #280]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 80011aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ae:	61d3      	str	r3, [r2, #28]
 80011b0:	4b44      	ldr	r3, [pc, #272]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 80011b2:	69db      	ldr	r3, [r3, #28]
 80011b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b8:	60bb      	str	r3, [r7, #8]
 80011ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011bc:	2301      	movs	r3, #1
 80011be:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011c0:	4b43      	ldr	r3, [pc, #268]	; (80012d0 <HAL_RCC_OscConfig+0x4a0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d118      	bne.n	80011fe <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011cc:	4b40      	ldr	r3, [pc, #256]	; (80012d0 <HAL_RCC_OscConfig+0x4a0>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a3f      	ldr	r2, [pc, #252]	; (80012d0 <HAL_RCC_OscConfig+0x4a0>)
 80011d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011d6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80011d8:	f7ff fa02 	bl	80005e0 <HAL_GetTick>
 80011dc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011de:	e008      	b.n	80011f2 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011e0:	f7ff f9fe 	bl	80005e0 <HAL_GetTick>
 80011e4:	4602      	mov	r2, r0
 80011e6:	693b      	ldr	r3, [r7, #16]
 80011e8:	1ad3      	subs	r3, r2, r3
 80011ea:	2b64      	cmp	r3, #100	; 0x64
 80011ec:	d901      	bls.n	80011f2 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80011ee:	2303      	movs	r3, #3
 80011f0:	e184      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011f2:	4b37      	ldr	r3, [pc, #220]	; (80012d0 <HAL_RCC_OscConfig+0x4a0>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d0f0      	beq.n	80011e0 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	68db      	ldr	r3, [r3, #12]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d106      	bne.n	8001214 <HAL_RCC_OscConfig+0x3e4>
 8001206:	4b2f      	ldr	r3, [pc, #188]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001208:	6a1b      	ldr	r3, [r3, #32]
 800120a:	4a2e      	ldr	r2, [pc, #184]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800120c:	f043 0301 	orr.w	r3, r3, #1
 8001210:	6213      	str	r3, [r2, #32]
 8001212:	e02d      	b.n	8001270 <HAL_RCC_OscConfig+0x440>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	68db      	ldr	r3, [r3, #12]
 8001218:	2b00      	cmp	r3, #0
 800121a:	d10c      	bne.n	8001236 <HAL_RCC_OscConfig+0x406>
 800121c:	4b29      	ldr	r3, [pc, #164]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a28      	ldr	r2, [pc, #160]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001222:	f023 0301 	bic.w	r3, r3, #1
 8001226:	6213      	str	r3, [r2, #32]
 8001228:	4b26      	ldr	r3, [pc, #152]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800122a:	6a1b      	ldr	r3, [r3, #32]
 800122c:	4a25      	ldr	r2, [pc, #148]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800122e:	f023 0304 	bic.w	r3, r3, #4
 8001232:	6213      	str	r3, [r2, #32]
 8001234:	e01c      	b.n	8001270 <HAL_RCC_OscConfig+0x440>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68db      	ldr	r3, [r3, #12]
 800123a:	2b05      	cmp	r3, #5
 800123c:	d10c      	bne.n	8001258 <HAL_RCC_OscConfig+0x428>
 800123e:	4b21      	ldr	r3, [pc, #132]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	4a20      	ldr	r2, [pc, #128]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001244:	f043 0304 	orr.w	r3, r3, #4
 8001248:	6213      	str	r3, [r2, #32]
 800124a:	4b1e      	ldr	r3, [pc, #120]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	4a1d      	ldr	r2, [pc, #116]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001250:	f043 0301 	orr.w	r3, r3, #1
 8001254:	6213      	str	r3, [r2, #32]
 8001256:	e00b      	b.n	8001270 <HAL_RCC_OscConfig+0x440>
 8001258:	4b1a      	ldr	r3, [pc, #104]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800125a:	6a1b      	ldr	r3, [r3, #32]
 800125c:	4a19      	ldr	r2, [pc, #100]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800125e:	f023 0301 	bic.w	r3, r3, #1
 8001262:	6213      	str	r3, [r2, #32]
 8001264:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001266:	6a1b      	ldr	r3, [r3, #32]
 8001268:	4a16      	ldr	r2, [pc, #88]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 800126a:	f023 0304 	bic.w	r3, r3, #4
 800126e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	68db      	ldr	r3, [r3, #12]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d015      	beq.n	80012a4 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001278:	f7ff f9b2 	bl	80005e0 <HAL_GetTick>
 800127c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127e:	e00a      	b.n	8001296 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001280:	f7ff f9ae 	bl	80005e0 <HAL_GetTick>
 8001284:	4602      	mov	r2, r0
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	f241 3288 	movw	r2, #5000	; 0x1388
 800128e:	4293      	cmp	r3, r2
 8001290:	d901      	bls.n	8001296 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001292:	2303      	movs	r3, #3
 8001294:	e132      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001296:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_RCC_OscConfig+0x494>)
 8001298:	6a1b      	ldr	r3, [r3, #32]
 800129a:	f003 0302 	and.w	r3, r3, #2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d0ee      	beq.n	8001280 <HAL_RCC_OscConfig+0x450>
 80012a2:	e01d      	b.n	80012e0 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012a4:	f7ff f99c 	bl	80005e0 <HAL_GetTick>
 80012a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012aa:	e013      	b.n	80012d4 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80012ac:	f7ff f998 	bl	80005e0 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	693b      	ldr	r3, [r7, #16]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d90a      	bls.n	80012d4 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80012be:	2303      	movs	r3, #3
 80012c0:	e11c      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
 80012c2:	bf00      	nop
 80012c4:	40021000 	.word	0x40021000
 80012c8:	42420480 	.word	0x42420480
 80012cc:	080025a8 	.word	0x080025a8
 80012d0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012d4:	4b8b      	ldr	r3, [pc, #556]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 80012d6:	6a1b      	ldr	r3, [r3, #32]
 80012d8:	f003 0302 	and.w	r3, r3, #2
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d1e5      	bne.n	80012ac <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80012e0:	7dfb      	ldrb	r3, [r7, #23]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d105      	bne.n	80012f2 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012e6:	4b87      	ldr	r3, [pc, #540]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 80012e8:	69db      	ldr	r3, [r3, #28]
 80012ea:	4a86      	ldr	r2, [pc, #536]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 80012ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f0:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	69db      	ldr	r3, [r3, #28]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d00c      	beq.n	8001314 <HAL_RCC_OscConfig+0x4e4>
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	69db      	ldr	r3, [r3, #28]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d008      	beq.n	8001314 <HAL_RCC_OscConfig+0x4e4>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	69db      	ldr	r3, [r3, #28]
 8001306:	2b02      	cmp	r3, #2
 8001308:	d004      	beq.n	8001314 <HAL_RCC_OscConfig+0x4e4>
 800130a:	f240 21af 	movw	r1, #687	; 0x2af
 800130e:	487e      	ldr	r0, [pc, #504]	; (8001508 <HAL_RCC_OscConfig+0x6d8>)
 8001310:	f7fe ffd8 	bl	80002c4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	2b00      	cmp	r3, #0
 800131a:	f000 80ee 	beq.w	80014fa <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800131e:	4b79      	ldr	r3, [pc, #484]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f003 030c 	and.w	r3, r3, #12
 8001326:	2b08      	cmp	r3, #8
 8001328:	f000 80ce 	beq.w	80014c8 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69db      	ldr	r3, [r3, #28]
 8001330:	2b02      	cmp	r3, #2
 8001332:	f040 80b2 	bne.w	800149a <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6a1b      	ldr	r3, [r3, #32]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d009      	beq.n	8001352 <HAL_RCC_OscConfig+0x522>
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6a1b      	ldr	r3, [r3, #32]
 8001342:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001346:	d004      	beq.n	8001352 <HAL_RCC_OscConfig+0x522>
 8001348:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 800134c:	486e      	ldr	r0, [pc, #440]	; (8001508 <HAL_RCC_OscConfig+0x6d8>)
 800134e:	f7fe ffb9 	bl	80002c4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001356:	2b00      	cmp	r3, #0
 8001358:	d04a      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800135e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001362:	d045      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800136c:	d040      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001372:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8001376:	d03b      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800137c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001380:	d036      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001386:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800138a:	d031      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001390:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001394:	d02c      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800139a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800139e:	d027      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80013a8:	d022      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ae:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80013b2:	d01d      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80013bc:	d018      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80013c6:	d013      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013cc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80013d0:	d00e      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013d6:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80013da:	d009      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013e0:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80013e4:	d004      	beq.n	80013f0 <HAL_RCC_OscConfig+0x5c0>
 80013e6:	f240 21b9 	movw	r1, #697	; 0x2b9
 80013ea:	4847      	ldr	r0, [pc, #284]	; (8001508 <HAL_RCC_OscConfig+0x6d8>)
 80013ec:	f7fe ff6a 	bl	80002c4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f0:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x6dc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff f8f3 	bl	80005e0 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff f8ef 	bl	80005e0 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e075      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001410:	4b3c      	ldr	r3, [pc, #240]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001424:	d116      	bne.n	8001454 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689b      	ldr	r3, [r3, #8]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d009      	beq.n	8001442 <HAL_RCC_OscConfig+0x612>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001436:	d004      	beq.n	8001442 <HAL_RCC_OscConfig+0x612>
 8001438:	f240 21cf 	movw	r1, #719	; 0x2cf
 800143c:	4832      	ldr	r0, [pc, #200]	; (8001508 <HAL_RCC_OscConfig+0x6d8>)
 800143e:	f7fe ff41 	bl	80002c4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001442:	4b30      	ldr	r3, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	492d      	ldr	r1, [pc, #180]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 8001450:	4313      	orrs	r3, r2
 8001452:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001454:	4b2b      	ldr	r3, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6a19      	ldr	r1, [r3, #32]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001464:	430b      	orrs	r3, r1
 8001466:	4927      	ldr	r1, [pc, #156]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 8001468:	4313      	orrs	r3, r2
 800146a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x6dc>)
 800146e:	2201      	movs	r2, #1
 8001470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001472:	f7ff f8b5 	bl	80005e0 <HAL_GetTick>
 8001476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001478:	e008      	b.n	800148c <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800147a:	f7ff f8b1 	bl	80005e0 <HAL_GetTick>
 800147e:	4602      	mov	r2, r0
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	1ad3      	subs	r3, r2, r3
 8001484:	2b02      	cmp	r3, #2
 8001486:	d901      	bls.n	800148c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001488:	2303      	movs	r3, #3
 800148a:	e037      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800148c:	4b1d      	ldr	r3, [pc, #116]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d0f0      	beq.n	800147a <HAL_RCC_OscConfig+0x64a>
 8001498:	e02f      	b.n	80014fa <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149a:	4b1c      	ldr	r3, [pc, #112]	; (800150c <HAL_RCC_OscConfig+0x6dc>)
 800149c:	2200      	movs	r2, #0
 800149e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a0:	f7ff f89e 	bl	80005e0 <HAL_GetTick>
 80014a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014a6:	e008      	b.n	80014ba <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a8:	f7ff f89a 	bl	80005e0 <HAL_GetTick>
 80014ac:	4602      	mov	r2, r0
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	2b02      	cmp	r3, #2
 80014b4:	d901      	bls.n	80014ba <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80014b6:	2303      	movs	r3, #3
 80014b8:	e020      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014ba:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f0      	bne.n	80014a8 <HAL_RCC_OscConfig+0x678>
 80014c6:	e018      	b.n	80014fa <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	69db      	ldr	r3, [r3, #28]
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80014d0:	2301      	movs	r3, #1
 80014d2:	e013      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x6d4>)
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a1b      	ldr	r3, [r3, #32]
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d106      	bne.n	80014f6 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f2:	429a      	cmp	r2, r3
 80014f4:	d001      	beq.n	80014fa <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80014f6:	2301      	movs	r3, #1
 80014f8:	e000      	b.n	80014fc <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80014fa:	2300      	movs	r3, #0
}
 80014fc:	4618      	mov	r0, r3
 80014fe:	3718      	adds	r7, #24
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}
 8001504:	40021000 	.word	0x40021000
 8001508:	080025a8 	.word	0x080025a8
 800150c:	42420060 	.word	0x42420060

08001510 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d101      	bne.n	8001524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001520:	2301      	movs	r3, #1
 8001522:	e176      	b.n	8001812 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d116      	bne.n	800155e <HAL_RCC_ClockConfig+0x4e>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0302 	and.w	r3, r3, #2
 8001538:	2b00      	cmp	r3, #0
 800153a:	d110      	bne.n	800155e <HAL_RCC_ClockConfig+0x4e>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0304 	and.w	r3, r3, #4
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10a      	bne.n	800155e <HAL_RCC_ClockConfig+0x4e>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0308 	and.w	r3, r3, #8
 8001550:	2b00      	cmp	r3, #0
 8001552:	d104      	bne.n	800155e <HAL_RCC_ClockConfig+0x4e>
 8001554:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001558:	4874      	ldr	r0, [pc, #464]	; (800172c <HAL_RCC_ClockConfig+0x21c>)
 800155a:	f7fe feb3 	bl	80002c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d00a      	beq.n	800157a <HAL_RCC_ClockConfig+0x6a>
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	2b01      	cmp	r3, #1
 8001568:	d007      	beq.n	800157a <HAL_RCC_ClockConfig+0x6a>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b02      	cmp	r3, #2
 800156e:	d004      	beq.n	800157a <HAL_RCC_ClockConfig+0x6a>
 8001570:	f240 3139 	movw	r1, #825	; 0x339
 8001574:	486d      	ldr	r0, [pc, #436]	; (800172c <HAL_RCC_ClockConfig+0x21c>)
 8001576:	f7fe fea5 	bl	80002c4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800157a:	4b6d      	ldr	r3, [pc, #436]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0307 	and.w	r3, r3, #7
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	429a      	cmp	r2, r3
 8001586:	d910      	bls.n	80015aa <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001588:	4b69      	ldr	r3, [pc, #420]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f023 0207 	bic.w	r2, r3, #7
 8001590:	4967      	ldr	r1, [pc, #412]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	4313      	orrs	r3, r2
 8001596:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001598:	4b65      	ldr	r3, [pc, #404]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0307 	and.w	r3, r3, #7
 80015a0:	683a      	ldr	r2, [r7, #0]
 80015a2:	429a      	cmp	r2, r3
 80015a4:	d001      	beq.n	80015aa <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	e133      	b.n	8001812 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d049      	beq.n	800164a <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d005      	beq.n	80015ce <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015c2:	4b5c      	ldr	r3, [pc, #368]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	4a5b      	ldr	r2, [pc, #364]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80015c8:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80015cc:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0308 	and.w	r3, r3, #8
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015da:	4b56      	ldr	r3, [pc, #344]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4a55      	ldr	r2, [pc, #340]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80015e0:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80015e4:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d024      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	2b80      	cmp	r3, #128	; 0x80
 80015f4:	d020      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	689b      	ldr	r3, [r3, #8]
 80015fa:	2b90      	cmp	r3, #144	; 0x90
 80015fc:	d01c      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	689b      	ldr	r3, [r3, #8]
 8001602:	2ba0      	cmp	r3, #160	; 0xa0
 8001604:	d018      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	689b      	ldr	r3, [r3, #8]
 800160a:	2bb0      	cmp	r3, #176	; 0xb0
 800160c:	d014      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2bc0      	cmp	r3, #192	; 0xc0
 8001614:	d010      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2bd0      	cmp	r3, #208	; 0xd0
 800161c:	d00c      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	2be0      	cmp	r3, #224	; 0xe0
 8001624:	d008      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
 800162a:	2bf0      	cmp	r3, #240	; 0xf0
 800162c:	d004      	beq.n	8001638 <HAL_RCC_ClockConfig+0x128>
 800162e:	f240 315f 	movw	r1, #863	; 0x35f
 8001632:	483e      	ldr	r0, [pc, #248]	; (800172c <HAL_RCC_ClockConfig+0x21c>)
 8001634:	f7fe fe46 	bl	80002c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001638:	4b3e      	ldr	r3, [pc, #248]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	493b      	ldr	r1, [pc, #236]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 8001646:	4313      	orrs	r3, r2
 8001648:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b00      	cmp	r3, #0
 8001654:	d051      	beq.n	80016fa <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	2b00      	cmp	r3, #0
 800165c:	d00c      	beq.n	8001678 <HAL_RCC_ClockConfig+0x168>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	685b      	ldr	r3, [r3, #4]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d008      	beq.n	8001678 <HAL_RCC_ClockConfig+0x168>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d004      	beq.n	8001678 <HAL_RCC_ClockConfig+0x168>
 800166e:	f240 3166 	movw	r1, #870	; 0x366
 8001672:	482e      	ldr	r0, [pc, #184]	; (800172c <HAL_RCC_ClockConfig+0x21c>)
 8001674:	f7fe fe26 	bl	80002c4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b01      	cmp	r3, #1
 800167e:	d107      	bne.n	8001690 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001680:	4b2c      	ldr	r3, [pc, #176]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001688:	2b00      	cmp	r3, #0
 800168a:	d115      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e0c0      	b.n	8001812 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	2b02      	cmp	r3, #2
 8001696:	d107      	bne.n	80016a8 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001698:	4b26      	ldr	r3, [pc, #152]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d109      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e0b4      	b.n	8001812 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016a8:	4b22      	ldr	r3, [pc, #136]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0ac      	b.n	8001812 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80016b8:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 0203 	bic.w	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	491b      	ldr	r1, [pc, #108]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80016c6:	4313      	orrs	r3, r2
 80016c8:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80016ca:	f7fe ff89 	bl	80005e0 <HAL_GetTick>
 80016ce:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016d0:	e00a      	b.n	80016e8 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80016d2:	f7fe ff85 	bl	80005e0 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e0:	4293      	cmp	r3, r2
 80016e2:	d901      	bls.n	80016e8 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 80016e4:	2303      	movs	r3, #3
 80016e6:	e094      	b.n	8001812 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80016e8:	4b12      	ldr	r3, [pc, #72]	; (8001734 <HAL_RCC_ClockConfig+0x224>)
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f003 020c 	and.w	r2, r3, #12
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	429a      	cmp	r2, r3
 80016f8:	d1eb      	bne.n	80016d2 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80016fa:	4b0d      	ldr	r3, [pc, #52]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0307 	and.w	r3, r3, #7
 8001702:	683a      	ldr	r2, [r7, #0]
 8001704:	429a      	cmp	r2, r3
 8001706:	d217      	bcs.n	8001738 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001708:	4b09      	ldr	r3, [pc, #36]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f023 0207 	bic.w	r2, r3, #7
 8001710:	4907      	ldr	r1, [pc, #28]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 8001712:	683b      	ldr	r3, [r7, #0]
 8001714:	4313      	orrs	r3, r2
 8001716:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001718:	4b05      	ldr	r3, [pc, #20]	; (8001730 <HAL_RCC_ClockConfig+0x220>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f003 0307 	and.w	r3, r3, #7
 8001720:	683a      	ldr	r2, [r7, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	d008      	beq.n	8001738 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001726:	2301      	movs	r3, #1
 8001728:	e073      	b.n	8001812 <HAL_RCC_ClockConfig+0x302>
 800172a:	bf00      	nop
 800172c:	080025a8 	.word	0x080025a8
 8001730:	40022000 	.word	0x40022000
 8001734:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f003 0304 	and.w	r3, r3, #4
 8001740:	2b00      	cmp	r3, #0
 8001742:	d025      	beq.n	8001790 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d018      	beq.n	800177e <HAL_RCC_ClockConfig+0x26e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	68db      	ldr	r3, [r3, #12]
 8001750:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001754:	d013      	beq.n	800177e <HAL_RCC_ClockConfig+0x26e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	68db      	ldr	r3, [r3, #12]
 800175a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800175e:	d00e      	beq.n	800177e <HAL_RCC_ClockConfig+0x26e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001768:	d009      	beq.n	800177e <HAL_RCC_ClockConfig+0x26e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68db      	ldr	r3, [r3, #12]
 800176e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001772:	d004      	beq.n	800177e <HAL_RCC_ClockConfig+0x26e>
 8001774:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001778:	4828      	ldr	r0, [pc, #160]	; (800181c <HAL_RCC_ClockConfig+0x30c>)
 800177a:	f7fe fda3 	bl	80002c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800177e:	4b28      	ldr	r3, [pc, #160]	; (8001820 <HAL_RCC_ClockConfig+0x310>)
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	68db      	ldr	r3, [r3, #12]
 800178a:	4925      	ldr	r1, [pc, #148]	; (8001820 <HAL_RCC_ClockConfig+0x310>)
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	f003 0308 	and.w	r3, r3, #8
 8001798:	2b00      	cmp	r3, #0
 800179a:	d026      	beq.n	80017ea <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	691b      	ldr	r3, [r3, #16]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d018      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x2c6>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691b      	ldr	r3, [r3, #16]
 80017a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017ac:	d013      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x2c6>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	691b      	ldr	r3, [r3, #16]
 80017b2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80017b6:	d00e      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x2c6>
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80017c0:	d009      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x2c6>
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	691b      	ldr	r3, [r3, #16]
 80017c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80017ca:	d004      	beq.n	80017d6 <HAL_RCC_ClockConfig+0x2c6>
 80017cc:	f240 31ab 	movw	r1, #939	; 0x3ab
 80017d0:	4812      	ldr	r0, [pc, #72]	; (800181c <HAL_RCC_ClockConfig+0x30c>)
 80017d2:	f7fe fd77 	bl	80002c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80017d6:	4b12      	ldr	r3, [pc, #72]	; (8001820 <HAL_RCC_ClockConfig+0x310>)
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	691b      	ldr	r3, [r3, #16]
 80017e2:	00db      	lsls	r3, r3, #3
 80017e4:	490e      	ldr	r1, [pc, #56]	; (8001820 <HAL_RCC_ClockConfig+0x310>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80017ea:	f000 f821 	bl	8001830 <HAL_RCC_GetSysClockFreq>
 80017ee:	4601      	mov	r1, r0
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_ClockConfig+0x310>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	091b      	lsrs	r3, r3, #4
 80017f6:	f003 030f 	and.w	r3, r3, #15
 80017fa:	4a0a      	ldr	r2, [pc, #40]	; (8001824 <HAL_RCC_ClockConfig+0x314>)
 80017fc:	5cd3      	ldrb	r3, [r2, r3]
 80017fe:	fa21 f303 	lsr.w	r3, r1, r3
 8001802:	4a09      	ldr	r2, [pc, #36]	; (8001828 <HAL_RCC_ClockConfig+0x318>)
 8001804:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001806:	4b09      	ldr	r3, [pc, #36]	; (800182c <HAL_RCC_ClockConfig+0x31c>)
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe feb8 	bl	8000580 <HAL_InitTick>

  return HAL_OK;
 8001810:	2300      	movs	r3, #0
}
 8001812:	4618      	mov	r0, r3
 8001814:	3710      	adds	r7, #16
 8001816:	46bd      	mov	sp, r7
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	080025a8 	.word	0x080025a8
 8001820:	40021000 	.word	0x40021000
 8001824:	08002630 	.word	0x08002630
 8001828:	20000000 	.word	0x20000000
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001830:	b490      	push	{r4, r7}
 8001832:	b08a      	sub	sp, #40	; 0x28
 8001834:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001836:	4b2a      	ldr	r3, [pc, #168]	; (80018e0 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001838:	1d3c      	adds	r4, r7, #4
 800183a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800183c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001840:	4b28      	ldr	r3, [pc, #160]	; (80018e4 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001842:	881b      	ldrh	r3, [r3, #0]
 8001844:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001846:	2300      	movs	r3, #0
 8001848:	61fb      	str	r3, [r7, #28]
 800184a:	2300      	movs	r3, #0
 800184c:	61bb      	str	r3, [r7, #24]
 800184e:	2300      	movs	r3, #0
 8001850:	627b      	str	r3, [r7, #36]	; 0x24
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001856:	2300      	movs	r3, #0
 8001858:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800185a:	4b23      	ldr	r3, [pc, #140]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 030c 	and.w	r3, r3, #12
 8001866:	2b04      	cmp	r3, #4
 8001868:	d002      	beq.n	8001870 <HAL_RCC_GetSysClockFreq+0x40>
 800186a:	2b08      	cmp	r3, #8
 800186c:	d003      	beq.n	8001876 <HAL_RCC_GetSysClockFreq+0x46>
 800186e:	e02d      	b.n	80018cc <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001870:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_RCC_GetSysClockFreq+0xbc>)
 8001872:	623b      	str	r3, [r7, #32]
      break;
 8001874:	e02d      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	0c9b      	lsrs	r3, r3, #18
 800187a:	f003 030f 	and.w	r3, r3, #15
 800187e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001882:	4413      	add	r3, r2
 8001884:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001888:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800188a:	69fb      	ldr	r3, [r7, #28]
 800188c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001890:	2b00      	cmp	r3, #0
 8001892:	d013      	beq.n	80018bc <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001894:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	0c5b      	lsrs	r3, r3, #17
 800189a:	f003 0301 	and.w	r3, r3, #1
 800189e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80018a2:	4413      	add	r3, r2
 80018a4:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80018a8:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4a0f      	ldr	r2, [pc, #60]	; (80018ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80018ae:	fb02 f203 	mul.w	r2, r2, r3
 80018b2:	69bb      	ldr	r3, [r7, #24]
 80018b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ba:	e004      	b.n	80018c6 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80018bc:	697b      	ldr	r3, [r7, #20]
 80018be:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018c0:	fb02 f303 	mul.w	r3, r2, r3
 80018c4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80018c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c8:	623b      	str	r3, [r7, #32]
      break;
 80018ca:	e002      	b.n	80018d2 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80018cc:	4b07      	ldr	r3, [pc, #28]	; (80018ec <HAL_RCC_GetSysClockFreq+0xbc>)
 80018ce:	623b      	str	r3, [r7, #32]
      break;
 80018d0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018d2:	6a3b      	ldr	r3, [r7, #32]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3728      	adds	r7, #40	; 0x28
 80018d8:	46bd      	mov	sp, r7
 80018da:	bc90      	pop	{r4, r7}
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	080025e0 	.word	0x080025e0
 80018e4:	080025f0 	.word	0x080025f0
 80018e8:	40021000 	.word	0x40021000
 80018ec:	007a1200 	.word	0x007a1200
 80018f0:	003d0900 	.word	0x003d0900

080018f4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80018f8:	4b02      	ldr	r3, [pc, #8]	; (8001904 <HAL_RCC_GetHCLKFreq+0x10>)
 80018fa:	681b      	ldr	r3, [r3, #0]
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr
 8001904:	20000000 	.word	0x20000000

08001908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800190c:	f7ff fff2 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001910:	4601      	mov	r1, r0
 8001912:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	f003 0307 	and.w	r3, r3, #7
 800191c:	4a03      	ldr	r2, [pc, #12]	; (800192c <HAL_RCC_GetPCLK1Freq+0x24>)
 800191e:	5cd3      	ldrb	r3, [r2, r3]
 8001920:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001924:	4618      	mov	r0, r3
 8001926:	bd80      	pop	{r7, pc}
 8001928:	40021000 	.word	0x40021000
 800192c:	08002640 	.word	0x08002640

08001930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001934:	f7ff ffde 	bl	80018f4 <HAL_RCC_GetHCLKFreq>
 8001938:	4601      	mov	r1, r0
 800193a:	4b05      	ldr	r3, [pc, #20]	; (8001950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800193c:	685b      	ldr	r3, [r3, #4]
 800193e:	0adb      	lsrs	r3, r3, #11
 8001940:	f003 0307 	and.w	r3, r3, #7
 8001944:	4a03      	ldr	r2, [pc, #12]	; (8001954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001946:	5cd3      	ldrb	r3, [r2, r3]
 8001948:	fa21 f303 	lsr.w	r3, r1, r3
}
 800194c:	4618      	mov	r0, r3
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40021000 	.word	0x40021000
 8001954:	08002640 	.word	0x08002640

08001958 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001960:	4b0a      	ldr	r3, [pc, #40]	; (800198c <RCC_Delay+0x34>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a0a      	ldr	r2, [pc, #40]	; (8001990 <RCC_Delay+0x38>)
 8001966:	fba2 2303 	umull	r2, r3, r2, r3
 800196a:	0a5b      	lsrs	r3, r3, #9
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	fb02 f303 	mul.w	r3, r2, r3
 8001972:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001974:	bf00      	nop
  }
  while (Delay --);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	1e5a      	subs	r2, r3, #1
 800197a:	60fa      	str	r2, [r7, #12]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d1f9      	bne.n	8001974 <RCC_Delay+0x1c>
}
 8001980:	bf00      	nop
 8001982:	3714      	adds	r7, #20
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	20000000 	.word	0x20000000
 8001990:	10624dd3 	.word	0x10624dd3

08001994 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d101      	bne.n	80019a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80019a2:	2301      	movs	r3, #1
 80019a4:	e092      	b.n	8001acc <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d02c      	beq.n	8001a08 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	4a48      	ldr	r2, [pc, #288]	; (8001ad4 <HAL_UART_Init+0x140>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d00e      	beq.n	80019d6 <HAL_UART_Init+0x42>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a46      	ldr	r2, [pc, #280]	; (8001ad8 <HAL_UART_Init+0x144>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d009      	beq.n	80019d6 <HAL_UART_Init+0x42>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	4a45      	ldr	r2, [pc, #276]	; (8001adc <HAL_UART_Init+0x148>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d004      	beq.n	80019d6 <HAL_UART_Init+0x42>
 80019cc:	f44f 71a3 	mov.w	r1, #326	; 0x146
 80019d0:	4843      	ldr	r0, [pc, #268]	; (8001ae0 <HAL_UART_Init+0x14c>)
 80019d2:	f7fe fc77 	bl	80002c4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	699b      	ldr	r3, [r3, #24]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d028      	beq.n	8001a30 <HAL_UART_Init+0x9c>
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80019e6:	d023      	beq.n	8001a30 <HAL_UART_Init+0x9c>
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80019f0:	d01e      	beq.n	8001a30 <HAL_UART_Init+0x9c>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	699b      	ldr	r3, [r3, #24]
 80019f6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80019fa:	d019      	beq.n	8001a30 <HAL_UART_Init+0x9c>
 80019fc:	f240 1147 	movw	r1, #327	; 0x147
 8001a00:	4837      	ldr	r0, [pc, #220]	; (8001ae0 <HAL_UART_Init+0x14c>)
 8001a02:	f7fe fc5f 	bl	80002c4 <assert_failed>
 8001a06:	e013      	b.n	8001a30 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a31      	ldr	r2, [pc, #196]	; (8001ad4 <HAL_UART_Init+0x140>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00e      	beq.n	8001a30 <HAL_UART_Init+0x9c>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a30      	ldr	r2, [pc, #192]	; (8001ad8 <HAL_UART_Init+0x144>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d009      	beq.n	8001a30 <HAL_UART_Init+0x9c>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a2e      	ldr	r2, [pc, #184]	; (8001adc <HAL_UART_Init+0x148>)
 8001a22:	4293      	cmp	r3, r2
 8001a24:	d004      	beq.n	8001a30 <HAL_UART_Init+0x9c>
 8001a26:	f240 114b 	movw	r1, #331	; 0x14b
 8001a2a:	482d      	ldr	r0, [pc, #180]	; (8001ae0 <HAL_UART_Init+0x14c>)
 8001a2c:	f7fe fc4a 	bl	80002c4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d009      	beq.n	8001a4c <HAL_UART_Init+0xb8>
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a40:	d004      	beq.n	8001a4c <HAL_UART_Init+0xb8>
 8001a42:	f240 114d 	movw	r1, #333	; 0x14d
 8001a46:	4826      	ldr	r0, [pc, #152]	; (8001ae0 <HAL_UART_Init+0x14c>)
 8001a48:	f7fe fc3c 	bl	80002c4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d106      	bne.n	8001a66 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7fe fcfd 	bl	8000460 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2224      	movs	r2, #36	; 0x24
 8001a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a7c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001a7e:	6878      	ldr	r0, [r7, #4]
 8001a80:	f000 faaa 	bl	8001fd8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691a      	ldr	r2, [r3, #16]
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a92:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	695a      	ldr	r2, [r3, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aa2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001ab2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2220      	movs	r2, #32
 8001ac6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3708      	adds	r7, #8
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40013800 	.word	0x40013800
 8001ad8:	40004400 	.word	0x40004400
 8001adc:	40004800 	.word	0x40004800
 8001ae0:	080025f4 	.word	0x080025f4

08001ae4 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b085      	sub	sp, #20
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	4613      	mov	r3, r2
 8001af0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	2b20      	cmp	r3, #32
 8001afc:	d130      	bne.n	8001b60 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d002      	beq.n	8001b0a <HAL_UART_Transmit_IT+0x26>
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d101      	bne.n	8001b0e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e029      	b.n	8001b62 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d101      	bne.n	8001b1c <HAL_UART_Transmit_IT+0x38>
 8001b18:	2302      	movs	r3, #2
 8001b1a:	e022      	b.n	8001b62 <HAL_UART_Transmit_IT+0x7e>
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2201      	movs	r2, #1
 8001b20:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	88fa      	ldrh	r2, [r7, #6]
 8001b2e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	88fa      	ldrh	r2, [r7, #6]
 8001b34:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	2221      	movs	r2, #33	; 0x21
 8001b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	68da      	ldr	r2, [r3, #12]
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001b5a:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e000      	b.n	8001b62 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8001b60:	2302      	movs	r3, #2
  }
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3714      	adds	r7, #20
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bc80      	pop	{r7}
 8001b6a:	4770      	bx	lr

08001b6c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68db      	ldr	r3, [r3, #12]
 8001b82:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	f003 030f 	and.w	r3, r3, #15
 8001b9a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001b9c:	693b      	ldr	r3, [r7, #16]
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d10d      	bne.n	8001bbe <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d008      	beq.n	8001bbe <HAL_UART_IRQHandler+0x52>
 8001bac:	69bb      	ldr	r3, [r7, #24]
 8001bae:	f003 0320 	and.w	r3, r3, #32
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d003      	beq.n	8001bbe <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001bb6:	6878      	ldr	r0, [r7, #4]
 8001bb8:	f000 f98d 	bl	8001ed6 <UART_Receive_IT>
      return;
 8001bbc:	e0cc      	b.n	8001d58 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	f000 80ab 	beq.w	8001d1c <HAL_UART_IRQHandler+0x1b0>
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	f003 0301 	and.w	r3, r3, #1
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d105      	bne.n	8001bdc <HAL_UART_IRQHandler+0x70>
 8001bd0:	69bb      	ldr	r3, [r7, #24]
 8001bd2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f000 80a0 	beq.w	8001d1c <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	f003 0301 	and.w	r3, r3, #1
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d00a      	beq.n	8001bfc <HAL_UART_IRQHandler+0x90>
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d005      	beq.n	8001bfc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bf4:	f043 0201 	orr.w	r2, r3, #1
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001bfc:	69fb      	ldr	r3, [r7, #28]
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d00a      	beq.n	8001c1c <HAL_UART_IRQHandler+0xb0>
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d005      	beq.n	8001c1c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c14:	f043 0202 	orr.w	r2, r3, #2
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d00a      	beq.n	8001c3c <HAL_UART_IRQHandler+0xd0>
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	f003 0301 	and.w	r3, r3, #1
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d005      	beq.n	8001c3c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c34:	f043 0204 	orr.w	r2, r3, #4
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001c3c:	69fb      	ldr	r3, [r7, #28]
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d00a      	beq.n	8001c5c <HAL_UART_IRQHandler+0xf0>
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d005      	beq.n	8001c5c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c54:	f043 0208 	orr.w	r2, r3, #8
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d078      	beq.n	8001d56 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	f003 0320 	and.w	r3, r3, #32
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d007      	beq.n	8001c7e <HAL_UART_IRQHandler+0x112>
 8001c6e:	69bb      	ldr	r3, [r7, #24]
 8001c70:	f003 0320 	and.w	r3, r3, #32
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d002      	beq.n	8001c7e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001c78:	6878      	ldr	r0, [r7, #4]
 8001c7a:	f000 f92c 	bl	8001ed6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	695b      	ldr	r3, [r3, #20]
 8001c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	bf14      	ite	ne
 8001c8c:	2301      	movne	r3, #1
 8001c8e:	2300      	moveq	r3, #0
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c98:	f003 0308 	and.w	r3, r3, #8
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d102      	bne.n	8001ca6 <HAL_UART_IRQHandler+0x13a>
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d031      	beq.n	8001d0a <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001ca6:	6878      	ldr	r0, [r7, #4]
 8001ca8:	f000 f877 	bl	8001d9a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d023      	beq.n	8001d02 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	695a      	ldr	r2, [r3, #20]
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cc8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d013      	beq.n	8001cfa <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cd6:	4a22      	ldr	r2, [pc, #136]	; (8001d60 <HAL_UART_IRQHandler+0x1f4>)
 8001cd8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fdc4 	bl	800086c <HAL_DMA_Abort_IT>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d016      	beq.n	8001d18 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001cf0:	687a      	ldr	r2, [r7, #4]
 8001cf2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001cf8:	e00e      	b.n	8001d18 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f000 f844 	bl	8001d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d00:	e00a      	b.n	8001d18 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001d02:	6878      	ldr	r0, [r7, #4]
 8001d04:	f000 f840 	bl	8001d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d08:	e006      	b.n	8001d18 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f000 f83c 	bl	8001d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001d16:	e01e      	b.n	8001d56 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001d18:	bf00      	nop
    return;
 8001d1a:	e01c      	b.n	8001d56 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d008      	beq.n	8001d38 <HAL_UART_IRQHandler+0x1cc>
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001d30:	6878      	ldr	r0, [r7, #4]
 8001d32:	f000 f863 	bl	8001dfc <UART_Transmit_IT>
    return;
 8001d36:	e00f      	b.n	8001d58 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00a      	beq.n	8001d58 <HAL_UART_IRQHandler+0x1ec>
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d005      	beq.n	8001d58 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001d4c:	6878      	ldr	r0, [r7, #4]
 8001d4e:	f000 f8aa 	bl	8001ea6 <UART_EndTransmit_IT>
    return;
 8001d52:	bf00      	nop
 8001d54:	e000      	b.n	8001d58 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001d56:	bf00      	nop
  }
}
 8001d58:	3720      	adds	r7, #32
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}
 8001d5e:	bf00      	nop
 8001d60:	08001dd5 	.word	0x08001dd5

08001d64 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b083      	sub	sp, #12
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001d6c:	bf00      	nop
 8001d6e:	370c      	adds	r7, #12
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bc80      	pop	{r7}
 8001d74:	4770      	bx	lr

08001d76 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001d76:	b480      	push	{r7}
 8001d78:	b083      	sub	sp, #12
 8001d7a:	af00      	add	r7, sp, #0
 8001d7c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001d7e:	bf00      	nop
 8001d80:	370c      	adds	r7, #12
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bc80      	pop	{r7}
 8001d86:	4770      	bx	lr

08001d88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bc80      	pop	{r7}
 8001d98:	4770      	bx	lr

08001d9a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8001d9a:	b480      	push	{r7}
 8001d9c:	b083      	sub	sp, #12
 8001d9e:	af00      	add	r7, sp, #0
 8001da0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68da      	ldr	r2, [r3, #12]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001db0:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	695a      	ldr	r2, [r3, #20]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f022 0201 	bic.w	r2, r2, #1
 8001dc0:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	2220      	movs	r2, #32
 8001dc6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8001dca:	bf00      	nop
 8001dcc:	370c      	adds	r7, #12
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	2200      	movs	r2, #0
 8001dec:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8001dee:	68f8      	ldr	r0, [r7, #12]
 8001df0:	f7ff ffca 	bl	8001d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8001df4:	bf00      	nop
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b21      	cmp	r3, #33	; 0x21
 8001e0e:	d144      	bne.n	8001e9a <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689b      	ldr	r3, [r3, #8]
 8001e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e18:	d11a      	bne.n	8001e50 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a1b      	ldr	r3, [r3, #32]
 8001e1e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	881b      	ldrh	r3, [r3, #0]
 8001e24:	461a      	mov	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001e2e:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	691b      	ldr	r3, [r3, #16]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d105      	bne.n	8001e44 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	1c9a      	adds	r2, r3, #2
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	621a      	str	r2, [r3, #32]
 8001e42:	e00e      	b.n	8001e62 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	6a1b      	ldr	r3, [r3, #32]
 8001e48:	1c5a      	adds	r2, r3, #1
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	621a      	str	r2, [r3, #32]
 8001e4e:	e008      	b.n	8001e62 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6a1b      	ldr	r3, [r3, #32]
 8001e54:	1c59      	adds	r1, r3, #1
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6211      	str	r1, [r2, #32]
 8001e5a:	781a      	ldrb	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	3b01      	subs	r3, #1
 8001e6a:	b29b      	uxth	r3, r3
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	4619      	mov	r1, r3
 8001e70:	84d1      	strh	r1, [r2, #38]	; 0x26
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d10f      	bne.n	8001e96 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	68da      	ldr	r2, [r3, #12]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001e84:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	68da      	ldr	r2, [r3, #12]
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001e94:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8001e96:	2300      	movs	r3, #0
 8001e98:	e000      	b.n	8001e9c <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8001e9a:	2302      	movs	r3, #2
  }
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3714      	adds	r7, #20
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	bc80      	pop	{r7}
 8001ea4:	4770      	bx	lr

08001ea6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8001ea6:	b580      	push	{r7, lr}
 8001ea8:	b082      	sub	sp, #8
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68da      	ldr	r2, [r3, #12]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ebc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2220      	movs	r2, #32
 8001ec2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f7ff ff4c 	bl	8001d64 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3708      	adds	r7, #8
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}

08001ed6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8001ed6:	b580      	push	{r7, lr}
 8001ed8:	b084      	sub	sp, #16
 8001eda:	af00      	add	r7, sp, #0
 8001edc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b22      	cmp	r3, #34	; 0x22
 8001ee8:	d171      	bne.n	8001fce <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	689b      	ldr	r3, [r3, #8]
 8001eee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001ef2:	d123      	bne.n	8001f3c <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef8:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d10e      	bne.n	8001f20 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001f0e:	b29a      	uxth	r2, r3
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f18:	1c9a      	adds	r2, r3, #2
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	629a      	str	r2, [r3, #40]	; 0x28
 8001f1e:	e029      	b.n	8001f74 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f34:	1c5a      	adds	r2, r3, #1
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	629a      	str	r2, [r3, #40]	; 0x28
 8001f3a:	e01b      	b.n	8001f74 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d10a      	bne.n	8001f5a <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	6858      	ldr	r0, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f4e:	1c59      	adds	r1, r3, #1
 8001f50:	687a      	ldr	r2, [r7, #4]
 8001f52:	6291      	str	r1, [r2, #40]	; 0x28
 8001f54:	b2c2      	uxtb	r2, r0
 8001f56:	701a      	strb	r2, [r3, #0]
 8001f58:	e00c      	b.n	8001f74 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f66:	1c58      	adds	r0, r3, #1
 8001f68:	6879      	ldr	r1, [r7, #4]
 8001f6a:	6288      	str	r0, [r1, #40]	; 0x28
 8001f6c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f70:	b2d2      	uxtb	r2, r2
 8001f72:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8001f78:	b29b      	uxth	r3, r3
 8001f7a:	3b01      	subs	r3, #1
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	4619      	mov	r1, r3
 8001f82:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d120      	bne.n	8001fca <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	68da      	ldr	r2, [r3, #12]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f022 0220 	bic.w	r2, r2, #32
 8001f96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	68da      	ldr	r2, [r3, #12]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695a      	ldr	r2, [r3, #20]
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	f022 0201 	bic.w	r2, r2, #1
 8001fb6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2220      	movs	r2, #32
 8001fbc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f7ff fed8 	bl	8001d76 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	e002      	b.n	8001fd0 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	e000      	b.n	8001fd0 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8001fce:	2302      	movs	r3, #2
  }
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	3710      	adds	r7, #16
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}

08001fd8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	685b      	ldr	r3, [r3, #4]
 8001fe4:	4a84      	ldr	r2, [pc, #528]	; (80021f8 <UART_SetConfig+0x220>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d904      	bls.n	8001ff4 <UART_SetConfig+0x1c>
 8001fea:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8001fee:	4883      	ldr	r0, [pc, #524]	; (80021fc <UART_SetConfig+0x224>)
 8001ff0:	f7fe f968 	bl	80002c4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d009      	beq.n	8002010 <UART_SetConfig+0x38>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002004:	d004      	beq.n	8002010 <UART_SetConfig+0x38>
 8002006:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800200a:	487c      	ldr	r0, [pc, #496]	; (80021fc <UART_SetConfig+0x224>)
 800200c:	f7fe f95a 	bl	80002c4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	691b      	ldr	r3, [r3, #16]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00e      	beq.n	8002036 <UART_SetConfig+0x5e>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002020:	d009      	beq.n	8002036 <UART_SetConfig+0x5e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
 8002026:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800202a:	d004      	beq.n	8002036 <UART_SetConfig+0x5e>
 800202c:	f640 31ff 	movw	r1, #3071	; 0xbff
 8002030:	4872      	ldr	r0, [pc, #456]	; (80021fc <UART_SetConfig+0x224>)
 8002032:	f7fe f947 	bl	80002c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	695a      	ldr	r2, [r3, #20]
 800203a:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 800203e:	4013      	ands	r3, r2
 8002040:	2b00      	cmp	r3, #0
 8002042:	d103      	bne.n	800204c <UART_SetConfig+0x74>
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d104      	bne.n	8002056 <UART_SetConfig+0x7e>
 800204c:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 8002050:	486a      	ldr	r0, [pc, #424]	; (80021fc <UART_SetConfig+0x224>)
 8002052:	f7fe f937 	bl	80002c4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	691b      	ldr	r3, [r3, #16]
 800205c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	68da      	ldr	r2, [r3, #12]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	430a      	orrs	r2, r1
 800206a:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689a      	ldr	r2, [r3, #8]
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	431a      	orrs	r2, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	4313      	orrs	r3, r2
 800207c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002088:	f023 030c 	bic.w	r3, r3, #12
 800208c:	687a      	ldr	r2, [r7, #4]
 800208e:	6812      	ldr	r2, [r2, #0]
 8002090:	68f9      	ldr	r1, [r7, #12]
 8002092:	430b      	orrs	r3, r1
 8002094:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	695b      	ldr	r3, [r3, #20]
 800209c:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	699a      	ldr	r2, [r3, #24]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a53      	ldr	r2, [pc, #332]	; (8002200 <UART_SetConfig+0x228>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d14e      	bne.n	8002154 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80020b6:	f7ff fc3b 	bl	8001930 <HAL_RCC_GetPCLK2Freq>
 80020ba:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80020bc:	68ba      	ldr	r2, [r7, #8]
 80020be:	4613      	mov	r3, r2
 80020c0:	009b      	lsls	r3, r3, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	009a      	lsls	r2, r3, #2
 80020c6:	441a      	add	r2, r3
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	009b      	lsls	r3, r3, #2
 80020ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d2:	4a4c      	ldr	r2, [pc, #304]	; (8002204 <UART_SetConfig+0x22c>)
 80020d4:	fba2 2303 	umull	r2, r3, r2, r3
 80020d8:	095b      	lsrs	r3, r3, #5
 80020da:	0119      	lsls	r1, r3, #4
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	4613      	mov	r3, r2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	009a      	lsls	r2, r3, #2
 80020e6:	441a      	add	r2, r3
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80020f2:	4b44      	ldr	r3, [pc, #272]	; (8002204 <UART_SetConfig+0x22c>)
 80020f4:	fba3 0302 	umull	r0, r3, r3, r2
 80020f8:	095b      	lsrs	r3, r3, #5
 80020fa:	2064      	movs	r0, #100	; 0x64
 80020fc:	fb00 f303 	mul.w	r3, r0, r3
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	3332      	adds	r3, #50	; 0x32
 8002106:	4a3f      	ldr	r2, [pc, #252]	; (8002204 <UART_SetConfig+0x22c>)
 8002108:	fba2 2303 	umull	r2, r3, r2, r3
 800210c:	095b      	lsrs	r3, r3, #5
 800210e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002112:	4419      	add	r1, r3
 8002114:	68ba      	ldr	r2, [r7, #8]
 8002116:	4613      	mov	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	4413      	add	r3, r2
 800211c:	009a      	lsls	r2, r3, #2
 800211e:	441a      	add	r2, r3
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	685b      	ldr	r3, [r3, #4]
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	fbb2 f2f3 	udiv	r2, r2, r3
 800212a:	4b36      	ldr	r3, [pc, #216]	; (8002204 <UART_SetConfig+0x22c>)
 800212c:	fba3 0302 	umull	r0, r3, r3, r2
 8002130:	095b      	lsrs	r3, r3, #5
 8002132:	2064      	movs	r0, #100	; 0x64
 8002134:	fb00 f303 	mul.w	r3, r0, r3
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	011b      	lsls	r3, r3, #4
 800213c:	3332      	adds	r3, #50	; 0x32
 800213e:	4a31      	ldr	r2, [pc, #196]	; (8002204 <UART_SetConfig+0x22c>)
 8002140:	fba2 2303 	umull	r2, r3, r2, r3
 8002144:	095b      	lsrs	r3, r3, #5
 8002146:	f003 020f 	and.w	r2, r3, #15
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	440a      	add	r2, r1
 8002150:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 8002152:	e04d      	b.n	80021f0 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 8002154:	f7ff fbd8 	bl	8001908 <HAL_RCC_GetPCLK1Freq>
 8002158:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	4613      	mov	r3, r2
 800215e:	009b      	lsls	r3, r3, #2
 8002160:	4413      	add	r3, r2
 8002162:	009a      	lsls	r2, r3, #2
 8002164:	441a      	add	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002170:	4a24      	ldr	r2, [pc, #144]	; (8002204 <UART_SetConfig+0x22c>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	095b      	lsrs	r3, r3, #5
 8002178:	0119      	lsls	r1, r3, #4
 800217a:	68ba      	ldr	r2, [r7, #8]
 800217c:	4613      	mov	r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	4413      	add	r3, r2
 8002182:	009a      	lsls	r2, r3, #2
 8002184:	441a      	add	r2, r3
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	009b      	lsls	r3, r3, #2
 800218c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002190:	4b1c      	ldr	r3, [pc, #112]	; (8002204 <UART_SetConfig+0x22c>)
 8002192:	fba3 0302 	umull	r0, r3, r3, r2
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2064      	movs	r0, #100	; 0x64
 800219a:	fb00 f303 	mul.w	r3, r0, r3
 800219e:	1ad3      	subs	r3, r2, r3
 80021a0:	011b      	lsls	r3, r3, #4
 80021a2:	3332      	adds	r3, #50	; 0x32
 80021a4:	4a17      	ldr	r2, [pc, #92]	; (8002204 <UART_SetConfig+0x22c>)
 80021a6:	fba2 2303 	umull	r2, r3, r2, r3
 80021aa:	095b      	lsrs	r3, r3, #5
 80021ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80021b0:	4419      	add	r1, r3
 80021b2:	68ba      	ldr	r2, [r7, #8]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	009a      	lsls	r2, r3, #2
 80021bc:	441a      	add	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021c8:	4b0e      	ldr	r3, [pc, #56]	; (8002204 <UART_SetConfig+0x22c>)
 80021ca:	fba3 0302 	umull	r0, r3, r3, r2
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	2064      	movs	r0, #100	; 0x64
 80021d2:	fb00 f303 	mul.w	r3, r0, r3
 80021d6:	1ad3      	subs	r3, r2, r3
 80021d8:	011b      	lsls	r3, r3, #4
 80021da:	3332      	adds	r3, #50	; 0x32
 80021dc:	4a09      	ldr	r2, [pc, #36]	; (8002204 <UART_SetConfig+0x22c>)
 80021de:	fba2 2303 	umull	r2, r3, r2, r3
 80021e2:	095b      	lsrs	r3, r3, #5
 80021e4:	f003 020f 	and.w	r2, r3, #15
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	440a      	add	r2, r1
 80021ee:	609a      	str	r2, [r3, #8]
}
 80021f0:	bf00      	nop
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	0044aa20 	.word	0x0044aa20
 80021fc:	080025f4 	.word	0x080025f4
 8002200:	40013800 	.word	0x40013800
 8002204:	51eb851f 	.word	0x51eb851f

08002208 <rola_task1ms>:
	rola.out = 0u;
	rola.step = 0u;
}

void rola_task1ms(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (rola.out&0x01u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800220c:	4b2f      	ldr	r3, [pc, #188]	; (80022cc <rola_task1ms+0xc4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f003 0301 	and.w	r3, r3, #1
 8002214:	b2db      	uxtb	r3, r3
 8002216:	461a      	mov	r2, r3
 8002218:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800221c:	482c      	ldr	r0, [pc, #176]	; (80022d0 <rola_task1ms+0xc8>)
 800221e:	f7fe fdd5 	bl	8000dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (rola.out&0x02u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002222:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <rola_task1ms+0xc4>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	085b      	lsrs	r3, r3, #1
 8002228:	b2db      	uxtb	r3, r3
 800222a:	f003 0301 	and.w	r3, r3, #1
 800222e:	b2db      	uxtb	r3, r3
 8002230:	461a      	mov	r2, r3
 8002232:	2108      	movs	r1, #8
 8002234:	4827      	ldr	r0, [pc, #156]	; (80022d4 <rola_task1ms+0xcc>)
 8002236:	f7fe fdc9 	bl	8000dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (rola.out&0x04u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800223a:	4b24      	ldr	r3, [pc, #144]	; (80022cc <rola_task1ms+0xc4>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	089b      	lsrs	r3, r3, #2
 8002240:	b2db      	uxtb	r3, r3
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	b2db      	uxtb	r3, r3
 8002248:	461a      	mov	r2, r3
 800224a:	2110      	movs	r1, #16
 800224c:	4821      	ldr	r0, [pc, #132]	; (80022d4 <rola_task1ms+0xcc>)
 800224e:	f7fe fdbd 	bl	8000dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (rola.out&0x08u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <rola_task1ms+0xc4>)
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	08db      	lsrs	r3, r3, #3
 8002258:	b2db      	uxtb	r3, r3
 800225a:	f003 0301 	and.w	r3, r3, #1
 800225e:	b2db      	uxtb	r3, r3
 8002260:	461a      	mov	r2, r3
 8002262:	2120      	movs	r1, #32
 8002264:	481b      	ldr	r0, [pc, #108]	; (80022d4 <rola_task1ms+0xcc>)
 8002266:	f7fe fdb1 	bl	8000dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  (rola.out&0x10u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800226a:	4b18      	ldr	r3, [pc, #96]	; (80022cc <rola_task1ms+0xc4>)
 800226c:	781b      	ldrb	r3, [r3, #0]
 800226e:	091b      	lsrs	r3, r3, #4
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f003 0301 	and.w	r3, r3, #1
 8002276:	b2db      	uxtb	r3, r3
 8002278:	461a      	mov	r2, r3
 800227a:	2140      	movs	r1, #64	; 0x40
 800227c:	4815      	ldr	r0, [pc, #84]	; (80022d4 <rola_task1ms+0xcc>)
 800227e:	f7fe fda5 	bl	8000dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  (rola.out&0x20u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002282:	4b12      	ldr	r3, [pc, #72]	; (80022cc <rola_task1ms+0xc4>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	095b      	lsrs	r3, r3, #5
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f003 0301 	and.w	r3, r3, #1
 800228e:	b2db      	uxtb	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	2180      	movs	r1, #128	; 0x80
 8002294:	480f      	ldr	r0, [pc, #60]	; (80022d4 <rola_task1ms+0xcc>)
 8002296:	f7fe fd99 	bl	8000dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  (rola.out&0x40u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800229a:	4b0c      	ldr	r3, [pc, #48]	; (80022cc <rola_task1ms+0xc4>)
 800229c:	781b      	ldrb	r3, [r3, #0]
 800229e:	099b      	lsrs	r3, r3, #6
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	f003 0301 	and.w	r3, r3, #1
 80022a6:	b2db      	uxtb	r3, r3
 80022a8:	461a      	mov	r2, r3
 80022aa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022ae:	4809      	ldr	r0, [pc, #36]	; (80022d4 <rola_task1ms+0xcc>)
 80022b0:	f7fe fd8c 	bl	8000dcc <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  (rola.out&0x80u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80022b4:	4b05      	ldr	r3, [pc, #20]	; (80022cc <rola_task1ms+0xc4>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	09db      	lsrs	r3, r3, #7
 80022ba:	b2db      	uxtb	r3, r3
 80022bc:	461a      	mov	r2, r3
 80022be:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c2:	4804      	ldr	r0, [pc, #16]	; (80022d4 <rola_task1ms+0xcc>)
 80022c4:	f7fe fd82 	bl	8000dcc <HAL_GPIO_WritePin>
}
 80022c8:	bf00      	nop
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	20000070 	.word	0x20000070
 80022d0:	40010800 	.word	0x40010800
 80022d4:	40010c00 	.word	0x40010c00

080022d8 <rola_task>:

void rola_task(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
	rola.step++;
 80022dc:	4b0c      	ldr	r3, [pc, #48]	; (8002310 <rola_task+0x38>)
 80022de:	785b      	ldrb	r3, [r3, #1]
 80022e0:	3301      	adds	r3, #1
 80022e2:	b2da      	uxtb	r2, r3
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <rola_task+0x38>)
 80022e6:	705a      	strb	r2, [r3, #1]
	rola.step &= 0x07;
 80022e8:	4b09      	ldr	r3, [pc, #36]	; (8002310 <rola_task+0x38>)
 80022ea:	785b      	ldrb	r3, [r3, #1]
 80022ec:	f003 0307 	and.w	r3, r3, #7
 80022f0:	b2da      	uxtb	r2, r3
 80022f2:	4b07      	ldr	r3, [pc, #28]	; (8002310 <rola_task+0x38>)
 80022f4:	705a      	strb	r2, [r3, #1]
	rola.out = (0x01u << rola.step);
 80022f6:	4b06      	ldr	r3, [pc, #24]	; (8002310 <rola_task+0x38>)
 80022f8:	785b      	ldrb	r3, [r3, #1]
 80022fa:	461a      	mov	r2, r3
 80022fc:	2301      	movs	r3, #1
 80022fe:	4093      	lsls	r3, r2
 8002300:	b2da      	uxtb	r2, r3
 8002302:	4b03      	ldr	r3, [pc, #12]	; (8002310 <rola_task+0x38>)
 8002304:	701a      	strb	r2, [r3, #0]
}
 8002306:	bf00      	nop
 8002308:	46bd      	mov	sp, r7
 800230a:	bc80      	pop	{r7}
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	20000070 	.word	0x20000070

08002314 <task_2pow0>:
const char text2p6[] = "     6  \n";
const char text2p7[] = "      7 \n";
const char text2p8[] = "       8\n";

void task_2pow0(void)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	af00      	add	r7, sp, #0
	rola_task1ms();
 8002318:	f7ff ff76 	bl	8002208 <rola_task1ms>
}
 800231c:	bf00      	nop
 800231e:	bd80      	pop	{r7, pc}

08002320 <task_2pow1>:

void task_2pow1(void)
{
 8002320:	b480      	push	{r7}
 8002322:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p1, sizeof(text2p1));
}
 8002324:	bf00      	nop
 8002326:	46bd      	mov	sp, r7
 8002328:	bc80      	pop	{r7}
 800232a:	4770      	bx	lr

0800232c <task_2pow2>:

void task_2pow2(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p2, sizeof(text2p1));
}
 8002330:	bf00      	nop
 8002332:	46bd      	mov	sp, r7
 8002334:	bc80      	pop	{r7}
 8002336:	4770      	bx	lr

08002338 <task_2pow3>:

void task_2pow3(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p3, sizeof(text2p1));
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	bc80      	pop	{r7}
 8002342:	4770      	bx	lr

08002344 <task_2pow4>:

void task_2pow4(void)
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
//	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p4, sizeof(text2p1));
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	bc80      	pop	{r7}
 800234e:	4770      	bx	lr

08002350 <task_2pow5>:

void task_2pow5(void)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p5, sizeof(text2p1));
 8002354:	220a      	movs	r2, #10
 8002356:	4903      	ldr	r1, [pc, #12]	; (8002364 <task_2pow5+0x14>)
 8002358:	4803      	ldr	r0, [pc, #12]	; (8002368 <task_2pow5+0x18>)
 800235a:	f7ff fbc3 	bl	8001ae4 <HAL_UART_Transmit_IT>
}
 800235e:	bf00      	nop
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	08002648 	.word	0x08002648
 8002368:	2000002c 	.word	0x2000002c

0800236c <task_2pow6>:

void task_2pow6(void)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	rola_task();
 8002370:	f7ff ffb2 	bl	80022d8 <rola_task>
	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p6, sizeof(text2p1));
 8002374:	220a      	movs	r2, #10
 8002376:	4903      	ldr	r1, [pc, #12]	; (8002384 <task_2pow6+0x18>)
 8002378:	4803      	ldr	r0, [pc, #12]	; (8002388 <task_2pow6+0x1c>)
 800237a:	f7ff fbb3 	bl	8001ae4 <HAL_UART_Transmit_IT>
}
 800237e:	bf00      	nop
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	08002654 	.word	0x08002654
 8002388:	2000002c 	.word	0x2000002c

0800238c <task_2pow7>:

void task_2pow7(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p7, sizeof(text2p1));
 8002390:	220a      	movs	r2, #10
 8002392:	4903      	ldr	r1, [pc, #12]	; (80023a0 <task_2pow7+0x14>)
 8002394:	4803      	ldr	r0, [pc, #12]	; (80023a4 <task_2pow7+0x18>)
 8002396:	f7ff fba5 	bl	8001ae4 <HAL_UART_Transmit_IT>
}
 800239a:	bf00      	nop
 800239c:	bd80      	pop	{r7, pc}
 800239e:	bf00      	nop
 80023a0:	08002660 	.word	0x08002660
 80023a4:	2000002c 	.word	0x2000002c

080023a8 <task_2pow8>:

void task_2pow8(void)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	af00      	add	r7, sp, #0
	HAL_UART_Transmit_IT(&huart1, (uint8*)text2p8, sizeof(text2p1));
 80023ac:	220a      	movs	r2, #10
 80023ae:	4903      	ldr	r1, [pc, #12]	; (80023bc <task_2pow8+0x14>)
 80023b0:	4803      	ldr	r0, [pc, #12]	; (80023c0 <task_2pow8+0x18>)
 80023b2:	f7ff fb97 	bl	8001ae4 <HAL_UART_Transmit_IT>
}
 80023b6:	bf00      	nop
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	0800266c 	.word	0x0800266c
 80023c0:	2000002c 	.word	0x2000002c

080023c4 <scheduler_init>:
scheduler_t;

static scheduler_t scheduler;

void scheduler_init(void)
{
 80023c4:	b480      	push	{r7}
 80023c6:	af00      	add	r7, sp, #0
	scheduler.input.tick = 0u;
 80023c8:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <scheduler_init+0x20>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	701a      	strb	r2, [r3, #0]
	scheduler.local.tick = 0u;
 80023ce:	4b05      	ldr	r3, [pc, #20]	; (80023e4 <scheduler_init+0x20>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	705a      	strb	r2, [r3, #1]
	scheduler.local.count = 0u;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <scheduler_init+0x20>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	709a      	strb	r2, [r3, #2]
}
 80023da:	bf00      	nop
 80023dc:	46bd      	mov	sp, r7
 80023de:	bc80      	pop	{r7}
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000028 	.word	0x20000028

080023e8 <scheduler_main>:

void scheduler_main(void)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	af00      	add	r7, sp, #0
	for(;;)
	{
		if( scheduler.local.tick != scheduler.input.tick )
 80023ec:	4b2c      	ldr	r3, [pc, #176]	; (80024a0 <scheduler_main+0xb8>)
 80023ee:	785a      	ldrb	r2, [r3, #1]
 80023f0:	4b2b      	ldr	r3, [pc, #172]	; (80024a0 <scheduler_main+0xb8>)
 80023f2:	781b      	ldrb	r3, [r3, #0]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d0f9      	beq.n	80023ec <scheduler_main+0x4>
		{
			/* sync */
			scheduler.local.tick = scheduler.input.tick;
 80023f8:	4b29      	ldr	r3, [pc, #164]	; (80024a0 <scheduler_main+0xb8>)
 80023fa:	781a      	ldrb	r2, [r3, #0]
 80023fc:	4b28      	ldr	r3, [pc, #160]	; (80024a0 <scheduler_main+0xb8>)
 80023fe:	705a      	strb	r2, [r3, #1]

			/* schedule tasks */
			                                      task_2pow0();
 8002400:	f7ff ff88 	bl	8002314 <task_2pow0>
			if( scheduler.local.count&0x01 )      task_2pow1();
 8002404:	4b26      	ldr	r3, [pc, #152]	; (80024a0 <scheduler_main+0xb8>)
 8002406:	789b      	ldrb	r3, [r3, #2]
 8002408:	f003 0301 	and.w	r3, r3, #1
 800240c:	2b00      	cmp	r3, #0
 800240e:	d002      	beq.n	8002416 <scheduler_main+0x2e>
 8002410:	f7ff ff86 	bl	8002320 <task_2pow1>
 8002414:	e03c      	b.n	8002490 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x02 ) task_2pow2();
 8002416:	4b22      	ldr	r3, [pc, #136]	; (80024a0 <scheduler_main+0xb8>)
 8002418:	789b      	ldrb	r3, [r3, #2]
 800241a:	f003 0302 	and.w	r3, r3, #2
 800241e:	2b00      	cmp	r3, #0
 8002420:	d002      	beq.n	8002428 <scheduler_main+0x40>
 8002422:	f7ff ff83 	bl	800232c <task_2pow2>
 8002426:	e033      	b.n	8002490 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x04 ) task_2pow3();
 8002428:	4b1d      	ldr	r3, [pc, #116]	; (80024a0 <scheduler_main+0xb8>)
 800242a:	789b      	ldrb	r3, [r3, #2]
 800242c:	f003 0304 	and.w	r3, r3, #4
 8002430:	2b00      	cmp	r3, #0
 8002432:	d002      	beq.n	800243a <scheduler_main+0x52>
 8002434:	f7ff ff80 	bl	8002338 <task_2pow3>
 8002438:	e02a      	b.n	8002490 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x08 ) task_2pow4();
 800243a:	4b19      	ldr	r3, [pc, #100]	; (80024a0 <scheduler_main+0xb8>)
 800243c:	789b      	ldrb	r3, [r3, #2]
 800243e:	f003 0308 	and.w	r3, r3, #8
 8002442:	2b00      	cmp	r3, #0
 8002444:	d002      	beq.n	800244c <scheduler_main+0x64>
 8002446:	f7ff ff7d 	bl	8002344 <task_2pow4>
 800244a:	e021      	b.n	8002490 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x10 ) task_2pow5();
 800244c:	4b14      	ldr	r3, [pc, #80]	; (80024a0 <scheduler_main+0xb8>)
 800244e:	789b      	ldrb	r3, [r3, #2]
 8002450:	f003 0310 	and.w	r3, r3, #16
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <scheduler_main+0x76>
 8002458:	f7ff ff7a 	bl	8002350 <task_2pow5>
 800245c:	e018      	b.n	8002490 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x20 ) task_2pow6();
 800245e:	4b10      	ldr	r3, [pc, #64]	; (80024a0 <scheduler_main+0xb8>)
 8002460:	789b      	ldrb	r3, [r3, #2]
 8002462:	f003 0320 	and.w	r3, r3, #32
 8002466:	2b00      	cmp	r3, #0
 8002468:	d002      	beq.n	8002470 <scheduler_main+0x88>
 800246a:	f7ff ff7f 	bl	800236c <task_2pow6>
 800246e:	e00f      	b.n	8002490 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x40 ) task_2pow7();
 8002470:	4b0b      	ldr	r3, [pc, #44]	; (80024a0 <scheduler_main+0xb8>)
 8002472:	789b      	ldrb	r3, [r3, #2]
 8002474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002478:	2b00      	cmp	r3, #0
 800247a:	d002      	beq.n	8002482 <scheduler_main+0x9a>
 800247c:	f7ff ff86 	bl	800238c <task_2pow7>
 8002480:	e006      	b.n	8002490 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x80 ) task_2pow8();
 8002482:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <scheduler_main+0xb8>)
 8002484:	789b      	ldrb	r3, [r3, #2]
 8002486:	b25b      	sxtb	r3, r3
 8002488:	2b00      	cmp	r3, #0
 800248a:	da01      	bge.n	8002490 <scheduler_main+0xa8>
 800248c:	f7ff ff8c 	bl	80023a8 <task_2pow8>
			else ;

			/* count up */
			scheduler.local.count++;
 8002490:	4b03      	ldr	r3, [pc, #12]	; (80024a0 <scheduler_main+0xb8>)
 8002492:	789b      	ldrb	r3, [r3, #2]
 8002494:	3301      	adds	r3, #1
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b01      	ldr	r3, [pc, #4]	; (80024a0 <scheduler_main+0xb8>)
 800249a:	709a      	strb	r2, [r3, #2]
		if( scheduler.local.tick != scheduler.input.tick )
 800249c:	e7a6      	b.n	80023ec <scheduler_main+0x4>
 800249e:	bf00      	nop
 80024a0:	20000028 	.word	0x20000028

080024a4 <scheduler_ei_tickUp_ISR>:
		}
	}
}

void scheduler_ei_tickUp_ISR(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
	scheduler.input.tick++;
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <scheduler_ei_tickUp_ISR+0x18>)
 80024aa:	781b      	ldrb	r3, [r3, #0]
 80024ac:	3301      	adds	r3, #1
 80024ae:	b2da      	uxtb	r2, r3
 80024b0:	4b02      	ldr	r3, [pc, #8]	; (80024bc <scheduler_ei_tickUp_ISR+0x18>)
 80024b2:	701a      	strb	r2, [r3, #0]
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	bc80      	pop	{r7}
 80024ba:	4770      	bx	lr
 80024bc:	20000028 	.word	0x20000028

080024c0 <__libc_init_array>:
 80024c0:	b570      	push	{r4, r5, r6, lr}
 80024c2:	2500      	movs	r5, #0
 80024c4:	4e0c      	ldr	r6, [pc, #48]	; (80024f8 <__libc_init_array+0x38>)
 80024c6:	4c0d      	ldr	r4, [pc, #52]	; (80024fc <__libc_init_array+0x3c>)
 80024c8:	1ba4      	subs	r4, r4, r6
 80024ca:	10a4      	asrs	r4, r4, #2
 80024cc:	42a5      	cmp	r5, r4
 80024ce:	d109      	bne.n	80024e4 <__libc_init_array+0x24>
 80024d0:	f000 f822 	bl	8002518 <_init>
 80024d4:	2500      	movs	r5, #0
 80024d6:	4e0a      	ldr	r6, [pc, #40]	; (8002500 <__libc_init_array+0x40>)
 80024d8:	4c0a      	ldr	r4, [pc, #40]	; (8002504 <__libc_init_array+0x44>)
 80024da:	1ba4      	subs	r4, r4, r6
 80024dc:	10a4      	asrs	r4, r4, #2
 80024de:	42a5      	cmp	r5, r4
 80024e0:	d105      	bne.n	80024ee <__libc_init_array+0x2e>
 80024e2:	bd70      	pop	{r4, r5, r6, pc}
 80024e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024e8:	4798      	blx	r3
 80024ea:	3501      	adds	r5, #1
 80024ec:	e7ee      	b.n	80024cc <__libc_init_array+0xc>
 80024ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80024f2:	4798      	blx	r3
 80024f4:	3501      	adds	r5, #1
 80024f6:	e7f2      	b.n	80024de <__libc_init_array+0x1e>
 80024f8:	08002678 	.word	0x08002678
 80024fc:	08002678 	.word	0x08002678
 8002500:	08002678 	.word	0x08002678
 8002504:	0800267c 	.word	0x0800267c

08002508 <memset>:
 8002508:	4603      	mov	r3, r0
 800250a:	4402      	add	r2, r0
 800250c:	4293      	cmp	r3, r2
 800250e:	d100      	bne.n	8002512 <memset+0xa>
 8002510:	4770      	bx	lr
 8002512:	f803 1b01 	strb.w	r1, [r3], #1
 8002516:	e7f9      	b.n	800250c <memset+0x4>

08002518 <_init>:
 8002518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800251a:	bf00      	nop
 800251c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800251e:	bc08      	pop	{r3}
 8002520:	469e      	mov	lr, r3
 8002522:	4770      	bx	lr

08002524 <_fini>:
 8002524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002526:	bf00      	nop
 8002528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800252a:	bc08      	pop	{r3}
 800252c:	469e      	mov	lr, r3
 800252e:	4770      	bx	lr


SSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004b68  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000023c  08004c74  08004c74  00014c74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004eb0  08004eb0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004eb0  08004eb0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004eb0  08004eb0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004eb0  08004eb0  00014eb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004eb4  08004eb4  00014eb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004eb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000114  20000070  08004f28  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000184  08004f28  00020184  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e14a  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000273c  00000000  00000000  0002e1e3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000de0  00000000  00000000  00030920  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c58  00000000  00000000  00031700  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000918f  00000000  00000000  00032358  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003c5b  00000000  00000000  0003b4e7  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0003f142  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003cc4  00000000  00000000  0003f1c0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004c5c 	.word	0x08004c5c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004c5c 	.word	0x08004c5c

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b28      	ldr	r3, [pc, #160]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a27      	ldr	r2, [pc, #156]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b25      	ldr	r3, [pc, #148]	; (8000204 <MX_GPIO_Init+0xb8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b22      	ldr	r3, [pc, #136]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a21      	ldr	r2, [pc, #132]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1b      	ldr	r2, [pc, #108]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <MX_GPIO_Init+0xb8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001b0:	f001 f806 	bl	80011c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80001ba:	4814      	ldr	r0, [pc, #80]	; (800020c <MX_GPIO_Init+0xc0>)
 80001bc:	f001 f800 	bl	80011c0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001da:	f000 fdb7 	bl	8000d4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001de:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80001e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	2301      	movs	r3, #1
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	4619      	mov	r1, r3
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <MX_GPIO_Init+0xc0>)
 80001f8:	f000 fda8 	bl	8000d4c <HAL_GPIO_Init>

}
 80001fc:	bf00      	nop
 80001fe:	3720      	adds	r7, #32
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 fb98 	bl	8000948 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f80d 	bl	8000236 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f7ff ff96 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000220:	f000 f98e 	bl	8000540 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000224:	f000 fa06 	bl	8000634 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000228:	f000 faea 	bl	8000800 <MX_USART1_UART_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  scheduler_init();
 800022c:	f003 fd78 	bl	8003d20 <scheduler_init>
  scheduler_main();
 8000230:	f003 fd88 	bl	8003d44 <scheduler_main>

  while (1)
 8000234:	e7fe      	b.n	8000234 <main+0x24>

08000236 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000236:	b580      	push	{r7, lr}
 8000238:	b090      	sub	sp, #64	; 0x40
 800023a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800023c:	f107 0318 	add.w	r3, r7, #24
 8000240:	2228      	movs	r2, #40	; 0x28
 8000242:	2100      	movs	r1, #0
 8000244:	4618      	mov	r0, r3
 8000246:	f003 fe13 	bl	8003e70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	2200      	movs	r2, #0
 800024e:	601a      	str	r2, [r3, #0]
 8000250:	605a      	str	r2, [r3, #4]
 8000252:	609a      	str	r2, [r3, #8]
 8000254:	60da      	str	r2, [r3, #12]
 8000256:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000258:	2301      	movs	r3, #1
 800025a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800025c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000260:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000262:	2300      	movs	r3, #0
 8000264:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000266:	2301      	movs	r3, #1
 8000268:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800026a:	2302      	movs	r3, #2
 800026c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800026e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000272:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000274:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000278:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800027a:	f107 0318 	add.w	r3, r7, #24
 800027e:	4618      	mov	r0, r3
 8000280:	f000 ffd0 	bl	8001224 <HAL_RCC_OscConfig>
 8000284:	4603      	mov	r3, r0
 8000286:	2b00      	cmp	r3, #0
 8000288:	d001      	beq.n	800028e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800028a:	f000 f819 	bl	80002c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800028e:	230f      	movs	r3, #15
 8000290:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000292:	2302      	movs	r3, #2
 8000294:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000296:	2300      	movs	r3, #0
 8000298:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800029a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800029e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	2102      	movs	r1, #2
 80002a8:	4618      	mov	r0, r3
 80002aa:	f001 fb2b 	bl	8001904 <HAL_RCC_ClockConfig>
 80002ae:	4603      	mov	r3, r0
 80002b0:	2b00      	cmp	r3, #0
 80002b2:	d001      	beq.n	80002b8 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002b4:	f000 f804 	bl	80002c0 <Error_Handler>
  }
}
 80002b8:	bf00      	nop
 80002ba:	3740      	adds	r7, #64	; 0x40
 80002bc:	46bd      	mov	sp, r7
 80002be:	bd80      	pop	{r7, pc}

080002c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002c4:	bf00      	nop
 80002c6:	46bd      	mov	sp, r7
 80002c8:	bc80      	pop	{r7}
 80002ca:	4770      	bx	lr

080002cc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
 80002d4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr

080002e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002e0:	b480      	push	{r7}
 80002e2:	b085      	sub	sp, #20
 80002e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002e6:	4b15      	ldr	r3, [pc, #84]	; (800033c <HAL_MspInit+0x5c>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	4a14      	ldr	r2, [pc, #80]	; (800033c <HAL_MspInit+0x5c>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6193      	str	r3, [r2, #24]
 80002f2:	4b12      	ldr	r3, [pc, #72]	; (800033c <HAL_MspInit+0x5c>)
 80002f4:	699b      	ldr	r3, [r3, #24]
 80002f6:	f003 0301 	and.w	r3, r3, #1
 80002fa:	60bb      	str	r3, [r7, #8]
 80002fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002fe:	4b0f      	ldr	r3, [pc, #60]	; (800033c <HAL_MspInit+0x5c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	4a0e      	ldr	r2, [pc, #56]	; (800033c <HAL_MspInit+0x5c>)
 8000304:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000308:	61d3      	str	r3, [r2, #28]
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <HAL_MspInit+0x5c>)
 800030c:	69db      	ldr	r3, [r3, #28]
 800030e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000312:	607b      	str	r3, [r7, #4]
 8000314:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8000316:	4b0a      	ldr	r3, [pc, #40]	; (8000340 <HAL_MspInit+0x60>)
 8000318:	685b      	ldr	r3, [r3, #4]
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	68fb      	ldr	r3, [r7, #12]
 8000326:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800032a:	60fb      	str	r3, [r7, #12]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <HAL_MspInit+0x60>)
 800032e:	68fb      	ldr	r3, [r7, #12]
 8000330:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000332:	bf00      	nop
 8000334:	3714      	adds	r7, #20
 8000336:	46bd      	mov	sp, r7
 8000338:	bc80      	pop	{r7}
 800033a:	4770      	bx	lr
 800033c:	40021000 	.word	0x40021000
 8000340:	40010000 	.word	0x40010000

08000344 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	bc80      	pop	{r7}
 800034e:	4770      	bx	lr

08000350 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <HardFault_Handler+0x4>

08000356 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <MemManage_Handler+0x4>

0800035c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000360:	e7fe      	b.n	8000360 <BusFault_Handler+0x4>

08000362 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000362:	b480      	push	{r7}
 8000364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000366:	e7fe      	b.n	8000366 <UsageFault_Handler+0x4>

08000368 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	bc80      	pop	{r7}
 800038a:	4770      	bx	lr

0800038c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	scheduler_ei_tickUp_ISR();
 8000390:	f003 fd36 	bl	8003e00 <scheduler_ei_tickUp_ISR>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000394:	bf00      	nop
 8000396:	bd80      	pop	{r7, pc}

08000398 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000398:	b580      	push	{r7, lr}
 800039a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800039c:	4802      	ldr	r0, [pc, #8]	; (80003a8 <USART1_IRQHandler+0x10>)
 800039e:	f002 fed5 	bl	800314c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80003a2:	bf00      	nop
 80003a4:	bd80      	pop	{r7, pc}
 80003a6:	bf00      	nop
 80003a8:	2000012c 	.word	0x2000012c

080003ac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	b086      	sub	sp, #24
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	60f8      	str	r0, [r7, #12]
 80003b4:	60b9      	str	r1, [r7, #8]
 80003b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b8:	2300      	movs	r3, #0
 80003ba:	617b      	str	r3, [r7, #20]
 80003bc:	e00a      	b.n	80003d4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003be:	f3af 8000 	nop.w
 80003c2:	4601      	mov	r1, r0
 80003c4:	68bb      	ldr	r3, [r7, #8]
 80003c6:	1c5a      	adds	r2, r3, #1
 80003c8:	60ba      	str	r2, [r7, #8]
 80003ca:	b2ca      	uxtb	r2, r1
 80003cc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ce:	697b      	ldr	r3, [r7, #20]
 80003d0:	3301      	adds	r3, #1
 80003d2:	617b      	str	r3, [r7, #20]
 80003d4:	697a      	ldr	r2, [r7, #20]
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	429a      	cmp	r2, r3
 80003da:	dbf0      	blt.n	80003be <_read+0x12>
	}

return len;
 80003dc:	687b      	ldr	r3, [r7, #4]
}
 80003de:	4618      	mov	r0, r3
 80003e0:	3718      	adds	r7, #24
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bd80      	pop	{r7, pc}

080003e6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003e6:	b580      	push	{r7, lr}
 80003e8:	b086      	sub	sp, #24
 80003ea:	af00      	add	r7, sp, #0
 80003ec:	60f8      	str	r0, [r7, #12]
 80003ee:	60b9      	str	r1, [r7, #8]
 80003f0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003f2:	2300      	movs	r3, #0
 80003f4:	617b      	str	r3, [r7, #20]
 80003f6:	e009      	b.n	800040c <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003f8:	68bb      	ldr	r3, [r7, #8]
 80003fa:	1c5a      	adds	r2, r3, #1
 80003fc:	60ba      	str	r2, [r7, #8]
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	4618      	mov	r0, r3
 8000402:	f003 fc31 	bl	8003c68 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000406:	697b      	ldr	r3, [r7, #20]
 8000408:	3301      	adds	r3, #1
 800040a:	617b      	str	r3, [r7, #20]
 800040c:	697a      	ldr	r2, [r7, #20]
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	429a      	cmp	r2, r3
 8000412:	dbf1      	blt.n	80003f8 <_write+0x12>
	}
	return len;
 8000414:	687b      	ldr	r3, [r7, #4]
}
 8000416:	4618      	mov	r0, r3
 8000418:	3718      	adds	r7, #24
 800041a:	46bd      	mov	sp, r7
 800041c:	bd80      	pop	{r7, pc}

0800041e <_close>:

int _close(int file)
{
 800041e:	b480      	push	{r7}
 8000420:	b083      	sub	sp, #12
 8000422:	af00      	add	r7, sp, #0
 8000424:	6078      	str	r0, [r7, #4]
	return -1;
 8000426:	f04f 33ff 	mov.w	r3, #4294967295
}
 800042a:	4618      	mov	r0, r3
 800042c:	370c      	adds	r7, #12
 800042e:	46bd      	mov	sp, r7
 8000430:	bc80      	pop	{r7}
 8000432:	4770      	bx	lr

08000434 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000434:	b480      	push	{r7}
 8000436:	b083      	sub	sp, #12
 8000438:	af00      	add	r7, sp, #0
 800043a:	6078      	str	r0, [r7, #4]
 800043c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800043e:	683b      	ldr	r3, [r7, #0]
 8000440:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000444:	605a      	str	r2, [r3, #4]
	return 0;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	bc80      	pop	{r7}
 8000450:	4770      	bx	lr

08000452 <_isatty>:

int _isatty(int file)
{
 8000452:	b480      	push	{r7}
 8000454:	b083      	sub	sp, #12
 8000456:	af00      	add	r7, sp, #0
 8000458:	6078      	str	r0, [r7, #4]
	return 1;
 800045a:	2301      	movs	r3, #1
}
 800045c:	4618      	mov	r0, r3
 800045e:	370c      	adds	r7, #12
 8000460:	46bd      	mov	sp, r7
 8000462:	bc80      	pop	{r7}
 8000464:	4770      	bx	lr

08000466 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000466:	b480      	push	{r7}
 8000468:	b085      	sub	sp, #20
 800046a:	af00      	add	r7, sp, #0
 800046c:	60f8      	str	r0, [r7, #12]
 800046e:	60b9      	str	r1, [r7, #8]
 8000470:	607a      	str	r2, [r7, #4]
	return 0;
 8000472:	2300      	movs	r3, #0
}
 8000474:	4618      	mov	r0, r3
 8000476:	3714      	adds	r7, #20
 8000478:	46bd      	mov	sp, r7
 800047a:	bc80      	pop	{r7}
 800047c:	4770      	bx	lr
	...

08000480 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b084      	sub	sp, #16
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <_sbrk+0x50>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	2b00      	cmp	r3, #0
 800048e:	d102      	bne.n	8000496 <_sbrk+0x16>
		heap_end = &end;
 8000490:	4b0f      	ldr	r3, [pc, #60]	; (80004d0 <_sbrk+0x50>)
 8000492:	4a10      	ldr	r2, [pc, #64]	; (80004d4 <_sbrk+0x54>)
 8000494:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000496:	4b0e      	ldr	r3, [pc, #56]	; (80004d0 <_sbrk+0x50>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800049c:	4b0c      	ldr	r3, [pc, #48]	; (80004d0 <_sbrk+0x50>)
 800049e:	681a      	ldr	r2, [r3, #0]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4413      	add	r3, r2
 80004a4:	466a      	mov	r2, sp
 80004a6:	4293      	cmp	r3, r2
 80004a8:	d907      	bls.n	80004ba <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004aa:	f003 fcb7 	bl	8003e1c <__errno>
 80004ae:	4602      	mov	r2, r0
 80004b0:	230c      	movs	r3, #12
 80004b2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004b4:	f04f 33ff 	mov.w	r3, #4294967295
 80004b8:	e006      	b.n	80004c8 <_sbrk+0x48>
	}

	heap_end += incr;
 80004ba:	4b05      	ldr	r3, [pc, #20]	; (80004d0 <_sbrk+0x50>)
 80004bc:	681a      	ldr	r2, [r3, #0]
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	4a03      	ldr	r2, [pc, #12]	; (80004d0 <_sbrk+0x50>)
 80004c4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004c6:	68fb      	ldr	r3, [r7, #12]
}
 80004c8:	4618      	mov	r0, r3
 80004ca:	3710      	adds	r7, #16
 80004cc:	46bd      	mov	sp, r7
 80004ce:	bd80      	pop	{r7, pc}
 80004d0:	2000008c 	.word	0x2000008c
 80004d4:	20000188 	.word	0x20000188

080004d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004dc:	4b15      	ldr	r3, [pc, #84]	; (8000534 <SystemInit+0x5c>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a14      	ldr	r2, [pc, #80]	; (8000534 <SystemInit+0x5c>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004e8:	4b12      	ldr	r3, [pc, #72]	; (8000534 <SystemInit+0x5c>)
 80004ea:	685a      	ldr	r2, [r3, #4]
 80004ec:	4911      	ldr	r1, [pc, #68]	; (8000534 <SystemInit+0x5c>)
 80004ee:	4b12      	ldr	r3, [pc, #72]	; (8000538 <SystemInit+0x60>)
 80004f0:	4013      	ands	r3, r2
 80004f2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004f4:	4b0f      	ldr	r3, [pc, #60]	; (8000534 <SystemInit+0x5c>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0e      	ldr	r2, [pc, #56]	; (8000534 <SystemInit+0x5c>)
 80004fa:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000502:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000504:	4b0b      	ldr	r3, [pc, #44]	; (8000534 <SystemInit+0x5c>)
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	4a0a      	ldr	r2, [pc, #40]	; (8000534 <SystemInit+0x5c>)
 800050a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800050e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000510:	4b08      	ldr	r3, [pc, #32]	; (8000534 <SystemInit+0x5c>)
 8000512:	685b      	ldr	r3, [r3, #4]
 8000514:	4a07      	ldr	r2, [pc, #28]	; (8000534 <SystemInit+0x5c>)
 8000516:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800051a:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <SystemInit+0x5c>)
 800051e:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000522:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <SystemInit+0x64>)
 8000526:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800052a:	609a      	str	r2, [r3, #8]
#endif 
}
 800052c:	bf00      	nop
 800052e:	46bd      	mov	sp, r7
 8000530:	bc80      	pop	{r7}
 8000532:	4770      	bx	lr
 8000534:	40021000 	.word	0x40021000
 8000538:	f8ff0000 	.word	0xf8ff0000
 800053c:	e000ed00 	.word	0xe000ed00

08000540 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	; 0x28
 8000544:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000546:	f107 0318 	add.w	r3, r7, #24
 800054a:	2200      	movs	r2, #0
 800054c:	601a      	str	r2, [r3, #0]
 800054e:	605a      	str	r2, [r3, #4]
 8000550:	609a      	str	r2, [r3, #8]
 8000552:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000554:	f107 0310 	add.w	r3, r7, #16
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800055e:	463b      	mov	r3, r7
 8000560:	2200      	movs	r2, #0
 8000562:	601a      	str	r2, [r3, #0]
 8000564:	605a      	str	r2, [r3, #4]
 8000566:	609a      	str	r2, [r3, #8]
 8000568:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800056a:	4b31      	ldr	r3, [pc, #196]	; (8000630 <MX_TIM2_Init+0xf0>)
 800056c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000570:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 71;
 8000572:	4b2f      	ldr	r3, [pc, #188]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000574:	2247      	movs	r2, #71	; 0x47
 8000576:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000578:	4b2d      	ldr	r3, [pc, #180]	; (8000630 <MX_TIM2_Init+0xf0>)
 800057a:	2200      	movs	r2, #0
 800057c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800057e:	4b2c      	ldr	r3, [pc, #176]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000580:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000584:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000586:	4b2a      	ldr	r3, [pc, #168]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000588:	2200      	movs	r2, #0
 800058a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800058c:	4b28      	ldr	r3, [pc, #160]	; (8000630 <MX_TIM2_Init+0xf0>)
 800058e:	2200      	movs	r2, #0
 8000590:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000592:	4827      	ldr	r0, [pc, #156]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000594:	f001 fbf8 	bl	8001d88 <HAL_TIM_Base_Init>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800059e:	f7ff fe8f 	bl	80002c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005a6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005a8:	f107 0318 	add.w	r3, r7, #24
 80005ac:	4619      	mov	r1, r3
 80005ae:	4820      	ldr	r0, [pc, #128]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005b0:	f001 ff08 	bl	80023c4 <HAL_TIM_ConfigClockSource>
 80005b4:	4603      	mov	r3, r0
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d001      	beq.n	80005be <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80005ba:	f7ff fe81 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80005be:	481c      	ldr	r0, [pc, #112]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005c0:	f001 fcac 	bl	8001f1c <HAL_TIM_IC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005ca:	f7ff fe79 	bl	80002c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ce:	2300      	movs	r3, #0
 80005d0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005d2:	2300      	movs	r3, #0
 80005d4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005d6:	f107 0310 	add.w	r3, r7, #16
 80005da:	4619      	mov	r1, r3
 80005dc:	4814      	ldr	r0, [pc, #80]	; (8000630 <MX_TIM2_Init+0xf0>)
 80005de:	f002 fbdd 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 80005e2:	4603      	mov	r3, r0
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d001      	beq.n	80005ec <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80005e8:	f7ff fe6a 	bl	80002c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005ec:	2300      	movs	r3, #0
 80005ee:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005f0:	2301      	movs	r3, #1
 80005f2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005f4:	2300      	movs	r3, #0
 80005f6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80005f8:	2300      	movs	r3, #0
 80005fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80005fc:	463b      	mov	r3, r7
 80005fe:	2208      	movs	r2, #8
 8000600:	4619      	mov	r1, r3
 8000602:	480b      	ldr	r0, [pc, #44]	; (8000630 <MX_TIM2_Init+0xf0>)
 8000604:	f001 fd8e 	bl	8002124 <HAL_TIM_IC_ConfigChannel>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 800060e:	f7ff fe57 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000612:	463b      	mov	r3, r7
 8000614:	220c      	movs	r2, #12
 8000616:	4619      	mov	r1, r3
 8000618:	4805      	ldr	r0, [pc, #20]	; (8000630 <MX_TIM2_Init+0xf0>)
 800061a:	f001 fd83 	bl	8002124 <HAL_TIM_IC_ConfigChannel>
 800061e:	4603      	mov	r3, r0
 8000620:	2b00      	cmp	r3, #0
 8000622:	d001      	beq.n	8000628 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000624:	f7ff fe4c 	bl	80002c0 <Error_Handler>
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	200000ec 	.word	0x200000ec

08000634 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08a      	sub	sp, #40	; 0x28
 8000638:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800063a:	f107 0318 	add.w	r3, r7, #24
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000648:	f107 0310 	add.w	r3, r7, #16
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
 8000650:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000652:	463b      	mov	r3, r7
 8000654:	2200      	movs	r2, #0
 8000656:	601a      	str	r2, [r3, #0]
 8000658:	605a      	str	r2, [r3, #4]
 800065a:	609a      	str	r2, [r3, #8]
 800065c:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800065e:	4b31      	ldr	r3, [pc, #196]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000660:	4a31      	ldr	r2, [pc, #196]	; (8000728 <MX_TIM3_Init+0xf4>)
 8000662:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 71;
 8000664:	4b2f      	ldr	r3, [pc, #188]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000666:	2247      	movs	r2, #71	; 0x47
 8000668:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800066a:	4b2e      	ldr	r3, [pc, #184]	; (8000724 <MX_TIM3_Init+0xf0>)
 800066c:	2200      	movs	r2, #0
 800066e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8000670:	4b2c      	ldr	r3, [pc, #176]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000672:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000676:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000678:	4b2a      	ldr	r3, [pc, #168]	; (8000724 <MX_TIM3_Init+0xf0>)
 800067a:	2200      	movs	r2, #0
 800067c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800067e:	4b29      	ldr	r3, [pc, #164]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000680:	2200      	movs	r2, #0
 8000682:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000684:	4827      	ldr	r0, [pc, #156]	; (8000724 <MX_TIM3_Init+0xf0>)
 8000686:	f001 fb7f 	bl	8001d88 <HAL_TIM_Base_Init>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000690:	f7ff fe16 	bl	80002c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000694:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000698:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800069a:	f107 0318 	add.w	r3, r7, #24
 800069e:	4619      	mov	r1, r3
 80006a0:	4820      	ldr	r0, [pc, #128]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006a2:	f001 fe8f 	bl	80023c4 <HAL_TIM_ConfigClockSource>
 80006a6:	4603      	mov	r3, r0
 80006a8:	2b00      	cmp	r3, #0
 80006aa:	d001      	beq.n	80006b0 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80006ac:	f7ff fe08 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80006b0:	481c      	ldr	r0, [pc, #112]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006b2:	f001 fc33 	bl	8001f1c <HAL_TIM_IC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80006bc:	f7ff fe00 	bl	80002c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006c0:	2300      	movs	r3, #0
 80006c2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006c8:	f107 0310 	add.w	r3, r7, #16
 80006cc:	4619      	mov	r1, r3
 80006ce:	4815      	ldr	r0, [pc, #84]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006d0:	f002 fb64 	bl	8002d9c <HAL_TIMEx_MasterConfigSynchronization>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80006da:	f7ff fdf1 	bl	80002c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006de:	2300      	movs	r3, #0
 80006e0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006e2:	2301      	movs	r3, #1
 80006e4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006e6:	2300      	movs	r3, #0
 80006e8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80006ea:	2300      	movs	r3, #0
 80006ec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80006ee:	463b      	mov	r3, r7
 80006f0:	2208      	movs	r2, #8
 80006f2:	4619      	mov	r1, r3
 80006f4:	480b      	ldr	r0, [pc, #44]	; (8000724 <MX_TIM3_Init+0xf0>)
 80006f6:	f001 fd15 	bl	8002124 <HAL_TIM_IC_ConfigChannel>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d001      	beq.n	8000704 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 8000700:	f7ff fdde 	bl	80002c0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000704:	463b      	mov	r3, r7
 8000706:	220c      	movs	r2, #12
 8000708:	4619      	mov	r1, r3
 800070a:	4806      	ldr	r0, [pc, #24]	; (8000724 <MX_TIM3_Init+0xf0>)
 800070c:	f001 fd0a 	bl	8002124 <HAL_TIM_IC_ConfigChannel>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 8000716:	f7ff fdd3 	bl	80002c0 <Error_Handler>
  }

}
 800071a:	bf00      	nop
 800071c:	3728      	adds	r7, #40	; 0x28
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
 8000722:	bf00      	nop
 8000724:	200000ac 	.word	0x200000ac
 8000728:	40000400 	.word	0x40000400

0800072c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b08a      	sub	sp, #40	; 0x28
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	2200      	movs	r2, #0
 800073a:	601a      	str	r2, [r3, #0]
 800073c:	605a      	str	r2, [r3, #4]
 800073e:	609a      	str	r2, [r3, #8]
 8000740:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800074a:	d124      	bne.n	8000796 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800074c:	4b28      	ldr	r3, [pc, #160]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 800074e:	69db      	ldr	r3, [r3, #28]
 8000750:	4a27      	ldr	r2, [pc, #156]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 8000752:	f043 0301 	orr.w	r3, r3, #1
 8000756:	61d3      	str	r3, [r2, #28]
 8000758:	4b25      	ldr	r3, [pc, #148]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 800075a:	69db      	ldr	r3, [r3, #28]
 800075c:	f003 0301 	and.w	r3, r3, #1
 8000760:	617b      	str	r3, [r7, #20]
 8000762:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000764:	4b22      	ldr	r3, [pc, #136]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 8000766:	699b      	ldr	r3, [r3, #24]
 8000768:	4a21      	ldr	r2, [pc, #132]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 800076a:	f043 0304 	orr.w	r3, r3, #4
 800076e:	6193      	str	r3, [r2, #24]
 8000770:	4b1f      	ldr	r3, [pc, #124]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 8000772:	699b      	ldr	r3, [r3, #24]
 8000774:	f003 0304 	and.w	r3, r3, #4
 8000778:	613b      	str	r3, [r7, #16]
 800077a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800077c:	230c      	movs	r3, #12
 800077e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000780:	2300      	movs	r3, #0
 8000782:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000788:	f107 0318 	add.w	r3, r7, #24
 800078c:	4619      	mov	r1, r3
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <HAL_TIM_Base_MspInit+0xc8>)
 8000790:	f000 fadc 	bl	8000d4c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000794:	e028      	b.n	80007e8 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM3)
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	4a17      	ldr	r2, [pc, #92]	; (80007f8 <HAL_TIM_Base_MspInit+0xcc>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d123      	bne.n	80007e8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80007a0:	4b13      	ldr	r3, [pc, #76]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007a2:	69db      	ldr	r3, [r3, #28]
 80007a4:	4a12      	ldr	r2, [pc, #72]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007a6:	f043 0302 	orr.w	r3, r3, #2
 80007aa:	61d3      	str	r3, [r2, #28]
 80007ac:	4b10      	ldr	r3, [pc, #64]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007ae:	69db      	ldr	r3, [r3, #28]
 80007b0:	f003 0302 	and.w	r3, r3, #2
 80007b4:	60fb      	str	r3, [r7, #12]
 80007b6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007b8:	4b0d      	ldr	r3, [pc, #52]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007ba:	699b      	ldr	r3, [r3, #24]
 80007bc:	4a0c      	ldr	r2, [pc, #48]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007be:	f043 0308 	orr.w	r3, r3, #8
 80007c2:	6193      	str	r3, [r2, #24]
 80007c4:	4b0a      	ldr	r3, [pc, #40]	; (80007f0 <HAL_TIM_Base_MspInit+0xc4>)
 80007c6:	699b      	ldr	r3, [r3, #24]
 80007c8:	f003 0308 	and.w	r3, r3, #8
 80007cc:	60bb      	str	r3, [r7, #8]
 80007ce:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007d0:	2303      	movs	r3, #3
 80007d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007dc:	f107 0318 	add.w	r3, r7, #24
 80007e0:	4619      	mov	r1, r3
 80007e2:	4806      	ldr	r0, [pc, #24]	; (80007fc <HAL_TIM_Base_MspInit+0xd0>)
 80007e4:	f000 fab2 	bl	8000d4c <HAL_GPIO_Init>
}
 80007e8:	bf00      	nop
 80007ea:	3728      	adds	r7, #40	; 0x28
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40021000 	.word	0x40021000
 80007f4:	40010800 	.word	0x40010800
 80007f8:	40000400 	.word	0x40000400
 80007fc:	40010c00 	.word	0x40010c00

08000800 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 8000804:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000806:	4a12      	ldr	r2, [pc, #72]	; (8000850 <MX_USART1_UART_Init+0x50>)
 8000808:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080a:	4b10      	ldr	r3, [pc, #64]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800080c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000810:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000814:	2200      	movs	r2, #0
 8000816:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000818:	4b0c      	ldr	r3, [pc, #48]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800081a:	2200      	movs	r2, #0
 800081c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800081e:	4b0b      	ldr	r3, [pc, #44]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000820:	2200      	movs	r2, #0
 8000822:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000824:	4b09      	ldr	r3, [pc, #36]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000826:	2208      	movs	r2, #8
 8000828:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082a:	4b08      	ldr	r3, [pc, #32]	; (800084c <MX_USART1_UART_Init+0x4c>)
 800082c:	2200      	movs	r2, #0
 800082e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000830:	4b06      	ldr	r3, [pc, #24]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000832:	2200      	movs	r2, #0
 8000834:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000836:	4805      	ldr	r0, [pc, #20]	; (800084c <MX_USART1_UART_Init+0x4c>)
 8000838:	f002 fb46 	bl	8002ec8 <HAL_UART_Init>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000842:	f7ff fd3d 	bl	80002c0 <Error_Handler>
  }

}
 8000846:	bf00      	nop
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	2000012c 	.word	0x2000012c
 8000850:	40013800 	.word	0x40013800

08000854 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b088      	sub	sp, #32
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800085c:	f107 0310 	add.w	r3, r7, #16
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	4a20      	ldr	r2, [pc, #128]	; (80008f0 <HAL_UART_MspInit+0x9c>)
 8000870:	4293      	cmp	r3, r2
 8000872:	d139      	bne.n	80008e8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000874:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 8000876:	699b      	ldr	r3, [r3, #24]
 8000878:	4a1e      	ldr	r2, [pc, #120]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 800087a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800087e:	6193      	str	r3, [r2, #24]
 8000880:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 8000882:	699b      	ldr	r3, [r3, #24]
 8000884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800088c:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 800088e:	699b      	ldr	r3, [r3, #24]
 8000890:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 8000892:	f043 0304 	orr.w	r3, r3, #4
 8000896:	6193      	str	r3, [r2, #24]
 8000898:	4b16      	ldr	r3, [pc, #88]	; (80008f4 <HAL_UART_MspInit+0xa0>)
 800089a:	699b      	ldr	r3, [r3, #24]
 800089c:	f003 0304 	and.w	r3, r3, #4
 80008a0:	60bb      	str	r3, [r7, #8]
 80008a2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80008a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80008a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008aa:	2302      	movs	r3, #2
 80008ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80008ae:	2303      	movs	r3, #3
 80008b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008b2:	f107 0310 	add.w	r3, r7, #16
 80008b6:	4619      	mov	r1, r3
 80008b8:	480f      	ldr	r0, [pc, #60]	; (80008f8 <HAL_UART_MspInit+0xa4>)
 80008ba:	f000 fa47 	bl	8000d4c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008c2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c4:	2300      	movs	r3, #0
 80008c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008cc:	f107 0310 	add.w	r3, r7, #16
 80008d0:	4619      	mov	r1, r3
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <HAL_UART_MspInit+0xa4>)
 80008d4:	f000 fa3a 	bl	8000d4c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008d8:	2200      	movs	r2, #0
 80008da:	2100      	movs	r1, #0
 80008dc:	2025      	movs	r0, #37	; 0x25
 80008de:	f000 f96f 	bl	8000bc0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008e2:	2025      	movs	r0, #37	; 0x25
 80008e4:	f000 f998 	bl	8000c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008e8:	bf00      	nop
 80008ea:	3720      	adds	r7, #32
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	40013800 	.word	0x40013800
 80008f4:	40021000 	.word	0x40021000
 80008f8:	40010800 	.word	0x40010800

080008fc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008fc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008fe:	e003      	b.n	8000908 <LoopCopyDataInit>

08000900 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000900:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000902:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000904:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000906:	3104      	adds	r1, #4

08000908 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000908:	480a      	ldr	r0, [pc, #40]	; (8000934 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 800090c:	1842      	adds	r2, r0, r1
  cmp r2, r3
 800090e:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000910:	d3f6      	bcc.n	8000900 <CopyDataInit>
  ldr r2, =_sbss
 8000912:	4a0a      	ldr	r2, [pc, #40]	; (800093c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000914:	e002      	b.n	800091c <LoopFillZerobss>

08000916 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000916:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000918:	f842 3b04 	str.w	r3, [r2], #4

0800091c <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 800091c:	4b08      	ldr	r3, [pc, #32]	; (8000940 <LoopFillZerobss+0x24>)
  cmp r2, r3
 800091e:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000920:	d3f9      	bcc.n	8000916 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000922:	f7ff fdd9 	bl	80004d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000926:	f003 fa7f 	bl	8003e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800092a:	f7ff fc71 	bl	8000210 <main>
  bx lr
 800092e:	4770      	bx	lr
  ldr r3, =_sidata
 8000930:	08004eb8 	.word	0x08004eb8
  ldr r0, =_sdata
 8000934:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000938:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800093c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000940:	20000184 	.word	0x20000184

08000944 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000944:	e7fe      	b.n	8000944 <ADC1_2_IRQHandler>
	...

08000948 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800094c:	4b08      	ldr	r3, [pc, #32]	; (8000970 <HAL_Init+0x28>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a07      	ldr	r2, [pc, #28]	; (8000970 <HAL_Init+0x28>)
 8000952:	f043 0310 	orr.w	r3, r3, #16
 8000956:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000958:	2003      	movs	r0, #3
 800095a:	f000 f911 	bl	8000b80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095e:	2000      	movs	r0, #0
 8000960:	f000 f808 	bl	8000974 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000964:	f7ff fcbc 	bl	80002e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000968:	2300      	movs	r3, #0
}
 800096a:	4618      	mov	r0, r3
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	40022000 	.word	0x40022000

08000974 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b082      	sub	sp, #8
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800097c:	4b12      	ldr	r3, [pc, #72]	; (80009c8 <HAL_InitTick+0x54>)
 800097e:	681a      	ldr	r2, [r3, #0]
 8000980:	4b12      	ldr	r3, [pc, #72]	; (80009cc <HAL_InitTick+0x58>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	4619      	mov	r1, r3
 8000986:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800098a:	fbb3 f3f1 	udiv	r3, r3, r1
 800098e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000992:	4618      	mov	r0, r3
 8000994:	f000 f958 	bl	8000c48 <HAL_SYSTICK_Config>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
 80009a0:	e00e      	b.n	80009c0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2b0f      	cmp	r3, #15
 80009a6:	d80a      	bhi.n	80009be <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009a8:	2200      	movs	r2, #0
 80009aa:	6879      	ldr	r1, [r7, #4]
 80009ac:	f04f 30ff 	mov.w	r0, #4294967295
 80009b0:	f000 f906 	bl	8000bc0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009b4:	4a06      	ldr	r2, [pc, #24]	; (80009d0 <HAL_InitTick+0x5c>)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009ba:	2300      	movs	r3, #0
 80009bc:	e000      	b.n	80009c0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009be:	2301      	movs	r3, #1
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	3708      	adds	r7, #8
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	20000000 	.word	0x20000000
 80009cc:	20000008 	.word	0x20000008
 80009d0:	20000004 	.word	0x20000004

080009d4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  return uwTick;
 80009d8:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_GetTick+0x10>)
 80009da:	681b      	ldr	r3, [r3, #0]
}
 80009dc:	4618      	mov	r0, r3
 80009de:	46bd      	mov	sp, r7
 80009e0:	bc80      	pop	{r7}
 80009e2:	4770      	bx	lr
 80009e4:	2000016c 	.word	0x2000016c

080009e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b085      	sub	sp, #20
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	f003 0307 	and.w	r3, r3, #7
 80009f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 80009fa:	68db      	ldr	r3, [r3, #12]
 80009fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a04:	4013      	ands	r3, r2
 8000a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a08:	68fb      	ldr	r3, [r7, #12]
 8000a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a1a:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <__NVIC_SetPriorityGrouping+0x44>)
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	60d3      	str	r3, [r2, #12]
}
 8000a20:	bf00      	nop
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
 8000a2a:	bf00      	nop
 8000a2c:	e000ed00 	.word	0xe000ed00

08000a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a34:	4b04      	ldr	r3, [pc, #16]	; (8000a48 <__NVIC_GetPriorityGrouping+0x18>)
 8000a36:	68db      	ldr	r3, [r3, #12]
 8000a38:	0a1b      	lsrs	r3, r3, #8
 8000a3a:	f003 0307 	and.w	r3, r3, #7
}
 8000a3e:	4618      	mov	r0, r3
 8000a40:	46bd      	mov	sp, r7
 8000a42:	bc80      	pop	{r7}
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	e000ed00 	.word	0xe000ed00

08000a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b083      	sub	sp, #12
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5a:	2b00      	cmp	r3, #0
 8000a5c:	db0b      	blt.n	8000a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	f003 021f 	and.w	r2, r3, #31
 8000a64:	4906      	ldr	r1, [pc, #24]	; (8000a80 <__NVIC_EnableIRQ+0x34>)
 8000a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	2001      	movs	r0, #1
 8000a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	bc80      	pop	{r7}
 8000a7e:	4770      	bx	lr
 8000a80:	e000e100 	.word	0xe000e100

08000a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	6039      	str	r1, [r7, #0]
 8000a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	db0a      	blt.n	8000aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a98:	683b      	ldr	r3, [r7, #0]
 8000a9a:	b2da      	uxtb	r2, r3
 8000a9c:	490c      	ldr	r1, [pc, #48]	; (8000ad0 <__NVIC_SetPriority+0x4c>)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	0112      	lsls	r2, r2, #4
 8000aa4:	b2d2      	uxtb	r2, r2
 8000aa6:	440b      	add	r3, r1
 8000aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000aac:	e00a      	b.n	8000ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	b2da      	uxtb	r2, r3
 8000ab2:	4908      	ldr	r1, [pc, #32]	; (8000ad4 <__NVIC_SetPriority+0x50>)
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	f003 030f 	and.w	r3, r3, #15
 8000aba:	3b04      	subs	r3, #4
 8000abc:	0112      	lsls	r2, r2, #4
 8000abe:	b2d2      	uxtb	r2, r2
 8000ac0:	440b      	add	r3, r1
 8000ac2:	761a      	strb	r2, [r3, #24]
}
 8000ac4:	bf00      	nop
 8000ac6:	370c      	adds	r7, #12
 8000ac8:	46bd      	mov	sp, r7
 8000aca:	bc80      	pop	{r7}
 8000acc:	4770      	bx	lr
 8000ace:	bf00      	nop
 8000ad0:	e000e100 	.word	0xe000e100
 8000ad4:	e000ed00 	.word	0xe000ed00

08000ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b089      	sub	sp, #36	; 0x24
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	60f8      	str	r0, [r7, #12]
 8000ae0:	60b9      	str	r1, [r7, #8]
 8000ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ae4:	68fb      	ldr	r3, [r7, #12]
 8000ae6:	f003 0307 	and.w	r3, r3, #7
 8000aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	f1c3 0307 	rsb	r3, r3, #7
 8000af2:	2b04      	cmp	r3, #4
 8000af4:	bf28      	it	cs
 8000af6:	2304      	movcs	r3, #4
 8000af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3304      	adds	r3, #4
 8000afe:	2b06      	cmp	r3, #6
 8000b00:	d902      	bls.n	8000b08 <NVIC_EncodePriority+0x30>
 8000b02:	69fb      	ldr	r3, [r7, #28]
 8000b04:	3b03      	subs	r3, #3
 8000b06:	e000      	b.n	8000b0a <NVIC_EncodePriority+0x32>
 8000b08:	2300      	movs	r3, #0
 8000b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000b10:	69bb      	ldr	r3, [r7, #24]
 8000b12:	fa02 f303 	lsl.w	r3, r2, r3
 8000b16:	43da      	mvns	r2, r3
 8000b18:	68bb      	ldr	r3, [r7, #8]
 8000b1a:	401a      	ands	r2, r3
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b20:	f04f 31ff 	mov.w	r1, #4294967295
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	fa01 f303 	lsl.w	r3, r1, r3
 8000b2a:	43d9      	mvns	r1, r3
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b30:	4313      	orrs	r3, r2
         );
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	3724      	adds	r7, #36	; 0x24
 8000b36:	46bd      	mov	sp, r7
 8000b38:	bc80      	pop	{r7}
 8000b3a:	4770      	bx	lr

08000b3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	3b01      	subs	r3, #1
 8000b48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b4c:	d301      	bcc.n	8000b52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00f      	b.n	8000b72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b52:	4a0a      	ldr	r2, [pc, #40]	; (8000b7c <SysTick_Config+0x40>)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	3b01      	subs	r3, #1
 8000b58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b5a:	210f      	movs	r1, #15
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b60:	f7ff ff90 	bl	8000a84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b64:	4b05      	ldr	r3, [pc, #20]	; (8000b7c <SysTick_Config+0x40>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <SysTick_Config+0x40>)
 8000b6c:	2207      	movs	r2, #7
 8000b6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b70:	2300      	movs	r3, #0
}
 8000b72:	4618      	mov	r0, r3
 8000b74:	3708      	adds	r7, #8
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	e000e010 	.word	0xe000e010

08000b80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	2b07      	cmp	r3, #7
 8000b8c:	d00f      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	2b06      	cmp	r3, #6
 8000b92:	d00c      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	2b05      	cmp	r3, #5
 8000b98:	d009      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	2b04      	cmp	r3, #4
 8000b9e:	d006      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2b03      	cmp	r3, #3
 8000ba4:	d003      	beq.n	8000bae <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000ba6:	2192      	movs	r1, #146	; 0x92
 8000ba8:	4804      	ldr	r0, [pc, #16]	; (8000bbc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000baa:	f7ff fb8f 	bl	80002cc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bae:	6878      	ldr	r0, [r7, #4]
 8000bb0:	f7ff ff1a 	bl	80009e8 <__NVIC_SetPriorityGrouping>
}
 8000bb4:	bf00      	nop
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	08004c74 	.word	0x08004c74

08000bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d903      	bls.n	8000be0 <HAL_NVIC_SetPriority+0x20>
 8000bd8:	21aa      	movs	r1, #170	; 0xaa
 8000bda:	480e      	ldr	r0, [pc, #56]	; (8000c14 <HAL_NVIC_SetPriority+0x54>)
 8000bdc:	f7ff fb76 	bl	80002cc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000be0:	68bb      	ldr	r3, [r7, #8]
 8000be2:	2b0f      	cmp	r3, #15
 8000be4:	d903      	bls.n	8000bee <HAL_NVIC_SetPriority+0x2e>
 8000be6:	21ab      	movs	r1, #171	; 0xab
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <HAL_NVIC_SetPriority+0x54>)
 8000bea:	f7ff fb6f 	bl	80002cc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bee:	f7ff ff1f 	bl	8000a30 <__NVIC_GetPriorityGrouping>
 8000bf2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	68b9      	ldr	r1, [r7, #8]
 8000bf8:	6978      	ldr	r0, [r7, #20]
 8000bfa:	f7ff ff6d 	bl	8000ad8 <NVIC_EncodePriority>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c04:	4611      	mov	r1, r2
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff3c 	bl	8000a84 <__NVIC_SetPriority>
}
 8000c0c:	bf00      	nop
 8000c0e:	3718      	adds	r7, #24
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}
 8000c14:	08004c74 	.word	0x08004c74

08000c18 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b082      	sub	sp, #8
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	4603      	mov	r3, r0
 8000c20:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	da03      	bge.n	8000c32 <HAL_NVIC_EnableIRQ+0x1a>
 8000c2a:	21be      	movs	r1, #190	; 0xbe
 8000c2c:	4805      	ldr	r0, [pc, #20]	; (8000c44 <HAL_NVIC_EnableIRQ+0x2c>)
 8000c2e:	f7ff fb4d 	bl	80002cc <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	4618      	mov	r0, r3
 8000c38:	f7ff ff08 	bl	8000a4c <__NVIC_EnableIRQ>
}
 8000c3c:	bf00      	nop
 8000c3e:	3708      	adds	r7, #8
 8000c40:	46bd      	mov	sp, r7
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	08004c74 	.word	0x08004c74

08000c48 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c50:	6878      	ldr	r0, [r7, #4]
 8000c52:	f7ff ff73 	bl	8000b3c <SysTick_Config>
 8000c56:	4603      	mov	r3, r0
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3708      	adds	r7, #8
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b084      	sub	sp, #16
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c68:	2300      	movs	r3, #0
 8000c6a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c72:	2b02      	cmp	r3, #2
 8000c74:	d005      	beq.n	8000c82 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	2204      	movs	r2, #4
 8000c7a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	73fb      	strb	r3, [r7, #15]
 8000c80:	e051      	b.n	8000d26 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	681a      	ldr	r2, [r3, #0]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	f022 020e 	bic.w	r2, r2, #14
 8000c90:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	681a      	ldr	r2, [r3, #0]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	f022 0201 	bic.w	r2, r2, #1
 8000ca0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <HAL_DMA_Abort_IT+0xd0>)
 8000ca8:	4293      	cmp	r3, r2
 8000caa:	d029      	beq.n	8000d00 <HAL_DMA_Abort_IT+0xa0>
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	4a20      	ldr	r2, [pc, #128]	; (8000d34 <HAL_DMA_Abort_IT+0xd4>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d022      	beq.n	8000cfc <HAL_DMA_Abort_IT+0x9c>
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	4a1f      	ldr	r2, [pc, #124]	; (8000d38 <HAL_DMA_Abort_IT+0xd8>)
 8000cbc:	4293      	cmp	r3, r2
 8000cbe:	d01a      	beq.n	8000cf6 <HAL_DMA_Abort_IT+0x96>
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	4a1d      	ldr	r2, [pc, #116]	; (8000d3c <HAL_DMA_Abort_IT+0xdc>)
 8000cc6:	4293      	cmp	r3, r2
 8000cc8:	d012      	beq.n	8000cf0 <HAL_DMA_Abort_IT+0x90>
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	4a1c      	ldr	r2, [pc, #112]	; (8000d40 <HAL_DMA_Abort_IT+0xe0>)
 8000cd0:	4293      	cmp	r3, r2
 8000cd2:	d00a      	beq.n	8000cea <HAL_DMA_Abort_IT+0x8a>
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a1a      	ldr	r2, [pc, #104]	; (8000d44 <HAL_DMA_Abort_IT+0xe4>)
 8000cda:	4293      	cmp	r3, r2
 8000cdc:	d102      	bne.n	8000ce4 <HAL_DMA_Abort_IT+0x84>
 8000cde:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000ce2:	e00e      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000ce4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ce8:	e00b      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cea:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cee:	e008      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cf4:	e005      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cf6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cfa:	e002      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000cfc:	2310      	movs	r3, #16
 8000cfe:	e000      	b.n	8000d02 <HAL_DMA_Abort_IT+0xa2>
 8000d00:	2301      	movs	r3, #1
 8000d02:	4a11      	ldr	r2, [pc, #68]	; (8000d48 <HAL_DMA_Abort_IT+0xe8>)
 8000d04:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	2201      	movs	r2, #1
 8000d0a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	2200      	movs	r2, #0
 8000d12:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d1a:	2b00      	cmp	r3, #0
 8000d1c:	d003      	beq.n	8000d26 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d22:	6878      	ldr	r0, [r7, #4]
 8000d24:	4798      	blx	r3
    } 
  }
  return status;
 8000d26:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d28:	4618      	mov	r0, r3
 8000d2a:	3710      	adds	r7, #16
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40020008 	.word	0x40020008
 8000d34:	4002001c 	.word	0x4002001c
 8000d38:	40020030 	.word	0x40020030
 8000d3c:	40020044 	.word	0x40020044
 8000d40:	40020058 	.word	0x40020058
 8000d44:	4002006c 	.word	0x4002006c
 8000d48:	40020000 	.word	0x40020000

08000d4c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b08a      	sub	sp, #40	; 0x28
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
 8000d54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d56:	2300      	movs	r3, #0
 8000d58:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a9c      	ldr	r2, [pc, #624]	; (8000fd4 <HAL_GPIO_Init+0x288>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d013      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4a9b      	ldr	r2, [pc, #620]	; (8000fd8 <HAL_GPIO_Init+0x28c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d00f      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4a9a      	ldr	r2, [pc, #616]	; (8000fdc <HAL_GPIO_Init+0x290>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d00b      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	4a99      	ldr	r2, [pc, #612]	; (8000fe0 <HAL_GPIO_Init+0x294>)
 8000d7a:	4293      	cmp	r3, r2
 8000d7c:	d007      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	4a98      	ldr	r2, [pc, #608]	; (8000fe4 <HAL_GPIO_Init+0x298>)
 8000d82:	4293      	cmp	r3, r2
 8000d84:	d003      	beq.n	8000d8e <HAL_GPIO_Init+0x42>
 8000d86:	21bd      	movs	r1, #189	; 0xbd
 8000d88:	4897      	ldr	r0, [pc, #604]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000d8a:	f7ff fa9f 	bl	80002cc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d005      	beq.n	8000da4 <HAL_GPIO_Init+0x58>
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	0c1b      	lsrs	r3, r3, #16
 8000d9e:	041b      	lsls	r3, r3, #16
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d003      	beq.n	8000dac <HAL_GPIO_Init+0x60>
 8000da4:	21be      	movs	r1, #190	; 0xbe
 8000da6:	4890      	ldr	r0, [pc, #576]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000da8:	f7ff fa90 	bl	80002cc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	f000 81eb 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685b      	ldr	r3, [r3, #4]
 8000dba:	2b01      	cmp	r3, #1
 8000dbc:	f000 81e6 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	685b      	ldr	r3, [r3, #4]
 8000dc4:	2b11      	cmp	r3, #17
 8000dc6:	f000 81e1 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	2b02      	cmp	r3, #2
 8000dd0:	f000 81dc 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	685b      	ldr	r3, [r3, #4]
 8000dd8:	2b12      	cmp	r3, #18
 8000dda:	f000 81d7 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	4a82      	ldr	r2, [pc, #520]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000de4:	4293      	cmp	r3, r2
 8000de6:	f000 81d1 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000dea:	683b      	ldr	r3, [r7, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	4a80      	ldr	r2, [pc, #512]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000df0:	4293      	cmp	r3, r2
 8000df2:	f000 81cb 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	685b      	ldr	r3, [r3, #4]
 8000dfa:	4a7e      	ldr	r2, [pc, #504]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	f000 81c5 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e02:	683b      	ldr	r3, [r7, #0]
 8000e04:	685b      	ldr	r3, [r3, #4]
 8000e06:	4a7c      	ldr	r2, [pc, #496]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	f000 81bf 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e0e:	683b      	ldr	r3, [r7, #0]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	4a7a      	ldr	r2, [pc, #488]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000e14:	4293      	cmp	r3, r2
 8000e16:	f000 81b9 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e1a:	683b      	ldr	r3, [r7, #0]
 8000e1c:	685b      	ldr	r3, [r3, #4]
 8000e1e:	4a78      	ldr	r2, [pc, #480]	; (8001000 <HAL_GPIO_Init+0x2b4>)
 8000e20:	4293      	cmp	r3, r2
 8000e22:	f000 81b3 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	685b      	ldr	r3, [r3, #4]
 8000e2a:	2b03      	cmp	r3, #3
 8000e2c:	f000 81ae 	beq.w	800118c <HAL_GPIO_Init+0x440>
 8000e30:	21bf      	movs	r1, #191	; 0xbf
 8000e32:	486d      	ldr	r0, [pc, #436]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000e34:	f7ff fa4a 	bl	80002cc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e38:	e1a8      	b.n	800118c <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e3a:	2201      	movs	r2, #1
 8000e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e42:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	69fa      	ldr	r2, [r7, #28]
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	f040 8197 	bne.w	8001186 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a5e      	ldr	r2, [pc, #376]	; (8000fd4 <HAL_GPIO_Init+0x288>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d013      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	4a5d      	ldr	r2, [pc, #372]	; (8000fd8 <HAL_GPIO_Init+0x28c>)
 8000e64:	4293      	cmp	r3, r2
 8000e66:	d00f      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	4a5c      	ldr	r2, [pc, #368]	; (8000fdc <HAL_GPIO_Init+0x290>)
 8000e6c:	4293      	cmp	r3, r2
 8000e6e:	d00b      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	4a5b      	ldr	r2, [pc, #364]	; (8000fe0 <HAL_GPIO_Init+0x294>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d007      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	4a5a      	ldr	r2, [pc, #360]	; (8000fe4 <HAL_GPIO_Init+0x298>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d003      	beq.n	8000e88 <HAL_GPIO_Init+0x13c>
 8000e80:	21cd      	movs	r1, #205	; 0xcd
 8000e82:	4859      	ldr	r0, [pc, #356]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000e84:	f7ff fa22 	bl	80002cc <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	2b12      	cmp	r3, #18
 8000e8e:	d065      	beq.n	8000f5c <HAL_GPIO_Init+0x210>
 8000e90:	2b12      	cmp	r3, #18
 8000e92:	d80e      	bhi.n	8000eb2 <HAL_GPIO_Init+0x166>
 8000e94:	2b02      	cmp	r3, #2
 8000e96:	d04c      	beq.n	8000f32 <HAL_GPIO_Init+0x1e6>
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d804      	bhi.n	8000ea6 <HAL_GPIO_Init+0x15a>
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d072      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ea0:	2b01      	cmp	r3, #1
 8000ea2:	d01d      	beq.n	8000ee0 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000ea4:	e0b1      	b.n	800100a <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000ea6:	2b03      	cmp	r3, #3
 8000ea8:	f000 80ac 	beq.w	8001004 <HAL_GPIO_Init+0x2b8>
 8000eac:	2b11      	cmp	r3, #17
 8000eae:	d02b      	beq.n	8000f08 <HAL_GPIO_Init+0x1bc>
          break;
 8000eb0:	e0ab      	b.n	800100a <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000eb2:	4a4f      	ldr	r2, [pc, #316]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d066      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000eb8:	4a4d      	ldr	r2, [pc, #308]	; (8000ff0 <HAL_GPIO_Init+0x2a4>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d806      	bhi.n	8000ecc <HAL_GPIO_Init+0x180>
 8000ebe:	4a4b      	ldr	r2, [pc, #300]	; (8000fec <HAL_GPIO_Init+0x2a0>)
 8000ec0:	4293      	cmp	r3, r2
 8000ec2:	d060      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ec4:	4a4c      	ldr	r2, [pc, #304]	; (8000ff8 <HAL_GPIO_Init+0x2ac>)
 8000ec6:	4293      	cmp	r3, r2
 8000ec8:	d05d      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
          break;
 8000eca:	e09e      	b.n	800100a <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000ecc:	4a49      	ldr	r2, [pc, #292]	; (8000ff4 <HAL_GPIO_Init+0x2a8>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d059      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ed2:	4a4b      	ldr	r2, [pc, #300]	; (8001000 <HAL_GPIO_Init+0x2b4>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d056      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
 8000ed8:	4a48      	ldr	r2, [pc, #288]	; (8000ffc <HAL_GPIO_Init+0x2b0>)
 8000eda:	4293      	cmp	r3, r2
 8000edc:	d053      	beq.n	8000f86 <HAL_GPIO_Init+0x23a>
          break;
 8000ede:	e094      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d00b      	beq.n	8000f00 <HAL_GPIO_Init+0x1b4>
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b01      	cmp	r3, #1
 8000eee:	d007      	beq.n	8000f00 <HAL_GPIO_Init+0x1b4>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b03      	cmp	r3, #3
 8000ef6:	d003      	beq.n	8000f00 <HAL_GPIO_Init+0x1b4>
 8000ef8:	21d5      	movs	r1, #213	; 0xd5
 8000efa:	483b      	ldr	r0, [pc, #236]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000efc:	f7ff f9e6 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68db      	ldr	r3, [r3, #12]
 8000f04:	623b      	str	r3, [r7, #32]
          break;
 8000f06:	e080      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	2b02      	cmp	r3, #2
 8000f0e:	d00b      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	2b01      	cmp	r3, #1
 8000f16:	d007      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	68db      	ldr	r3, [r3, #12]
 8000f1c:	2b03      	cmp	r3, #3
 8000f1e:	d003      	beq.n	8000f28 <HAL_GPIO_Init+0x1dc>
 8000f20:	21dc      	movs	r1, #220	; 0xdc
 8000f22:	4831      	ldr	r0, [pc, #196]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000f24:	f7ff f9d2 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	68db      	ldr	r3, [r3, #12]
 8000f2c:	3304      	adds	r3, #4
 8000f2e:	623b      	str	r3, [r7, #32]
          break;
 8000f30:	e06b      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d00b      	beq.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	68db      	ldr	r3, [r3, #12]
 8000f3e:	2b01      	cmp	r3, #1
 8000f40:	d007      	beq.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	68db      	ldr	r3, [r3, #12]
 8000f46:	2b03      	cmp	r3, #3
 8000f48:	d003      	beq.n	8000f52 <HAL_GPIO_Init+0x206>
 8000f4a:	21e3      	movs	r1, #227	; 0xe3
 8000f4c:	4826      	ldr	r0, [pc, #152]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000f4e:	f7ff f9bd 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68db      	ldr	r3, [r3, #12]
 8000f56:	3308      	adds	r3, #8
 8000f58:	623b      	str	r3, [r7, #32]
          break;
 8000f5a:	e056      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d00b      	beq.n	8000f7c <HAL_GPIO_Init+0x230>
 8000f64:	683b      	ldr	r3, [r7, #0]
 8000f66:	68db      	ldr	r3, [r3, #12]
 8000f68:	2b01      	cmp	r3, #1
 8000f6a:	d007      	beq.n	8000f7c <HAL_GPIO_Init+0x230>
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68db      	ldr	r3, [r3, #12]
 8000f70:	2b03      	cmp	r3, #3
 8000f72:	d003      	beq.n	8000f7c <HAL_GPIO_Init+0x230>
 8000f74:	21ea      	movs	r1, #234	; 0xea
 8000f76:	481c      	ldr	r0, [pc, #112]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000f78:	f7ff f9a8 	bl	80002cc <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	68db      	ldr	r3, [r3, #12]
 8000f80:	330c      	adds	r3, #12
 8000f82:	623b      	str	r3, [r7, #32]
          break;
 8000f84:	e041      	b.n	800100a <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d00b      	beq.n	8000fa6 <HAL_GPIO_Init+0x25a>
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d007      	beq.n	8000fa6 <HAL_GPIO_Init+0x25a>
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	689b      	ldr	r3, [r3, #8]
 8000f9a:	2b02      	cmp	r3, #2
 8000f9c:	d003      	beq.n	8000fa6 <HAL_GPIO_Init+0x25a>
 8000f9e:	21f7      	movs	r1, #247	; 0xf7
 8000fa0:	4811      	ldr	r0, [pc, #68]	; (8000fe8 <HAL_GPIO_Init+0x29c>)
 8000fa2:	f7ff f993 	bl	80002cc <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d102      	bne.n	8000fb4 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000fae:	2304      	movs	r3, #4
 8000fb0:	623b      	str	r3, [r7, #32]
          break;
 8000fb2:	e02a      	b.n	800100a <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000fb4:	683b      	ldr	r3, [r7, #0]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	2b01      	cmp	r3, #1
 8000fba:	d105      	bne.n	8000fc8 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fbc:	2308      	movs	r3, #8
 8000fbe:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	69fa      	ldr	r2, [r7, #28]
 8000fc4:	611a      	str	r2, [r3, #16]
          break;
 8000fc6:	e020      	b.n	800100a <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fc8:	2308      	movs	r3, #8
 8000fca:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	69fa      	ldr	r2, [r7, #28]
 8000fd0:	615a      	str	r2, [r3, #20]
          break;
 8000fd2:	e01a      	b.n	800100a <HAL_GPIO_Init+0x2be>
 8000fd4:	40010800 	.word	0x40010800
 8000fd8:	40010c00 	.word	0x40010c00
 8000fdc:	40011000 	.word	0x40011000
 8000fe0:	40011400 	.word	0x40011400
 8000fe4:	40011800 	.word	0x40011800
 8000fe8:	08004cb0 	.word	0x08004cb0
 8000fec:	10110000 	.word	0x10110000
 8000ff0:	10210000 	.word	0x10210000
 8000ff4:	10310000 	.word	0x10310000
 8000ff8:	10120000 	.word	0x10120000
 8000ffc:	10220000 	.word	0x10220000
 8001000:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001004:	2300      	movs	r3, #0
 8001006:	623b      	str	r3, [r7, #32]
          break;
 8001008:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800100a:	69bb      	ldr	r3, [r7, #24]
 800100c:	2bff      	cmp	r3, #255	; 0xff
 800100e:	d801      	bhi.n	8001014 <HAL_GPIO_Init+0x2c8>
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	e001      	b.n	8001018 <HAL_GPIO_Init+0x2cc>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3304      	adds	r3, #4
 8001018:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	2bff      	cmp	r3, #255	; 0xff
 800101e:	d802      	bhi.n	8001026 <HAL_GPIO_Init+0x2da>
 8001020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001022:	009b      	lsls	r3, r3, #2
 8001024:	e002      	b.n	800102c <HAL_GPIO_Init+0x2e0>
 8001026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001028:	3b08      	subs	r3, #8
 800102a:	009b      	lsls	r3, r3, #2
 800102c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	681a      	ldr	r2, [r3, #0]
 8001032:	210f      	movs	r1, #15
 8001034:	693b      	ldr	r3, [r7, #16]
 8001036:	fa01 f303 	lsl.w	r3, r1, r3
 800103a:	43db      	mvns	r3, r3
 800103c:	401a      	ands	r2, r3
 800103e:	6a39      	ldr	r1, [r7, #32]
 8001040:	693b      	ldr	r3, [r7, #16]
 8001042:	fa01 f303 	lsl.w	r3, r1, r3
 8001046:	431a      	orrs	r2, r3
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	685b      	ldr	r3, [r3, #4]
 8001050:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001054:	2b00      	cmp	r3, #0
 8001056:	f000 8096 	beq.w	8001186 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800105a:	4b52      	ldr	r3, [pc, #328]	; (80011a4 <HAL_GPIO_Init+0x458>)
 800105c:	699b      	ldr	r3, [r3, #24]
 800105e:	4a51      	ldr	r2, [pc, #324]	; (80011a4 <HAL_GPIO_Init+0x458>)
 8001060:	f043 0301 	orr.w	r3, r3, #1
 8001064:	6193      	str	r3, [r2, #24]
 8001066:	4b4f      	ldr	r3, [pc, #316]	; (80011a4 <HAL_GPIO_Init+0x458>)
 8001068:	699b      	ldr	r3, [r3, #24]
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	60bb      	str	r3, [r7, #8]
 8001070:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001072:	4a4d      	ldr	r2, [pc, #308]	; (80011a8 <HAL_GPIO_Init+0x45c>)
 8001074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001076:	089b      	lsrs	r3, r3, #2
 8001078:	3302      	adds	r3, #2
 800107a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800107e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001080:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001082:	f003 0303 	and.w	r3, r3, #3
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	220f      	movs	r2, #15
 800108a:	fa02 f303 	lsl.w	r3, r2, r3
 800108e:	43db      	mvns	r3, r3
 8001090:	68fa      	ldr	r2, [r7, #12]
 8001092:	4013      	ands	r3, r2
 8001094:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4a44      	ldr	r2, [pc, #272]	; (80011ac <HAL_GPIO_Init+0x460>)
 800109a:	4293      	cmp	r3, r2
 800109c:	d013      	beq.n	80010c6 <HAL_GPIO_Init+0x37a>
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a43      	ldr	r2, [pc, #268]	; (80011b0 <HAL_GPIO_Init+0x464>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d00d      	beq.n	80010c2 <HAL_GPIO_Init+0x376>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a42      	ldr	r2, [pc, #264]	; (80011b4 <HAL_GPIO_Init+0x468>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d007      	beq.n	80010be <HAL_GPIO_Init+0x372>
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	4a41      	ldr	r2, [pc, #260]	; (80011b8 <HAL_GPIO_Init+0x46c>)
 80010b2:	4293      	cmp	r3, r2
 80010b4:	d101      	bne.n	80010ba <HAL_GPIO_Init+0x36e>
 80010b6:	2303      	movs	r3, #3
 80010b8:	e006      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010ba:	2304      	movs	r3, #4
 80010bc:	e004      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010be:	2302      	movs	r3, #2
 80010c0:	e002      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010c2:	2301      	movs	r3, #1
 80010c4:	e000      	b.n	80010c8 <HAL_GPIO_Init+0x37c>
 80010c6:	2300      	movs	r3, #0
 80010c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010ca:	f002 0203 	and.w	r2, r2, #3
 80010ce:	0092      	lsls	r2, r2, #2
 80010d0:	4093      	lsls	r3, r2
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010d8:	4933      	ldr	r1, [pc, #204]	; (80011a8 <HAL_GPIO_Init+0x45c>)
 80010da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010dc:	089b      	lsrs	r3, r3, #2
 80010de:	3302      	adds	r3, #2
 80010e0:	68fa      	ldr	r2, [r7, #12]
 80010e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010e6:	683b      	ldr	r3, [r7, #0]
 80010e8:	685b      	ldr	r3, [r3, #4]
 80010ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d006      	beq.n	8001100 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010f2:	4b32      	ldr	r3, [pc, #200]	; (80011bc <HAL_GPIO_Init+0x470>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	4931      	ldr	r1, [pc, #196]	; (80011bc <HAL_GPIO_Init+0x470>)
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	600b      	str	r3, [r1, #0]
 80010fe:	e006      	b.n	800110e <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001100:	4b2e      	ldr	r3, [pc, #184]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	69bb      	ldr	r3, [r7, #24]
 8001106:	43db      	mvns	r3, r3
 8001108:	492c      	ldr	r1, [pc, #176]	; (80011bc <HAL_GPIO_Init+0x470>)
 800110a:	4013      	ands	r3, r2
 800110c:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001116:	2b00      	cmp	r3, #0
 8001118:	d006      	beq.n	8001128 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800111a:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_GPIO_Init+0x470>)
 800111c:	685a      	ldr	r2, [r3, #4]
 800111e:	4927      	ldr	r1, [pc, #156]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001120:	69bb      	ldr	r3, [r7, #24]
 8001122:	4313      	orrs	r3, r2
 8001124:	604b      	str	r3, [r1, #4]
 8001126:	e006      	b.n	8001136 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001128:	4b24      	ldr	r3, [pc, #144]	; (80011bc <HAL_GPIO_Init+0x470>)
 800112a:	685a      	ldr	r2, [r3, #4]
 800112c:	69bb      	ldr	r3, [r7, #24]
 800112e:	43db      	mvns	r3, r3
 8001130:	4922      	ldr	r1, [pc, #136]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001132:	4013      	ands	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800113e:	2b00      	cmp	r3, #0
 8001140:	d006      	beq.n	8001150 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001142:	4b1e      	ldr	r3, [pc, #120]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001144:	689a      	ldr	r2, [r3, #8]
 8001146:	491d      	ldr	r1, [pc, #116]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001148:	69bb      	ldr	r3, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	608b      	str	r3, [r1, #8]
 800114e:	e006      	b.n	800115e <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001150:	4b1a      	ldr	r3, [pc, #104]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001152:	689a      	ldr	r2, [r3, #8]
 8001154:	69bb      	ldr	r3, [r7, #24]
 8001156:	43db      	mvns	r3, r3
 8001158:	4918      	ldr	r1, [pc, #96]	; (80011bc <HAL_GPIO_Init+0x470>)
 800115a:	4013      	ands	r3, r2
 800115c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d006      	beq.n	8001178 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800116a:	4b14      	ldr	r3, [pc, #80]	; (80011bc <HAL_GPIO_Init+0x470>)
 800116c:	68da      	ldr	r2, [r3, #12]
 800116e:	4913      	ldr	r1, [pc, #76]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001170:	69bb      	ldr	r3, [r7, #24]
 8001172:	4313      	orrs	r3, r2
 8001174:	60cb      	str	r3, [r1, #12]
 8001176:	e006      	b.n	8001186 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001178:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_GPIO_Init+0x470>)
 800117a:	68da      	ldr	r2, [r3, #12]
 800117c:	69bb      	ldr	r3, [r7, #24]
 800117e:	43db      	mvns	r3, r3
 8001180:	490e      	ldr	r1, [pc, #56]	; (80011bc <HAL_GPIO_Init+0x470>)
 8001182:	4013      	ands	r3, r2
 8001184:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001188:	3301      	adds	r3, #1
 800118a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681a      	ldr	r2, [r3, #0]
 8001190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001192:	fa22 f303 	lsr.w	r3, r2, r3
 8001196:	2b00      	cmp	r3, #0
 8001198:	f47f ae4f 	bne.w	8000e3a <HAL_GPIO_Init+0xee>
  }
}
 800119c:	bf00      	nop
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40021000 	.word	0x40021000
 80011a8:	40010000 	.word	0x40010000
 80011ac:	40010800 	.word	0x40010800
 80011b0:	40010c00 	.word	0x40010c00
 80011b4:	40011000 	.word	0x40011000
 80011b8:	40011400 	.word	0x40011400
 80011bc:	40010400 	.word	0x40010400

080011c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	807b      	strh	r3, [r7, #2]
 80011cc:	4613      	mov	r3, r2
 80011ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011d0:	887b      	ldrh	r3, [r7, #2]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d004      	beq.n	80011e0 <HAL_GPIO_WritePin+0x20>
 80011d6:	887b      	ldrh	r3, [r7, #2]
 80011d8:	0c1b      	lsrs	r3, r3, #16
 80011da:	041b      	lsls	r3, r3, #16
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d004      	beq.n	80011ea <HAL_GPIO_WritePin+0x2a>
 80011e0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80011e4:	480e      	ldr	r0, [pc, #56]	; (8001220 <HAL_GPIO_WritePin+0x60>)
 80011e6:	f7ff f871 	bl	80002cc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011ea:	787b      	ldrb	r3, [r7, #1]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	d007      	beq.n	8001200 <HAL_GPIO_WritePin+0x40>
 80011f0:	787b      	ldrb	r3, [r7, #1]
 80011f2:	2b01      	cmp	r3, #1
 80011f4:	d004      	beq.n	8001200 <HAL_GPIO_WritePin+0x40>
 80011f6:	f240 11d5 	movw	r1, #469	; 0x1d5
 80011fa:	4809      	ldr	r0, [pc, #36]	; (8001220 <HAL_GPIO_WritePin+0x60>)
 80011fc:	f7ff f866 	bl	80002cc <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8001200:	787b      	ldrb	r3, [r7, #1]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d003      	beq.n	800120e <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001206:	887a      	ldrh	r2, [r7, #2]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800120c:	e003      	b.n	8001216 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800120e:	887b      	ldrh	r3, [r7, #2]
 8001210:	041a      	lsls	r2, r3, #16
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	611a      	str	r2, [r3, #16]
}
 8001216:	bf00      	nop
 8001218:	3708      	adds	r7, #8
 800121a:	46bd      	mov	sp, r7
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	08004cb0 	.word	0x08004cb0

08001224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d101      	bne.n	8001236 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	e35c      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d01c      	beq.n	8001278 <HAL_RCC_OscConfig+0x54>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f003 0301 	and.w	r3, r3, #1
 8001246:	2b00      	cmp	r3, #0
 8001248:	d116      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	f003 0302 	and.w	r3, r3, #2
 8001252:	2b00      	cmp	r3, #0
 8001254:	d110      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0308 	and.w	r3, r3, #8
 800125e:	2b00      	cmp	r3, #0
 8001260:	d10a      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f003 0304 	and.w	r3, r3, #4
 800126a:	2b00      	cmp	r3, #0
 800126c:	d104      	bne.n	8001278 <HAL_RCC_OscConfig+0x54>
 800126e:	f240 1167 	movw	r1, #359	; 0x167
 8001272:	48a5      	ldr	r0, [pc, #660]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 8001274:	f7ff f82a 	bl	80002cc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 809a 	beq.w	80013ba <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00e      	beq.n	80012ac <HAL_RCC_OscConfig+0x88>
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	685b      	ldr	r3, [r3, #4]
 8001292:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001296:	d009      	beq.n	80012ac <HAL_RCC_OscConfig+0x88>
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012a0:	d004      	beq.n	80012ac <HAL_RCC_OscConfig+0x88>
 80012a2:	f240 116d 	movw	r1, #365	; 0x16d
 80012a6:	4898      	ldr	r0, [pc, #608]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80012a8:	f7ff f810 	bl	80002cc <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80012ac:	4b97      	ldr	r3, [pc, #604]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f003 030c 	and.w	r3, r3, #12
 80012b4:	2b04      	cmp	r3, #4
 80012b6:	d00c      	beq.n	80012d2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012b8:	4b94      	ldr	r3, [pc, #592]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 030c 	and.w	r3, r3, #12
 80012c0:	2b08      	cmp	r3, #8
 80012c2:	d112      	bne.n	80012ea <HAL_RCC_OscConfig+0xc6>
 80012c4:	4b91      	ldr	r3, [pc, #580]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d0:	d10b      	bne.n	80012ea <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d2:	4b8e      	ldr	r3, [pc, #568]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d06c      	beq.n	80013b8 <HAL_RCC_OscConfig+0x194>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d168      	bne.n	80013b8 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e302      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f2:	d106      	bne.n	8001302 <HAL_RCC_OscConfig+0xde>
 80012f4:	4b85      	ldr	r3, [pc, #532]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a84      	ldr	r2, [pc, #528]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80012fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012fe:	6013      	str	r3, [r2, #0]
 8001300:	e02e      	b.n	8001360 <HAL_RCC_OscConfig+0x13c>
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d10c      	bne.n	8001324 <HAL_RCC_OscConfig+0x100>
 800130a:	4b80      	ldr	r3, [pc, #512]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a7f      	ldr	r2, [pc, #508]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001310:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b7d      	ldr	r3, [pc, #500]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a7c      	ldr	r2, [pc, #496]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800131c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	e01d      	b.n	8001360 <HAL_RCC_OscConfig+0x13c>
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x124>
 800132e:	4b77      	ldr	r3, [pc, #476]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	4a76      	ldr	r2, [pc, #472]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001334:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001338:	6013      	str	r3, [r2, #0]
 800133a:	4b74      	ldr	r3, [pc, #464]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a73      	ldr	r2, [pc, #460]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001340:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	e00b      	b.n	8001360 <HAL_RCC_OscConfig+0x13c>
 8001348:	4b70      	ldr	r3, [pc, #448]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a6f      	ldr	r2, [pc, #444]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800134e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001352:	6013      	str	r3, [r2, #0]
 8001354:	4b6d      	ldr	r3, [pc, #436]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a6c      	ldr	r2, [pc, #432]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800135a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800135e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	685b      	ldr	r3, [r3, #4]
 8001364:	2b00      	cmp	r3, #0
 8001366:	d013      	beq.n	8001390 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001368:	f7ff fb34 	bl	80009d4 <HAL_GetTick>
 800136c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800136e:	e008      	b.n	8001382 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001370:	f7ff fb30 	bl	80009d4 <HAL_GetTick>
 8001374:	4602      	mov	r2, r0
 8001376:	693b      	ldr	r3, [r7, #16]
 8001378:	1ad3      	subs	r3, r2, r3
 800137a:	2b64      	cmp	r3, #100	; 0x64
 800137c:	d901      	bls.n	8001382 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800137e:	2303      	movs	r3, #3
 8001380:	e2b6      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001382:	4b62      	ldr	r3, [pc, #392]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800138a:	2b00      	cmp	r3, #0
 800138c:	d0f0      	beq.n	8001370 <HAL_RCC_OscConfig+0x14c>
 800138e:	e014      	b.n	80013ba <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001390:	f7ff fb20 	bl	80009d4 <HAL_GetTick>
 8001394:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001396:	e008      	b.n	80013aa <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001398:	f7ff fb1c 	bl	80009d4 <HAL_GetTick>
 800139c:	4602      	mov	r2, r0
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	1ad3      	subs	r3, r2, r3
 80013a2:	2b64      	cmp	r3, #100	; 0x64
 80013a4:	d901      	bls.n	80013aa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e2a2      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013aa:	4b58      	ldr	r3, [pc, #352]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1f0      	bne.n	8001398 <HAL_RCC_OscConfig+0x174>
 80013b6:	e000      	b.n	80013ba <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d079      	beq.n	80014ba <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d008      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1bc>
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	691b      	ldr	r3, [r3, #16]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d004      	beq.n	80013e0 <HAL_RCC_OscConfig+0x1bc>
 80013d6:	f240 11a1 	movw	r1, #417	; 0x1a1
 80013da:	484b      	ldr	r0, [pc, #300]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80013dc:	f7fe ff76 	bl	80002cc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	2b1f      	cmp	r3, #31
 80013e6:	d904      	bls.n	80013f2 <HAL_RCC_OscConfig+0x1ce>
 80013e8:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80013ec:	4846      	ldr	r0, [pc, #280]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80013ee:	f7fe ff6d 	bl	80002cc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013f2:	4b46      	ldr	r3, [pc, #280]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80013f4:	685b      	ldr	r3, [r3, #4]
 80013f6:	f003 030c 	and.w	r3, r3, #12
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d00b      	beq.n	8001416 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d11c      	bne.n	8001444 <HAL_RCC_OscConfig+0x220>
 800140a:	4b40      	ldr	r3, [pc, #256]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d116      	bne.n	8001444 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001416:	4b3d      	ldr	r3, [pc, #244]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d005      	beq.n	800142e <HAL_RCC_OscConfig+0x20a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	2b01      	cmp	r3, #1
 8001428:	d001      	beq.n	800142e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800142a:	2301      	movs	r3, #1
 800142c:	e260      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800142e:	4b37      	ldr	r3, [pc, #220]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	695b      	ldr	r3, [r3, #20]
 800143a:	00db      	lsls	r3, r3, #3
 800143c:	4933      	ldr	r1, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800143e:	4313      	orrs	r3, r2
 8001440:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001442:	e03a      	b.n	80014ba <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	691b      	ldr	r3, [r3, #16]
 8001448:	2b00      	cmp	r3, #0
 800144a:	d020      	beq.n	800148e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800144c:	4b30      	ldr	r3, [pc, #192]	; (8001510 <HAL_RCC_OscConfig+0x2ec>)
 800144e:	2201      	movs	r2, #1
 8001450:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001452:	f7ff fabf 	bl	80009d4 <HAL_GetTick>
 8001456:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001458:	e008      	b.n	800146c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800145a:	f7ff fabb 	bl	80009d4 <HAL_GetTick>
 800145e:	4602      	mov	r2, r0
 8001460:	693b      	ldr	r3, [r7, #16]
 8001462:	1ad3      	subs	r3, r2, r3
 8001464:	2b02      	cmp	r3, #2
 8001466:	d901      	bls.n	800146c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001468:	2303      	movs	r3, #3
 800146a:	e241      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800146c:	4b27      	ldr	r3, [pc, #156]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f003 0302 	and.w	r3, r3, #2
 8001474:	2b00      	cmp	r3, #0
 8001476:	d0f0      	beq.n	800145a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001478:	4b24      	ldr	r3, [pc, #144]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	00db      	lsls	r3, r3, #3
 8001486:	4921      	ldr	r1, [pc, #132]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 8001488:	4313      	orrs	r3, r2
 800148a:	600b      	str	r3, [r1, #0]
 800148c:	e015      	b.n	80014ba <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800148e:	4b20      	ldr	r3, [pc, #128]	; (8001510 <HAL_RCC_OscConfig+0x2ec>)
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001494:	f7ff fa9e 	bl	80009d4 <HAL_GetTick>
 8001498:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800149a:	e008      	b.n	80014ae <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800149c:	f7ff fa9a 	bl	80009d4 <HAL_GetTick>
 80014a0:	4602      	mov	r2, r0
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	2b02      	cmp	r3, #2
 80014a8:	d901      	bls.n	80014ae <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e220      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ae:	4b17      	ldr	r3, [pc, #92]	; (800150c <HAL_RCC_OscConfig+0x2e8>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d1f0      	bne.n	800149c <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f003 0308 	and.w	r3, r3, #8
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d048      	beq.n	8001558 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	699b      	ldr	r3, [r3, #24]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d008      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2bc>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	2b01      	cmp	r3, #1
 80014d4:	d004      	beq.n	80014e0 <HAL_RCC_OscConfig+0x2bc>
 80014d6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80014da:	480b      	ldr	r0, [pc, #44]	; (8001508 <HAL_RCC_OscConfig+0x2e4>)
 80014dc:	f7fe fef6 	bl	80002cc <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	699b      	ldr	r3, [r3, #24]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d021      	beq.n	800152c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014e8:	4b0a      	ldr	r3, [pc, #40]	; (8001514 <HAL_RCC_OscConfig+0x2f0>)
 80014ea:	2201      	movs	r2, #1
 80014ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ee:	f7ff fa71 	bl	80009d4 <HAL_GetTick>
 80014f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f4:	e010      	b.n	8001518 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014f6:	f7ff fa6d 	bl	80009d4 <HAL_GetTick>
 80014fa:	4602      	mov	r2, r0
 80014fc:	693b      	ldr	r3, [r7, #16]
 80014fe:	1ad3      	subs	r3, r2, r3
 8001500:	2b02      	cmp	r3, #2
 8001502:	d909      	bls.n	8001518 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8001504:	2303      	movs	r3, #3
 8001506:	e1f3      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
 8001508:	08004cec 	.word	0x08004cec
 800150c:	40021000 	.word	0x40021000
 8001510:	42420000 	.word	0x42420000
 8001514:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001518:	4b67      	ldr	r3, [pc, #412]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800151a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0e8      	beq.n	80014f6 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001524:	2001      	movs	r0, #1
 8001526:	f000 fc11 	bl	8001d4c <RCC_Delay>
 800152a:	e015      	b.n	8001558 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800152c:	4b63      	ldr	r3, [pc, #396]	; (80016bc <HAL_RCC_OscConfig+0x498>)
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001532:	f7ff fa4f 	bl	80009d4 <HAL_GetTick>
 8001536:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001538:	e008      	b.n	800154c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800153a:	f7ff fa4b 	bl	80009d4 <HAL_GetTick>
 800153e:	4602      	mov	r2, r0
 8001540:	693b      	ldr	r3, [r7, #16]
 8001542:	1ad3      	subs	r3, r2, r3
 8001544:	2b02      	cmp	r3, #2
 8001546:	d901      	bls.n	800154c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001548:	2303      	movs	r3, #3
 800154a:	e1d1      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154c:	4b5a      	ldr	r3, [pc, #360]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800154e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d1f0      	bne.n	800153a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f003 0304 	and.w	r3, r3, #4
 8001560:	2b00      	cmp	r3, #0
 8001562:	f000 80c0 	beq.w	80016e6 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001566:	2300      	movs	r3, #0
 8001568:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	68db      	ldr	r3, [r3, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d00c      	beq.n	800158c <HAL_RCC_OscConfig+0x368>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b01      	cmp	r3, #1
 8001578:	d008      	beq.n	800158c <HAL_RCC_OscConfig+0x368>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	68db      	ldr	r3, [r3, #12]
 800157e:	2b05      	cmp	r3, #5
 8001580:	d004      	beq.n	800158c <HAL_RCC_OscConfig+0x368>
 8001582:	f240 2111 	movw	r1, #529	; 0x211
 8001586:	484e      	ldr	r0, [pc, #312]	; (80016c0 <HAL_RCC_OscConfig+0x49c>)
 8001588:	f7fe fea0 	bl	80002cc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158c:	4b4a      	ldr	r3, [pc, #296]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800158e:	69db      	ldr	r3, [r3, #28]
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	2b00      	cmp	r3, #0
 8001596:	d10d      	bne.n	80015b4 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001598:	4b47      	ldr	r3, [pc, #284]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800159a:	69db      	ldr	r3, [r3, #28]
 800159c:	4a46      	ldr	r2, [pc, #280]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800159e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a2:	61d3      	str	r3, [r2, #28]
 80015a4:	4b44      	ldr	r3, [pc, #272]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015b0:	2301      	movs	r3, #1
 80015b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	4b43      	ldr	r3, [pc, #268]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d118      	bne.n	80015f2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015c0:	4b40      	ldr	r3, [pc, #256]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a3f      	ldr	r2, [pc, #252]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015cc:	f7ff fa02 	bl	80009d4 <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d4:	f7ff f9fe 	bl	80009d4 <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b64      	cmp	r3, #100	; 0x64
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e184      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e6:	4b37      	ldr	r3, [pc, #220]	; (80016c4 <HAL_RCC_OscConfig+0x4a0>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d0f0      	beq.n	80015d4 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	68db      	ldr	r3, [r3, #12]
 80015f6:	2b01      	cmp	r3, #1
 80015f8:	d106      	bne.n	8001608 <HAL_RCC_OscConfig+0x3e4>
 80015fa:	4b2f      	ldr	r3, [pc, #188]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	4a2e      	ldr	r2, [pc, #184]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6213      	str	r3, [r2, #32]
 8001606:	e02d      	b.n	8001664 <HAL_RCC_OscConfig+0x440>
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	68db      	ldr	r3, [r3, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x406>
 8001610:	4b29      	ldr	r3, [pc, #164]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a28      	ldr	r2, [pc, #160]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001616:	f023 0301 	bic.w	r3, r3, #1
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	4b26      	ldr	r3, [pc, #152]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a25      	ldr	r2, [pc, #148]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001622:	f023 0304 	bic.w	r3, r3, #4
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e01c      	b.n	8001664 <HAL_RCC_OscConfig+0x440>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	68db      	ldr	r3, [r3, #12]
 800162e:	2b05      	cmp	r3, #5
 8001630:	d10c      	bne.n	800164c <HAL_RCC_OscConfig+0x428>
 8001632:	4b21      	ldr	r3, [pc, #132]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001634:	6a1b      	ldr	r3, [r3, #32]
 8001636:	4a20      	ldr	r2, [pc, #128]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001638:	f043 0304 	orr.w	r3, r3, #4
 800163c:	6213      	str	r3, [r2, #32]
 800163e:	4b1e      	ldr	r3, [pc, #120]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001640:	6a1b      	ldr	r3, [r3, #32]
 8001642:	4a1d      	ldr	r2, [pc, #116]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001644:	f043 0301 	orr.w	r3, r3, #1
 8001648:	6213      	str	r3, [r2, #32]
 800164a:	e00b      	b.n	8001664 <HAL_RCC_OscConfig+0x440>
 800164c:	4b1a      	ldr	r3, [pc, #104]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	4a19      	ldr	r2, [pc, #100]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 8001652:	f023 0301 	bic.w	r3, r3, #1
 8001656:	6213      	str	r3, [r2, #32]
 8001658:	4b17      	ldr	r3, [pc, #92]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	4a16      	ldr	r2, [pc, #88]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800165e:	f023 0304 	bic.w	r3, r3, #4
 8001662:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d015      	beq.n	8001698 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166c:	f7ff f9b2 	bl	80009d4 <HAL_GetTick>
 8001670:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001672:	e00a      	b.n	800168a <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001674:	f7ff f9ae 	bl	80009d4 <HAL_GetTick>
 8001678:	4602      	mov	r2, r0
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001682:	4293      	cmp	r3, r2
 8001684:	d901      	bls.n	800168a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001686:	2303      	movs	r3, #3
 8001688:	e132      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	4b0b      	ldr	r3, [pc, #44]	; (80016b8 <HAL_RCC_OscConfig+0x494>)
 800168c:	6a1b      	ldr	r3, [r3, #32]
 800168e:	f003 0302 	and.w	r3, r3, #2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d0ee      	beq.n	8001674 <HAL_RCC_OscConfig+0x450>
 8001696:	e01d      	b.n	80016d4 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001698:	f7ff f99c 	bl	80009d4 <HAL_GetTick>
 800169c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169e:	e013      	b.n	80016c8 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016a0:	f7ff f998 	bl	80009d4 <HAL_GetTick>
 80016a4:	4602      	mov	r2, r0
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	1ad3      	subs	r3, r2, r3
 80016aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ae:	4293      	cmp	r3, r2
 80016b0:	d90a      	bls.n	80016c8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80016b2:	2303      	movs	r3, #3
 80016b4:	e11c      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
 80016b6:	bf00      	nop
 80016b8:	40021000 	.word	0x40021000
 80016bc:	42420480 	.word	0x42420480
 80016c0:	08004cec 	.word	0x08004cec
 80016c4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016c8:	4b8b      	ldr	r3, [pc, #556]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80016ca:	6a1b      	ldr	r3, [r3, #32]
 80016cc:	f003 0302 	and.w	r3, r3, #2
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d1e5      	bne.n	80016a0 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016d4:	7dfb      	ldrb	r3, [r7, #23]
 80016d6:	2b01      	cmp	r3, #1
 80016d8:	d105      	bne.n	80016e6 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016da:	4b87      	ldr	r3, [pc, #540]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80016dc:	69db      	ldr	r3, [r3, #28]
 80016de:	4a86      	ldr	r2, [pc, #536]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80016e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016e4:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	69db      	ldr	r3, [r3, #28]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d00c      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e4>
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	69db      	ldr	r3, [r3, #28]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d008      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e4>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69db      	ldr	r3, [r3, #28]
 80016fa:	2b02      	cmp	r3, #2
 80016fc:	d004      	beq.n	8001708 <HAL_RCC_OscConfig+0x4e4>
 80016fe:	f240 21af 	movw	r1, #687	; 0x2af
 8001702:	487e      	ldr	r0, [pc, #504]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 8001704:	f7fe fde2 	bl	80002cc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	69db      	ldr	r3, [r3, #28]
 800170c:	2b00      	cmp	r3, #0
 800170e:	f000 80ee 	beq.w	80018ee <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001712:	4b79      	ldr	r3, [pc, #484]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	f003 030c 	and.w	r3, r3, #12
 800171a:	2b08      	cmp	r3, #8
 800171c:	f000 80ce 	beq.w	80018bc <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	69db      	ldr	r3, [r3, #28]
 8001724:	2b02      	cmp	r3, #2
 8001726:	f040 80b2 	bne.w	800188e <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d009      	beq.n	8001746 <HAL_RCC_OscConfig+0x522>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6a1b      	ldr	r3, [r3, #32]
 8001736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800173a:	d004      	beq.n	8001746 <HAL_RCC_OscConfig+0x522>
 800173c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001740:	486e      	ldr	r0, [pc, #440]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 8001742:	f7fe fdc3 	bl	80002cc <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800174a:	2b00      	cmp	r3, #0
 800174c:	d04a      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001752:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001756:	d045      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001760:	d040      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001766:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800176a:	d03b      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001770:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001774:	d036      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800177a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800177e:	d031      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001784:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001788:	d02c      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001792:	d027      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001798:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800179c:	d022      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a2:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80017a6:	d01d      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ac:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80017b0:	d018      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80017ba:	d013      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80017c4:	d00e      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ca:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80017ce:	d009      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80017d8:	d004      	beq.n	80017e4 <HAL_RCC_OscConfig+0x5c0>
 80017da:	f240 21b9 	movw	r1, #697	; 0x2b9
 80017de:	4847      	ldr	r0, [pc, #284]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 80017e0:	f7fe fd74 	bl	80002cc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017e4:	4b46      	ldr	r3, [pc, #280]	; (8001900 <HAL_RCC_OscConfig+0x6dc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ea:	f7ff f8f3 	bl	80009d4 <HAL_GetTick>
 80017ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017f0:	e008      	b.n	8001804 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017f2:	f7ff f8ef 	bl	80009d4 <HAL_GetTick>
 80017f6:	4602      	mov	r2, r0
 80017f8:	693b      	ldr	r3, [r7, #16]
 80017fa:	1ad3      	subs	r3, r2, r3
 80017fc:	2b02      	cmp	r3, #2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e075      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001804:	4b3c      	ldr	r3, [pc, #240]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d1f0      	bne.n	80017f2 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6a1b      	ldr	r3, [r3, #32]
 8001814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001818:	d116      	bne.n	8001848 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	689b      	ldr	r3, [r3, #8]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d009      	beq.n	8001836 <HAL_RCC_OscConfig+0x612>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800182a:	d004      	beq.n	8001836 <HAL_RCC_OscConfig+0x612>
 800182c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001830:	4832      	ldr	r0, [pc, #200]	; (80018fc <HAL_RCC_OscConfig+0x6d8>)
 8001832:	f7fe fd4b 	bl	80002cc <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001836:	4b30      	ldr	r3, [pc, #192]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	689b      	ldr	r3, [r3, #8]
 8001842:	492d      	ldr	r1, [pc, #180]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001844:	4313      	orrs	r3, r2
 8001846:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001848:	4b2b      	ldr	r3, [pc, #172]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6a19      	ldr	r1, [r3, #32]
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	430b      	orrs	r3, r1
 800185a:	4927      	ldr	r1, [pc, #156]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 800185c:	4313      	orrs	r3, r2
 800185e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001860:	4b27      	ldr	r3, [pc, #156]	; (8001900 <HAL_RCC_OscConfig+0x6dc>)
 8001862:	2201      	movs	r2, #1
 8001864:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001866:	f7ff f8b5 	bl	80009d4 <HAL_GetTick>
 800186a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800186c:	e008      	b.n	8001880 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800186e:	f7ff f8b1 	bl	80009d4 <HAL_GetTick>
 8001872:	4602      	mov	r2, r0
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	1ad3      	subs	r3, r2, r3
 8001878:	2b02      	cmp	r3, #2
 800187a:	d901      	bls.n	8001880 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800187c:	2303      	movs	r3, #3
 800187e:	e037      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001888:	2b00      	cmp	r3, #0
 800188a:	d0f0      	beq.n	800186e <HAL_RCC_OscConfig+0x64a>
 800188c:	e02f      	b.n	80018ee <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800188e:	4b1c      	ldr	r3, [pc, #112]	; (8001900 <HAL_RCC_OscConfig+0x6dc>)
 8001890:	2200      	movs	r2, #0
 8001892:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001894:	f7ff f89e 	bl	80009d4 <HAL_GetTick>
 8001898:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800189a:	e008      	b.n	80018ae <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800189c:	f7ff f89a 	bl	80009d4 <HAL_GetTick>
 80018a0:	4602      	mov	r2, r0
 80018a2:	693b      	ldr	r3, [r7, #16]
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	2b02      	cmp	r3, #2
 80018a8:	d901      	bls.n	80018ae <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80018aa:	2303      	movs	r3, #3
 80018ac:	e020      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ae:	4b12      	ldr	r3, [pc, #72]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1f0      	bne.n	800189c <HAL_RCC_OscConfig+0x678>
 80018ba:	e018      	b.n	80018ee <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	69db      	ldr	r3, [r3, #28]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	d101      	bne.n	80018c8 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e013      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <HAL_RCC_OscConfig+0x6d4>)
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6a1b      	ldr	r3, [r3, #32]
 80018d8:	429a      	cmp	r2, r3
 80018da:	d106      	bne.n	80018ea <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d001      	beq.n	80018ee <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80018ea:	2301      	movs	r3, #1
 80018ec:	e000      	b.n	80018f0 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80018ee:	2300      	movs	r3, #0
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	40021000 	.word	0x40021000
 80018fc:	08004cec 	.word	0x08004cec
 8001900:	42420060 	.word	0x42420060

08001904 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d101      	bne.n	8001918 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e176      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0301 	and.w	r3, r3, #1
 8001920:	2b00      	cmp	r3, #0
 8001922:	d116      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 0302 	and.w	r3, r3, #2
 800192c:	2b00      	cmp	r3, #0
 800192e:	d110      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0304 	and.w	r3, r3, #4
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10a      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f003 0308 	and.w	r3, r3, #8
 8001944:	2b00      	cmp	r3, #0
 8001946:	d104      	bne.n	8001952 <HAL_RCC_ClockConfig+0x4e>
 8001948:	f44f 714e 	mov.w	r1, #824	; 0x338
 800194c:	4874      	ldr	r0, [pc, #464]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 800194e:	f7fe fcbd 	bl	80002cc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	2b00      	cmp	r3, #0
 8001956:	d00a      	beq.n	800196e <HAL_RCC_ClockConfig+0x6a>
 8001958:	683b      	ldr	r3, [r7, #0]
 800195a:	2b01      	cmp	r3, #1
 800195c:	d007      	beq.n	800196e <HAL_RCC_ClockConfig+0x6a>
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	2b02      	cmp	r3, #2
 8001962:	d004      	beq.n	800196e <HAL_RCC_ClockConfig+0x6a>
 8001964:	f240 3139 	movw	r1, #825	; 0x339
 8001968:	486d      	ldr	r0, [pc, #436]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 800196a:	f7fe fcaf 	bl	80002cc <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800196e:	4b6d      	ldr	r3, [pc, #436]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 0307 	and.w	r3, r3, #7
 8001976:	683a      	ldr	r2, [r7, #0]
 8001978:	429a      	cmp	r2, r3
 800197a:	d910      	bls.n	800199e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800197c:	4b69      	ldr	r3, [pc, #420]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f023 0207 	bic.w	r2, r3, #7
 8001984:	4967      	ldr	r1, [pc, #412]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001986:	683b      	ldr	r3, [r7, #0]
 8001988:	4313      	orrs	r3, r2
 800198a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800198c:	4b65      	ldr	r3, [pc, #404]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f003 0307 	and.w	r3, r3, #7
 8001994:	683a      	ldr	r2, [r7, #0]
 8001996:	429a      	cmp	r2, r3
 8001998:	d001      	beq.n	800199e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800199a:	2301      	movs	r3, #1
 800199c:	e133      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f003 0302 	and.w	r3, r3, #2
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d049      	beq.n	8001a3e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d005      	beq.n	80019c2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019b6:	4b5c      	ldr	r3, [pc, #368]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a5b      	ldr	r2, [pc, #364]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019bc:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019c0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f003 0308 	and.w	r3, r3, #8
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d005      	beq.n	80019da <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ce:	4b56      	ldr	r3, [pc, #344]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	4a55      	ldr	r2, [pc, #340]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 80019d4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019d8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d024      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b80      	cmp	r3, #128	; 0x80
 80019e8:	d020      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2b90      	cmp	r3, #144	; 0x90
 80019f0:	d01c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2ba0      	cmp	r3, #160	; 0xa0
 80019f8:	d018      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2bb0      	cmp	r3, #176	; 0xb0
 8001a00:	d014      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	689b      	ldr	r3, [r3, #8]
 8001a06:	2bc0      	cmp	r3, #192	; 0xc0
 8001a08:	d010      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	689b      	ldr	r3, [r3, #8]
 8001a0e:	2bd0      	cmp	r3, #208	; 0xd0
 8001a10:	d00c      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	2be0      	cmp	r3, #224	; 0xe0
 8001a18:	d008      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2bf0      	cmp	r3, #240	; 0xf0
 8001a20:	d004      	beq.n	8001a2c <HAL_RCC_ClockConfig+0x128>
 8001a22:	f240 315f 	movw	r1, #863	; 0x35f
 8001a26:	483e      	ldr	r0, [pc, #248]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 8001a28:	f7fe fc50 	bl	80002cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a2c:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	493b      	ldr	r1, [pc, #236]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0301 	and.w	r3, r3, #1
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d051      	beq.n	8001aee <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	685b      	ldr	r3, [r3, #4]
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d00c      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x168>
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	2b01      	cmp	r3, #1
 8001a58:	d008      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x168>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	2b02      	cmp	r3, #2
 8001a60:	d004      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x168>
 8001a62:	f240 3166 	movw	r1, #870	; 0x366
 8001a66:	482e      	ldr	r0, [pc, #184]	; (8001b20 <HAL_RCC_ClockConfig+0x21c>)
 8001a68:	f7fe fc30 	bl	80002cc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	2b01      	cmp	r3, #1
 8001a72:	d107      	bne.n	8001a84 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a74:	4b2c      	ldr	r3, [pc, #176]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d115      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	e0c0      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b02      	cmp	r3, #2
 8001a8a:	d107      	bne.n	8001a9c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a8c:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d109      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e0b4      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a9c:	4b22      	ldr	r3, [pc, #136]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f003 0302 	and.w	r3, r3, #2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d101      	bne.n	8001aac <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	e0ac      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001aac:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f023 0203 	bic.w	r2, r3, #3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	491b      	ldr	r1, [pc, #108]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001abe:	f7fe ff89 	bl	80009d4 <HAL_GetTick>
 8001ac2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ac4:	e00a      	b.n	8001adc <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ac6:	f7fe ff85 	bl	80009d4 <HAL_GetTick>
 8001aca:	4602      	mov	r2, r0
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	1ad3      	subs	r3, r2, r3
 8001ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ad4:	4293      	cmp	r3, r2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e094      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001adc:	4b12      	ldr	r3, [pc, #72]	; (8001b28 <HAL_RCC_ClockConfig+0x224>)
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 020c 	and.w	r2, r3, #12
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	429a      	cmp	r2, r3
 8001aec:	d1eb      	bne.n	8001ac6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001aee:	4b0d      	ldr	r3, [pc, #52]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d217      	bcs.n	8001b2c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afc:	4b09      	ldr	r3, [pc, #36]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f023 0207 	bic.w	r2, r3, #7
 8001b04:	4907      	ldr	r1, [pc, #28]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	4313      	orrs	r3, r2
 8001b0a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0c:	4b05      	ldr	r3, [pc, #20]	; (8001b24 <HAL_RCC_ClockConfig+0x220>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	683a      	ldr	r2, [r7, #0]
 8001b16:	429a      	cmp	r2, r3
 8001b18:	d008      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e073      	b.n	8001c06 <HAL_RCC_ClockConfig+0x302>
 8001b1e:	bf00      	nop
 8001b20:	08004cec 	.word	0x08004cec
 8001b24:	40022000 	.word	0x40022000
 8001b28:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0304 	and.w	r3, r3, #4
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d025      	beq.n	8001b84 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d018      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	68db      	ldr	r3, [r3, #12]
 8001b44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b48:	d013      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	68db      	ldr	r3, [r3, #12]
 8001b4e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b52:	d00e      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b5c:	d009      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	68db      	ldr	r3, [r3, #12]
 8001b62:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b66:	d004      	beq.n	8001b72 <HAL_RCC_ClockConfig+0x26e>
 8001b68:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001b6c:	4828      	ldr	r0, [pc, #160]	; (8001c10 <HAL_RCC_ClockConfig+0x30c>)
 8001b6e:	f7fe fbad 	bl	80002cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b72:	4b28      	ldr	r3, [pc, #160]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	4925      	ldr	r1, [pc, #148]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001b80:	4313      	orrs	r3, r2
 8001b82:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0308 	and.w	r3, r3, #8
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d026      	beq.n	8001bde <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	691b      	ldr	r3, [r3, #16]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d018      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	691b      	ldr	r3, [r3, #16]
 8001b9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001ba0:	d013      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	691b      	ldr	r3, [r3, #16]
 8001ba6:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001baa:	d00e      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	691b      	ldr	r3, [r3, #16]
 8001bb0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001bb4:	d009      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	691b      	ldr	r3, [r3, #16]
 8001bba:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001bbe:	d004      	beq.n	8001bca <HAL_RCC_ClockConfig+0x2c6>
 8001bc0:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001bc4:	4812      	ldr	r0, [pc, #72]	; (8001c10 <HAL_RCC_ClockConfig+0x30c>)
 8001bc6:	f7fe fb81 	bl	80002cc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	00db      	lsls	r3, r3, #3
 8001bd8:	490e      	ldr	r1, [pc, #56]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bde:	f000 f821 	bl	8001c24 <HAL_RCC_GetSysClockFreq>
 8001be2:	4601      	mov	r1, r0
 8001be4:	4b0b      	ldr	r3, [pc, #44]	; (8001c14 <HAL_RCC_ClockConfig+0x310>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4a0a      	ldr	r2, [pc, #40]	; (8001c18 <HAL_RCC_ClockConfig+0x314>)
 8001bf0:	5cd3      	ldrb	r3, [r2, r3]
 8001bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bf6:	4a09      	ldr	r2, [pc, #36]	; (8001c1c <HAL_RCC_ClockConfig+0x318>)
 8001bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bfa:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <HAL_RCC_ClockConfig+0x31c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4618      	mov	r0, r3
 8001c00:	f7fe feb8 	bl	8000974 <HAL_InitTick>

  return HAL_OK;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	3710      	adds	r7, #16
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bd80      	pop	{r7, pc}
 8001c0e:	bf00      	nop
 8001c10:	08004cec 	.word	0x08004cec
 8001c14:	40021000 	.word	0x40021000
 8001c18:	08004e00 	.word	0x08004e00
 8001c1c:	20000000 	.word	0x20000000
 8001c20:	20000004 	.word	0x20000004

08001c24 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c24:	b490      	push	{r4, r7}
 8001c26:	b08a      	sub	sp, #40	; 0x28
 8001c28:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c2a:	4b2a      	ldr	r3, [pc, #168]	; (8001cd4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c2c:	1d3c      	adds	r4, r7, #4
 8001c2e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c30:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c34:	4b28      	ldr	r3, [pc, #160]	; (8001cd8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c36:	881b      	ldrh	r3, [r3, #0]
 8001c38:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	61fb      	str	r3, [r7, #28]
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
 8001c42:	2300      	movs	r3, #0
 8001c44:	627b      	str	r3, [r7, #36]	; 0x24
 8001c46:	2300      	movs	r3, #0
 8001c48:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c4e:	4b23      	ldr	r3, [pc, #140]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 030c 	and.w	r3, r3, #12
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d002      	beq.n	8001c64 <HAL_RCC_GetSysClockFreq+0x40>
 8001c5e:	2b08      	cmp	r3, #8
 8001c60:	d003      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x46>
 8001c62:	e02d      	b.n	8001cc0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c64:	4b1e      	ldr	r3, [pc, #120]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c66:	623b      	str	r3, [r7, #32]
      break;
 8001c68:	e02d      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	0c9b      	lsrs	r3, r3, #18
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c7c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c7e:	69fb      	ldr	r3, [r7, #28]
 8001c80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d013      	beq.n	8001cb0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c88:	4b14      	ldr	r3, [pc, #80]	; (8001cdc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	0c5b      	lsrs	r3, r3, #17
 8001c8e:	f003 0301 	and.w	r3, r3, #1
 8001c92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c96:	4413      	add	r3, r2
 8001c98:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c9c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4a0f      	ldr	r2, [pc, #60]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca2:	fb02 f203 	mul.w	r2, r2, r3
 8001ca6:	69bb      	ldr	r3, [r7, #24]
 8001ca8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cac:	627b      	str	r3, [r7, #36]	; 0x24
 8001cae:	e004      	b.n	8001cba <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	4a0c      	ldr	r2, [pc, #48]	; (8001ce4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001cb4:	fb02 f303 	mul.w	r3, r2, r3
 8001cb8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cbc:	623b      	str	r3, [r7, #32]
      break;
 8001cbe:	e002      	b.n	8001cc6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001cc0:	4b07      	ldr	r3, [pc, #28]	; (8001ce0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001cc2:	623b      	str	r3, [r7, #32]
      break;
 8001cc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001cc6:	6a3b      	ldr	r3, [r7, #32]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc90      	pop	{r4, r7}
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	08004d24 	.word	0x08004d24
 8001cd8:	08004d34 	.word	0x08004d34
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	007a1200 	.word	0x007a1200
 8001ce4:	003d0900 	.word	0x003d0900

08001ce8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cec:	4b02      	ldr	r3, [pc, #8]	; (8001cf8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cee:	681b      	ldr	r3, [r3, #0]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bc80      	pop	{r7}
 8001cf6:	4770      	bx	lr
 8001cf8:	20000000 	.word	0x20000000

08001cfc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d00:	f7ff fff2 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d04:	4601      	mov	r1, r0
 8001d06:	4b05      	ldr	r3, [pc, #20]	; (8001d1c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 0307 	and.w	r3, r3, #7
 8001d10:	4a03      	ldr	r2, [pc, #12]	; (8001d20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d12:	5cd3      	ldrb	r3, [r2, r3]
 8001d14:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	40021000 	.word	0x40021000
 8001d20:	08004e10 	.word	0x08004e10

08001d24 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d28:	f7ff ffde 	bl	8001ce8 <HAL_RCC_GetHCLKFreq>
 8001d2c:	4601      	mov	r1, r0
 8001d2e:	4b05      	ldr	r3, [pc, #20]	; (8001d44 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d30:	685b      	ldr	r3, [r3, #4]
 8001d32:	0adb      	lsrs	r3, r3, #11
 8001d34:	f003 0307 	and.w	r3, r3, #7
 8001d38:	4a03      	ldr	r2, [pc, #12]	; (8001d48 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d3a:	5cd3      	ldrb	r3, [r2, r3]
 8001d3c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	bd80      	pop	{r7, pc}
 8001d44:	40021000 	.word	0x40021000
 8001d48:	08004e10 	.word	0x08004e10

08001d4c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b085      	sub	sp, #20
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d54:	4b0a      	ldr	r3, [pc, #40]	; (8001d80 <RCC_Delay+0x34>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0a      	ldr	r2, [pc, #40]	; (8001d84 <RCC_Delay+0x38>)
 8001d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d5e:	0a5b      	lsrs	r3, r3, #9
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d68:	bf00      	nop
  }
  while (Delay --);
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	1e5a      	subs	r2, r3, #1
 8001d6e:	60fa      	str	r2, [r7, #12]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d1f9      	bne.n	8001d68 <RCC_Delay+0x1c>
}
 8001d74:	bf00      	nop
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bc80      	pop	{r7}
 8001d7c:	4770      	bx	lr
 8001d7e:	bf00      	nop
 8001d80:	20000000 	.word	0x20000000
 8001d84:	10624dd3 	.word	0x10624dd3

08001d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b082      	sub	sp, #8
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d101      	bne.n	8001d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06f      	b.n	8001e7a <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a39      	ldr	r2, [pc, #228]	; (8001e84 <HAL_TIM_Base_Init+0xfc>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d013      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dac:	d00e      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a35      	ldr	r2, [pc, #212]	; (8001e88 <HAL_TIM_Base_Init+0x100>)
 8001db4:	4293      	cmp	r3, r2
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a33      	ldr	r2, [pc, #204]	; (8001e8c <HAL_TIM_Base_Init+0x104>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_Base_Init+0x44>
 8001dc2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8001dc6:	4832      	ldr	r0, [pc, #200]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001dc8:	f7fe fa80 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d014      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	2b10      	cmp	r3, #16
 8001dda:	d010      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2b20      	cmp	r3, #32
 8001de2:	d00c      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	2b40      	cmp	r3, #64	; 0x40
 8001dea:	d008      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	2b60      	cmp	r3, #96	; 0x60
 8001df2:	d004      	beq.n	8001dfe <HAL_TIM_Base_Init+0x76>
 8001df4:	f240 1113 	movw	r1, #275	; 0x113
 8001df8:	4825      	ldr	r0, [pc, #148]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001dfa:	f7fe fa67 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d00e      	beq.n	8001e24 <HAL_TIM_Base_Init+0x9c>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	691b      	ldr	r3, [r3, #16]
 8001e0a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e0e:	d009      	beq.n	8001e24 <HAL_TIM_Base_Init+0x9c>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	691b      	ldr	r3, [r3, #16]
 8001e14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e18:	d004      	beq.n	8001e24 <HAL_TIM_Base_Init+0x9c>
 8001e1a:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001e1e:	481c      	ldr	r0, [pc, #112]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001e20:	f7fe fa54 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	699b      	ldr	r3, [r3, #24]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d008      	beq.n	8001e3e <HAL_TIM_Base_Init+0xb6>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	2b80      	cmp	r3, #128	; 0x80
 8001e32:	d004      	beq.n	8001e3e <HAL_TIM_Base_Init+0xb6>
 8001e34:	f240 1115 	movw	r1, #277	; 0x115
 8001e38:	4815      	ldr	r0, [pc, #84]	; (8001e90 <HAL_TIM_Base_Init+0x108>)
 8001e3a:	f7fe fa47 	bl	80002cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e44:	b2db      	uxtb	r3, r3
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d106      	bne.n	8001e58 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e52:	6878      	ldr	r0, [r7, #4]
 8001e54:	f7fe fc6a 	bl	800072c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681a      	ldr	r2, [r3, #0]
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	3304      	adds	r3, #4
 8001e68:	4619      	mov	r1, r3
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	f000 fd3c 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40012c00 	.word	0x40012c00
 8001e88:	40000400 	.word	0x40000400
 8001e8c:	40000800 	.word	0x40000800
 8001e90:	08004d38 	.word	0x08004d38

08001e94 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b084      	sub	sp, #16
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	4a1a      	ldr	r2, [pc, #104]	; (8001f0c <HAL_TIM_Base_Start+0x78>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d013      	beq.n	8001ece <HAL_TIM_Base_Start+0x3a>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001eae:	d00e      	beq.n	8001ece <HAL_TIM_Base_Start+0x3a>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	4a16      	ldr	r2, [pc, #88]	; (8001f10 <HAL_TIM_Base_Start+0x7c>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d009      	beq.n	8001ece <HAL_TIM_Base_Start+0x3a>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a15      	ldr	r2, [pc, #84]	; (8001f14 <HAL_TIM_Base_Start+0x80>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d004      	beq.n	8001ece <HAL_TIM_Base_Start+0x3a>
 8001ec4:	f240 1185 	movw	r1, #389	; 0x185
 8001ec8:	4813      	ldr	r0, [pc, #76]	; (8001f18 <HAL_TIM_Base_Start+0x84>)
 8001eca:	f7fe f9ff 	bl	80002cc <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	2202      	movs	r2, #2
 8001ed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	2b06      	cmp	r3, #6
 8001ee6:	d007      	beq.n	8001ef8 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	681a      	ldr	r2, [r3, #0]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f042 0201 	orr.w	r2, r2, #1
 8001ef6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2201      	movs	r2, #1
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001f00:	2300      	movs	r3, #0
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	3710      	adds	r7, #16
 8001f06:	46bd      	mov	sp, r7
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40012c00 	.word	0x40012c00
 8001f10:	40000400 	.word	0x40000400
 8001f14:	40000800 	.word	0x40000800
 8001f18:	08004d38 	.word	0x08004d38

08001f1c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d101      	bne.n	8001f2e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e06f      	b.n	800200e <HAL_TIM_IC_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a39      	ldr	r2, [pc, #228]	; (8002018 <HAL_TIM_IC_Init+0xfc>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_TIM_IC_Init+0x44>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f40:	d00e      	beq.n	8001f60 <HAL_TIM_IC_Init+0x44>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a35      	ldr	r2, [pc, #212]	; (800201c <HAL_TIM_IC_Init+0x100>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_TIM_IC_Init+0x44>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a33      	ldr	r2, [pc, #204]	; (8002020 <HAL_TIM_IC_Init+0x104>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_TIM_IC_Init+0x44>
 8001f56:	f240 61d9 	movw	r1, #1753	; 0x6d9
 8001f5a:	4832      	ldr	r0, [pc, #200]	; (8002024 <HAL_TIM_IC_Init+0x108>)
 8001f5c:	f7fe f9b6 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d014      	beq.n	8001f92 <HAL_TIM_IC_Init+0x76>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	2b10      	cmp	r3, #16
 8001f6e:	d010      	beq.n	8001f92 <HAL_TIM_IC_Init+0x76>
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b20      	cmp	r3, #32
 8001f76:	d00c      	beq.n	8001f92 <HAL_TIM_IC_Init+0x76>
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	2b40      	cmp	r3, #64	; 0x40
 8001f7e:	d008      	beq.n	8001f92 <HAL_TIM_IC_Init+0x76>
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2b60      	cmp	r3, #96	; 0x60
 8001f86:	d004      	beq.n	8001f92 <HAL_TIM_IC_Init+0x76>
 8001f88:	f240 61da 	movw	r1, #1754	; 0x6da
 8001f8c:	4825      	ldr	r0, [pc, #148]	; (8002024 <HAL_TIM_IC_Init+0x108>)
 8001f8e:	f7fe f99d 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	691b      	ldr	r3, [r3, #16]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d00e      	beq.n	8001fb8 <HAL_TIM_IC_Init+0x9c>
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001fa2:	d009      	beq.n	8001fb8 <HAL_TIM_IC_Init+0x9c>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	691b      	ldr	r3, [r3, #16]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d004      	beq.n	8001fb8 <HAL_TIM_IC_Init+0x9c>
 8001fae:	f240 61db 	movw	r1, #1755	; 0x6db
 8001fb2:	481c      	ldr	r0, [pc, #112]	; (8002024 <HAL_TIM_IC_Init+0x108>)
 8001fb4:	f7fe f98a 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	699b      	ldr	r3, [r3, #24]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_TIM_IC_Init+0xb6>
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	2b80      	cmp	r3, #128	; 0x80
 8001fc6:	d004      	beq.n	8001fd2 <HAL_TIM_IC_Init+0xb6>
 8001fc8:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8001fcc:	4815      	ldr	r0, [pc, #84]	; (8002024 <HAL_TIM_IC_Init+0x108>)
 8001fce:	f7fe f97d 	bl	80002cc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d106      	bne.n	8001fec <HAL_TIM_IC_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f81e 	bl	8002028 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	2202      	movs	r2, #2
 8001ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	3304      	adds	r3, #4
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4610      	mov	r0, r2
 8002000:	f000 fc72 	bl	80028e8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2201      	movs	r2, #1
 8002008:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800200c:	2300      	movs	r3, #0
}
 800200e:	4618      	mov	r0, r3
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40012c00 	.word	0x40012c00
 800201c:	40000400 	.word	0x40000400
 8002020:	40000800 	.word	0x40000800
 8002024:	08004d38 	.word	0x08004d38

08002028 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002028:	b480      	push	{r7}
 800202a:	b083      	sub	sp, #12
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002030:	bf00      	nop
 8002032:	370c      	adds	r7, #12
 8002034:	46bd      	mov	sp, r7
 8002036:	bc80      	pop	{r7}
 8002038:	4770      	bx	lr
	...

0800203c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	b084      	sub	sp, #16
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
 8002044:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a32      	ldr	r2, [pc, #200]	; (8002114 <HAL_TIM_IC_Start+0xd8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d10b      	bne.n	8002068 <HAL_TIM_IC_Start+0x2c>
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d040      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	2b04      	cmp	r3, #4
 800205a:	d03d      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	2b08      	cmp	r3, #8
 8002060:	d03a      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 8002062:	683b      	ldr	r3, [r7, #0]
 8002064:	2b0c      	cmp	r3, #12
 8002066:	d037      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002070:	d10b      	bne.n	800208a <HAL_TIM_IC_Start+0x4e>
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d02f      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	2b04      	cmp	r3, #4
 800207c:	d02c      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	2b08      	cmp	r3, #8
 8002082:	d029      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 8002084:	683b      	ldr	r3, [r7, #0]
 8002086:	2b0c      	cmp	r3, #12
 8002088:	d026      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a22      	ldr	r2, [pc, #136]	; (8002118 <HAL_TIM_IC_Start+0xdc>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d10b      	bne.n	80020ac <HAL_TIM_IC_Start+0x70>
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d01e      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d01b      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	2b08      	cmp	r3, #8
 80020a4:	d018      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	2b0c      	cmp	r3, #12
 80020aa:	d015      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1a      	ldr	r2, [pc, #104]	; (800211c <HAL_TIM_IC_Start+0xe0>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d10b      	bne.n	80020ce <HAL_TIM_IC_Start+0x92>
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d00d      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	2b04      	cmp	r3, #4
 80020c0:	d00a      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	2b08      	cmp	r3, #8
 80020c6:	d007      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	2b0c      	cmp	r3, #12
 80020cc:	d004      	beq.n	80020d8 <HAL_TIM_IC_Start+0x9c>
 80020ce:	f240 7151 	movw	r1, #1873	; 0x751
 80020d2:	4813      	ldr	r0, [pc, #76]	; (8002120 <HAL_TIM_IC_Start+0xe4>)
 80020d4:	f7fe f8fa 	bl	80002cc <assert_failed>

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2201      	movs	r2, #1
 80020de:	6839      	ldr	r1, [r7, #0]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f000 fe07 	bl	8002cf4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	f003 0307 	and.w	r3, r3, #7
 80020f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2b06      	cmp	r3, #6
 80020f6:	d007      	beq.n	8002108 <HAL_TIM_IC_Start+0xcc>
  {
    __HAL_TIM_ENABLE(htim);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	681a      	ldr	r2, [r3, #0]
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f042 0201 	orr.w	r2, r2, #1
 8002106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002108:	2300      	movs	r3, #0
}
 800210a:	4618      	mov	r0, r3
 800210c:	3710      	adds	r7, #16
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	40012c00 	.word	0x40012c00
 8002118:	40000400 	.word	0x40000400
 800211c:	40000800 	.word	0x40000800
 8002120:	08004d38 	.word	0x08004d38

08002124 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b084      	sub	sp, #16
 8002128:	af00      	add	r7, sp, #0
 800212a:	60f8      	str	r0, [r7, #12]
 800212c:	60b9      	str	r1, [r7, #8]
 800212e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4a7a      	ldr	r2, [pc, #488]	; (8002320 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_TIM_IC_ConfigChannel+0x3e>
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002142:	d00e      	beq.n	8002162 <HAL_TIM_IC_ConfigChannel+0x3e>
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	4a76      	ldr	r2, [pc, #472]	; (8002324 <HAL_TIM_IC_ConfigChannel+0x200>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d009      	beq.n	8002162 <HAL_TIM_IC_ConfigChannel+0x3e>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a75      	ldr	r2, [pc, #468]	; (8002328 <HAL_TIM_IC_ConfigChannel+0x204>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d004      	beq.n	8002162 <HAL_TIM_IC_ConfigChannel+0x3e>
 8002158:	f640 5188 	movw	r1, #3464	; 0xd88
 800215c:	4873      	ldr	r0, [pc, #460]	; (800232c <HAL_TIM_IC_ConfigChannel+0x208>)
 800215e:	f7fe f8b5 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8002162:	68bb      	ldr	r3, [r7, #8]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	2b00      	cmp	r3, #0
 8002168:	d00c      	beq.n	8002184 <HAL_TIM_IC_ConfigChannel+0x60>
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2b02      	cmp	r3, #2
 8002170:	d008      	beq.n	8002184 <HAL_TIM_IC_ConfigChannel+0x60>
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	2b0a      	cmp	r3, #10
 8002178:	d004      	beq.n	8002184 <HAL_TIM_IC_ConfigChannel+0x60>
 800217a:	f640 5189 	movw	r1, #3465	; 0xd89
 800217e:	486b      	ldr	r0, [pc, #428]	; (800232c <HAL_TIM_IC_ConfigChannel+0x208>)
 8002180:	f7fe f8a4 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d00c      	beq.n	80021a6 <HAL_TIM_IC_ConfigChannel+0x82>
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	2b02      	cmp	r3, #2
 8002192:	d008      	beq.n	80021a6 <HAL_TIM_IC_ConfigChannel+0x82>
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	2b03      	cmp	r3, #3
 800219a:	d004      	beq.n	80021a6 <HAL_TIM_IC_ConfigChannel+0x82>
 800219c:	f640 518a 	movw	r1, #3466	; 0xd8a
 80021a0:	4862      	ldr	r0, [pc, #392]	; (800232c <HAL_TIM_IC_ConfigChannel+0x208>)
 80021a2:	f7fe f893 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d010      	beq.n	80021d0 <HAL_TIM_IC_ConfigChannel+0xac>
 80021ae:	68bb      	ldr	r3, [r7, #8]
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	2b04      	cmp	r3, #4
 80021b4:	d00c      	beq.n	80021d0 <HAL_TIM_IC_ConfigChannel+0xac>
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2b08      	cmp	r3, #8
 80021bc:	d008      	beq.n	80021d0 <HAL_TIM_IC_ConfigChannel+0xac>
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	2b0c      	cmp	r3, #12
 80021c4:	d004      	beq.n	80021d0 <HAL_TIM_IC_ConfigChannel+0xac>
 80021c6:	f640 518b 	movw	r1, #3467	; 0xd8b
 80021ca:	4858      	ldr	r0, [pc, #352]	; (800232c <HAL_TIM_IC_ConfigChannel+0x208>)
 80021cc:	f7fe f87e 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80021d0:	68bb      	ldr	r3, [r7, #8]
 80021d2:	68db      	ldr	r3, [r3, #12]
 80021d4:	2b0f      	cmp	r3, #15
 80021d6:	d904      	bls.n	80021e2 <HAL_TIM_IC_ConfigChannel+0xbe>
 80021d8:	f640 518c 	movw	r1, #3468	; 0xd8c
 80021dc:	4853      	ldr	r0, [pc, #332]	; (800232c <HAL_TIM_IC_ConfigChannel+0x208>)
 80021de:	f7fe f875 	bl	80002cc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021e8:	2b01      	cmp	r3, #1
 80021ea:	d101      	bne.n	80021f0 <HAL_TIM_IC_ConfigChannel+0xcc>
 80021ec:	2302      	movs	r3, #2
 80021ee:	e0dd      	b.n	80023ac <HAL_TIM_IC_ConfigChannel+0x288>
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2202      	movs	r2, #2
 80021fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d11b      	bne.n	800223e <HAL_TIM_IC_ConfigChannel+0x11a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	6818      	ldr	r0, [r3, #0]
 800220a:	68bb      	ldr	r3, [r7, #8]
 800220c:	6819      	ldr	r1, [r3, #0]
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	685a      	ldr	r2, [r3, #4]
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	f000 fbc9 	bl	80029ac <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	699a      	ldr	r2, [r3, #24]
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f022 020c 	bic.w	r2, r2, #12
 8002228:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	6999      	ldr	r1, [r3, #24]
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	689a      	ldr	r2, [r3, #8]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	430a      	orrs	r2, r1
 800223a:	619a      	str	r2, [r3, #24]
 800223c:	e0ad      	b.n	800239a <HAL_TIM_IC_ConfigChannel+0x276>
  }
  else if (Channel == TIM_CHANNEL_2)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b04      	cmp	r3, #4
 8002242:	d135      	bne.n	80022b0 <HAL_TIM_IC_ConfigChannel+0x18c>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a35      	ldr	r2, [pc, #212]	; (8002320 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d013      	beq.n	8002276 <HAL_TIM_IC_ConfigChannel+0x152>
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002256:	d00e      	beq.n	8002276 <HAL_TIM_IC_ConfigChannel+0x152>
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a31      	ldr	r2, [pc, #196]	; (8002324 <HAL_TIM_IC_ConfigChannel+0x200>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d009      	beq.n	8002276 <HAL_TIM_IC_ConfigChannel+0x152>
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a30      	ldr	r2, [pc, #192]	; (8002328 <HAL_TIM_IC_ConfigChannel+0x204>)
 8002268:	4293      	cmp	r3, r2
 800226a:	d004      	beq.n	8002276 <HAL_TIM_IC_ConfigChannel+0x152>
 800226c:	f640 51a4 	movw	r1, #3492	; 0xda4
 8002270:	482e      	ldr	r0, [pc, #184]	; (800232c <HAL_TIM_IC_ConfigChannel+0x208>)
 8002272:	f7fe f82b 	bl	80002cc <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	6818      	ldr	r0, [r3, #0]
 800227a:	68bb      	ldr	r3, [r7, #8]
 800227c:	6819      	ldr	r1, [r3, #0]
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	685a      	ldr	r2, [r3, #4]
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	f000 fc19 	bl	8002abc <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	699a      	ldr	r2, [r3, #24]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002298:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	6999      	ldr	r1, [r3, #24]
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	689b      	ldr	r3, [r3, #8]
 80022a4:	021a      	lsls	r2, r3, #8
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	430a      	orrs	r2, r1
 80022ac:	619a      	str	r2, [r3, #24]
 80022ae:	e074      	b.n	800239a <HAL_TIM_IC_ConfigChannel+0x276>
  }
  else if (Channel == TIM_CHANNEL_3)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b08      	cmp	r3, #8
 80022b4:	d13c      	bne.n	8002330 <HAL_TIM_IC_ConfigChannel+0x20c>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a19      	ldr	r2, [pc, #100]	; (8002320 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 80022bc:	4293      	cmp	r3, r2
 80022be:	d013      	beq.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022c8:	d00e      	beq.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	4a15      	ldr	r2, [pc, #84]	; (8002324 <HAL_TIM_IC_ConfigChannel+0x200>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	d009      	beq.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a13      	ldr	r2, [pc, #76]	; (8002328 <HAL_TIM_IC_ConfigChannel+0x204>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d004      	beq.n	80022e8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022de:	f640 51b4 	movw	r1, #3508	; 0xdb4
 80022e2:	4812      	ldr	r0, [pc, #72]	; (800232c <HAL_TIM_IC_ConfigChannel+0x208>)
 80022e4:	f7fd fff2 	bl	80002cc <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6818      	ldr	r0, [r3, #0]
 80022ec:	68bb      	ldr	r3, [r7, #8]
 80022ee:	6819      	ldr	r1, [r3, #0]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	685a      	ldr	r2, [r3, #4]
 80022f4:	68bb      	ldr	r3, [r7, #8]
 80022f6:	68db      	ldr	r3, [r3, #12]
 80022f8:	f000 fc4b 	bl	8002b92 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	69da      	ldr	r2, [r3, #28]
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	f022 020c 	bic.w	r2, r2, #12
 800230a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69d9      	ldr	r1, [r3, #28]
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	689a      	ldr	r2, [r3, #8]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	430a      	orrs	r2, r1
 800231c:	61da      	str	r2, [r3, #28]
 800231e:	e03c      	b.n	800239a <HAL_TIM_IC_ConfigChannel+0x276>
 8002320:	40012c00 	.word	0x40012c00
 8002324:	40000400 	.word	0x40000400
 8002328:	40000800 	.word	0x40000800
 800232c:	08004d38 	.word	0x08004d38
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a1f      	ldr	r2, [pc, #124]	; (80023b4 <HAL_TIM_IC_ConfigChannel+0x290>)
 8002336:	4293      	cmp	r3, r2
 8002338:	d013      	beq.n	8002362 <HAL_TIM_IC_ConfigChannel+0x23e>
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002342:	d00e      	beq.n	8002362 <HAL_TIM_IC_ConfigChannel+0x23e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	4a1b      	ldr	r2, [pc, #108]	; (80023b8 <HAL_TIM_IC_ConfigChannel+0x294>)
 800234a:	4293      	cmp	r3, r2
 800234c:	d009      	beq.n	8002362 <HAL_TIM_IC_ConfigChannel+0x23e>
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <HAL_TIM_IC_ConfigChannel+0x298>)
 8002354:	4293      	cmp	r3, r2
 8002356:	d004      	beq.n	8002362 <HAL_TIM_IC_ConfigChannel+0x23e>
 8002358:	f640 51c4 	movw	r1, #3524	; 0xdc4
 800235c:	4818      	ldr	r0, [pc, #96]	; (80023c0 <HAL_TIM_IC_ConfigChannel+0x29c>)
 800235e:	f7fd ffb5 	bl	80002cc <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	6818      	ldr	r0, [r3, #0]
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	6819      	ldr	r1, [r3, #0]
 800236a:	68bb      	ldr	r3, [r7, #8]
 800236c:	685a      	ldr	r2, [r3, #4]
 800236e:	68bb      	ldr	r3, [r7, #8]
 8002370:	68db      	ldr	r3, [r3, #12]
 8002372:	f000 fc49 	bl	8002c08 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	69da      	ldr	r2, [r3, #28]
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002384:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	69d9      	ldr	r1, [r3, #28]
 800238c:	68bb      	ldr	r3, [r7, #8]
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	021a      	lsls	r2, r3, #8
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	430a      	orrs	r2, r1
 8002398:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	2200      	movs	r2, #0
 80023a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80023aa:	2300      	movs	r3, #0
}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3710      	adds	r7, #16
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40012c00 	.word	0x40012c00
 80023b8:	40000400 	.word	0x40000400
 80023bc:	40000800 	.word	0x40000800
 80023c0:	08004d38 	.word	0x08004d38

080023c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b084      	sub	sp, #16
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d101      	bne.n	80023dc <HAL_TIM_ConfigClockSource+0x18>
 80023d8:	2302      	movs	r3, #2
 80023da:	e279      	b.n	80028d0 <HAL_TIM_ConfigClockSource+0x50c>
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	2201      	movs	r2, #1
 80023e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2202      	movs	r2, #2
 80023e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023f4:	d029      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023fe:	d024      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d020      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b10      	cmp	r3, #16
 800240e:	d01c      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b20      	cmp	r3, #32
 8002416:	d018      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b30      	cmp	r3, #48	; 0x30
 800241e:	d014      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	2b40      	cmp	r3, #64	; 0x40
 8002426:	d010      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2b50      	cmp	r3, #80	; 0x50
 800242e:	d00c      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b60      	cmp	r3, #96	; 0x60
 8002436:	d008      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	2b70      	cmp	r3, #112	; 0x70
 800243e:	d004      	beq.n	800244a <HAL_TIM_ConfigClockSource+0x86>
 8002440:	f241 118a 	movw	r1, #4490	; 0x118a
 8002444:	4896      	ldr	r0, [pc, #600]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002446:	f7fd ff41 	bl	80002cc <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002458:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002460:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	68fa      	ldr	r2, [r7, #12]
 8002468:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	2b40      	cmp	r3, #64	; 0x40
 8002470:	f000 81b6 	beq.w	80027e0 <HAL_TIM_ConfigClockSource+0x41c>
 8002474:	2b40      	cmp	r3, #64	; 0x40
 8002476:	d80f      	bhi.n	8002498 <HAL_TIM_ConfigClockSource+0xd4>
 8002478:	2b10      	cmp	r3, #16
 800247a:	f000 81fd 	beq.w	8002878 <HAL_TIM_ConfigClockSource+0x4b4>
 800247e:	2b10      	cmp	r3, #16
 8002480:	d803      	bhi.n	800248a <HAL_TIM_ConfigClockSource+0xc6>
 8002482:	2b00      	cmp	r3, #0
 8002484:	f000 81f8 	beq.w	8002878 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002488:	e219      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800248a:	2b20      	cmp	r3, #32
 800248c:	f000 81f4 	beq.w	8002878 <HAL_TIM_ConfigClockSource+0x4b4>
 8002490:	2b30      	cmp	r3, #48	; 0x30
 8002492:	f000 81f1 	beq.w	8002878 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 8002496:	e212      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8002498:	2b70      	cmp	r3, #112	; 0x70
 800249a:	d02e      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x136>
 800249c:	2b70      	cmp	r3, #112	; 0x70
 800249e:	d806      	bhi.n	80024ae <HAL_TIM_ConfigClockSource+0xea>
 80024a0:	2b50      	cmp	r3, #80	; 0x50
 80024a2:	f000 8105 	beq.w	80026b0 <HAL_TIM_ConfigClockSource+0x2ec>
 80024a6:	2b60      	cmp	r3, #96	; 0x60
 80024a8:	f000 814e 	beq.w	8002748 <HAL_TIM_ConfigClockSource+0x384>
      break;
 80024ac:	e207      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 80024ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024b2:	d004      	beq.n	80024be <HAL_TIM_ConfigClockSource+0xfa>
 80024b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80024b8:	f000 808a 	beq.w	80025d0 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 80024bc:	e1ff      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a78      	ldr	r2, [pc, #480]	; (80026a4 <HAL_TIM_ConfigClockSource+0x2e0>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	f000 81f9 	beq.w	80028bc <HAL_TIM_ConfigClockSource+0x4f8>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	f000 81f3 	beq.w	80028bc <HAL_TIM_ConfigClockSource+0x4f8>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a73      	ldr	r2, [pc, #460]	; (80026a8 <HAL_TIM_ConfigClockSource+0x2e4>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	f000 81ed 	beq.w	80028bc <HAL_TIM_ConfigClockSource+0x4f8>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a71      	ldr	r2, [pc, #452]	; (80026ac <HAL_TIM_ConfigClockSource+0x2e8>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	f000 81e7 	beq.w	80028bc <HAL_TIM_ConfigClockSource+0x4f8>
 80024ee:	f241 1196 	movw	r1, #4502	; 0x1196
 80024f2:	486b      	ldr	r0, [pc, #428]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 80024f4:	f7fd feea 	bl	80002cc <assert_failed>
      break;
 80024f8:	e1e0      	b.n	80028bc <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	4a69      	ldr	r2, [pc, #420]	; (80026a4 <HAL_TIM_ConfigClockSource+0x2e0>)
 8002500:	4293      	cmp	r3, r2
 8002502:	d013      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x168>
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800250c:	d00e      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x168>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4a65      	ldr	r2, [pc, #404]	; (80026a8 <HAL_TIM_ConfigClockSource+0x2e4>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d009      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x168>
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a63      	ldr	r2, [pc, #396]	; (80026ac <HAL_TIM_ConfigClockSource+0x2e8>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d004      	beq.n	800252c <HAL_TIM_ConfigClockSource+0x168>
 8002522:	f241 119d 	movw	r1, #4509	; 0x119d
 8002526:	485e      	ldr	r0, [pc, #376]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002528:	f7fd fed0 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	689b      	ldr	r3, [r3, #8]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d013      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x198>
 8002534:	683b      	ldr	r3, [r7, #0]
 8002536:	689b      	ldr	r3, [r3, #8]
 8002538:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800253c:	d00e      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x198>
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	689b      	ldr	r3, [r3, #8]
 8002542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002546:	d009      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x198>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002550:	d004      	beq.n	800255c <HAL_TIM_ConfigClockSource+0x198>
 8002552:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 8002556:	4852      	ldr	r0, [pc, #328]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002558:	f7fd feb8 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002564:	d014      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0x1cc>
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	685b      	ldr	r3, [r3, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d010      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0x1cc>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00c      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0x1cc>
 8002576:	683b      	ldr	r3, [r7, #0]
 8002578:	685b      	ldr	r3, [r3, #4]
 800257a:	2b02      	cmp	r3, #2
 800257c:	d008      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0x1cc>
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	2b0a      	cmp	r3, #10
 8002584:	d004      	beq.n	8002590 <HAL_TIM_ConfigClockSource+0x1cc>
 8002586:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800258a:	4845      	ldr	r0, [pc, #276]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800258c:	f7fd fe9e 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	2b0f      	cmp	r3, #15
 8002596:	d904      	bls.n	80025a2 <HAL_TIM_ConfigClockSource+0x1de>
 8002598:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800259c:	4840      	ldr	r0, [pc, #256]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800259e:	f7fd fe95 	bl	80002cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6818      	ldr	r0, [r3, #0]
 80025a6:	683b      	ldr	r3, [r7, #0]
 80025a8:	6899      	ldr	r1, [r3, #8]
 80025aa:	683b      	ldr	r3, [r7, #0]
 80025ac:	685a      	ldr	r2, [r3, #4]
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	f000 fb7f 	bl	8002cb4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025c4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68fa      	ldr	r2, [r7, #12]
 80025cc:	609a      	str	r2, [r3, #8]
      break;
 80025ce:	e176      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a33      	ldr	r2, [pc, #204]	; (80026a4 <HAL_TIM_ConfigClockSource+0x2e0>)
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d013      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x23e>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025e2:	d00e      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x23e>
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a2f      	ldr	r2, [pc, #188]	; (80026a8 <HAL_TIM_ConfigClockSource+0x2e4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d009      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x23e>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a2e      	ldr	r2, [pc, #184]	; (80026ac <HAL_TIM_ConfigClockSource+0x2e8>)
 80025f4:	4293      	cmp	r3, r2
 80025f6:	d004      	beq.n	8002602 <HAL_TIM_ConfigClockSource+0x23e>
 80025f8:	f241 11b5 	movw	r1, #4533	; 0x11b5
 80025fc:	4828      	ldr	r0, [pc, #160]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 80025fe:	f7fd fe65 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	689b      	ldr	r3, [r3, #8]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d013      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x26e>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002612:	d00e      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x26e>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800261c:	d009      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x26e>
 800261e:	683b      	ldr	r3, [r7, #0]
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002626:	d004      	beq.n	8002632 <HAL_TIM_ConfigClockSource+0x26e>
 8002628:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800262c:	481c      	ldr	r0, [pc, #112]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 800262e:	f7fd fe4d 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002632:	683b      	ldr	r3, [r7, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800263a:	d014      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x2a2>
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d010      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x2a2>
 8002644:	683b      	ldr	r3, [r7, #0]
 8002646:	685b      	ldr	r3, [r3, #4]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d00c      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x2a2>
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	685b      	ldr	r3, [r3, #4]
 8002650:	2b02      	cmp	r3, #2
 8002652:	d008      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x2a2>
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	685b      	ldr	r3, [r3, #4]
 8002658:	2b0a      	cmp	r3, #10
 800265a:	d004      	beq.n	8002666 <HAL_TIM_ConfigClockSource+0x2a2>
 800265c:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8002660:	480f      	ldr	r0, [pc, #60]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002662:	f7fd fe33 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002666:	683b      	ldr	r3, [r7, #0]
 8002668:	68db      	ldr	r3, [r3, #12]
 800266a:	2b0f      	cmp	r3, #15
 800266c:	d904      	bls.n	8002678 <HAL_TIM_ConfigClockSource+0x2b4>
 800266e:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8002672:	480b      	ldr	r0, [pc, #44]	; (80026a0 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002674:	f7fd fe2a 	bl	80002cc <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6818      	ldr	r0, [r3, #0]
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	6899      	ldr	r1, [r3, #8]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	685a      	ldr	r2, [r3, #4]
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	f000 fb14 	bl	8002cb4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	689a      	ldr	r2, [r3, #8]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800269a:	609a      	str	r2, [r3, #8]
      break;
 800269c:	e10f      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
 800269e:	bf00      	nop
 80026a0:	08004d38 	.word	0x08004d38
 80026a4:	40012c00 	.word	0x40012c00
 80026a8:	40000400 	.word	0x40000400
 80026ac:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	4a88      	ldr	r2, [pc, #544]	; (80028d8 <HAL_TIM_ConfigClockSource+0x514>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d013      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x31e>
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026c2:	d00e      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x31e>
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4a84      	ldr	r2, [pc, #528]	; (80028dc <HAL_TIM_ConfigClockSource+0x518>)
 80026ca:	4293      	cmp	r3, r2
 80026cc:	d009      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x31e>
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a83      	ldr	r2, [pc, #524]	; (80028e0 <HAL_TIM_ConfigClockSource+0x51c>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d004      	beq.n	80026e2 <HAL_TIM_ConfigClockSource+0x31e>
 80026d8:	f241 11c9 	movw	r1, #4553	; 0x11c9
 80026dc:	4881      	ldr	r0, [pc, #516]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 80026de:	f7fd fdf5 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	685b      	ldr	r3, [r3, #4]
 80026e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ea:	d014      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x352>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d010      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x352>
 80026f4:	683b      	ldr	r3, [r7, #0]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d00c      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x352>
 80026fc:	683b      	ldr	r3, [r7, #0]
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	2b02      	cmp	r3, #2
 8002702:	d008      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x352>
 8002704:	683b      	ldr	r3, [r7, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	2b0a      	cmp	r3, #10
 800270a:	d004      	beq.n	8002716 <HAL_TIM_ConfigClockSource+0x352>
 800270c:	f241 11cc 	movw	r1, #4556	; 0x11cc
 8002710:	4874      	ldr	r0, [pc, #464]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 8002712:	f7fd fddb 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	68db      	ldr	r3, [r3, #12]
 800271a:	2b0f      	cmp	r3, #15
 800271c:	d904      	bls.n	8002728 <HAL_TIM_ConfigClockSource+0x364>
 800271e:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8002722:	4870      	ldr	r0, [pc, #448]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 8002724:	f7fd fdd2 	bl	80002cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6818      	ldr	r0, [r3, #0]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	6859      	ldr	r1, [r3, #4]
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	461a      	mov	r2, r3
 8002736:	f000 f993 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	2150      	movs	r1, #80	; 0x50
 8002740:	4618      	mov	r0, r3
 8002742:	f000 fa9d 	bl	8002c80 <TIM_ITRx_SetConfig>
      break;
 8002746:	e0ba      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a62      	ldr	r2, [pc, #392]	; (80028d8 <HAL_TIM_ConfigClockSource+0x514>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d013      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x3b6>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800275a:	d00e      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x3b6>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a5e      	ldr	r2, [pc, #376]	; (80028dc <HAL_TIM_ConfigClockSource+0x518>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d009      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x3b6>
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4a5d      	ldr	r2, [pc, #372]	; (80028e0 <HAL_TIM_ConfigClockSource+0x51c>)
 800276c:	4293      	cmp	r3, r2
 800276e:	d004      	beq.n	800277a <HAL_TIM_ConfigClockSource+0x3b6>
 8002770:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8002774:	485b      	ldr	r0, [pc, #364]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 8002776:	f7fd fda9 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002782:	d014      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x3ea>
 8002784:	683b      	ldr	r3, [r7, #0]
 8002786:	685b      	ldr	r3, [r3, #4]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d010      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x3ea>
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d00c      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x3ea>
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2b02      	cmp	r3, #2
 800279a:	d008      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x3ea>
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	2b0a      	cmp	r3, #10
 80027a2:	d004      	beq.n	80027ae <HAL_TIM_ConfigClockSource+0x3ea>
 80027a4:	f241 11dc 	movw	r1, #4572	; 0x11dc
 80027a8:	484e      	ldr	r0, [pc, #312]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 80027aa:	f7fd fd8f 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b0f      	cmp	r3, #15
 80027b4:	d904      	bls.n	80027c0 <HAL_TIM_ConfigClockSource+0x3fc>
 80027b6:	f241 11dd 	movw	r1, #4573	; 0x11dd
 80027ba:	484a      	ldr	r0, [pc, #296]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 80027bc:	f7fd fd86 	bl	80002cc <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6818      	ldr	r0, [r3, #0]
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	6859      	ldr	r1, [r3, #4]
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	461a      	mov	r2, r3
 80027ce:	f000 f9b1 	bl	8002b34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	2160      	movs	r1, #96	; 0x60
 80027d8:	4618      	mov	r0, r3
 80027da:	f000 fa51 	bl	8002c80 <TIM_ITRx_SetConfig>
      break;
 80027de:	e06e      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a3c      	ldr	r2, [pc, #240]	; (80028d8 <HAL_TIM_ConfigClockSource+0x514>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d013      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x44e>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027f2:	d00e      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x44e>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a38      	ldr	r2, [pc, #224]	; (80028dc <HAL_TIM_ConfigClockSource+0x518>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d009      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x44e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4a37      	ldr	r2, [pc, #220]	; (80028e0 <HAL_TIM_ConfigClockSource+0x51c>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d004      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0x44e>
 8002808:	f241 11e9 	movw	r1, #4585	; 0x11e9
 800280c:	4835      	ldr	r0, [pc, #212]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 800280e:	f7fd fd5d 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002812:	683b      	ldr	r3, [r7, #0]
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800281a:	d014      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x482>
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d010      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x482>
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d00c      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x482>
 800282c:	683b      	ldr	r3, [r7, #0]
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	2b02      	cmp	r3, #2
 8002832:	d008      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x482>
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	2b0a      	cmp	r3, #10
 800283a:	d004      	beq.n	8002846 <HAL_TIM_ConfigClockSource+0x482>
 800283c:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8002840:	4828      	ldr	r0, [pc, #160]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 8002842:	f7fd fd43 	bl	80002cc <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
 800284a:	2b0f      	cmp	r3, #15
 800284c:	d904      	bls.n	8002858 <HAL_TIM_ConfigClockSource+0x494>
 800284e:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8002852:	4824      	ldr	r0, [pc, #144]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 8002854:	f7fd fd3a 	bl	80002cc <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6818      	ldr	r0, [r3, #0]
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	6859      	ldr	r1, [r3, #4]
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	461a      	mov	r2, r3
 8002866:	f000 f8fb 	bl	8002a60 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	2140      	movs	r1, #64	; 0x40
 8002870:	4618      	mov	r0, r3
 8002872:	f000 fa05 	bl	8002c80 <TIM_ITRx_SetConfig>
      break;
 8002876:	e022      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a16      	ldr	r2, [pc, #88]	; (80028d8 <HAL_TIM_ConfigClockSource+0x514>)
 800287e:	4293      	cmp	r3, r2
 8002880:	d013      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x4e6>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d00e      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x4e6>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a12      	ldr	r2, [pc, #72]	; (80028dc <HAL_TIM_ConfigClockSource+0x518>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d009      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x4e6>
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4a11      	ldr	r2, [pc, #68]	; (80028e0 <HAL_TIM_ConfigClockSource+0x51c>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d004      	beq.n	80028aa <HAL_TIM_ConfigClockSource+0x4e6>
 80028a0:	f241 11fc 	movw	r1, #4604	; 0x11fc
 80028a4:	480f      	ldr	r0, [pc, #60]	; (80028e4 <HAL_TIM_ConfigClockSource+0x520>)
 80028a6:	f7fd fd11 	bl	80002cc <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4619      	mov	r1, r3
 80028b4:	4610      	mov	r0, r2
 80028b6:	f000 f9e3 	bl	8002c80 <TIM_ITRx_SetConfig>
      break;
 80028ba:	e000      	b.n	80028be <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 80028bc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2200      	movs	r2, #0
 80028ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3710      	adds	r7, #16
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40012c00 	.word	0x40012c00
 80028dc:	40000400 	.word	0x40000400
 80028e0:	40000800 	.word	0x40000800
 80028e4:	08004d38 	.word	0x08004d38

080028e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028e8:	b480      	push	{r7}
 80028ea:	b085      	sub	sp, #20
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	4a29      	ldr	r2, [pc, #164]	; (80029a0 <TIM_Base_SetConfig+0xb8>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d00b      	beq.n	8002918 <TIM_Base_SetConfig+0x30>
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002906:	d007      	beq.n	8002918 <TIM_Base_SetConfig+0x30>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a26      	ldr	r2, [pc, #152]	; (80029a4 <TIM_Base_SetConfig+0xbc>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0x30>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <TIM_Base_SetConfig+0xc0>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d108      	bne.n	800292a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1c      	ldr	r2, [pc, #112]	; (80029a0 <TIM_Base_SetConfig+0xb8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d00b      	beq.n	800294a <TIM_Base_SetConfig+0x62>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d007      	beq.n	800294a <TIM_Base_SetConfig+0x62>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a19      	ldr	r2, [pc, #100]	; (80029a4 <TIM_Base_SetConfig+0xbc>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d003      	beq.n	800294a <TIM_Base_SetConfig+0x62>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a18      	ldr	r2, [pc, #96]	; (80029a8 <TIM_Base_SetConfig+0xc0>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d108      	bne.n	800295c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	68db      	ldr	r3, [r3, #12]
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	4313      	orrs	r3, r2
 800295a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	695b      	ldr	r3, [r3, #20]
 8002966:	4313      	orrs	r3, r2
 8002968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <TIM_Base_SetConfig+0xb8>)
 8002984:	4293      	cmp	r3, r2
 8002986:	d103      	bne.n	8002990 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	691a      	ldr	r2, [r3, #16]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2201      	movs	r2, #1
 8002994:	615a      	str	r2, [r3, #20]
}
 8002996:	bf00      	nop
 8002998:	3714      	adds	r7, #20
 800299a:	46bd      	mov	sp, r7
 800299c:	bc80      	pop	{r7}
 800299e:	4770      	bx	lr
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40000400 	.word	0x40000400
 80029a8:	40000800 	.word	0x40000800

080029ac <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	60f8      	str	r0, [r7, #12]
 80029b4:	60b9      	str	r1, [r7, #8]
 80029b6:	607a      	str	r2, [r7, #4]
 80029b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0201 	bic.w	r2, r3, #1
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	699b      	ldr	r3, [r3, #24]
 80029ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a1b      	ldr	r3, [r3, #32]
 80029d0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4a1f      	ldr	r2, [pc, #124]	; (8002a54 <TIM_TI1_SetConfig+0xa8>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d00b      	beq.n	80029f2 <TIM_TI1_SetConfig+0x46>
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029e0:	d007      	beq.n	80029f2 <TIM_TI1_SetConfig+0x46>
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <TIM_TI1_SetConfig+0xac>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d003      	beq.n	80029f2 <TIM_TI1_SetConfig+0x46>
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	4a1b      	ldr	r2, [pc, #108]	; (8002a5c <TIM_TI1_SetConfig+0xb0>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d101      	bne.n	80029f6 <TIM_TI1_SetConfig+0x4a>
 80029f2:	2301      	movs	r3, #1
 80029f4:	e000      	b.n	80029f8 <TIM_TI1_SetConfig+0x4c>
 80029f6:	2300      	movs	r3, #0
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d008      	beq.n	8002a0e <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0303 	bic.w	r3, r3, #3
 8002a02:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4313      	orrs	r3, r2
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	e003      	b.n	8002a16 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002a1e:	683b      	ldr	r3, [r7, #0]
 8002a20:	011b      	lsls	r3, r3, #4
 8002a22:	b2db      	uxtb	r3, r3
 8002a24:	697a      	ldr	r2, [r7, #20]
 8002a26:	4313      	orrs	r3, r2
 8002a28:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a2a:	693b      	ldr	r3, [r7, #16]
 8002a2c:	f023 030a 	bic.w	r3, r3, #10
 8002a30:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	f003 030a 	and.w	r3, r3, #10
 8002a38:	693a      	ldr	r2, [r7, #16]
 8002a3a:	4313      	orrs	r3, r2
 8002a3c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	697a      	ldr	r2, [r7, #20]
 8002a42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	621a      	str	r2, [r3, #32]
}
 8002a4a:	bf00      	nop
 8002a4c:	371c      	adds	r7, #28
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bc80      	pop	{r7}
 8002a52:	4770      	bx	lr
 8002a54:	40012c00 	.word	0x40012c00
 8002a58:	40000400 	.word	0x40000400
 8002a5c:	40000800 	.word	0x40000800

08002a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b087      	sub	sp, #28
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	60f8      	str	r0, [r7, #12]
 8002a68:	60b9      	str	r1, [r7, #8]
 8002a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	6a1b      	ldr	r3, [r3, #32]
 8002a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	6a1b      	ldr	r3, [r3, #32]
 8002a76:	f023 0201 	bic.w	r2, r3, #1
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	699b      	ldr	r3, [r3, #24]
 8002a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	011b      	lsls	r3, r3, #4
 8002a90:	693a      	ldr	r2, [r7, #16]
 8002a92:	4313      	orrs	r3, r2
 8002a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a96:	697b      	ldr	r3, [r7, #20]
 8002a98:	f023 030a 	bic.w	r3, r3, #10
 8002a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	693a      	ldr	r2, [r7, #16]
 8002aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	621a      	str	r2, [r3, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	371c      	adds	r7, #28
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bc80      	pop	{r7}
 8002aba:	4770      	bx	lr

08002abc <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	f023 0210 	bic.w	r2, r3, #16
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	699b      	ldr	r3, [r3, #24]
 8002ada:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ae8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	021b      	lsls	r3, r3, #8
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002afa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	031b      	lsls	r3, r3, #12
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b0e:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	011b      	lsls	r3, r3, #4
 8002b14:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002b18:	693a      	ldr	r2, [r7, #16]
 8002b1a:	4313      	orrs	r3, r2
 8002b1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	693a      	ldr	r2, [r7, #16]
 8002b28:	621a      	str	r2, [r3, #32]
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bc80      	pop	{r7}
 8002b32:	4770      	bx	lr

08002b34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b087      	sub	sp, #28
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	f023 0210 	bic.w	r2, r3, #16
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	699b      	ldr	r3, [r3, #24]
 8002b50:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	6a1b      	ldr	r3, [r3, #32]
 8002b56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b5e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	031b      	lsls	r3, r3, #12
 8002b64:	697a      	ldr	r2, [r7, #20]
 8002b66:	4313      	orrs	r3, r2
 8002b68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b70:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	693a      	ldr	r2, [r7, #16]
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	697a      	ldr	r2, [r7, #20]
 8002b80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	693a      	ldr	r2, [r7, #16]
 8002b86:	621a      	str	r2, [r3, #32]
}
 8002b88:	bf00      	nop
 8002b8a:	371c      	adds	r7, #28
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b92:	b480      	push	{r7}
 8002b94:	b087      	sub	sp, #28
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
 8002b9e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	6a1b      	ldr	r3, [r3, #32]
 8002ba4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	69db      	ldr	r3, [r3, #28]
 8002bb0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	f023 0303 	bic.w	r3, r3, #3
 8002bbe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	4313      	orrs	r3, r2
 8002bc6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002bc8:	697b      	ldr	r3, [r7, #20]
 8002bca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bce:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	011b      	lsls	r3, r3, #4
 8002bd4:	b2db      	uxtb	r3, r3
 8002bd6:	697a      	ldr	r2, [r7, #20]
 8002bd8:	4313      	orrs	r3, r2
 8002bda:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002bdc:	693b      	ldr	r3, [r7, #16]
 8002bde:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002be2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002be4:	68bb      	ldr	r3, [r7, #8]
 8002be6:	021b      	lsls	r3, r3, #8
 8002be8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bc80      	pop	{r7}
 8002c06:	4770      	bx	lr

08002c08 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b087      	sub	sp, #28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	60f8      	str	r0, [r7, #12]
 8002c10:	60b9      	str	r1, [r7, #8]
 8002c12:	607a      	str	r2, [r7, #4]
 8002c14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6a1b      	ldr	r3, [r3, #32]
 8002c2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c2e:	697b      	ldr	r3, [r7, #20]
 8002c30:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	021b      	lsls	r3, r3, #8
 8002c3a:	697a      	ldr	r2, [r7, #20]
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c46:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c48:	683b      	ldr	r3, [r7, #0]
 8002c4a:	031b      	lsls	r3, r3, #12
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	697a      	ldr	r2, [r7, #20]
 8002c50:	4313      	orrs	r3, r2
 8002c52:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002c54:	693b      	ldr	r3, [r7, #16]
 8002c56:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c5a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	031b      	lsls	r3, r3, #12
 8002c60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c64:	693a      	ldr	r2, [r7, #16]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	697a      	ldr	r2, [r7, #20]
 8002c6e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	693a      	ldr	r2, [r7, #16]
 8002c74:	621a      	str	r2, [r3, #32]
}
 8002c76:	bf00      	nop
 8002c78:	371c      	adds	r7, #28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bc80      	pop	{r7}
 8002c7e:	4770      	bx	lr

08002c80 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c80:	b480      	push	{r7}
 8002c82:	b085      	sub	sp, #20
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c96:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c98:	683a      	ldr	r2, [r7, #0]
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	4313      	orrs	r3, r2
 8002c9e:	f043 0307 	orr.w	r3, r3, #7
 8002ca2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	68fa      	ldr	r2, [r7, #12]
 8002ca8:	609a      	str	r2, [r3, #8]
}
 8002caa:	bf00      	nop
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bc80      	pop	{r7}
 8002cb2:	4770      	bx	lr

08002cb4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b087      	sub	sp, #28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cce:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	021a      	lsls	r2, r3, #8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	431a      	orrs	r2, r3
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	4313      	orrs	r3, r2
 8002cdc:	697a      	ldr	r2, [r7, #20]
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	697a      	ldr	r2, [r7, #20]
 8002ce6:	609a      	str	r2, [r3, #8]
}
 8002ce8:	bf00      	nop
 8002cea:	371c      	adds	r7, #28
 8002cec:	46bd      	mov	sp, r7
 8002cee:	bc80      	pop	{r7}
 8002cf0:	4770      	bx	lr
	...

08002cf4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	60f8      	str	r0, [r7, #12]
 8002cfc:	60b9      	str	r1, [r7, #8]
 8002cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	4a22      	ldr	r2, [pc, #136]	; (8002d8c <TIM_CCxChannelCmd+0x98>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d010      	beq.n	8002d2a <TIM_CCxChannelCmd+0x36>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d0e:	d00c      	beq.n	8002d2a <TIM_CCxChannelCmd+0x36>
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	4a1f      	ldr	r2, [pc, #124]	; (8002d90 <TIM_CCxChannelCmd+0x9c>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d008      	beq.n	8002d2a <TIM_CCxChannelCmd+0x36>
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	4a1e      	ldr	r2, [pc, #120]	; (8002d94 <TIM_CCxChannelCmd+0xa0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <TIM_CCxChannelCmd+0x36>
 8002d20:	f641 11c9 	movw	r1, #6601	; 0x19c9
 8002d24:	481c      	ldr	r0, [pc, #112]	; (8002d98 <TIM_CCxChannelCmd+0xa4>)
 8002d26:	f7fd fad1 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d010      	beq.n	8002d52 <TIM_CCxChannelCmd+0x5e>
 8002d30:	68bb      	ldr	r3, [r7, #8]
 8002d32:	2b04      	cmp	r3, #4
 8002d34:	d00d      	beq.n	8002d52 <TIM_CCxChannelCmd+0x5e>
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	2b08      	cmp	r3, #8
 8002d3a:	d00a      	beq.n	8002d52 <TIM_CCxChannelCmd+0x5e>
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	2b0c      	cmp	r3, #12
 8002d40:	d007      	beq.n	8002d52 <TIM_CCxChannelCmd+0x5e>
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b3c      	cmp	r3, #60	; 0x3c
 8002d46:	d004      	beq.n	8002d52 <TIM_CCxChannelCmd+0x5e>
 8002d48:	f641 11ca 	movw	r1, #6602	; 0x19ca
 8002d4c:	4812      	ldr	r0, [pc, #72]	; (8002d98 <TIM_CCxChannelCmd+0xa4>)
 8002d4e:	f7fd fabd 	bl	80002cc <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	2201      	movs	r2, #1
 8002d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	6a1a      	ldr	r2, [r3, #32]
 8002d64:	697b      	ldr	r3, [r7, #20]
 8002d66:	43db      	mvns	r3, r3
 8002d68:	401a      	ands	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	6a1a      	ldr	r2, [r3, #32]
 8002d72:	68bb      	ldr	r3, [r7, #8]
 8002d74:	f003 031f 	and.w	r3, r3, #31
 8002d78:	6879      	ldr	r1, [r7, #4]
 8002d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7e:	431a      	orrs	r2, r3
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	621a      	str	r2, [r3, #32]
}
 8002d84:	bf00      	nop
 8002d86:	3718      	adds	r7, #24
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bd80      	pop	{r7, pc}
 8002d8c:	40012c00 	.word	0x40012c00
 8002d90:	40000400 	.word	0x40000400
 8002d94:	40000800 	.word	0x40000800
 8002d98:	08004d38 	.word	0x08004d38

08002d9c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b084      	sub	sp, #16
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
 8002da4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a43      	ldr	r2, [pc, #268]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d013      	beq.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002db8:	d00e      	beq.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	4a3f      	ldr	r2, [pc, #252]	; (8002ebc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002dc0:	4293      	cmp	r3, r2
 8002dc2:	d009      	beq.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a3d      	ldr	r2, [pc, #244]	; (8002ec0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d004      	beq.n	8002dd8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002dce:	f240 6164 	movw	r1, #1636	; 0x664
 8002dd2:	483c      	ldr	r0, [pc, #240]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002dd4:	f7fd fa7a 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d020      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b10      	cmp	r3, #16
 8002de6:	d01c      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b20      	cmp	r3, #32
 8002dee:	d018      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b30      	cmp	r3, #48	; 0x30
 8002df6:	d014      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d010      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b50      	cmp	r3, #80	; 0x50
 8002e06:	d00c      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	2b60      	cmp	r3, #96	; 0x60
 8002e0e:	d008      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b70      	cmp	r3, #112	; 0x70
 8002e16:	d004      	beq.n	8002e22 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002e18:	f240 6165 	movw	r1, #1637	; 0x665
 8002e1c:	4829      	ldr	r0, [pc, #164]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002e1e:	f7fd fa55 	bl	80002cc <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	2b80      	cmp	r3, #128	; 0x80
 8002e28:	d008      	beq.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d004      	beq.n	8002e3c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002e32:	f240 6166 	movw	r1, #1638	; 0x666
 8002e36:	4823      	ldr	r0, [pc, #140]	; (8002ec4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002e38:	f7fd fa48 	bl	80002cc <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e42:	2b01      	cmp	r3, #1
 8002e44:	d101      	bne.n	8002e4a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002e46:	2302      	movs	r3, #2
 8002e48:	e032      	b.n	8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	2202      	movs	r2, #2
 8002e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e70:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	68fa      	ldr	r2, [r7, #12]
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e82:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68fa      	ldr	r2, [r7, #12]
 8002e94:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	68ba      	ldr	r2, [r7, #8]
 8002e9c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2201      	movs	r2, #1
 8002ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	2200      	movs	r2, #0
 8002eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3710      	adds	r7, #16
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	40012c00 	.word	0x40012c00
 8002ebc:	40000400 	.word	0x40000400
 8002ec0:	40000800 	.word	0x40000800
 8002ec4:	08004d70 	.word	0x08004d70

08002ec8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ec8:	b580      	push	{r7, lr}
 8002eca:	b082      	sub	sp, #8
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d101      	bne.n	8002eda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	e092      	b.n	8003000 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d02c      	beq.n	8002f3c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a48      	ldr	r2, [pc, #288]	; (8003008 <HAL_UART_Init+0x140>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d00e      	beq.n	8002f0a <HAL_UART_Init+0x42>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4a46      	ldr	r2, [pc, #280]	; (800300c <HAL_UART_Init+0x144>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d009      	beq.n	8002f0a <HAL_UART_Init+0x42>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4a45      	ldr	r2, [pc, #276]	; (8003010 <HAL_UART_Init+0x148>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d004      	beq.n	8002f0a <HAL_UART_Init+0x42>
 8002f00:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002f04:	4843      	ldr	r0, [pc, #268]	; (8003014 <HAL_UART_Init+0x14c>)
 8002f06:	f7fd f9e1 	bl	80002cc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	699b      	ldr	r3, [r3, #24]
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d028      	beq.n	8002f64 <HAL_UART_Init+0x9c>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	699b      	ldr	r3, [r3, #24]
 8002f16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1a:	d023      	beq.n	8002f64 <HAL_UART_Init+0x9c>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	699b      	ldr	r3, [r3, #24]
 8002f20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f24:	d01e      	beq.n	8002f64 <HAL_UART_Init+0x9c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	699b      	ldr	r3, [r3, #24]
 8002f2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f2e:	d019      	beq.n	8002f64 <HAL_UART_Init+0x9c>
 8002f30:	f240 1147 	movw	r1, #327	; 0x147
 8002f34:	4837      	ldr	r0, [pc, #220]	; (8003014 <HAL_UART_Init+0x14c>)
 8002f36:	f7fd f9c9 	bl	80002cc <assert_failed>
 8002f3a:	e013      	b.n	8002f64 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a31      	ldr	r2, [pc, #196]	; (8003008 <HAL_UART_Init+0x140>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00e      	beq.n	8002f64 <HAL_UART_Init+0x9c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a30      	ldr	r2, [pc, #192]	; (800300c <HAL_UART_Init+0x144>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d009      	beq.n	8002f64 <HAL_UART_Init+0x9c>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	4a2e      	ldr	r2, [pc, #184]	; (8003010 <HAL_UART_Init+0x148>)
 8002f56:	4293      	cmp	r3, r2
 8002f58:	d004      	beq.n	8002f64 <HAL_UART_Init+0x9c>
 8002f5a:	f240 114b 	movw	r1, #331	; 0x14b
 8002f5e:	482d      	ldr	r0, [pc, #180]	; (8003014 <HAL_UART_Init+0x14c>)
 8002f60:	f7fd f9b4 	bl	80002cc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	689b      	ldr	r3, [r3, #8]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_UART_Init+0xb8>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f74:	d004      	beq.n	8002f80 <HAL_UART_Init+0xb8>
 8002f76:	f240 114d 	movw	r1, #333	; 0x14d
 8002f7a:	4826      	ldr	r0, [pc, #152]	; (8003014 <HAL_UART_Init+0x14c>)
 8002f7c:	f7fd f9a6 	bl	80002cc <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d106      	bne.n	8002f9a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7fd fc5d 	bl	8000854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2224      	movs	r2, #36	; 0x24
 8002f9e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	68da      	ldr	r2, [r3, #12]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb0:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 fb4a 	bl	800364c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	691a      	ldr	r2, [r3, #16]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fc6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	695a      	ldr	r2, [r3, #20]
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fd6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fe6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2220      	movs	r2, #32
 8002ff2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2220      	movs	r2, #32
 8002ffa:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002ffe:	2300      	movs	r3, #0
}
 8003000:	4618      	mov	r0, r3
 8003002:	3708      	adds	r7, #8
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	40013800 	.word	0x40013800
 800300c:	40004400 	.word	0x40004400
 8003010:	40004800 	.word	0x40004800
 8003014:	08004dac 	.word	0x08004dac

08003018 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af02      	add	r7, sp, #8
 800301e:	60f8      	str	r0, [r7, #12]
 8003020:	60b9      	str	r1, [r7, #8]
 8003022:	603b      	str	r3, [r7, #0]
 8003024:	4613      	mov	r3, r2
 8003026:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003028:	2300      	movs	r3, #0
 800302a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003032:	b2db      	uxtb	r3, r3
 8003034:	2b20      	cmp	r3, #32
 8003036:	f040 8083 	bne.w	8003140 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_Transmit+0x2e>
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e07b      	b.n	8003142 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003050:	2b01      	cmp	r3, #1
 8003052:	d101      	bne.n	8003058 <HAL_UART_Transmit+0x40>
 8003054:	2302      	movs	r3, #2
 8003056:	e074      	b.n	8003142 <HAL_UART_Transmit+0x12a>
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2201      	movs	r2, #1
 800305c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2200      	movs	r2, #0
 8003064:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	2221      	movs	r2, #33	; 0x21
 800306a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800306e:	f7fd fcb1 	bl	80009d4 <HAL_GetTick>
 8003072:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	88fa      	ldrh	r2, [r7, #6]
 8003078:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	88fa      	ldrh	r2, [r7, #6]
 800307e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003080:	e042      	b.n	8003108 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003086:	b29b      	uxth	r3, r3
 8003088:	3b01      	subs	r3, #1
 800308a:	b29a      	uxth	r2, r3
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	689b      	ldr	r3, [r3, #8]
 8003094:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003098:	d122      	bne.n	80030e0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	9300      	str	r3, [sp, #0]
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	2200      	movs	r2, #0
 80030a2:	2180      	movs	r1, #128	; 0x80
 80030a4:	68f8      	ldr	r0, [r7, #12]
 80030a6:	f000 f968 	bl	800337a <UART_WaitOnFlagUntilTimeout>
 80030aa:	4603      	mov	r3, r0
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d001      	beq.n	80030b4 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 80030b0:	2303      	movs	r3, #3
 80030b2:	e046      	b.n	8003142 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 80030b8:	693b      	ldr	r3, [r7, #16]
 80030ba:	881b      	ldrh	r3, [r3, #0]
 80030bc:	461a      	mov	r2, r3
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030c6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	691b      	ldr	r3, [r3, #16]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d103      	bne.n	80030d8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3302      	adds	r3, #2
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	e017      	b.n	8003108 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	3301      	adds	r3, #1
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	e013      	b.n	8003108 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	9300      	str	r3, [sp, #0]
 80030e4:	697b      	ldr	r3, [r7, #20]
 80030e6:	2200      	movs	r2, #0
 80030e8:	2180      	movs	r1, #128	; 0x80
 80030ea:	68f8      	ldr	r0, [r7, #12]
 80030ec:	f000 f945 	bl	800337a <UART_WaitOnFlagUntilTimeout>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e023      	b.n	8003142 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030fa:	68bb      	ldr	r3, [r7, #8]
 80030fc:	1c5a      	adds	r2, r3, #1
 80030fe:	60ba      	str	r2, [r7, #8]
 8003100:	781a      	ldrb	r2, [r3, #0]
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800310c:	b29b      	uxth	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1b7      	bne.n	8003082 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	9300      	str	r3, [sp, #0]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2200      	movs	r2, #0
 800311a:	2140      	movs	r1, #64	; 0x40
 800311c:	68f8      	ldr	r0, [r7, #12]
 800311e:	f000 f92c 	bl	800337a <UART_WaitOnFlagUntilTimeout>
 8003122:	4603      	mov	r3, r0
 8003124:	2b00      	cmp	r3, #0
 8003126:	d001      	beq.n	800312c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e00a      	b.n	8003142 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2220      	movs	r2, #32
 8003130:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	e000      	b.n	8003142 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003140:	2302      	movs	r3, #2
  }
}
 8003142:	4618      	mov	r0, r3
 8003144:	3718      	adds	r7, #24
 8003146:	46bd      	mov	sp, r7
 8003148:	bd80      	pop	{r7, pc}
	...

0800314c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b088      	sub	sp, #32
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	68db      	ldr	r3, [r3, #12]
 8003162:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800316c:	2300      	movs	r3, #0
 800316e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003170:	2300      	movs	r3, #0
 8003172:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	f003 030f 	and.w	r3, r3, #15
 800317a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	f003 0320 	and.w	r3, r3, #32
 8003188:	2b00      	cmp	r3, #0
 800318a:	d008      	beq.n	800319e <HAL_UART_IRQHandler+0x52>
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d003      	beq.n	800319e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003196:	6878      	ldr	r0, [r7, #4]
 8003198:	f000 f9d7 	bl	800354a <UART_Receive_IT>
      return;
 800319c:	e0cc      	b.n	8003338 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f000 80ab 	beq.w	80032fc <HAL_UART_IRQHandler+0x1b0>
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_UART_IRQHandler+0x70>
 80031b0:	69bb      	ldr	r3, [r7, #24]
 80031b2:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 80a0 	beq.w	80032fc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0301 	and.w	r3, r3, #1
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_UART_IRQHandler+0x90>
 80031c6:	69bb      	ldr	r3, [r7, #24]
 80031c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	f043 0201 	orr.w	r2, r3, #1
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0304 	and.w	r3, r3, #4
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_UART_IRQHandler+0xb0>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	f043 0202 	orr.w	r2, r3, #2
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0302 	and.w	r3, r3, #2
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_UART_IRQHandler+0xd0>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	f043 0204 	orr.w	r2, r3, #4
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d00a      	beq.n	800323c <HAL_UART_IRQHandler+0xf0>
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	f003 0301 	and.w	r3, r3, #1
 800322c:	2b00      	cmp	r3, #0
 800322e:	d005      	beq.n	800323c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003234:	f043 0208 	orr.w	r2, r3, #8
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003240:	2b00      	cmp	r3, #0
 8003242:	d078      	beq.n	8003336 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	f003 0320 	and.w	r3, r3, #32
 800324a:	2b00      	cmp	r3, #0
 800324c:	d007      	beq.n	800325e <HAL_UART_IRQHandler+0x112>
 800324e:	69bb      	ldr	r3, [r7, #24]
 8003250:	f003 0320 	and.w	r3, r3, #32
 8003254:	2b00      	cmp	r3, #0
 8003256:	d002      	beq.n	800325e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f976 	bl	800354a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	695b      	ldr	r3, [r3, #20]
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	bf14      	ite	ne
 800326c:	2301      	movne	r3, #1
 800326e:	2300      	moveq	r3, #0
 8003270:	b2db      	uxtb	r3, r3
 8003272:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003278:	f003 0308 	and.w	r3, r3, #8
 800327c:	2b00      	cmp	r3, #0
 800327e:	d102      	bne.n	8003286 <HAL_UART_IRQHandler+0x13a>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d031      	beq.n	80032ea <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f8c1 	bl	800340e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	695b      	ldr	r3, [r3, #20]
 8003292:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003296:	2b00      	cmp	r3, #0
 8003298:	d023      	beq.n	80032e2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	695a      	ldr	r2, [r3, #20]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032a8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d013      	beq.n	80032da <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b6:	4a22      	ldr	r2, [pc, #136]	; (8003340 <HAL_UART_IRQHandler+0x1f4>)
 80032b8:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032be:	4618      	mov	r0, r3
 80032c0:	f7fd fcce 	bl	8000c60 <HAL_DMA_Abort_IT>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d016      	beq.n	80032f8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032d0:	687a      	ldr	r2, [r7, #4]
 80032d2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032d4:	4610      	mov	r0, r2
 80032d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	e00e      	b.n	80032f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 f844 	bl	8003368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e0:	e00a      	b.n	80032f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f000 f840 	bl	8003368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032e8:	e006      	b.n	80032f8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 f83c 	bl	8003368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032f6:	e01e      	b.n	8003336 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032f8:	bf00      	nop
    return;
 80032fa:	e01c      	b.n	8003336 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003302:	2b00      	cmp	r3, #0
 8003304:	d008      	beq.n	8003318 <HAL_UART_IRQHandler+0x1cc>
 8003306:	69bb      	ldr	r3, [r7, #24]
 8003308:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800330c:	2b00      	cmp	r3, #0
 800330e:	d003      	beq.n	8003318 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f000 f8ad 	bl	8003470 <UART_Transmit_IT>
    return;
 8003316:	e00f      	b.n	8003338 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003318:	69fb      	ldr	r3, [r7, #28]
 800331a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800331e:	2b00      	cmp	r3, #0
 8003320:	d00a      	beq.n	8003338 <HAL_UART_IRQHandler+0x1ec>
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 f8f4 	bl	800351a <UART_EndTransmit_IT>
    return;
 8003332:	bf00      	nop
 8003334:	e000      	b.n	8003338 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003336:	bf00      	nop
  }
}
 8003338:	3720      	adds	r7, #32
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	08003449 	.word	0x08003449

08003344 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003344:	b480      	push	{r7}
 8003346:	b083      	sub	sp, #12
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800334c:	bf00      	nop
 800334e:	370c      	adds	r7, #12
 8003350:	46bd      	mov	sp, r7
 8003352:	bc80      	pop	{r7}
 8003354:	4770      	bx	lr

08003356 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	bc80      	pop	{r7}
 8003366:	4770      	bx	lr

08003368 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003368:	b480      	push	{r7}
 800336a:	b083      	sub	sp, #12
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003370:	bf00      	nop
 8003372:	370c      	adds	r7, #12
 8003374:	46bd      	mov	sp, r7
 8003376:	bc80      	pop	{r7}
 8003378:	4770      	bx	lr

0800337a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800337a:	b580      	push	{r7, lr}
 800337c:	b084      	sub	sp, #16
 800337e:	af00      	add	r7, sp, #0
 8003380:	60f8      	str	r0, [r7, #12]
 8003382:	60b9      	str	r1, [r7, #8]
 8003384:	603b      	str	r3, [r7, #0]
 8003386:	4613      	mov	r3, r2
 8003388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338a:	e02c      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003392:	d028      	beq.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003394:	69bb      	ldr	r3, [r7, #24]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d007      	beq.n	80033aa <UART_WaitOnFlagUntilTimeout+0x30>
 800339a:	f7fd fb1b 	bl	80009d4 <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	69ba      	ldr	r2, [r7, #24]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d21d      	bcs.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68da      	ldr	r2, [r3, #12]
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033b8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	695a      	ldr	r2, [r3, #20]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f022 0201 	bic.w	r2, r2, #1
 80033c8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	2220      	movs	r2, #32
 80033ce:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2220      	movs	r2, #32
 80033d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e00f      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	681a      	ldr	r2, [r3, #0]
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	4013      	ands	r3, r2
 80033f0:	68ba      	ldr	r2, [r7, #8]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	bf0c      	ite	eq
 80033f6:	2301      	moveq	r3, #1
 80033f8:	2300      	movne	r3, #0
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	461a      	mov	r2, r3
 80033fe:	79fb      	ldrb	r3, [r7, #7]
 8003400:	429a      	cmp	r2, r3
 8003402:	d0c3      	beq.n	800338c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3710      	adds	r7, #16
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}

0800340e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	68da      	ldr	r2, [r3, #12]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003424:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	695a      	ldr	r2, [r3, #20]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f022 0201 	bic.w	r2, r2, #1
 8003434:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2220      	movs	r2, #32
 800343a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	bc80      	pop	{r7}
 8003446:	4770      	bx	lr

08003448 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003454:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	2200      	movs	r2, #0
 800345a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	2200      	movs	r2, #0
 8003460:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003462:	68f8      	ldr	r0, [r7, #12]
 8003464:	f7ff ff80 	bl	8003368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003468:	bf00      	nop
 800346a:	3710      	adds	r7, #16
 800346c:	46bd      	mov	sp, r7
 800346e:	bd80      	pop	{r7, pc}

08003470 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003470:	b480      	push	{r7}
 8003472:	b085      	sub	sp, #20
 8003474:	af00      	add	r7, sp, #0
 8003476:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b21      	cmp	r3, #33	; 0x21
 8003482:	d144      	bne.n	800350e <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800348c:	d11a      	bne.n	80034c4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
 8003492:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	881b      	ldrh	r3, [r3, #0]
 8003498:	461a      	mov	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80034a2:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d105      	bne.n	80034b8 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	1c9a      	adds	r2, r3, #2
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	621a      	str	r2, [r3, #32]
 80034b6:	e00e      	b.n	80034d6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	1c5a      	adds	r2, r3, #1
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	621a      	str	r2, [r3, #32]
 80034c2:	e008      	b.n	80034d6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	1c59      	adds	r1, r3, #1
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6211      	str	r1, [r2, #32]
 80034ce:	781a      	ldrb	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034da:	b29b      	uxth	r3, r3
 80034dc:	3b01      	subs	r3, #1
 80034de:	b29b      	uxth	r3, r3
 80034e0:	687a      	ldr	r2, [r7, #4]
 80034e2:	4619      	mov	r1, r3
 80034e4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d10f      	bne.n	800350a <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	68da      	ldr	r2, [r3, #12]
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034f8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68da      	ldr	r2, [r3, #12]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003508:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800350a:	2300      	movs	r3, #0
 800350c:	e000      	b.n	8003510 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 800350e:	2302      	movs	r3, #2
  }
}
 8003510:	4618      	mov	r0, r3
 8003512:	3714      	adds	r7, #20
 8003514:	46bd      	mov	sp, r7
 8003516:	bc80      	pop	{r7}
 8003518:	4770      	bx	lr

0800351a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800351a:	b580      	push	{r7, lr}
 800351c:	b082      	sub	sp, #8
 800351e:	af00      	add	r7, sp, #0
 8003520:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	68da      	ldr	r2, [r3, #12]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003530:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2220      	movs	r2, #32
 8003536:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f7ff ff02 	bl	8003344 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003540:	2300      	movs	r3, #0
}
 8003542:	4618      	mov	r0, r3
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}

0800354a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800354a:	b580      	push	{r7, lr}
 800354c:	b084      	sub	sp, #16
 800354e:	af00      	add	r7, sp, #0
 8003550:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b22      	cmp	r3, #34	; 0x22
 800355c:	d171      	bne.n	8003642 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003566:	d123      	bne.n	80035b0 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	691b      	ldr	r3, [r3, #16]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d10e      	bne.n	8003594 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	b29b      	uxth	r3, r3
 800357e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003582:	b29a      	uxth	r2, r3
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	1c9a      	adds	r2, r3, #2
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	629a      	str	r2, [r3, #40]	; 0x28
 8003592:	e029      	b.n	80035e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	b29b      	uxth	r3, r3
 800359c:	b2db      	uxtb	r3, r3
 800359e:	b29a      	uxth	r2, r3
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	1c5a      	adds	r2, r3, #1
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	629a      	str	r2, [r3, #40]	; 0x28
 80035ae:	e01b      	b.n	80035e8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d10a      	bne.n	80035ce <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	6858      	ldr	r0, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035c2:	1c59      	adds	r1, r3, #1
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	6291      	str	r1, [r2, #40]	; 0x28
 80035c8:	b2c2      	uxtb	r2, r0
 80035ca:	701a      	strb	r2, [r3, #0]
 80035cc:	e00c      	b.n	80035e8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	b2da      	uxtb	r2, r3
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035da:	1c58      	adds	r0, r3, #1
 80035dc:	6879      	ldr	r1, [r7, #4]
 80035de:	6288      	str	r0, [r1, #40]	; 0x28
 80035e0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035e4:	b2d2      	uxtb	r2, r2
 80035e6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	687a      	ldr	r2, [r7, #4]
 80035f4:	4619      	mov	r1, r3
 80035f6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d120      	bne.n	800363e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68da      	ldr	r2, [r3, #12]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0220 	bic.w	r2, r2, #32
 800360a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68da      	ldr	r2, [r3, #12]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800361a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	695a      	ldr	r2, [r3, #20]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2220      	movs	r2, #32
 8003630:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003634:	6878      	ldr	r0, [r7, #4]
 8003636:	f7ff fe8e 	bl	8003356 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800363a:	2300      	movs	r3, #0
 800363c:	e002      	b.n	8003644 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800363e:	2300      	movs	r3, #0
 8003640:	e000      	b.n	8003644 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003642:	2302      	movs	r3, #2
  }
}
 8003644:	4618      	mov	r0, r3
 8003646:	3710      	adds	r7, #16
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b084      	sub	sp, #16
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	4a84      	ldr	r2, [pc, #528]	; (800386c <UART_SetConfig+0x220>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d904      	bls.n	8003668 <UART_SetConfig+0x1c>
 800365e:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8003662:	4883      	ldr	r0, [pc, #524]	; (8003870 <UART_SetConfig+0x224>)
 8003664:	f7fc fe32 	bl	80002cc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d009      	beq.n	8003684 <UART_SetConfig+0x38>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003678:	d004      	beq.n	8003684 <UART_SetConfig+0x38>
 800367a:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800367e:	487c      	ldr	r0, [pc, #496]	; (8003870 <UART_SetConfig+0x224>)
 8003680:	f7fc fe24 	bl	80002cc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d00e      	beq.n	80036aa <UART_SetConfig+0x5e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	691b      	ldr	r3, [r3, #16]
 8003690:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003694:	d009      	beq.n	80036aa <UART_SetConfig+0x5e>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800369e:	d004      	beq.n	80036aa <UART_SetConfig+0x5e>
 80036a0:	f640 31ff 	movw	r1, #3071	; 0xbff
 80036a4:	4872      	ldr	r0, [pc, #456]	; (8003870 <UART_SetConfig+0x224>)
 80036a6:	f7fc fe11 	bl	80002cc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	695a      	ldr	r2, [r3, #20]
 80036ae:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80036b2:	4013      	ands	r3, r2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d103      	bne.n	80036c0 <UART_SetConfig+0x74>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	695b      	ldr	r3, [r3, #20]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d104      	bne.n	80036ca <UART_SetConfig+0x7e>
 80036c0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80036c4:	486a      	ldr	r0, [pc, #424]	; (8003870 <UART_SetConfig+0x224>)
 80036c6:	f7fc fe01 	bl	80002cc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	691b      	ldr	r3, [r3, #16]
 80036d0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68da      	ldr	r2, [r3, #12]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689a      	ldr	r2, [r3, #8]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	431a      	orrs	r2, r3
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	4313      	orrs	r3, r2
 80036f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	68db      	ldr	r3, [r3, #12]
 80036f8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036fc:	f023 030c 	bic.w	r3, r3, #12
 8003700:	687a      	ldr	r2, [r7, #4]
 8003702:	6812      	ldr	r2, [r2, #0]
 8003704:	68f9      	ldr	r1, [r7, #12]
 8003706:	430b      	orrs	r3, r1
 8003708:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	695b      	ldr	r3, [r3, #20]
 8003710:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	699a      	ldr	r2, [r3, #24]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	430a      	orrs	r2, r1
 800371e:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a53      	ldr	r2, [pc, #332]	; (8003874 <UART_SetConfig+0x228>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d14e      	bne.n	80037c8 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800372a:	f7fe fafb 	bl	8001d24 <HAL_RCC_GetPCLK2Freq>
 800372e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009a      	lsls	r2, r3, #2
 800373a:	441a      	add	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	fbb2 f3f3 	udiv	r3, r2, r3
 8003746:	4a4c      	ldr	r2, [pc, #304]	; (8003878 <UART_SetConfig+0x22c>)
 8003748:	fba2 2303 	umull	r2, r3, r2, r3
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	0119      	lsls	r1, r3, #4
 8003750:	68ba      	ldr	r2, [r7, #8]
 8003752:	4613      	mov	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	4413      	add	r3, r2
 8003758:	009a      	lsls	r2, r3, #2
 800375a:	441a      	add	r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	009b      	lsls	r3, r3, #2
 8003762:	fbb2 f2f3 	udiv	r2, r2, r3
 8003766:	4b44      	ldr	r3, [pc, #272]	; (8003878 <UART_SetConfig+0x22c>)
 8003768:	fba3 0302 	umull	r0, r3, r3, r2
 800376c:	095b      	lsrs	r3, r3, #5
 800376e:	2064      	movs	r0, #100	; 0x64
 8003770:	fb00 f303 	mul.w	r3, r0, r3
 8003774:	1ad3      	subs	r3, r2, r3
 8003776:	011b      	lsls	r3, r3, #4
 8003778:	3332      	adds	r3, #50	; 0x32
 800377a:	4a3f      	ldr	r2, [pc, #252]	; (8003878 <UART_SetConfig+0x22c>)
 800377c:	fba2 2303 	umull	r2, r3, r2, r3
 8003780:	095b      	lsrs	r3, r3, #5
 8003782:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003786:	4419      	add	r1, r3
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009a      	lsls	r2, r3, #2
 8003792:	441a      	add	r2, r3
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	009b      	lsls	r3, r3, #2
 800379a:	fbb2 f2f3 	udiv	r2, r2, r3
 800379e:	4b36      	ldr	r3, [pc, #216]	; (8003878 <UART_SetConfig+0x22c>)
 80037a0:	fba3 0302 	umull	r0, r3, r3, r2
 80037a4:	095b      	lsrs	r3, r3, #5
 80037a6:	2064      	movs	r0, #100	; 0x64
 80037a8:	fb00 f303 	mul.w	r3, r0, r3
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	011b      	lsls	r3, r3, #4
 80037b0:	3332      	adds	r3, #50	; 0x32
 80037b2:	4a31      	ldr	r2, [pc, #196]	; (8003878 <UART_SetConfig+0x22c>)
 80037b4:	fba2 2303 	umull	r2, r3, r2, r3
 80037b8:	095b      	lsrs	r3, r3, #5
 80037ba:	f003 020f 	and.w	r2, r3, #15
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	440a      	add	r2, r1
 80037c4:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80037c6:	e04d      	b.n	8003864 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80037c8:	f7fe fa98 	bl	8001cfc <HAL_RCC_GetPCLK1Freq>
 80037cc:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037e4:	4a24      	ldr	r2, [pc, #144]	; (8003878 <UART_SetConfig+0x22c>)
 80037e6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	0119      	lsls	r1, r3, #4
 80037ee:	68ba      	ldr	r2, [r7, #8]
 80037f0:	4613      	mov	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	009a      	lsls	r2, r3, #2
 80037f8:	441a      	add	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	009b      	lsls	r3, r3, #2
 8003800:	fbb2 f2f3 	udiv	r2, r2, r3
 8003804:	4b1c      	ldr	r3, [pc, #112]	; (8003878 <UART_SetConfig+0x22c>)
 8003806:	fba3 0302 	umull	r0, r3, r3, r2
 800380a:	095b      	lsrs	r3, r3, #5
 800380c:	2064      	movs	r0, #100	; 0x64
 800380e:	fb00 f303 	mul.w	r3, r0, r3
 8003812:	1ad3      	subs	r3, r2, r3
 8003814:	011b      	lsls	r3, r3, #4
 8003816:	3332      	adds	r3, #50	; 0x32
 8003818:	4a17      	ldr	r2, [pc, #92]	; (8003878 <UART_SetConfig+0x22c>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	095b      	lsrs	r3, r3, #5
 8003820:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003824:	4419      	add	r1, r3
 8003826:	68ba      	ldr	r2, [r7, #8]
 8003828:	4613      	mov	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	4413      	add	r3, r2
 800382e:	009a      	lsls	r2, r3, #2
 8003830:	441a      	add	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	fbb2 f2f3 	udiv	r2, r2, r3
 800383c:	4b0e      	ldr	r3, [pc, #56]	; (8003878 <UART_SetConfig+0x22c>)
 800383e:	fba3 0302 	umull	r0, r3, r3, r2
 8003842:	095b      	lsrs	r3, r3, #5
 8003844:	2064      	movs	r0, #100	; 0x64
 8003846:	fb00 f303 	mul.w	r3, r0, r3
 800384a:	1ad3      	subs	r3, r2, r3
 800384c:	011b      	lsls	r3, r3, #4
 800384e:	3332      	adds	r3, #50	; 0x32
 8003850:	4a09      	ldr	r2, [pc, #36]	; (8003878 <UART_SetConfig+0x22c>)
 8003852:	fba2 2303 	umull	r2, r3, r2, r3
 8003856:	095b      	lsrs	r3, r3, #5
 8003858:	f003 020f 	and.w	r2, r3, #15
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	440a      	add	r2, r1
 8003862:	609a      	str	r2, [r3, #8]
}
 8003864:	bf00      	nop
 8003866:	3710      	adds	r7, #16
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}
 800386c:	0044aa20 	.word	0x0044aa20
 8003870:	08004dac 	.word	0x08004dac
 8003874:	40013800 	.word	0x40013800
 8003878:	51eb851f 	.word	0x51eb851f

0800387c <rola_init>:
rola_t;

rola_t rola;

void rola_init(void)
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
	rola.out = 0u;
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <rola_init+0x18>)
 8003882:	2200      	movs	r2, #0
 8003884:	701a      	strb	r2, [r3, #0]
	rola.step = 0u;
 8003886:	4b03      	ldr	r3, [pc, #12]	; (8003894 <rola_init+0x18>)
 8003888:	2200      	movs	r2, #0
 800388a:	705a      	strb	r2, [r3, #1]
}
 800388c:	bf00      	nop
 800388e:	46bd      	mov	sp, r7
 8003890:	bc80      	pop	{r7}
 8003892:	4770      	bx	lr
 8003894:	20000170 	.word	0x20000170

08003898 <rola_task1ms>:

void rola_task1ms(void)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (rola.out&0x01u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800389c:	4b2f      	ldr	r3, [pc, #188]	; (800395c <rola_task1ms+0xc4>)
 800389e:	781b      	ldrb	r3, [r3, #0]
 80038a0:	f003 0301 	and.w	r3, r3, #1
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	461a      	mov	r2, r3
 80038a8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80038ac:	482c      	ldr	r0, [pc, #176]	; (8003960 <rola_task1ms+0xc8>)
 80038ae:	f7fd fc87 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (rola.out&0x02u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80038b2:	4b2a      	ldr	r3, [pc, #168]	; (800395c <rola_task1ms+0xc4>)
 80038b4:	781b      	ldrb	r3, [r3, #0]
 80038b6:	085b      	lsrs	r3, r3, #1
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	f003 0301 	and.w	r3, r3, #1
 80038be:	b2db      	uxtb	r3, r3
 80038c0:	461a      	mov	r2, r3
 80038c2:	2108      	movs	r1, #8
 80038c4:	4827      	ldr	r0, [pc, #156]	; (8003964 <rola_task1ms+0xcc>)
 80038c6:	f7fd fc7b 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (rola.out&0x04u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80038ca:	4b24      	ldr	r3, [pc, #144]	; (800395c <rola_task1ms+0xc4>)
 80038cc:	781b      	ldrb	r3, [r3, #0]
 80038ce:	089b      	lsrs	r3, r3, #2
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	461a      	mov	r2, r3
 80038da:	2110      	movs	r1, #16
 80038dc:	4821      	ldr	r0, [pc, #132]	; (8003964 <rola_task1ms+0xcc>)
 80038de:	f7fd fc6f 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (rola.out&0x08u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80038e2:	4b1e      	ldr	r3, [pc, #120]	; (800395c <rola_task1ms+0xc4>)
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	08db      	lsrs	r3, r3, #3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	f003 0301 	and.w	r3, r3, #1
 80038ee:	b2db      	uxtb	r3, r3
 80038f0:	461a      	mov	r2, r3
 80038f2:	2120      	movs	r1, #32
 80038f4:	481b      	ldr	r0, [pc, #108]	; (8003964 <rola_task1ms+0xcc>)
 80038f6:	f7fd fc63 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  (rola.out&0x10u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80038fa:	4b18      	ldr	r3, [pc, #96]	; (800395c <rola_task1ms+0xc4>)
 80038fc:	781b      	ldrb	r3, [r3, #0]
 80038fe:	091b      	lsrs	r3, r3, #4
 8003900:	b2db      	uxtb	r3, r3
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	2140      	movs	r1, #64	; 0x40
 800390c:	4815      	ldr	r0, [pc, #84]	; (8003964 <rola_task1ms+0xcc>)
 800390e:	f7fd fc57 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  (rola.out&0x20u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003912:	4b12      	ldr	r3, [pc, #72]	; (800395c <rola_task1ms+0xc4>)
 8003914:	781b      	ldrb	r3, [r3, #0]
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	b2db      	uxtb	r3, r3
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	b2db      	uxtb	r3, r3
 8003920:	461a      	mov	r2, r3
 8003922:	2180      	movs	r1, #128	; 0x80
 8003924:	480f      	ldr	r0, [pc, #60]	; (8003964 <rola_task1ms+0xcc>)
 8003926:	f7fd fc4b 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  (rola.out&0x40u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800392a:	4b0c      	ldr	r3, [pc, #48]	; (800395c <rola_task1ms+0xc4>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	099b      	lsrs	r3, r3, #6
 8003930:	b2db      	uxtb	r3, r3
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	461a      	mov	r2, r3
 800393a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800393e:	4809      	ldr	r0, [pc, #36]	; (8003964 <rola_task1ms+0xcc>)
 8003940:	f7fd fc3e 	bl	80011c0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  (rola.out&0x80u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003944:	4b05      	ldr	r3, [pc, #20]	; (800395c <rola_task1ms+0xc4>)
 8003946:	781b      	ldrb	r3, [r3, #0]
 8003948:	09db      	lsrs	r3, r3, #7
 800394a:	b2db      	uxtb	r3, r3
 800394c:	461a      	mov	r2, r3
 800394e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003952:	4804      	ldr	r0, [pc, #16]	; (8003964 <rola_task1ms+0xcc>)
 8003954:	f7fd fc34 	bl	80011c0 <HAL_GPIO_WritePin>
}
 8003958:	bf00      	nop
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000170 	.word	0x20000170
 8003960:	40010800 	.word	0x40010800
 8003964:	40010c00 	.word	0x40010c00

08003968 <rola_task>:

void rola_task(void)
{
 8003968:	b480      	push	{r7}
 800396a:	af00      	add	r7, sp, #0
	rola.step++;
 800396c:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <rola_task+0x38>)
 800396e:	785b      	ldrb	r3, [r3, #1]
 8003970:	3301      	adds	r3, #1
 8003972:	b2da      	uxtb	r2, r3
 8003974:	4b0a      	ldr	r3, [pc, #40]	; (80039a0 <rola_task+0x38>)
 8003976:	705a      	strb	r2, [r3, #1]
	rola.step &= 0x07;
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <rola_task+0x38>)
 800397a:	785b      	ldrb	r3, [r3, #1]
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4b07      	ldr	r3, [pc, #28]	; (80039a0 <rola_task+0x38>)
 8003984:	705a      	strb	r2, [r3, #1]
	rola.out = (0x01u << rola.step);
 8003986:	4b06      	ldr	r3, [pc, #24]	; (80039a0 <rola_task+0x38>)
 8003988:	785b      	ldrb	r3, [r3, #1]
 800398a:	461a      	mov	r2, r3
 800398c:	2301      	movs	r3, #1
 800398e:	4093      	lsls	r3, r2
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <rola_task+0x38>)
 8003994:	701a      	strb	r2, [r3, #0]
}
 8003996:	bf00      	nop
 8003998:	46bd      	mov	sp, r7
 800399a:	bc80      	pop	{r7}
 800399c:	4770      	bx	lr
 800399e:	bf00      	nop
 80039a0:	20000170 	.word	0x20000170

080039a4 <tapp_init>:
#include "BasicSoftware/TouchKey/touchkey.h"

uint32 cnt = 0u;

void tapp_init(void)
{
 80039a4:	b480      	push	{r7}
 80039a6:	af00      	add	r7, sp, #0
	cnt = 0u;
 80039a8:	4b03      	ldr	r3, [pc, #12]	; (80039b8 <tapp_init+0x14>)
 80039aa:	2200      	movs	r2, #0
 80039ac:	601a      	str	r2, [r3, #0]
}
 80039ae:	bf00      	nop
 80039b0:	46bd      	mov	sp, r7
 80039b2:	bc80      	pop	{r7}
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	20000090 	.word	0x20000090

080039bc <tapp_task>:

void tapp_task(void)
{
 80039bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80039c0:	b082      	sub	sp, #8
 80039c2:	af02      	add	r7, sp, #8
	cnt++;
 80039c4:	4b12      	ldr	r3, [pc, #72]	; (8003a10 <tapp_task+0x54>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	3301      	adds	r3, #1
 80039ca:	4a11      	ldr	r2, [pc, #68]	; (8003a10 <tapp_task+0x54>)
 80039cc:	6013      	str	r3, [r2, #0]

	/* test for touch key */
	printf("%u: %u, %u, %u, %u\r\n", (uint)cnt,
 80039ce:	4b10      	ldr	r3, [pc, #64]	; (8003a10 <tapp_task+0x54>)
 80039d0:	681c      	ldr	r4, [r3, #0]
			tkey_getTouchLevel(0), tkey_getTouchLevel(1), tkey_getTouchLevel(2), tkey_getTouchLevel(3));
 80039d2:	2000      	movs	r0, #0
 80039d4:	f000 f936 	bl	8003c44 <tkey_getTouchLevel>
 80039d8:	4603      	mov	r3, r0
	printf("%u: %u, %u, %u, %u\r\n", (uint)cnt,
 80039da:	461e      	mov	r6, r3
			tkey_getTouchLevel(0), tkey_getTouchLevel(1), tkey_getTouchLevel(2), tkey_getTouchLevel(3));
 80039dc:	2001      	movs	r0, #1
 80039de:	f000 f931 	bl	8003c44 <tkey_getTouchLevel>
 80039e2:	4603      	mov	r3, r0
	printf("%u: %u, %u, %u, %u\r\n", (uint)cnt,
 80039e4:	4698      	mov	r8, r3
			tkey_getTouchLevel(0), tkey_getTouchLevel(1), tkey_getTouchLevel(2), tkey_getTouchLevel(3));
 80039e6:	2002      	movs	r0, #2
 80039e8:	f000 f92c 	bl	8003c44 <tkey_getTouchLevel>
 80039ec:	4603      	mov	r3, r0
	printf("%u: %u, %u, %u, %u\r\n", (uint)cnt,
 80039ee:	461d      	mov	r5, r3
			tkey_getTouchLevel(0), tkey_getTouchLevel(1), tkey_getTouchLevel(2), tkey_getTouchLevel(3));
 80039f0:	2003      	movs	r0, #3
 80039f2:	f000 f927 	bl	8003c44 <tkey_getTouchLevel>
 80039f6:	4603      	mov	r3, r0
	printf("%u: %u, %u, %u, %u\r\n", (uint)cnt,
 80039f8:	9301      	str	r3, [sp, #4]
 80039fa:	9500      	str	r5, [sp, #0]
 80039fc:	4643      	mov	r3, r8
 80039fe:	4632      	mov	r2, r6
 8003a00:	4621      	mov	r1, r4
 8003a02:	4804      	ldr	r0, [pc, #16]	; (8003a14 <tapp_task+0x58>)
 8003a04:	f000 fa3c 	bl	8003e80 <iprintf>
	printf("%u: [%u] <%u> %u:%u:%u.%u\r\n", (uint)cnt,
			(uint)syti_getBaseTime(),
			(uint)systime.day,
			(uint)systime.hour, (uint)systime.minute, (uint)systime.second, (uint)systime.miniSec);
#endif
}
 8003a08:	bf00      	nop
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003a10:	20000090 	.word	0x20000090
 8003a14:	08004de8 	.word	0x08004de8

08003a18 <syti_init>:

systime_t systime = {0};
uint32 syti_baseTime = 0u;

void syti_init(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	af00      	add	r7, sp, #0
	syti_baseTime = 0u;
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <syti_init+0x30>)
 8003a1e:	2200      	movs	r2, #0
 8003a20:	601a      	str	r2, [r3, #0]
	systime.miniSec = 0u;
 8003a22:	4b0a      	ldr	r3, [pc, #40]	; (8003a4c <syti_init+0x34>)
 8003a24:	2200      	movs	r2, #0
 8003a26:	80da      	strh	r2, [r3, #6]
	systime.second = 0u;
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <syti_init+0x34>)
 8003a2a:	2200      	movs	r2, #0
 8003a2c:	711a      	strb	r2, [r3, #4]
	systime.minute = 0u;
 8003a2e:	4b07      	ldr	r3, [pc, #28]	; (8003a4c <syti_init+0x34>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	70da      	strb	r2, [r3, #3]
	systime.hour = 0u;
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <syti_init+0x34>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	709a      	strb	r2, [r3, #2]
	systime.day = 0u;
 8003a3a:	4b04      	ldr	r3, [pc, #16]	; (8003a4c <syti_init+0x34>)
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	801a      	strh	r2, [r3, #0]
}
 8003a40:	bf00      	nop
 8003a42:	46bd      	mov	sp, r7
 8003a44:	bc80      	pop	{r7}
 8003a46:	4770      	bx	lr
 8003a48:	2000009c 	.word	0x2000009c
 8003a4c:	20000094 	.word	0x20000094

08003a50 <syti_task>:

void syti_task(void)
{
 8003a50:	b480      	push	{r7}
 8003a52:	af00      	add	r7, sp, #0
	syti_baseTime++;
 8003a54:	4b24      	ldr	r3, [pc, #144]	; (8003ae8 <syti_task+0x98>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3301      	adds	r3, #1
 8003a5a:	4a23      	ldr	r2, [pc, #140]	; (8003ae8 <syti_task+0x98>)
 8003a5c:	6013      	str	r3, [r2, #0]
	systime.miniSec++;
 8003a5e:	4b23      	ldr	r3, [pc, #140]	; (8003aec <syti_task+0x9c>)
 8003a60:	88db      	ldrh	r3, [r3, #6]
 8003a62:	3301      	adds	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <syti_task+0x9c>)
 8003a68:	80da      	strh	r2, [r3, #6]
	if(systime.miniSec>=1000u)
 8003a6a:	4b20      	ldr	r3, [pc, #128]	; (8003aec <syti_task+0x9c>)
 8003a6c:	88db      	ldrh	r3, [r3, #6]
 8003a6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a72:	d335      	bcc.n	8003ae0 <syti_task+0x90>
	{
		systime.miniSec = 0u;
 8003a74:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <syti_task+0x9c>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	80da      	strh	r2, [r3, #6]
		systime.second++;
 8003a7a:	4b1c      	ldr	r3, [pc, #112]	; (8003aec <syti_task+0x9c>)
 8003a7c:	791b      	ldrb	r3, [r3, #4]
 8003a7e:	3301      	adds	r3, #1
 8003a80:	b2da      	uxtb	r2, r3
 8003a82:	4b1a      	ldr	r3, [pc, #104]	; (8003aec <syti_task+0x9c>)
 8003a84:	711a      	strb	r2, [r3, #4]
		if(systime.second>=60u)
 8003a86:	4b19      	ldr	r3, [pc, #100]	; (8003aec <syti_task+0x9c>)
 8003a88:	791b      	ldrb	r3, [r3, #4]
 8003a8a:	2b3b      	cmp	r3, #59	; 0x3b
 8003a8c:	d928      	bls.n	8003ae0 <syti_task+0x90>
		{
			systime.second = 0u;
 8003a8e:	4b17      	ldr	r3, [pc, #92]	; (8003aec <syti_task+0x9c>)
 8003a90:	2200      	movs	r2, #0
 8003a92:	711a      	strb	r2, [r3, #4]
			systime.minute++;
 8003a94:	4b15      	ldr	r3, [pc, #84]	; (8003aec <syti_task+0x9c>)
 8003a96:	78db      	ldrb	r3, [r3, #3]
 8003a98:	3301      	adds	r3, #1
 8003a9a:	b2da      	uxtb	r2, r3
 8003a9c:	4b13      	ldr	r3, [pc, #76]	; (8003aec <syti_task+0x9c>)
 8003a9e:	70da      	strb	r2, [r3, #3]
			if(systime.minute>=60u)
 8003aa0:	4b12      	ldr	r3, [pc, #72]	; (8003aec <syti_task+0x9c>)
 8003aa2:	78db      	ldrb	r3, [r3, #3]
 8003aa4:	2b3b      	cmp	r3, #59	; 0x3b
 8003aa6:	d91b      	bls.n	8003ae0 <syti_task+0x90>
			{
				systime.minute = 0u;
 8003aa8:	4b10      	ldr	r3, [pc, #64]	; (8003aec <syti_task+0x9c>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	70da      	strb	r2, [r3, #3]
				systime.hour++;
 8003aae:	4b0f      	ldr	r3, [pc, #60]	; (8003aec <syti_task+0x9c>)
 8003ab0:	789b      	ldrb	r3, [r3, #2]
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	b2da      	uxtb	r2, r3
 8003ab6:	4b0d      	ldr	r3, [pc, #52]	; (8003aec <syti_task+0x9c>)
 8003ab8:	709a      	strb	r2, [r3, #2]
				if(systime.hour>=24u)
 8003aba:	4b0c      	ldr	r3, [pc, #48]	; (8003aec <syti_task+0x9c>)
 8003abc:	789b      	ldrb	r3, [r3, #2]
 8003abe:	2b17      	cmp	r3, #23
 8003ac0:	d90e      	bls.n	8003ae0 <syti_task+0x90>
				{
					systime.hour = 0u;
 8003ac2:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <syti_task+0x9c>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	709a      	strb	r2, [r3, #2]
					if(systime.day<0xFFFF)
 8003ac8:	4b08      	ldr	r3, [pc, #32]	; (8003aec <syti_task+0x9c>)
 8003aca:	881b      	ldrh	r3, [r3, #0]
 8003acc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d005      	beq.n	8003ae0 <syti_task+0x90>
					{
						systime.day++;
 8003ad4:	4b05      	ldr	r3, [pc, #20]	; (8003aec <syti_task+0x9c>)
 8003ad6:	881b      	ldrh	r3, [r3, #0]
 8003ad8:	3301      	adds	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	4b03      	ldr	r3, [pc, #12]	; (8003aec <syti_task+0x9c>)
 8003ade:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8003ae0:	bf00      	nop
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	bc80      	pop	{r7}
 8003ae6:	4770      	bx	lr
 8003ae8:	2000009c 	.word	0x2000009c
 8003aec:	20000094 	.word	0x20000094

08003af0 <tkey_init>:
touchkey_t;

touchkey_t tkey;

void tkey_init(void)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b084      	sub	sp, #16
 8003af4:	af00      	add	r7, sp, #0
	tkey.cycle = 0u;
 8003af6:	4b1b      	ldr	r3, [pc, #108]	; (8003b64 <tkey_init+0x74>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]

	/* output low at beginning */
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003afc:	463b      	mov	r3, r7
 8003afe:	2200      	movs	r2, #0
 8003b00:	601a      	str	r2, [r3, #0]
 8003b02:	605a      	str	r2, [r3, #4]
 8003b04:	609a      	str	r2, [r3, #8]
 8003b06:	60da      	str	r2, [r3, #12]
		/* PA2, PA3 */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003b08:	2200      	movs	r2, #0
 8003b0a:	210c      	movs	r1, #12
 8003b0c:	4816      	ldr	r0, [pc, #88]	; (8003b68 <tkey_init+0x78>)
 8003b0e:	f7fd fb57 	bl	80011c0 <HAL_GPIO_WritePin>
	    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003b12:	230c      	movs	r3, #12
 8003b14:	603b      	str	r3, [r7, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003b16:	2311      	movs	r3, #17
 8003b18:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b1e:	2302      	movs	r3, #2
 8003b20:	60fb      	str	r3, [r7, #12]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b22:	463b      	mov	r3, r7
 8003b24:	4619      	mov	r1, r3
 8003b26:	4810      	ldr	r0, [pc, #64]	; (8003b68 <tkey_init+0x78>)
 8003b28:	f7fd f910 	bl	8000d4c <HAL_GPIO_Init>
	    /* PB0, PB1 */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	2103      	movs	r1, #3
 8003b30:	480e      	ldr	r0, [pc, #56]	; (8003b6c <tkey_init+0x7c>)
 8003b32:	f7fd fb45 	bl	80011c0 <HAL_GPIO_WritePin>
	    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003b36:	2303      	movs	r3, #3
 8003b38:	603b      	str	r3, [r7, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003b3a:	2311      	movs	r3, #17
 8003b3c:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b42:	2302      	movs	r3, #2
 8003b44:	60fb      	str	r3, [r7, #12]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b46:	463b      	mov	r3, r7
 8003b48:	4619      	mov	r1, r3
 8003b4a:	4808      	ldr	r0, [pc, #32]	; (8003b6c <tkey_init+0x7c>)
 8003b4c:	f7fd f8fe 	bl	8000d4c <HAL_GPIO_Init>
	}

	/* start timers */
	HAL_TIM_Base_Start(&htim2);
 8003b50:	4807      	ldr	r0, [pc, #28]	; (8003b70 <tkey_init+0x80>)
 8003b52:	f7fe f99f 	bl	8001e94 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8003b56:	4807      	ldr	r0, [pc, #28]	; (8003b74 <tkey_init+0x84>)
 8003b58:	f7fe f99c 	bl	8001e94 <HAL_TIM_Base_Start>
}
 8003b5c:	bf00      	nop
 8003b5e:	3710      	adds	r7, #16
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bd80      	pop	{r7, pc}
 8003b64:	20000174 	.word	0x20000174
 8003b68:	40010800 	.word	0x40010800
 8003b6c:	40010c00 	.word	0x40010c00
 8003b70:	200000ec 	.word	0x200000ec
 8003b74:	200000ac 	.word	0x200000ac

08003b78 <tkey_task>:

void tkey_task(void)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	af00      	add	r7, sp, #0
	switch(tkey.cycle)
 8003b7c:	4b2c      	ldr	r3, [pc, #176]	; (8003c30 <tkey_task+0xb8>)
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d002      	beq.n	8003b8a <tkey_task+0x12>
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	d026      	beq.n	8003bd6 <tkey_task+0x5e>
 8003b88:	e04b      	b.n	8003c22 <tkey_task+0xaa>
	{
		case	0:	// start new
			/* T23, PA2 */
			/* T24, PA3 */
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003b8a:	4b2a      	ldr	r3, [pc, #168]	; (8003c34 <tkey_task+0xbc>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2200      	movs	r2, #0
 8003b90:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_3);
 8003b92:	2108      	movs	r1, #8
 8003b94:	4827      	ldr	r0, [pc, #156]	; (8003c34 <tkey_task+0xbc>)
 8003b96:	f7fe fa51 	bl	800203c <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_4);
 8003b9a:	210c      	movs	r1, #12
 8003b9c:	4825      	ldr	r0, [pc, #148]	; (8003c34 <tkey_task+0xbc>)
 8003b9e:	f7fe fa4d 	bl	800203c <HAL_TIM_IC_Start>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	210c      	movs	r1, #12
 8003ba6:	4824      	ldr	r0, [pc, #144]	; (8003c38 <tkey_task+0xc0>)
 8003ba8:	f7fd fb0a 	bl	80011c0 <HAL_GPIO_WritePin>
			/* T33, PB0 */
			/* T34, PB1 */
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003bac:	4b23      	ldr	r3, [pc, #140]	; (8003c3c <tkey_task+0xc4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_3);
 8003bb4:	2108      	movs	r1, #8
 8003bb6:	4821      	ldr	r0, [pc, #132]	; (8003c3c <tkey_task+0xc4>)
 8003bb8:	f7fe fa40 	bl	800203c <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_4);
 8003bbc:	210c      	movs	r1, #12
 8003bbe:	481f      	ldr	r0, [pc, #124]	; (8003c3c <tkey_task+0xc4>)
 8003bc0:	f7fe fa3c 	bl	800203c <HAL_TIM_IC_Start>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8003bc4:	2201      	movs	r2, #1
 8003bc6:	2103      	movs	r1, #3
 8003bc8:	481d      	ldr	r0, [pc, #116]	; (8003c40 <tkey_task+0xc8>)
 8003bca:	f7fd faf9 	bl	80011c0 <HAL_GPIO_WritePin>
			/* next */
			tkey.cycle = 1;
 8003bce:	4b18      	ldr	r3, [pc, #96]	; (8003c30 <tkey_task+0xb8>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
			break;
 8003bd4:	e029      	b.n	8003c2a <tkey_task+0xb2>
		case	1:	// get result & next
			/* store result */
			tkey.result[0] = __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_3);
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <tkey_task+0xbc>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bdc:	b29a      	uxth	r2, r3
 8003bde:	4b14      	ldr	r3, [pc, #80]	; (8003c30 <tkey_task+0xb8>)
 8003be0:	805a      	strh	r2, [r3, #2]
			tkey.result[1] = __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_4);
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <tkey_task+0xbc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be8:	b29a      	uxth	r2, r3
 8003bea:	4b11      	ldr	r3, [pc, #68]	; (8003c30 <tkey_task+0xb8>)
 8003bec:	809a      	strh	r2, [r3, #4]
			tkey.result[2] = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_3);
 8003bee:	4b13      	ldr	r3, [pc, #76]	; (8003c3c <tkey_task+0xc4>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bf4:	b29a      	uxth	r2, r3
 8003bf6:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <tkey_task+0xb8>)
 8003bf8:	80da      	strh	r2, [r3, #6]
			tkey.result[3] = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_4);
 8003bfa:	4b10      	ldr	r3, [pc, #64]	; (8003c3c <tkey_task+0xc4>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	4b0b      	ldr	r3, [pc, #44]	; (8003c30 <tkey_task+0xb8>)
 8003c04:	811a      	strh	r2, [r3, #8]
			/* reset capacitor */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003c06:	2200      	movs	r2, #0
 8003c08:	210c      	movs	r1, #12
 8003c0a:	480b      	ldr	r0, [pc, #44]	; (8003c38 <tkey_task+0xc0>)
 8003c0c:	f7fd fad8 	bl	80011c0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003c10:	2200      	movs	r2, #0
 8003c12:	2103      	movs	r1, #3
 8003c14:	480a      	ldr	r0, [pc, #40]	; (8003c40 <tkey_task+0xc8>)
 8003c16:	f7fd fad3 	bl	80011c0 <HAL_GPIO_WritePin>
			/* next */
			tkey.cycle = 0;
 8003c1a:	4b05      	ldr	r3, [pc, #20]	; (8003c30 <tkey_task+0xb8>)
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	701a      	strb	r2, [r3, #0]
			break;
 8003c20:	e003      	b.n	8003c2a <tkey_task+0xb2>
		default:
			/* next */
			tkey.cycle = 0;
 8003c22:	4b03      	ldr	r3, [pc, #12]	; (8003c30 <tkey_task+0xb8>)
 8003c24:	2200      	movs	r2, #0
 8003c26:	701a      	strb	r2, [r3, #0]
			break;
 8003c28:	bf00      	nop
	}
}
 8003c2a:	bf00      	nop
 8003c2c:	bd80      	pop	{r7, pc}
 8003c2e:	bf00      	nop
 8003c30:	20000174 	.word	0x20000174
 8003c34:	200000ec 	.word	0x200000ec
 8003c38:	40010800 	.word	0x40010800
 8003c3c:	200000ac 	.word	0x200000ac
 8003c40:	40010c00 	.word	0x40010c00

08003c44 <tkey_getTouchLevel>:

uint16 tkey_getTouchLevel(uint8 keyIndex)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	71fb      	strb	r3, [r7, #7]
	return tkey.result[keyIndex];
 8003c4e:	79fb      	ldrb	r3, [r7, #7]
 8003c50:	4a04      	ldr	r2, [pc, #16]	; (8003c64 <tkey_getTouchLevel+0x20>)
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	4413      	add	r3, r2
 8003c56:	885b      	ldrh	r3, [r3, #2]
}
 8003c58:	4618      	mov	r0, r3
 8003c5a:	370c      	adds	r7, #12
 8003c5c:	46bd      	mov	sp, r7
 8003c5e:	bc80      	pop	{r7}
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop
 8003c64:	20000174 	.word	0x20000174

08003c68 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b084      	sub	sp, #16
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
	uint8 txdata = ch;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	b2db      	uxtb	r3, r3
 8003c74:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &txdata, 1, 72000);
 8003c76:	f107 010f 	add.w	r1, r7, #15
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <__io_putchar+0x28>)
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	4805      	ldr	r0, [pc, #20]	; (8003c94 <__io_putchar+0x2c>)
 8003c80:	f7ff f9ca 	bl	8003018 <HAL_UART_Transmit>
	return ch;
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3710      	adds	r7, #16
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	00011940 	.word	0x00011940
 8003c94:	2000012c 	.word	0x2000012c

08003c98 <task_init>:
#include "BasicSoftware/TouchKey/touchkey.h"
#include "ApplicationSoftware/RotateLamp/rotatelamp.h"
#include "ApplicationSoftware/TestApp/testapp.h"

void task_init(void)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	af00      	add	r7, sp, #0
	syti_init();
 8003c9c:	f7ff febc 	bl	8003a18 <syti_init>
	rola_init();
 8003ca0:	f7ff fdec 	bl	800387c <rola_init>
	tkey_init();
 8003ca4:	f7ff ff24 	bl	8003af0 <tkey_init>
	// app
	tapp_init();
 8003ca8:	f7ff fe7c 	bl	80039a4 <tapp_init>
}
 8003cac:	bf00      	nop
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <task_2pow0>:

void task_2pow0(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
	syti_task();
 8003cb4:	f7ff fecc 	bl	8003a50 <syti_task>
	rola_task1ms();
 8003cb8:	f7ff fdee 	bl	8003898 <rola_task1ms>
}
 8003cbc:	bf00      	nop
 8003cbe:	bd80      	pop	{r7, pc}

08003cc0 <task_2pow1>:

void task_2pow1(void)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	af00      	add	r7, sp, #0
}
 8003cc4:	bf00      	nop
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr

08003ccc <task_2pow2>:

void task_2pow2(void)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	af00      	add	r7, sp, #0
}
 8003cd0:	bf00      	nop
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr

08003cd8 <task_2pow3>:

void task_2pow3(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
}
 8003cdc:	bf00      	nop
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	bc80      	pop	{r7}
 8003ce2:	4770      	bx	lr

08003ce4 <task_2pow4>:

void task_2pow4(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bc80      	pop	{r7}
 8003cee:	4770      	bx	lr

08003cf0 <task_2pow5>:

void task_2pow5(void)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	af00      	add	r7, sp, #0
}
 8003cf4:	bf00      	nop
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <task_2pow6>:

void task_2pow6(void)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	af00      	add	r7, sp, #0
	rola_task();
 8003d00:	f7ff fe32 	bl	8003968 <rola_task>
}
 8003d04:	bf00      	nop
 8003d06:	bd80      	pop	{r7, pc}

08003d08 <task_2pow7>:

void task_2pow7(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
	tkey_task();
 8003d0c:	f7ff ff34 	bl	8003b78 <tkey_task>
}
 8003d10:	bf00      	nop
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <task_2pow8>:

void task_2pow8(void)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	af00      	add	r7, sp, #0
	tapp_task();
 8003d18:	f7ff fe50 	bl	80039bc <tapp_task>
}
 8003d1c:	bf00      	nop
 8003d1e:	bd80      	pop	{r7, pc}

08003d20 <scheduler_init>:
scheduler_t;

static scheduler_t scheduler;

void scheduler_init(void)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	af00      	add	r7, sp, #0
	scheduler.input.tick = 0u;
 8003d24:	4b06      	ldr	r3, [pc, #24]	; (8003d40 <scheduler_init+0x20>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
	scheduler.local.tick = 0u;
 8003d2a:	4b05      	ldr	r3, [pc, #20]	; (8003d40 <scheduler_init+0x20>)
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	705a      	strb	r2, [r3, #1]
	scheduler.local.count = 0u;
 8003d30:	4b03      	ldr	r3, [pc, #12]	; (8003d40 <scheduler_init+0x20>)
 8003d32:	2200      	movs	r2, #0
 8003d34:	709a      	strb	r2, [r3, #2]

	task_init();
 8003d36:	f7ff ffaf 	bl	8003c98 <task_init>
}
 8003d3a:	bf00      	nop
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	bf00      	nop
 8003d40:	200000a0 	.word	0x200000a0

08003d44 <scheduler_main>:

void scheduler_main(void)
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	af00      	add	r7, sp, #0
	for(;;)
	{
		if( scheduler.local.tick != scheduler.input.tick )
 8003d48:	4b2c      	ldr	r3, [pc, #176]	; (8003dfc <scheduler_main+0xb8>)
 8003d4a:	785a      	ldrb	r2, [r3, #1]
 8003d4c:	4b2b      	ldr	r3, [pc, #172]	; (8003dfc <scheduler_main+0xb8>)
 8003d4e:	781b      	ldrb	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d0f9      	beq.n	8003d48 <scheduler_main+0x4>
		{
			/* sync */
			scheduler.local.tick = scheduler.input.tick;
 8003d54:	4b29      	ldr	r3, [pc, #164]	; (8003dfc <scheduler_main+0xb8>)
 8003d56:	781a      	ldrb	r2, [r3, #0]
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <scheduler_main+0xb8>)
 8003d5a:	705a      	strb	r2, [r3, #1]

			/* schedule tasks */
			                                      task_2pow0();
 8003d5c:	f7ff ffa8 	bl	8003cb0 <task_2pow0>
			if( scheduler.local.count&0x01 )      task_2pow1();
 8003d60:	4b26      	ldr	r3, [pc, #152]	; (8003dfc <scheduler_main+0xb8>)
 8003d62:	789b      	ldrb	r3, [r3, #2]
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d002      	beq.n	8003d72 <scheduler_main+0x2e>
 8003d6c:	f7ff ffa8 	bl	8003cc0 <task_2pow1>
 8003d70:	e03c      	b.n	8003dec <scheduler_main+0xa8>
			else if( scheduler.local.count&0x02 ) task_2pow2();
 8003d72:	4b22      	ldr	r3, [pc, #136]	; (8003dfc <scheduler_main+0xb8>)
 8003d74:	789b      	ldrb	r3, [r3, #2]
 8003d76:	f003 0302 	and.w	r3, r3, #2
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d002      	beq.n	8003d84 <scheduler_main+0x40>
 8003d7e:	f7ff ffa5 	bl	8003ccc <task_2pow2>
 8003d82:	e033      	b.n	8003dec <scheduler_main+0xa8>
			else if( scheduler.local.count&0x04 ) task_2pow3();
 8003d84:	4b1d      	ldr	r3, [pc, #116]	; (8003dfc <scheduler_main+0xb8>)
 8003d86:	789b      	ldrb	r3, [r3, #2]
 8003d88:	f003 0304 	and.w	r3, r3, #4
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d002      	beq.n	8003d96 <scheduler_main+0x52>
 8003d90:	f7ff ffa2 	bl	8003cd8 <task_2pow3>
 8003d94:	e02a      	b.n	8003dec <scheduler_main+0xa8>
			else if( scheduler.local.count&0x08 ) task_2pow4();
 8003d96:	4b19      	ldr	r3, [pc, #100]	; (8003dfc <scheduler_main+0xb8>)
 8003d98:	789b      	ldrb	r3, [r3, #2]
 8003d9a:	f003 0308 	and.w	r3, r3, #8
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <scheduler_main+0x64>
 8003da2:	f7ff ff9f 	bl	8003ce4 <task_2pow4>
 8003da6:	e021      	b.n	8003dec <scheduler_main+0xa8>
			else if( scheduler.local.count&0x10 ) task_2pow5();
 8003da8:	4b14      	ldr	r3, [pc, #80]	; (8003dfc <scheduler_main+0xb8>)
 8003daa:	789b      	ldrb	r3, [r3, #2]
 8003dac:	f003 0310 	and.w	r3, r3, #16
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d002      	beq.n	8003dba <scheduler_main+0x76>
 8003db4:	f7ff ff9c 	bl	8003cf0 <task_2pow5>
 8003db8:	e018      	b.n	8003dec <scheduler_main+0xa8>
			else if( scheduler.local.count&0x20 ) task_2pow6();
 8003dba:	4b10      	ldr	r3, [pc, #64]	; (8003dfc <scheduler_main+0xb8>)
 8003dbc:	789b      	ldrb	r3, [r3, #2]
 8003dbe:	f003 0320 	and.w	r3, r3, #32
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d002      	beq.n	8003dcc <scheduler_main+0x88>
 8003dc6:	f7ff ff99 	bl	8003cfc <task_2pow6>
 8003dca:	e00f      	b.n	8003dec <scheduler_main+0xa8>
			else if( scheduler.local.count&0x40 ) task_2pow7();
 8003dcc:	4b0b      	ldr	r3, [pc, #44]	; (8003dfc <scheduler_main+0xb8>)
 8003dce:	789b      	ldrb	r3, [r3, #2]
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d002      	beq.n	8003dde <scheduler_main+0x9a>
 8003dd8:	f7ff ff96 	bl	8003d08 <task_2pow7>
 8003ddc:	e006      	b.n	8003dec <scheduler_main+0xa8>
			else if( scheduler.local.count&0x80 ) task_2pow8();
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <scheduler_main+0xb8>)
 8003de0:	789b      	ldrb	r3, [r3, #2]
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	da01      	bge.n	8003dec <scheduler_main+0xa8>
 8003de8:	f7ff ff94 	bl	8003d14 <task_2pow8>
			else ;

			/* count up */
			scheduler.local.count++;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <scheduler_main+0xb8>)
 8003dee:	789b      	ldrb	r3, [r3, #2]
 8003df0:	3301      	adds	r3, #1
 8003df2:	b2da      	uxtb	r2, r3
 8003df4:	4b01      	ldr	r3, [pc, #4]	; (8003dfc <scheduler_main+0xb8>)
 8003df6:	709a      	strb	r2, [r3, #2]
		if( scheduler.local.tick != scheduler.input.tick )
 8003df8:	e7a6      	b.n	8003d48 <scheduler_main+0x4>
 8003dfa:	bf00      	nop
 8003dfc:	200000a0 	.word	0x200000a0

08003e00 <scheduler_ei_tickUp_ISR>:
		}
	}
}

void scheduler_ei_tickUp_ISR(void)
{
 8003e00:	b480      	push	{r7}
 8003e02:	af00      	add	r7, sp, #0
	scheduler.input.tick++;
 8003e04:	4b04      	ldr	r3, [pc, #16]	; (8003e18 <scheduler_ei_tickUp_ISR+0x18>)
 8003e06:	781b      	ldrb	r3, [r3, #0]
 8003e08:	3301      	adds	r3, #1
 8003e0a:	b2da      	uxtb	r2, r3
 8003e0c:	4b02      	ldr	r3, [pc, #8]	; (8003e18 <scheduler_ei_tickUp_ISR+0x18>)
 8003e0e:	701a      	strb	r2, [r3, #0]
}
 8003e10:	bf00      	nop
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bc80      	pop	{r7}
 8003e16:	4770      	bx	lr
 8003e18:	200000a0 	.word	0x200000a0

08003e1c <__errno>:
 8003e1c:	4b01      	ldr	r3, [pc, #4]	; (8003e24 <__errno+0x8>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	2000000c 	.word	0x2000000c

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	2500      	movs	r5, #0
 8003e2c:	4e0c      	ldr	r6, [pc, #48]	; (8003e60 <__libc_init_array+0x38>)
 8003e2e:	4c0d      	ldr	r4, [pc, #52]	; (8003e64 <__libc_init_array+0x3c>)
 8003e30:	1ba4      	subs	r4, r4, r6
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	42a5      	cmp	r5, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	f000 ff10 	bl	8004c5c <_init>
 8003e3c:	2500      	movs	r5, #0
 8003e3e:	4e0a      	ldr	r6, [pc, #40]	; (8003e68 <__libc_init_array+0x40>)
 8003e40:	4c0a      	ldr	r4, [pc, #40]	; (8003e6c <__libc_init_array+0x44>)
 8003e42:	1ba4      	subs	r4, r4, r6
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	42a5      	cmp	r5, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e50:	4798      	blx	r3
 8003e52:	3501      	adds	r5, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e5a:	4798      	blx	r3
 8003e5c:	3501      	adds	r5, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	08004eb0 	.word	0x08004eb0
 8003e64:	08004eb0 	.word	0x08004eb0
 8003e68:	08004eb0 	.word	0x08004eb0
 8003e6c:	08004eb4 	.word	0x08004eb4

08003e70 <memset>:
 8003e70:	4603      	mov	r3, r0
 8003e72:	4402      	add	r2, r0
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d100      	bne.n	8003e7a <memset+0xa>
 8003e78:	4770      	bx	lr
 8003e7a:	f803 1b01 	strb.w	r1, [r3], #1
 8003e7e:	e7f9      	b.n	8003e74 <memset+0x4>

08003e80 <iprintf>:
 8003e80:	b40f      	push	{r0, r1, r2, r3}
 8003e82:	4b0a      	ldr	r3, [pc, #40]	; (8003eac <iprintf+0x2c>)
 8003e84:	b513      	push	{r0, r1, r4, lr}
 8003e86:	681c      	ldr	r4, [r3, #0]
 8003e88:	b124      	cbz	r4, 8003e94 <iprintf+0x14>
 8003e8a:	69a3      	ldr	r3, [r4, #24]
 8003e8c:	b913      	cbnz	r3, 8003e94 <iprintf+0x14>
 8003e8e:	4620      	mov	r0, r4
 8003e90:	f000 f84e 	bl	8003f30 <__sinit>
 8003e94:	ab05      	add	r3, sp, #20
 8003e96:	9a04      	ldr	r2, [sp, #16]
 8003e98:	68a1      	ldr	r1, [r4, #8]
 8003e9a:	4620      	mov	r0, r4
 8003e9c:	9301      	str	r3, [sp, #4]
 8003e9e:	f000 f953 	bl	8004148 <_vfiprintf_r>
 8003ea2:	b002      	add	sp, #8
 8003ea4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003ea8:	b004      	add	sp, #16
 8003eaa:	4770      	bx	lr
 8003eac:	2000000c 	.word	0x2000000c

08003eb0 <std>:
 8003eb0:	2300      	movs	r3, #0
 8003eb2:	b510      	push	{r4, lr}
 8003eb4:	4604      	mov	r4, r0
 8003eb6:	e9c0 3300 	strd	r3, r3, [r0]
 8003eba:	6083      	str	r3, [r0, #8]
 8003ebc:	8181      	strh	r1, [r0, #12]
 8003ebe:	6643      	str	r3, [r0, #100]	; 0x64
 8003ec0:	81c2      	strh	r2, [r0, #14]
 8003ec2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ec6:	6183      	str	r3, [r0, #24]
 8003ec8:	4619      	mov	r1, r3
 8003eca:	2208      	movs	r2, #8
 8003ecc:	305c      	adds	r0, #92	; 0x5c
 8003ece:	f7ff ffcf 	bl	8003e70 <memset>
 8003ed2:	4b05      	ldr	r3, [pc, #20]	; (8003ee8 <std+0x38>)
 8003ed4:	6224      	str	r4, [r4, #32]
 8003ed6:	6263      	str	r3, [r4, #36]	; 0x24
 8003ed8:	4b04      	ldr	r3, [pc, #16]	; (8003eec <std+0x3c>)
 8003eda:	62a3      	str	r3, [r4, #40]	; 0x28
 8003edc:	4b04      	ldr	r3, [pc, #16]	; (8003ef0 <std+0x40>)
 8003ede:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003ee0:	4b04      	ldr	r3, [pc, #16]	; (8003ef4 <std+0x44>)
 8003ee2:	6323      	str	r3, [r4, #48]	; 0x30
 8003ee4:	bd10      	pop	{r4, pc}
 8003ee6:	bf00      	nop
 8003ee8:	080046a5 	.word	0x080046a5
 8003eec:	080046c7 	.word	0x080046c7
 8003ef0:	080046ff 	.word	0x080046ff
 8003ef4:	08004723 	.word	0x08004723

08003ef8 <_cleanup_r>:
 8003ef8:	4901      	ldr	r1, [pc, #4]	; (8003f00 <_cleanup_r+0x8>)
 8003efa:	f000 b885 	b.w	8004008 <_fwalk_reent>
 8003efe:	bf00      	nop
 8003f00:	080049fd 	.word	0x080049fd

08003f04 <__sfmoreglue>:
 8003f04:	b570      	push	{r4, r5, r6, lr}
 8003f06:	2568      	movs	r5, #104	; 0x68
 8003f08:	1e4a      	subs	r2, r1, #1
 8003f0a:	4355      	muls	r5, r2
 8003f0c:	460e      	mov	r6, r1
 8003f0e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003f12:	f000 f897 	bl	8004044 <_malloc_r>
 8003f16:	4604      	mov	r4, r0
 8003f18:	b140      	cbz	r0, 8003f2c <__sfmoreglue+0x28>
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	e9c0 1600 	strd	r1, r6, [r0]
 8003f20:	300c      	adds	r0, #12
 8003f22:	60a0      	str	r0, [r4, #8]
 8003f24:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003f28:	f7ff ffa2 	bl	8003e70 <memset>
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}

08003f30 <__sinit>:
 8003f30:	6983      	ldr	r3, [r0, #24]
 8003f32:	b510      	push	{r4, lr}
 8003f34:	4604      	mov	r4, r0
 8003f36:	bb33      	cbnz	r3, 8003f86 <__sinit+0x56>
 8003f38:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003f3c:	6503      	str	r3, [r0, #80]	; 0x50
 8003f3e:	4b12      	ldr	r3, [pc, #72]	; (8003f88 <__sinit+0x58>)
 8003f40:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <__sinit+0x5c>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	6282      	str	r2, [r0, #40]	; 0x28
 8003f46:	4298      	cmp	r0, r3
 8003f48:	bf04      	itt	eq
 8003f4a:	2301      	moveq	r3, #1
 8003f4c:	6183      	streq	r3, [r0, #24]
 8003f4e:	f000 f81f 	bl	8003f90 <__sfp>
 8003f52:	6060      	str	r0, [r4, #4]
 8003f54:	4620      	mov	r0, r4
 8003f56:	f000 f81b 	bl	8003f90 <__sfp>
 8003f5a:	60a0      	str	r0, [r4, #8]
 8003f5c:	4620      	mov	r0, r4
 8003f5e:	f000 f817 	bl	8003f90 <__sfp>
 8003f62:	2200      	movs	r2, #0
 8003f64:	60e0      	str	r0, [r4, #12]
 8003f66:	2104      	movs	r1, #4
 8003f68:	6860      	ldr	r0, [r4, #4]
 8003f6a:	f7ff ffa1 	bl	8003eb0 <std>
 8003f6e:	2201      	movs	r2, #1
 8003f70:	2109      	movs	r1, #9
 8003f72:	68a0      	ldr	r0, [r4, #8]
 8003f74:	f7ff ff9c 	bl	8003eb0 <std>
 8003f78:	2202      	movs	r2, #2
 8003f7a:	2112      	movs	r1, #18
 8003f7c:	68e0      	ldr	r0, [r4, #12]
 8003f7e:	f7ff ff97 	bl	8003eb0 <std>
 8003f82:	2301      	movs	r3, #1
 8003f84:	61a3      	str	r3, [r4, #24]
 8003f86:	bd10      	pop	{r4, pc}
 8003f88:	08004e18 	.word	0x08004e18
 8003f8c:	08003ef9 	.word	0x08003ef9

08003f90 <__sfp>:
 8003f90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <__sfp+0x70>)
 8003f94:	4607      	mov	r7, r0
 8003f96:	681e      	ldr	r6, [r3, #0]
 8003f98:	69b3      	ldr	r3, [r6, #24]
 8003f9a:	b913      	cbnz	r3, 8003fa2 <__sfp+0x12>
 8003f9c:	4630      	mov	r0, r6
 8003f9e:	f7ff ffc7 	bl	8003f30 <__sinit>
 8003fa2:	3648      	adds	r6, #72	; 0x48
 8003fa4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003fa8:	3b01      	subs	r3, #1
 8003faa:	d503      	bpl.n	8003fb4 <__sfp+0x24>
 8003fac:	6833      	ldr	r3, [r6, #0]
 8003fae:	b133      	cbz	r3, 8003fbe <__sfp+0x2e>
 8003fb0:	6836      	ldr	r6, [r6, #0]
 8003fb2:	e7f7      	b.n	8003fa4 <__sfp+0x14>
 8003fb4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003fb8:	b16d      	cbz	r5, 8003fd6 <__sfp+0x46>
 8003fba:	3468      	adds	r4, #104	; 0x68
 8003fbc:	e7f4      	b.n	8003fa8 <__sfp+0x18>
 8003fbe:	2104      	movs	r1, #4
 8003fc0:	4638      	mov	r0, r7
 8003fc2:	f7ff ff9f 	bl	8003f04 <__sfmoreglue>
 8003fc6:	6030      	str	r0, [r6, #0]
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	d1f1      	bne.n	8003fb0 <__sfp+0x20>
 8003fcc:	230c      	movs	r3, #12
 8003fce:	4604      	mov	r4, r0
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	4620      	mov	r0, r4
 8003fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003fd6:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <__sfp+0x74>)
 8003fd8:	6665      	str	r5, [r4, #100]	; 0x64
 8003fda:	e9c4 5500 	strd	r5, r5, [r4]
 8003fde:	60a5      	str	r5, [r4, #8]
 8003fe0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003fe4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003fe8:	2208      	movs	r2, #8
 8003fea:	4629      	mov	r1, r5
 8003fec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003ff0:	f7ff ff3e 	bl	8003e70 <memset>
 8003ff4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ff8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ffc:	e7e9      	b.n	8003fd2 <__sfp+0x42>
 8003ffe:	bf00      	nop
 8004000:	08004e18 	.word	0x08004e18
 8004004:	ffff0001 	.word	0xffff0001

08004008 <_fwalk_reent>:
 8004008:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800400c:	4680      	mov	r8, r0
 800400e:	4689      	mov	r9, r1
 8004010:	2600      	movs	r6, #0
 8004012:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004016:	b914      	cbnz	r4, 800401e <_fwalk_reent+0x16>
 8004018:	4630      	mov	r0, r6
 800401a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800401e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004022:	3f01      	subs	r7, #1
 8004024:	d501      	bpl.n	800402a <_fwalk_reent+0x22>
 8004026:	6824      	ldr	r4, [r4, #0]
 8004028:	e7f5      	b.n	8004016 <_fwalk_reent+0xe>
 800402a:	89ab      	ldrh	r3, [r5, #12]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d907      	bls.n	8004040 <_fwalk_reent+0x38>
 8004030:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004034:	3301      	adds	r3, #1
 8004036:	d003      	beq.n	8004040 <_fwalk_reent+0x38>
 8004038:	4629      	mov	r1, r5
 800403a:	4640      	mov	r0, r8
 800403c:	47c8      	blx	r9
 800403e:	4306      	orrs	r6, r0
 8004040:	3568      	adds	r5, #104	; 0x68
 8004042:	e7ee      	b.n	8004022 <_fwalk_reent+0x1a>

08004044 <_malloc_r>:
 8004044:	b570      	push	{r4, r5, r6, lr}
 8004046:	1ccd      	adds	r5, r1, #3
 8004048:	f025 0503 	bic.w	r5, r5, #3
 800404c:	3508      	adds	r5, #8
 800404e:	2d0c      	cmp	r5, #12
 8004050:	bf38      	it	cc
 8004052:	250c      	movcc	r5, #12
 8004054:	2d00      	cmp	r5, #0
 8004056:	4606      	mov	r6, r0
 8004058:	db01      	blt.n	800405e <_malloc_r+0x1a>
 800405a:	42a9      	cmp	r1, r5
 800405c:	d903      	bls.n	8004066 <_malloc_r+0x22>
 800405e:	230c      	movs	r3, #12
 8004060:	6033      	str	r3, [r6, #0]
 8004062:	2000      	movs	r0, #0
 8004064:	bd70      	pop	{r4, r5, r6, pc}
 8004066:	f000 fd77 	bl	8004b58 <__malloc_lock>
 800406a:	4a21      	ldr	r2, [pc, #132]	; (80040f0 <_malloc_r+0xac>)
 800406c:	6814      	ldr	r4, [r2, #0]
 800406e:	4621      	mov	r1, r4
 8004070:	b991      	cbnz	r1, 8004098 <_malloc_r+0x54>
 8004072:	4c20      	ldr	r4, [pc, #128]	; (80040f4 <_malloc_r+0xb0>)
 8004074:	6823      	ldr	r3, [r4, #0]
 8004076:	b91b      	cbnz	r3, 8004080 <_malloc_r+0x3c>
 8004078:	4630      	mov	r0, r6
 800407a:	f000 fb03 	bl	8004684 <_sbrk_r>
 800407e:	6020      	str	r0, [r4, #0]
 8004080:	4629      	mov	r1, r5
 8004082:	4630      	mov	r0, r6
 8004084:	f000 fafe 	bl	8004684 <_sbrk_r>
 8004088:	1c43      	adds	r3, r0, #1
 800408a:	d124      	bne.n	80040d6 <_malloc_r+0x92>
 800408c:	230c      	movs	r3, #12
 800408e:	4630      	mov	r0, r6
 8004090:	6033      	str	r3, [r6, #0]
 8004092:	f000 fd62 	bl	8004b5a <__malloc_unlock>
 8004096:	e7e4      	b.n	8004062 <_malloc_r+0x1e>
 8004098:	680b      	ldr	r3, [r1, #0]
 800409a:	1b5b      	subs	r3, r3, r5
 800409c:	d418      	bmi.n	80040d0 <_malloc_r+0x8c>
 800409e:	2b0b      	cmp	r3, #11
 80040a0:	d90f      	bls.n	80040c2 <_malloc_r+0x7e>
 80040a2:	600b      	str	r3, [r1, #0]
 80040a4:	18cc      	adds	r4, r1, r3
 80040a6:	50cd      	str	r5, [r1, r3]
 80040a8:	4630      	mov	r0, r6
 80040aa:	f000 fd56 	bl	8004b5a <__malloc_unlock>
 80040ae:	f104 000b 	add.w	r0, r4, #11
 80040b2:	1d23      	adds	r3, r4, #4
 80040b4:	f020 0007 	bic.w	r0, r0, #7
 80040b8:	1ac3      	subs	r3, r0, r3
 80040ba:	d0d3      	beq.n	8004064 <_malloc_r+0x20>
 80040bc:	425a      	negs	r2, r3
 80040be:	50e2      	str	r2, [r4, r3]
 80040c0:	e7d0      	b.n	8004064 <_malloc_r+0x20>
 80040c2:	684b      	ldr	r3, [r1, #4]
 80040c4:	428c      	cmp	r4, r1
 80040c6:	bf16      	itet	ne
 80040c8:	6063      	strne	r3, [r4, #4]
 80040ca:	6013      	streq	r3, [r2, #0]
 80040cc:	460c      	movne	r4, r1
 80040ce:	e7eb      	b.n	80040a8 <_malloc_r+0x64>
 80040d0:	460c      	mov	r4, r1
 80040d2:	6849      	ldr	r1, [r1, #4]
 80040d4:	e7cc      	b.n	8004070 <_malloc_r+0x2c>
 80040d6:	1cc4      	adds	r4, r0, #3
 80040d8:	f024 0403 	bic.w	r4, r4, #3
 80040dc:	42a0      	cmp	r0, r4
 80040de:	d005      	beq.n	80040ec <_malloc_r+0xa8>
 80040e0:	1a21      	subs	r1, r4, r0
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 face 	bl	8004684 <_sbrk_r>
 80040e8:	3001      	adds	r0, #1
 80040ea:	d0cf      	beq.n	800408c <_malloc_r+0x48>
 80040ec:	6025      	str	r5, [r4, #0]
 80040ee:	e7db      	b.n	80040a8 <_malloc_r+0x64>
 80040f0:	200000a4 	.word	0x200000a4
 80040f4:	200000a8 	.word	0x200000a8

080040f8 <__sfputc_r>:
 80040f8:	6893      	ldr	r3, [r2, #8]
 80040fa:	b410      	push	{r4}
 80040fc:	3b01      	subs	r3, #1
 80040fe:	2b00      	cmp	r3, #0
 8004100:	6093      	str	r3, [r2, #8]
 8004102:	da07      	bge.n	8004114 <__sfputc_r+0x1c>
 8004104:	6994      	ldr	r4, [r2, #24]
 8004106:	42a3      	cmp	r3, r4
 8004108:	db01      	blt.n	800410e <__sfputc_r+0x16>
 800410a:	290a      	cmp	r1, #10
 800410c:	d102      	bne.n	8004114 <__sfputc_r+0x1c>
 800410e:	bc10      	pop	{r4}
 8004110:	f000 bb0c 	b.w	800472c <__swbuf_r>
 8004114:	6813      	ldr	r3, [r2, #0]
 8004116:	1c58      	adds	r0, r3, #1
 8004118:	6010      	str	r0, [r2, #0]
 800411a:	7019      	strb	r1, [r3, #0]
 800411c:	4608      	mov	r0, r1
 800411e:	bc10      	pop	{r4}
 8004120:	4770      	bx	lr

08004122 <__sfputs_r>:
 8004122:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004124:	4606      	mov	r6, r0
 8004126:	460f      	mov	r7, r1
 8004128:	4614      	mov	r4, r2
 800412a:	18d5      	adds	r5, r2, r3
 800412c:	42ac      	cmp	r4, r5
 800412e:	d101      	bne.n	8004134 <__sfputs_r+0x12>
 8004130:	2000      	movs	r0, #0
 8004132:	e007      	b.n	8004144 <__sfputs_r+0x22>
 8004134:	463a      	mov	r2, r7
 8004136:	f814 1b01 	ldrb.w	r1, [r4], #1
 800413a:	4630      	mov	r0, r6
 800413c:	f7ff ffdc 	bl	80040f8 <__sfputc_r>
 8004140:	1c43      	adds	r3, r0, #1
 8004142:	d1f3      	bne.n	800412c <__sfputs_r+0xa>
 8004144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004148 <_vfiprintf_r>:
 8004148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800414c:	460c      	mov	r4, r1
 800414e:	b09d      	sub	sp, #116	; 0x74
 8004150:	4617      	mov	r7, r2
 8004152:	461d      	mov	r5, r3
 8004154:	4606      	mov	r6, r0
 8004156:	b118      	cbz	r0, 8004160 <_vfiprintf_r+0x18>
 8004158:	6983      	ldr	r3, [r0, #24]
 800415a:	b90b      	cbnz	r3, 8004160 <_vfiprintf_r+0x18>
 800415c:	f7ff fee8 	bl	8003f30 <__sinit>
 8004160:	4b7c      	ldr	r3, [pc, #496]	; (8004354 <_vfiprintf_r+0x20c>)
 8004162:	429c      	cmp	r4, r3
 8004164:	d158      	bne.n	8004218 <_vfiprintf_r+0xd0>
 8004166:	6874      	ldr	r4, [r6, #4]
 8004168:	89a3      	ldrh	r3, [r4, #12]
 800416a:	0718      	lsls	r0, r3, #28
 800416c:	d55e      	bpl.n	800422c <_vfiprintf_r+0xe4>
 800416e:	6923      	ldr	r3, [r4, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d05b      	beq.n	800422c <_vfiprintf_r+0xe4>
 8004174:	2300      	movs	r3, #0
 8004176:	9309      	str	r3, [sp, #36]	; 0x24
 8004178:	2320      	movs	r3, #32
 800417a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800417e:	2330      	movs	r3, #48	; 0x30
 8004180:	f04f 0b01 	mov.w	fp, #1
 8004184:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004188:	9503      	str	r5, [sp, #12]
 800418a:	46b8      	mov	r8, r7
 800418c:	4645      	mov	r5, r8
 800418e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004192:	b10b      	cbz	r3, 8004198 <_vfiprintf_r+0x50>
 8004194:	2b25      	cmp	r3, #37	; 0x25
 8004196:	d154      	bne.n	8004242 <_vfiprintf_r+0xfa>
 8004198:	ebb8 0a07 	subs.w	sl, r8, r7
 800419c:	d00b      	beq.n	80041b6 <_vfiprintf_r+0x6e>
 800419e:	4653      	mov	r3, sl
 80041a0:	463a      	mov	r2, r7
 80041a2:	4621      	mov	r1, r4
 80041a4:	4630      	mov	r0, r6
 80041a6:	f7ff ffbc 	bl	8004122 <__sfputs_r>
 80041aa:	3001      	adds	r0, #1
 80041ac:	f000 80c2 	beq.w	8004334 <_vfiprintf_r+0x1ec>
 80041b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041b2:	4453      	add	r3, sl
 80041b4:	9309      	str	r3, [sp, #36]	; 0x24
 80041b6:	f898 3000 	ldrb.w	r3, [r8]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	f000 80ba 	beq.w	8004334 <_vfiprintf_r+0x1ec>
 80041c0:	2300      	movs	r3, #0
 80041c2:	f04f 32ff 	mov.w	r2, #4294967295
 80041c6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ca:	9304      	str	r3, [sp, #16]
 80041cc:	9307      	str	r3, [sp, #28]
 80041ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041d2:	931a      	str	r3, [sp, #104]	; 0x68
 80041d4:	46a8      	mov	r8, r5
 80041d6:	2205      	movs	r2, #5
 80041d8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80041dc:	485e      	ldr	r0, [pc, #376]	; (8004358 <_vfiprintf_r+0x210>)
 80041de:	f000 fcad 	bl	8004b3c <memchr>
 80041e2:	9b04      	ldr	r3, [sp, #16]
 80041e4:	bb78      	cbnz	r0, 8004246 <_vfiprintf_r+0xfe>
 80041e6:	06d9      	lsls	r1, r3, #27
 80041e8:	bf44      	itt	mi
 80041ea:	2220      	movmi	r2, #32
 80041ec:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041f0:	071a      	lsls	r2, r3, #28
 80041f2:	bf44      	itt	mi
 80041f4:	222b      	movmi	r2, #43	; 0x2b
 80041f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80041fa:	782a      	ldrb	r2, [r5, #0]
 80041fc:	2a2a      	cmp	r2, #42	; 0x2a
 80041fe:	d02a      	beq.n	8004256 <_vfiprintf_r+0x10e>
 8004200:	46a8      	mov	r8, r5
 8004202:	2000      	movs	r0, #0
 8004204:	250a      	movs	r5, #10
 8004206:	9a07      	ldr	r2, [sp, #28]
 8004208:	4641      	mov	r1, r8
 800420a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800420e:	3b30      	subs	r3, #48	; 0x30
 8004210:	2b09      	cmp	r3, #9
 8004212:	d969      	bls.n	80042e8 <_vfiprintf_r+0x1a0>
 8004214:	b360      	cbz	r0, 8004270 <_vfiprintf_r+0x128>
 8004216:	e024      	b.n	8004262 <_vfiprintf_r+0x11a>
 8004218:	4b50      	ldr	r3, [pc, #320]	; (800435c <_vfiprintf_r+0x214>)
 800421a:	429c      	cmp	r4, r3
 800421c:	d101      	bne.n	8004222 <_vfiprintf_r+0xda>
 800421e:	68b4      	ldr	r4, [r6, #8]
 8004220:	e7a2      	b.n	8004168 <_vfiprintf_r+0x20>
 8004222:	4b4f      	ldr	r3, [pc, #316]	; (8004360 <_vfiprintf_r+0x218>)
 8004224:	429c      	cmp	r4, r3
 8004226:	bf08      	it	eq
 8004228:	68f4      	ldreq	r4, [r6, #12]
 800422a:	e79d      	b.n	8004168 <_vfiprintf_r+0x20>
 800422c:	4621      	mov	r1, r4
 800422e:	4630      	mov	r0, r6
 8004230:	f000 fae0 	bl	80047f4 <__swsetup_r>
 8004234:	2800      	cmp	r0, #0
 8004236:	d09d      	beq.n	8004174 <_vfiprintf_r+0x2c>
 8004238:	f04f 30ff 	mov.w	r0, #4294967295
 800423c:	b01d      	add	sp, #116	; 0x74
 800423e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004242:	46a8      	mov	r8, r5
 8004244:	e7a2      	b.n	800418c <_vfiprintf_r+0x44>
 8004246:	4a44      	ldr	r2, [pc, #272]	; (8004358 <_vfiprintf_r+0x210>)
 8004248:	4645      	mov	r5, r8
 800424a:	1a80      	subs	r0, r0, r2
 800424c:	fa0b f000 	lsl.w	r0, fp, r0
 8004250:	4318      	orrs	r0, r3
 8004252:	9004      	str	r0, [sp, #16]
 8004254:	e7be      	b.n	80041d4 <_vfiprintf_r+0x8c>
 8004256:	9a03      	ldr	r2, [sp, #12]
 8004258:	1d11      	adds	r1, r2, #4
 800425a:	6812      	ldr	r2, [r2, #0]
 800425c:	9103      	str	r1, [sp, #12]
 800425e:	2a00      	cmp	r2, #0
 8004260:	db01      	blt.n	8004266 <_vfiprintf_r+0x11e>
 8004262:	9207      	str	r2, [sp, #28]
 8004264:	e004      	b.n	8004270 <_vfiprintf_r+0x128>
 8004266:	4252      	negs	r2, r2
 8004268:	f043 0302 	orr.w	r3, r3, #2
 800426c:	9207      	str	r2, [sp, #28]
 800426e:	9304      	str	r3, [sp, #16]
 8004270:	f898 3000 	ldrb.w	r3, [r8]
 8004274:	2b2e      	cmp	r3, #46	; 0x2e
 8004276:	d10e      	bne.n	8004296 <_vfiprintf_r+0x14e>
 8004278:	f898 3001 	ldrb.w	r3, [r8, #1]
 800427c:	2b2a      	cmp	r3, #42	; 0x2a
 800427e:	d138      	bne.n	80042f2 <_vfiprintf_r+0x1aa>
 8004280:	9b03      	ldr	r3, [sp, #12]
 8004282:	f108 0802 	add.w	r8, r8, #2
 8004286:	1d1a      	adds	r2, r3, #4
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	9203      	str	r2, [sp, #12]
 800428c:	2b00      	cmp	r3, #0
 800428e:	bfb8      	it	lt
 8004290:	f04f 33ff 	movlt.w	r3, #4294967295
 8004294:	9305      	str	r3, [sp, #20]
 8004296:	4d33      	ldr	r5, [pc, #204]	; (8004364 <_vfiprintf_r+0x21c>)
 8004298:	2203      	movs	r2, #3
 800429a:	f898 1000 	ldrb.w	r1, [r8]
 800429e:	4628      	mov	r0, r5
 80042a0:	f000 fc4c 	bl	8004b3c <memchr>
 80042a4:	b140      	cbz	r0, 80042b8 <_vfiprintf_r+0x170>
 80042a6:	2340      	movs	r3, #64	; 0x40
 80042a8:	1b40      	subs	r0, r0, r5
 80042aa:	fa03 f000 	lsl.w	r0, r3, r0
 80042ae:	9b04      	ldr	r3, [sp, #16]
 80042b0:	f108 0801 	add.w	r8, r8, #1
 80042b4:	4303      	orrs	r3, r0
 80042b6:	9304      	str	r3, [sp, #16]
 80042b8:	f898 1000 	ldrb.w	r1, [r8]
 80042bc:	2206      	movs	r2, #6
 80042be:	482a      	ldr	r0, [pc, #168]	; (8004368 <_vfiprintf_r+0x220>)
 80042c0:	f108 0701 	add.w	r7, r8, #1
 80042c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042c8:	f000 fc38 	bl	8004b3c <memchr>
 80042cc:	2800      	cmp	r0, #0
 80042ce:	d037      	beq.n	8004340 <_vfiprintf_r+0x1f8>
 80042d0:	4b26      	ldr	r3, [pc, #152]	; (800436c <_vfiprintf_r+0x224>)
 80042d2:	bb1b      	cbnz	r3, 800431c <_vfiprintf_r+0x1d4>
 80042d4:	9b03      	ldr	r3, [sp, #12]
 80042d6:	3307      	adds	r3, #7
 80042d8:	f023 0307 	bic.w	r3, r3, #7
 80042dc:	3308      	adds	r3, #8
 80042de:	9303      	str	r3, [sp, #12]
 80042e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042e2:	444b      	add	r3, r9
 80042e4:	9309      	str	r3, [sp, #36]	; 0x24
 80042e6:	e750      	b.n	800418a <_vfiprintf_r+0x42>
 80042e8:	fb05 3202 	mla	r2, r5, r2, r3
 80042ec:	2001      	movs	r0, #1
 80042ee:	4688      	mov	r8, r1
 80042f0:	e78a      	b.n	8004208 <_vfiprintf_r+0xc0>
 80042f2:	2300      	movs	r3, #0
 80042f4:	250a      	movs	r5, #10
 80042f6:	4619      	mov	r1, r3
 80042f8:	f108 0801 	add.w	r8, r8, #1
 80042fc:	9305      	str	r3, [sp, #20]
 80042fe:	4640      	mov	r0, r8
 8004300:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004304:	3a30      	subs	r2, #48	; 0x30
 8004306:	2a09      	cmp	r2, #9
 8004308:	d903      	bls.n	8004312 <_vfiprintf_r+0x1ca>
 800430a:	2b00      	cmp	r3, #0
 800430c:	d0c3      	beq.n	8004296 <_vfiprintf_r+0x14e>
 800430e:	9105      	str	r1, [sp, #20]
 8004310:	e7c1      	b.n	8004296 <_vfiprintf_r+0x14e>
 8004312:	fb05 2101 	mla	r1, r5, r1, r2
 8004316:	2301      	movs	r3, #1
 8004318:	4680      	mov	r8, r0
 800431a:	e7f0      	b.n	80042fe <_vfiprintf_r+0x1b6>
 800431c:	ab03      	add	r3, sp, #12
 800431e:	9300      	str	r3, [sp, #0]
 8004320:	4622      	mov	r2, r4
 8004322:	4b13      	ldr	r3, [pc, #76]	; (8004370 <_vfiprintf_r+0x228>)
 8004324:	a904      	add	r1, sp, #16
 8004326:	4630      	mov	r0, r6
 8004328:	f3af 8000 	nop.w
 800432c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004330:	4681      	mov	r9, r0
 8004332:	d1d5      	bne.n	80042e0 <_vfiprintf_r+0x198>
 8004334:	89a3      	ldrh	r3, [r4, #12]
 8004336:	065b      	lsls	r3, r3, #25
 8004338:	f53f af7e 	bmi.w	8004238 <_vfiprintf_r+0xf0>
 800433c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800433e:	e77d      	b.n	800423c <_vfiprintf_r+0xf4>
 8004340:	ab03      	add	r3, sp, #12
 8004342:	9300      	str	r3, [sp, #0]
 8004344:	4622      	mov	r2, r4
 8004346:	4b0a      	ldr	r3, [pc, #40]	; (8004370 <_vfiprintf_r+0x228>)
 8004348:	a904      	add	r1, sp, #16
 800434a:	4630      	mov	r0, r6
 800434c:	f000 f888 	bl	8004460 <_printf_i>
 8004350:	e7ec      	b.n	800432c <_vfiprintf_r+0x1e4>
 8004352:	bf00      	nop
 8004354:	08004e3c 	.word	0x08004e3c
 8004358:	08004e7c 	.word	0x08004e7c
 800435c:	08004e5c 	.word	0x08004e5c
 8004360:	08004e1c 	.word	0x08004e1c
 8004364:	08004e82 	.word	0x08004e82
 8004368:	08004e86 	.word	0x08004e86
 800436c:	00000000 	.word	0x00000000
 8004370:	08004123 	.word	0x08004123

08004374 <_printf_common>:
 8004374:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004378:	4691      	mov	r9, r2
 800437a:	461f      	mov	r7, r3
 800437c:	688a      	ldr	r2, [r1, #8]
 800437e:	690b      	ldr	r3, [r1, #16]
 8004380:	4606      	mov	r6, r0
 8004382:	4293      	cmp	r3, r2
 8004384:	bfb8      	it	lt
 8004386:	4613      	movlt	r3, r2
 8004388:	f8c9 3000 	str.w	r3, [r9]
 800438c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004390:	460c      	mov	r4, r1
 8004392:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004396:	b112      	cbz	r2, 800439e <_printf_common+0x2a>
 8004398:	3301      	adds	r3, #1
 800439a:	f8c9 3000 	str.w	r3, [r9]
 800439e:	6823      	ldr	r3, [r4, #0]
 80043a0:	0699      	lsls	r1, r3, #26
 80043a2:	bf42      	ittt	mi
 80043a4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80043a8:	3302      	addmi	r3, #2
 80043aa:	f8c9 3000 	strmi.w	r3, [r9]
 80043ae:	6825      	ldr	r5, [r4, #0]
 80043b0:	f015 0506 	ands.w	r5, r5, #6
 80043b4:	d107      	bne.n	80043c6 <_printf_common+0x52>
 80043b6:	f104 0a19 	add.w	sl, r4, #25
 80043ba:	68e3      	ldr	r3, [r4, #12]
 80043bc:	f8d9 2000 	ldr.w	r2, [r9]
 80043c0:	1a9b      	subs	r3, r3, r2
 80043c2:	42ab      	cmp	r3, r5
 80043c4:	dc29      	bgt.n	800441a <_printf_common+0xa6>
 80043c6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043ca:	6822      	ldr	r2, [r4, #0]
 80043cc:	3300      	adds	r3, #0
 80043ce:	bf18      	it	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	0692      	lsls	r2, r2, #26
 80043d4:	d42e      	bmi.n	8004434 <_printf_common+0xc0>
 80043d6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043da:	4639      	mov	r1, r7
 80043dc:	4630      	mov	r0, r6
 80043de:	47c0      	blx	r8
 80043e0:	3001      	adds	r0, #1
 80043e2:	d021      	beq.n	8004428 <_printf_common+0xb4>
 80043e4:	6823      	ldr	r3, [r4, #0]
 80043e6:	68e5      	ldr	r5, [r4, #12]
 80043e8:	f003 0306 	and.w	r3, r3, #6
 80043ec:	2b04      	cmp	r3, #4
 80043ee:	bf18      	it	ne
 80043f0:	2500      	movne	r5, #0
 80043f2:	f8d9 2000 	ldr.w	r2, [r9]
 80043f6:	f04f 0900 	mov.w	r9, #0
 80043fa:	bf08      	it	eq
 80043fc:	1aad      	subeq	r5, r5, r2
 80043fe:	68a3      	ldr	r3, [r4, #8]
 8004400:	6922      	ldr	r2, [r4, #16]
 8004402:	bf08      	it	eq
 8004404:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004408:	4293      	cmp	r3, r2
 800440a:	bfc4      	itt	gt
 800440c:	1a9b      	subgt	r3, r3, r2
 800440e:	18ed      	addgt	r5, r5, r3
 8004410:	341a      	adds	r4, #26
 8004412:	454d      	cmp	r5, r9
 8004414:	d11a      	bne.n	800444c <_printf_common+0xd8>
 8004416:	2000      	movs	r0, #0
 8004418:	e008      	b.n	800442c <_printf_common+0xb8>
 800441a:	2301      	movs	r3, #1
 800441c:	4652      	mov	r2, sl
 800441e:	4639      	mov	r1, r7
 8004420:	4630      	mov	r0, r6
 8004422:	47c0      	blx	r8
 8004424:	3001      	adds	r0, #1
 8004426:	d103      	bne.n	8004430 <_printf_common+0xbc>
 8004428:	f04f 30ff 	mov.w	r0, #4294967295
 800442c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004430:	3501      	adds	r5, #1
 8004432:	e7c2      	b.n	80043ba <_printf_common+0x46>
 8004434:	2030      	movs	r0, #48	; 0x30
 8004436:	18e1      	adds	r1, r4, r3
 8004438:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800443c:	1c5a      	adds	r2, r3, #1
 800443e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004442:	4422      	add	r2, r4
 8004444:	3302      	adds	r3, #2
 8004446:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800444a:	e7c4      	b.n	80043d6 <_printf_common+0x62>
 800444c:	2301      	movs	r3, #1
 800444e:	4622      	mov	r2, r4
 8004450:	4639      	mov	r1, r7
 8004452:	4630      	mov	r0, r6
 8004454:	47c0      	blx	r8
 8004456:	3001      	adds	r0, #1
 8004458:	d0e6      	beq.n	8004428 <_printf_common+0xb4>
 800445a:	f109 0901 	add.w	r9, r9, #1
 800445e:	e7d8      	b.n	8004412 <_printf_common+0x9e>

08004460 <_printf_i>:
 8004460:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004464:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004468:	460c      	mov	r4, r1
 800446a:	7e09      	ldrb	r1, [r1, #24]
 800446c:	b085      	sub	sp, #20
 800446e:	296e      	cmp	r1, #110	; 0x6e
 8004470:	4617      	mov	r7, r2
 8004472:	4606      	mov	r6, r0
 8004474:	4698      	mov	r8, r3
 8004476:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004478:	f000 80b3 	beq.w	80045e2 <_printf_i+0x182>
 800447c:	d822      	bhi.n	80044c4 <_printf_i+0x64>
 800447e:	2963      	cmp	r1, #99	; 0x63
 8004480:	d036      	beq.n	80044f0 <_printf_i+0x90>
 8004482:	d80a      	bhi.n	800449a <_printf_i+0x3a>
 8004484:	2900      	cmp	r1, #0
 8004486:	f000 80b9 	beq.w	80045fc <_printf_i+0x19c>
 800448a:	2958      	cmp	r1, #88	; 0x58
 800448c:	f000 8083 	beq.w	8004596 <_printf_i+0x136>
 8004490:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004494:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004498:	e032      	b.n	8004500 <_printf_i+0xa0>
 800449a:	2964      	cmp	r1, #100	; 0x64
 800449c:	d001      	beq.n	80044a2 <_printf_i+0x42>
 800449e:	2969      	cmp	r1, #105	; 0x69
 80044a0:	d1f6      	bne.n	8004490 <_printf_i+0x30>
 80044a2:	6820      	ldr	r0, [r4, #0]
 80044a4:	6813      	ldr	r3, [r2, #0]
 80044a6:	0605      	lsls	r5, r0, #24
 80044a8:	f103 0104 	add.w	r1, r3, #4
 80044ac:	d52a      	bpl.n	8004504 <_printf_i+0xa4>
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	6011      	str	r1, [r2, #0]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	da03      	bge.n	80044be <_printf_i+0x5e>
 80044b6:	222d      	movs	r2, #45	; 0x2d
 80044b8:	425b      	negs	r3, r3
 80044ba:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80044be:	486f      	ldr	r0, [pc, #444]	; (800467c <_printf_i+0x21c>)
 80044c0:	220a      	movs	r2, #10
 80044c2:	e039      	b.n	8004538 <_printf_i+0xd8>
 80044c4:	2973      	cmp	r1, #115	; 0x73
 80044c6:	f000 809d 	beq.w	8004604 <_printf_i+0x1a4>
 80044ca:	d808      	bhi.n	80044de <_printf_i+0x7e>
 80044cc:	296f      	cmp	r1, #111	; 0x6f
 80044ce:	d020      	beq.n	8004512 <_printf_i+0xb2>
 80044d0:	2970      	cmp	r1, #112	; 0x70
 80044d2:	d1dd      	bne.n	8004490 <_printf_i+0x30>
 80044d4:	6823      	ldr	r3, [r4, #0]
 80044d6:	f043 0320 	orr.w	r3, r3, #32
 80044da:	6023      	str	r3, [r4, #0]
 80044dc:	e003      	b.n	80044e6 <_printf_i+0x86>
 80044de:	2975      	cmp	r1, #117	; 0x75
 80044e0:	d017      	beq.n	8004512 <_printf_i+0xb2>
 80044e2:	2978      	cmp	r1, #120	; 0x78
 80044e4:	d1d4      	bne.n	8004490 <_printf_i+0x30>
 80044e6:	2378      	movs	r3, #120	; 0x78
 80044e8:	4865      	ldr	r0, [pc, #404]	; (8004680 <_printf_i+0x220>)
 80044ea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ee:	e055      	b.n	800459c <_printf_i+0x13c>
 80044f0:	6813      	ldr	r3, [r2, #0]
 80044f2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f6:	1d19      	adds	r1, r3, #4
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6011      	str	r1, [r2, #0]
 80044fc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004500:	2301      	movs	r3, #1
 8004502:	e08c      	b.n	800461e <_printf_i+0x1be>
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f010 0f40 	tst.w	r0, #64	; 0x40
 800450a:	6011      	str	r1, [r2, #0]
 800450c:	bf18      	it	ne
 800450e:	b21b      	sxthne	r3, r3
 8004510:	e7cf      	b.n	80044b2 <_printf_i+0x52>
 8004512:	6813      	ldr	r3, [r2, #0]
 8004514:	6825      	ldr	r5, [r4, #0]
 8004516:	1d18      	adds	r0, r3, #4
 8004518:	6010      	str	r0, [r2, #0]
 800451a:	0628      	lsls	r0, r5, #24
 800451c:	d501      	bpl.n	8004522 <_printf_i+0xc2>
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	e002      	b.n	8004528 <_printf_i+0xc8>
 8004522:	0668      	lsls	r0, r5, #25
 8004524:	d5fb      	bpl.n	800451e <_printf_i+0xbe>
 8004526:	881b      	ldrh	r3, [r3, #0]
 8004528:	296f      	cmp	r1, #111	; 0x6f
 800452a:	bf14      	ite	ne
 800452c:	220a      	movne	r2, #10
 800452e:	2208      	moveq	r2, #8
 8004530:	4852      	ldr	r0, [pc, #328]	; (800467c <_printf_i+0x21c>)
 8004532:	2100      	movs	r1, #0
 8004534:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004538:	6865      	ldr	r5, [r4, #4]
 800453a:	2d00      	cmp	r5, #0
 800453c:	60a5      	str	r5, [r4, #8]
 800453e:	f2c0 8095 	blt.w	800466c <_printf_i+0x20c>
 8004542:	6821      	ldr	r1, [r4, #0]
 8004544:	f021 0104 	bic.w	r1, r1, #4
 8004548:	6021      	str	r1, [r4, #0]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d13d      	bne.n	80045ca <_printf_i+0x16a>
 800454e:	2d00      	cmp	r5, #0
 8004550:	f040 808e 	bne.w	8004670 <_printf_i+0x210>
 8004554:	4665      	mov	r5, ip
 8004556:	2a08      	cmp	r2, #8
 8004558:	d10b      	bne.n	8004572 <_printf_i+0x112>
 800455a:	6823      	ldr	r3, [r4, #0]
 800455c:	07db      	lsls	r3, r3, #31
 800455e:	d508      	bpl.n	8004572 <_printf_i+0x112>
 8004560:	6923      	ldr	r3, [r4, #16]
 8004562:	6862      	ldr	r2, [r4, #4]
 8004564:	429a      	cmp	r2, r3
 8004566:	bfde      	ittt	le
 8004568:	2330      	movle	r3, #48	; 0x30
 800456a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800456e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004572:	ebac 0305 	sub.w	r3, ip, r5
 8004576:	6123      	str	r3, [r4, #16]
 8004578:	f8cd 8000 	str.w	r8, [sp]
 800457c:	463b      	mov	r3, r7
 800457e:	aa03      	add	r2, sp, #12
 8004580:	4621      	mov	r1, r4
 8004582:	4630      	mov	r0, r6
 8004584:	f7ff fef6 	bl	8004374 <_printf_common>
 8004588:	3001      	adds	r0, #1
 800458a:	d14d      	bne.n	8004628 <_printf_i+0x1c8>
 800458c:	f04f 30ff 	mov.w	r0, #4294967295
 8004590:	b005      	add	sp, #20
 8004592:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004596:	4839      	ldr	r0, [pc, #228]	; (800467c <_printf_i+0x21c>)
 8004598:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800459c:	6813      	ldr	r3, [r2, #0]
 800459e:	6821      	ldr	r1, [r4, #0]
 80045a0:	1d1d      	adds	r5, r3, #4
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	6015      	str	r5, [r2, #0]
 80045a6:	060a      	lsls	r2, r1, #24
 80045a8:	d50b      	bpl.n	80045c2 <_printf_i+0x162>
 80045aa:	07ca      	lsls	r2, r1, #31
 80045ac:	bf44      	itt	mi
 80045ae:	f041 0120 	orrmi.w	r1, r1, #32
 80045b2:	6021      	strmi	r1, [r4, #0]
 80045b4:	b91b      	cbnz	r3, 80045be <_printf_i+0x15e>
 80045b6:	6822      	ldr	r2, [r4, #0]
 80045b8:	f022 0220 	bic.w	r2, r2, #32
 80045bc:	6022      	str	r2, [r4, #0]
 80045be:	2210      	movs	r2, #16
 80045c0:	e7b7      	b.n	8004532 <_printf_i+0xd2>
 80045c2:	064d      	lsls	r5, r1, #25
 80045c4:	bf48      	it	mi
 80045c6:	b29b      	uxthmi	r3, r3
 80045c8:	e7ef      	b.n	80045aa <_printf_i+0x14a>
 80045ca:	4665      	mov	r5, ip
 80045cc:	fbb3 f1f2 	udiv	r1, r3, r2
 80045d0:	fb02 3311 	mls	r3, r2, r1, r3
 80045d4:	5cc3      	ldrb	r3, [r0, r3]
 80045d6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045da:	460b      	mov	r3, r1
 80045dc:	2900      	cmp	r1, #0
 80045de:	d1f5      	bne.n	80045cc <_printf_i+0x16c>
 80045e0:	e7b9      	b.n	8004556 <_printf_i+0xf6>
 80045e2:	6813      	ldr	r3, [r2, #0]
 80045e4:	6825      	ldr	r5, [r4, #0]
 80045e6:	1d18      	adds	r0, r3, #4
 80045e8:	6961      	ldr	r1, [r4, #20]
 80045ea:	6010      	str	r0, [r2, #0]
 80045ec:	0628      	lsls	r0, r5, #24
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	d501      	bpl.n	80045f6 <_printf_i+0x196>
 80045f2:	6019      	str	r1, [r3, #0]
 80045f4:	e002      	b.n	80045fc <_printf_i+0x19c>
 80045f6:	066a      	lsls	r2, r5, #25
 80045f8:	d5fb      	bpl.n	80045f2 <_printf_i+0x192>
 80045fa:	8019      	strh	r1, [r3, #0]
 80045fc:	2300      	movs	r3, #0
 80045fe:	4665      	mov	r5, ip
 8004600:	6123      	str	r3, [r4, #16]
 8004602:	e7b9      	b.n	8004578 <_printf_i+0x118>
 8004604:	6813      	ldr	r3, [r2, #0]
 8004606:	1d19      	adds	r1, r3, #4
 8004608:	6011      	str	r1, [r2, #0]
 800460a:	681d      	ldr	r5, [r3, #0]
 800460c:	6862      	ldr	r2, [r4, #4]
 800460e:	2100      	movs	r1, #0
 8004610:	4628      	mov	r0, r5
 8004612:	f000 fa93 	bl	8004b3c <memchr>
 8004616:	b108      	cbz	r0, 800461c <_printf_i+0x1bc>
 8004618:	1b40      	subs	r0, r0, r5
 800461a:	6060      	str	r0, [r4, #4]
 800461c:	6863      	ldr	r3, [r4, #4]
 800461e:	6123      	str	r3, [r4, #16]
 8004620:	2300      	movs	r3, #0
 8004622:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004626:	e7a7      	b.n	8004578 <_printf_i+0x118>
 8004628:	6923      	ldr	r3, [r4, #16]
 800462a:	462a      	mov	r2, r5
 800462c:	4639      	mov	r1, r7
 800462e:	4630      	mov	r0, r6
 8004630:	47c0      	blx	r8
 8004632:	3001      	adds	r0, #1
 8004634:	d0aa      	beq.n	800458c <_printf_i+0x12c>
 8004636:	6823      	ldr	r3, [r4, #0]
 8004638:	079b      	lsls	r3, r3, #30
 800463a:	d413      	bmi.n	8004664 <_printf_i+0x204>
 800463c:	68e0      	ldr	r0, [r4, #12]
 800463e:	9b03      	ldr	r3, [sp, #12]
 8004640:	4298      	cmp	r0, r3
 8004642:	bfb8      	it	lt
 8004644:	4618      	movlt	r0, r3
 8004646:	e7a3      	b.n	8004590 <_printf_i+0x130>
 8004648:	2301      	movs	r3, #1
 800464a:	464a      	mov	r2, r9
 800464c:	4639      	mov	r1, r7
 800464e:	4630      	mov	r0, r6
 8004650:	47c0      	blx	r8
 8004652:	3001      	adds	r0, #1
 8004654:	d09a      	beq.n	800458c <_printf_i+0x12c>
 8004656:	3501      	adds	r5, #1
 8004658:	68e3      	ldr	r3, [r4, #12]
 800465a:	9a03      	ldr	r2, [sp, #12]
 800465c:	1a9b      	subs	r3, r3, r2
 800465e:	42ab      	cmp	r3, r5
 8004660:	dcf2      	bgt.n	8004648 <_printf_i+0x1e8>
 8004662:	e7eb      	b.n	800463c <_printf_i+0x1dc>
 8004664:	2500      	movs	r5, #0
 8004666:	f104 0919 	add.w	r9, r4, #25
 800466a:	e7f5      	b.n	8004658 <_printf_i+0x1f8>
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1ac      	bne.n	80045ca <_printf_i+0x16a>
 8004670:	7803      	ldrb	r3, [r0, #0]
 8004672:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004676:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800467a:	e76c      	b.n	8004556 <_printf_i+0xf6>
 800467c:	08004e8d 	.word	0x08004e8d
 8004680:	08004e9e 	.word	0x08004e9e

08004684 <_sbrk_r>:
 8004684:	b538      	push	{r3, r4, r5, lr}
 8004686:	2300      	movs	r3, #0
 8004688:	4c05      	ldr	r4, [pc, #20]	; (80046a0 <_sbrk_r+0x1c>)
 800468a:	4605      	mov	r5, r0
 800468c:	4608      	mov	r0, r1
 800468e:	6023      	str	r3, [r4, #0]
 8004690:	f7fb fef6 	bl	8000480 <_sbrk>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d102      	bne.n	800469e <_sbrk_r+0x1a>
 8004698:	6823      	ldr	r3, [r4, #0]
 800469a:	b103      	cbz	r3, 800469e <_sbrk_r+0x1a>
 800469c:	602b      	str	r3, [r5, #0]
 800469e:	bd38      	pop	{r3, r4, r5, pc}
 80046a0:	20000180 	.word	0x20000180

080046a4 <__sread>:
 80046a4:	b510      	push	{r4, lr}
 80046a6:	460c      	mov	r4, r1
 80046a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046ac:	f000 faa2 	bl	8004bf4 <_read_r>
 80046b0:	2800      	cmp	r0, #0
 80046b2:	bfab      	itete	ge
 80046b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80046b6:	89a3      	ldrhlt	r3, [r4, #12]
 80046b8:	181b      	addge	r3, r3, r0
 80046ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80046be:	bfac      	ite	ge
 80046c0:	6563      	strge	r3, [r4, #84]	; 0x54
 80046c2:	81a3      	strhlt	r3, [r4, #12]
 80046c4:	bd10      	pop	{r4, pc}

080046c6 <__swrite>:
 80046c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80046ca:	461f      	mov	r7, r3
 80046cc:	898b      	ldrh	r3, [r1, #12]
 80046ce:	4605      	mov	r5, r0
 80046d0:	05db      	lsls	r3, r3, #23
 80046d2:	460c      	mov	r4, r1
 80046d4:	4616      	mov	r6, r2
 80046d6:	d505      	bpl.n	80046e4 <__swrite+0x1e>
 80046d8:	2302      	movs	r3, #2
 80046da:	2200      	movs	r2, #0
 80046dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80046e0:	f000 f9b6 	bl	8004a50 <_lseek_r>
 80046e4:	89a3      	ldrh	r3, [r4, #12]
 80046e6:	4632      	mov	r2, r6
 80046e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046ec:	81a3      	strh	r3, [r4, #12]
 80046ee:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80046f2:	463b      	mov	r3, r7
 80046f4:	4628      	mov	r0, r5
 80046f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80046fa:	f000 b869 	b.w	80047d0 <_write_r>

080046fe <__sseek>:
 80046fe:	b510      	push	{r4, lr}
 8004700:	460c      	mov	r4, r1
 8004702:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004706:	f000 f9a3 	bl	8004a50 <_lseek_r>
 800470a:	1c43      	adds	r3, r0, #1
 800470c:	89a3      	ldrh	r3, [r4, #12]
 800470e:	bf15      	itete	ne
 8004710:	6560      	strne	r0, [r4, #84]	; 0x54
 8004712:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004716:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800471a:	81a3      	strheq	r3, [r4, #12]
 800471c:	bf18      	it	ne
 800471e:	81a3      	strhne	r3, [r4, #12]
 8004720:	bd10      	pop	{r4, pc}

08004722 <__sclose>:
 8004722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004726:	f000 b8d3 	b.w	80048d0 <_close_r>
	...

0800472c <__swbuf_r>:
 800472c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472e:	460e      	mov	r6, r1
 8004730:	4614      	mov	r4, r2
 8004732:	4605      	mov	r5, r0
 8004734:	b118      	cbz	r0, 800473e <__swbuf_r+0x12>
 8004736:	6983      	ldr	r3, [r0, #24]
 8004738:	b90b      	cbnz	r3, 800473e <__swbuf_r+0x12>
 800473a:	f7ff fbf9 	bl	8003f30 <__sinit>
 800473e:	4b21      	ldr	r3, [pc, #132]	; (80047c4 <__swbuf_r+0x98>)
 8004740:	429c      	cmp	r4, r3
 8004742:	d12a      	bne.n	800479a <__swbuf_r+0x6e>
 8004744:	686c      	ldr	r4, [r5, #4]
 8004746:	69a3      	ldr	r3, [r4, #24]
 8004748:	60a3      	str	r3, [r4, #8]
 800474a:	89a3      	ldrh	r3, [r4, #12]
 800474c:	071a      	lsls	r2, r3, #28
 800474e:	d52e      	bpl.n	80047ae <__swbuf_r+0x82>
 8004750:	6923      	ldr	r3, [r4, #16]
 8004752:	b363      	cbz	r3, 80047ae <__swbuf_r+0x82>
 8004754:	6923      	ldr	r3, [r4, #16]
 8004756:	6820      	ldr	r0, [r4, #0]
 8004758:	b2f6      	uxtb	r6, r6
 800475a:	1ac0      	subs	r0, r0, r3
 800475c:	6963      	ldr	r3, [r4, #20]
 800475e:	4637      	mov	r7, r6
 8004760:	4283      	cmp	r3, r0
 8004762:	dc04      	bgt.n	800476e <__swbuf_r+0x42>
 8004764:	4621      	mov	r1, r4
 8004766:	4628      	mov	r0, r5
 8004768:	f000 f948 	bl	80049fc <_fflush_r>
 800476c:	bb28      	cbnz	r0, 80047ba <__swbuf_r+0x8e>
 800476e:	68a3      	ldr	r3, [r4, #8]
 8004770:	3001      	adds	r0, #1
 8004772:	3b01      	subs	r3, #1
 8004774:	60a3      	str	r3, [r4, #8]
 8004776:	6823      	ldr	r3, [r4, #0]
 8004778:	1c5a      	adds	r2, r3, #1
 800477a:	6022      	str	r2, [r4, #0]
 800477c:	701e      	strb	r6, [r3, #0]
 800477e:	6963      	ldr	r3, [r4, #20]
 8004780:	4283      	cmp	r3, r0
 8004782:	d004      	beq.n	800478e <__swbuf_r+0x62>
 8004784:	89a3      	ldrh	r3, [r4, #12]
 8004786:	07db      	lsls	r3, r3, #31
 8004788:	d519      	bpl.n	80047be <__swbuf_r+0x92>
 800478a:	2e0a      	cmp	r6, #10
 800478c:	d117      	bne.n	80047be <__swbuf_r+0x92>
 800478e:	4621      	mov	r1, r4
 8004790:	4628      	mov	r0, r5
 8004792:	f000 f933 	bl	80049fc <_fflush_r>
 8004796:	b190      	cbz	r0, 80047be <__swbuf_r+0x92>
 8004798:	e00f      	b.n	80047ba <__swbuf_r+0x8e>
 800479a:	4b0b      	ldr	r3, [pc, #44]	; (80047c8 <__swbuf_r+0x9c>)
 800479c:	429c      	cmp	r4, r3
 800479e:	d101      	bne.n	80047a4 <__swbuf_r+0x78>
 80047a0:	68ac      	ldr	r4, [r5, #8]
 80047a2:	e7d0      	b.n	8004746 <__swbuf_r+0x1a>
 80047a4:	4b09      	ldr	r3, [pc, #36]	; (80047cc <__swbuf_r+0xa0>)
 80047a6:	429c      	cmp	r4, r3
 80047a8:	bf08      	it	eq
 80047aa:	68ec      	ldreq	r4, [r5, #12]
 80047ac:	e7cb      	b.n	8004746 <__swbuf_r+0x1a>
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
 80047b2:	f000 f81f 	bl	80047f4 <__swsetup_r>
 80047b6:	2800      	cmp	r0, #0
 80047b8:	d0cc      	beq.n	8004754 <__swbuf_r+0x28>
 80047ba:	f04f 37ff 	mov.w	r7, #4294967295
 80047be:	4638      	mov	r0, r7
 80047c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c2:	bf00      	nop
 80047c4:	08004e3c 	.word	0x08004e3c
 80047c8:	08004e5c 	.word	0x08004e5c
 80047cc:	08004e1c 	.word	0x08004e1c

080047d0 <_write_r>:
 80047d0:	b538      	push	{r3, r4, r5, lr}
 80047d2:	4605      	mov	r5, r0
 80047d4:	4608      	mov	r0, r1
 80047d6:	4611      	mov	r1, r2
 80047d8:	2200      	movs	r2, #0
 80047da:	4c05      	ldr	r4, [pc, #20]	; (80047f0 <_write_r+0x20>)
 80047dc:	6022      	str	r2, [r4, #0]
 80047de:	461a      	mov	r2, r3
 80047e0:	f7fb fe01 	bl	80003e6 <_write>
 80047e4:	1c43      	adds	r3, r0, #1
 80047e6:	d102      	bne.n	80047ee <_write_r+0x1e>
 80047e8:	6823      	ldr	r3, [r4, #0]
 80047ea:	b103      	cbz	r3, 80047ee <_write_r+0x1e>
 80047ec:	602b      	str	r3, [r5, #0]
 80047ee:	bd38      	pop	{r3, r4, r5, pc}
 80047f0:	20000180 	.word	0x20000180

080047f4 <__swsetup_r>:
 80047f4:	4b32      	ldr	r3, [pc, #200]	; (80048c0 <__swsetup_r+0xcc>)
 80047f6:	b570      	push	{r4, r5, r6, lr}
 80047f8:	681d      	ldr	r5, [r3, #0]
 80047fa:	4606      	mov	r6, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	b125      	cbz	r5, 800480a <__swsetup_r+0x16>
 8004800:	69ab      	ldr	r3, [r5, #24]
 8004802:	b913      	cbnz	r3, 800480a <__swsetup_r+0x16>
 8004804:	4628      	mov	r0, r5
 8004806:	f7ff fb93 	bl	8003f30 <__sinit>
 800480a:	4b2e      	ldr	r3, [pc, #184]	; (80048c4 <__swsetup_r+0xd0>)
 800480c:	429c      	cmp	r4, r3
 800480e:	d10f      	bne.n	8004830 <__swsetup_r+0x3c>
 8004810:	686c      	ldr	r4, [r5, #4]
 8004812:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004816:	b29a      	uxth	r2, r3
 8004818:	0715      	lsls	r5, r2, #28
 800481a:	d42c      	bmi.n	8004876 <__swsetup_r+0x82>
 800481c:	06d0      	lsls	r0, r2, #27
 800481e:	d411      	bmi.n	8004844 <__swsetup_r+0x50>
 8004820:	2209      	movs	r2, #9
 8004822:	6032      	str	r2, [r6, #0]
 8004824:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004828:	81a3      	strh	r3, [r4, #12]
 800482a:	f04f 30ff 	mov.w	r0, #4294967295
 800482e:	e03e      	b.n	80048ae <__swsetup_r+0xba>
 8004830:	4b25      	ldr	r3, [pc, #148]	; (80048c8 <__swsetup_r+0xd4>)
 8004832:	429c      	cmp	r4, r3
 8004834:	d101      	bne.n	800483a <__swsetup_r+0x46>
 8004836:	68ac      	ldr	r4, [r5, #8]
 8004838:	e7eb      	b.n	8004812 <__swsetup_r+0x1e>
 800483a:	4b24      	ldr	r3, [pc, #144]	; (80048cc <__swsetup_r+0xd8>)
 800483c:	429c      	cmp	r4, r3
 800483e:	bf08      	it	eq
 8004840:	68ec      	ldreq	r4, [r5, #12]
 8004842:	e7e6      	b.n	8004812 <__swsetup_r+0x1e>
 8004844:	0751      	lsls	r1, r2, #29
 8004846:	d512      	bpl.n	800486e <__swsetup_r+0x7a>
 8004848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484a:	b141      	cbz	r1, 800485e <__swsetup_r+0x6a>
 800484c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004850:	4299      	cmp	r1, r3
 8004852:	d002      	beq.n	800485a <__swsetup_r+0x66>
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f981 	bl	8004b5c <_free_r>
 800485a:	2300      	movs	r3, #0
 800485c:	6363      	str	r3, [r4, #52]	; 0x34
 800485e:	89a3      	ldrh	r3, [r4, #12]
 8004860:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004864:	81a3      	strh	r3, [r4, #12]
 8004866:	2300      	movs	r3, #0
 8004868:	6063      	str	r3, [r4, #4]
 800486a:	6923      	ldr	r3, [r4, #16]
 800486c:	6023      	str	r3, [r4, #0]
 800486e:	89a3      	ldrh	r3, [r4, #12]
 8004870:	f043 0308 	orr.w	r3, r3, #8
 8004874:	81a3      	strh	r3, [r4, #12]
 8004876:	6923      	ldr	r3, [r4, #16]
 8004878:	b94b      	cbnz	r3, 800488e <__swsetup_r+0x9a>
 800487a:	89a3      	ldrh	r3, [r4, #12]
 800487c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004880:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004884:	d003      	beq.n	800488e <__swsetup_r+0x9a>
 8004886:	4621      	mov	r1, r4
 8004888:	4630      	mov	r0, r6
 800488a:	f000 f917 	bl	8004abc <__smakebuf_r>
 800488e:	89a2      	ldrh	r2, [r4, #12]
 8004890:	f012 0301 	ands.w	r3, r2, #1
 8004894:	d00c      	beq.n	80048b0 <__swsetup_r+0xbc>
 8004896:	2300      	movs	r3, #0
 8004898:	60a3      	str	r3, [r4, #8]
 800489a:	6963      	ldr	r3, [r4, #20]
 800489c:	425b      	negs	r3, r3
 800489e:	61a3      	str	r3, [r4, #24]
 80048a0:	6923      	ldr	r3, [r4, #16]
 80048a2:	b953      	cbnz	r3, 80048ba <__swsetup_r+0xc6>
 80048a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048a8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80048ac:	d1ba      	bne.n	8004824 <__swsetup_r+0x30>
 80048ae:	bd70      	pop	{r4, r5, r6, pc}
 80048b0:	0792      	lsls	r2, r2, #30
 80048b2:	bf58      	it	pl
 80048b4:	6963      	ldrpl	r3, [r4, #20]
 80048b6:	60a3      	str	r3, [r4, #8]
 80048b8:	e7f2      	b.n	80048a0 <__swsetup_r+0xac>
 80048ba:	2000      	movs	r0, #0
 80048bc:	e7f7      	b.n	80048ae <__swsetup_r+0xba>
 80048be:	bf00      	nop
 80048c0:	2000000c 	.word	0x2000000c
 80048c4:	08004e3c 	.word	0x08004e3c
 80048c8:	08004e5c 	.word	0x08004e5c
 80048cc:	08004e1c 	.word	0x08004e1c

080048d0 <_close_r>:
 80048d0:	b538      	push	{r3, r4, r5, lr}
 80048d2:	2300      	movs	r3, #0
 80048d4:	4c05      	ldr	r4, [pc, #20]	; (80048ec <_close_r+0x1c>)
 80048d6:	4605      	mov	r5, r0
 80048d8:	4608      	mov	r0, r1
 80048da:	6023      	str	r3, [r4, #0]
 80048dc:	f7fb fd9f 	bl	800041e <_close>
 80048e0:	1c43      	adds	r3, r0, #1
 80048e2:	d102      	bne.n	80048ea <_close_r+0x1a>
 80048e4:	6823      	ldr	r3, [r4, #0]
 80048e6:	b103      	cbz	r3, 80048ea <_close_r+0x1a>
 80048e8:	602b      	str	r3, [r5, #0]
 80048ea:	bd38      	pop	{r3, r4, r5, pc}
 80048ec:	20000180 	.word	0x20000180

080048f0 <__sflush_r>:
 80048f0:	898a      	ldrh	r2, [r1, #12]
 80048f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048f6:	4605      	mov	r5, r0
 80048f8:	0710      	lsls	r0, r2, #28
 80048fa:	460c      	mov	r4, r1
 80048fc:	d458      	bmi.n	80049b0 <__sflush_r+0xc0>
 80048fe:	684b      	ldr	r3, [r1, #4]
 8004900:	2b00      	cmp	r3, #0
 8004902:	dc05      	bgt.n	8004910 <__sflush_r+0x20>
 8004904:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004906:	2b00      	cmp	r3, #0
 8004908:	dc02      	bgt.n	8004910 <__sflush_r+0x20>
 800490a:	2000      	movs	r0, #0
 800490c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004910:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004912:	2e00      	cmp	r6, #0
 8004914:	d0f9      	beq.n	800490a <__sflush_r+0x1a>
 8004916:	2300      	movs	r3, #0
 8004918:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800491c:	682f      	ldr	r7, [r5, #0]
 800491e:	6a21      	ldr	r1, [r4, #32]
 8004920:	602b      	str	r3, [r5, #0]
 8004922:	d032      	beq.n	800498a <__sflush_r+0x9a>
 8004924:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004926:	89a3      	ldrh	r3, [r4, #12]
 8004928:	075a      	lsls	r2, r3, #29
 800492a:	d505      	bpl.n	8004938 <__sflush_r+0x48>
 800492c:	6863      	ldr	r3, [r4, #4]
 800492e:	1ac0      	subs	r0, r0, r3
 8004930:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004932:	b10b      	cbz	r3, 8004938 <__sflush_r+0x48>
 8004934:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004936:	1ac0      	subs	r0, r0, r3
 8004938:	2300      	movs	r3, #0
 800493a:	4602      	mov	r2, r0
 800493c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800493e:	6a21      	ldr	r1, [r4, #32]
 8004940:	4628      	mov	r0, r5
 8004942:	47b0      	blx	r6
 8004944:	1c43      	adds	r3, r0, #1
 8004946:	89a3      	ldrh	r3, [r4, #12]
 8004948:	d106      	bne.n	8004958 <__sflush_r+0x68>
 800494a:	6829      	ldr	r1, [r5, #0]
 800494c:	291d      	cmp	r1, #29
 800494e:	d848      	bhi.n	80049e2 <__sflush_r+0xf2>
 8004950:	4a29      	ldr	r2, [pc, #164]	; (80049f8 <__sflush_r+0x108>)
 8004952:	40ca      	lsrs	r2, r1
 8004954:	07d6      	lsls	r6, r2, #31
 8004956:	d544      	bpl.n	80049e2 <__sflush_r+0xf2>
 8004958:	2200      	movs	r2, #0
 800495a:	6062      	str	r2, [r4, #4]
 800495c:	6922      	ldr	r2, [r4, #16]
 800495e:	04d9      	lsls	r1, r3, #19
 8004960:	6022      	str	r2, [r4, #0]
 8004962:	d504      	bpl.n	800496e <__sflush_r+0x7e>
 8004964:	1c42      	adds	r2, r0, #1
 8004966:	d101      	bne.n	800496c <__sflush_r+0x7c>
 8004968:	682b      	ldr	r3, [r5, #0]
 800496a:	b903      	cbnz	r3, 800496e <__sflush_r+0x7e>
 800496c:	6560      	str	r0, [r4, #84]	; 0x54
 800496e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004970:	602f      	str	r7, [r5, #0]
 8004972:	2900      	cmp	r1, #0
 8004974:	d0c9      	beq.n	800490a <__sflush_r+0x1a>
 8004976:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800497a:	4299      	cmp	r1, r3
 800497c:	d002      	beq.n	8004984 <__sflush_r+0x94>
 800497e:	4628      	mov	r0, r5
 8004980:	f000 f8ec 	bl	8004b5c <_free_r>
 8004984:	2000      	movs	r0, #0
 8004986:	6360      	str	r0, [r4, #52]	; 0x34
 8004988:	e7c0      	b.n	800490c <__sflush_r+0x1c>
 800498a:	2301      	movs	r3, #1
 800498c:	4628      	mov	r0, r5
 800498e:	47b0      	blx	r6
 8004990:	1c41      	adds	r1, r0, #1
 8004992:	d1c8      	bne.n	8004926 <__sflush_r+0x36>
 8004994:	682b      	ldr	r3, [r5, #0]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d0c5      	beq.n	8004926 <__sflush_r+0x36>
 800499a:	2b1d      	cmp	r3, #29
 800499c:	d001      	beq.n	80049a2 <__sflush_r+0xb2>
 800499e:	2b16      	cmp	r3, #22
 80049a0:	d101      	bne.n	80049a6 <__sflush_r+0xb6>
 80049a2:	602f      	str	r7, [r5, #0]
 80049a4:	e7b1      	b.n	800490a <__sflush_r+0x1a>
 80049a6:	89a3      	ldrh	r3, [r4, #12]
 80049a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049ac:	81a3      	strh	r3, [r4, #12]
 80049ae:	e7ad      	b.n	800490c <__sflush_r+0x1c>
 80049b0:	690f      	ldr	r7, [r1, #16]
 80049b2:	2f00      	cmp	r7, #0
 80049b4:	d0a9      	beq.n	800490a <__sflush_r+0x1a>
 80049b6:	0793      	lsls	r3, r2, #30
 80049b8:	bf18      	it	ne
 80049ba:	2300      	movne	r3, #0
 80049bc:	680e      	ldr	r6, [r1, #0]
 80049be:	bf08      	it	eq
 80049c0:	694b      	ldreq	r3, [r1, #20]
 80049c2:	eba6 0807 	sub.w	r8, r6, r7
 80049c6:	600f      	str	r7, [r1, #0]
 80049c8:	608b      	str	r3, [r1, #8]
 80049ca:	f1b8 0f00 	cmp.w	r8, #0
 80049ce:	dd9c      	ble.n	800490a <__sflush_r+0x1a>
 80049d0:	4643      	mov	r3, r8
 80049d2:	463a      	mov	r2, r7
 80049d4:	6a21      	ldr	r1, [r4, #32]
 80049d6:	4628      	mov	r0, r5
 80049d8:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80049da:	47b0      	blx	r6
 80049dc:	2800      	cmp	r0, #0
 80049de:	dc06      	bgt.n	80049ee <__sflush_r+0xfe>
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	e78e      	b.n	800490c <__sflush_r+0x1c>
 80049ee:	4407      	add	r7, r0
 80049f0:	eba8 0800 	sub.w	r8, r8, r0
 80049f4:	e7e9      	b.n	80049ca <__sflush_r+0xda>
 80049f6:	bf00      	nop
 80049f8:	20400001 	.word	0x20400001

080049fc <_fflush_r>:
 80049fc:	b538      	push	{r3, r4, r5, lr}
 80049fe:	690b      	ldr	r3, [r1, #16]
 8004a00:	4605      	mov	r5, r0
 8004a02:	460c      	mov	r4, r1
 8004a04:	b1db      	cbz	r3, 8004a3e <_fflush_r+0x42>
 8004a06:	b118      	cbz	r0, 8004a10 <_fflush_r+0x14>
 8004a08:	6983      	ldr	r3, [r0, #24]
 8004a0a:	b90b      	cbnz	r3, 8004a10 <_fflush_r+0x14>
 8004a0c:	f7ff fa90 	bl	8003f30 <__sinit>
 8004a10:	4b0c      	ldr	r3, [pc, #48]	; (8004a44 <_fflush_r+0x48>)
 8004a12:	429c      	cmp	r4, r3
 8004a14:	d109      	bne.n	8004a2a <_fflush_r+0x2e>
 8004a16:	686c      	ldr	r4, [r5, #4]
 8004a18:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a1c:	b17b      	cbz	r3, 8004a3e <_fflush_r+0x42>
 8004a1e:	4621      	mov	r1, r4
 8004a20:	4628      	mov	r0, r5
 8004a22:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a26:	f7ff bf63 	b.w	80048f0 <__sflush_r>
 8004a2a:	4b07      	ldr	r3, [pc, #28]	; (8004a48 <_fflush_r+0x4c>)
 8004a2c:	429c      	cmp	r4, r3
 8004a2e:	d101      	bne.n	8004a34 <_fflush_r+0x38>
 8004a30:	68ac      	ldr	r4, [r5, #8]
 8004a32:	e7f1      	b.n	8004a18 <_fflush_r+0x1c>
 8004a34:	4b05      	ldr	r3, [pc, #20]	; (8004a4c <_fflush_r+0x50>)
 8004a36:	429c      	cmp	r4, r3
 8004a38:	bf08      	it	eq
 8004a3a:	68ec      	ldreq	r4, [r5, #12]
 8004a3c:	e7ec      	b.n	8004a18 <_fflush_r+0x1c>
 8004a3e:	2000      	movs	r0, #0
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	bf00      	nop
 8004a44:	08004e3c 	.word	0x08004e3c
 8004a48:	08004e5c 	.word	0x08004e5c
 8004a4c:	08004e1c 	.word	0x08004e1c

08004a50 <_lseek_r>:
 8004a50:	b538      	push	{r3, r4, r5, lr}
 8004a52:	4605      	mov	r5, r0
 8004a54:	4608      	mov	r0, r1
 8004a56:	4611      	mov	r1, r2
 8004a58:	2200      	movs	r2, #0
 8004a5a:	4c05      	ldr	r4, [pc, #20]	; (8004a70 <_lseek_r+0x20>)
 8004a5c:	6022      	str	r2, [r4, #0]
 8004a5e:	461a      	mov	r2, r3
 8004a60:	f7fb fd01 	bl	8000466 <_lseek>
 8004a64:	1c43      	adds	r3, r0, #1
 8004a66:	d102      	bne.n	8004a6e <_lseek_r+0x1e>
 8004a68:	6823      	ldr	r3, [r4, #0]
 8004a6a:	b103      	cbz	r3, 8004a6e <_lseek_r+0x1e>
 8004a6c:	602b      	str	r3, [r5, #0]
 8004a6e:	bd38      	pop	{r3, r4, r5, pc}
 8004a70:	20000180 	.word	0x20000180

08004a74 <__swhatbuf_r>:
 8004a74:	b570      	push	{r4, r5, r6, lr}
 8004a76:	460e      	mov	r6, r1
 8004a78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004a7c:	b096      	sub	sp, #88	; 0x58
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	4614      	mov	r4, r2
 8004a82:	461d      	mov	r5, r3
 8004a84:	da07      	bge.n	8004a96 <__swhatbuf_r+0x22>
 8004a86:	2300      	movs	r3, #0
 8004a88:	602b      	str	r3, [r5, #0]
 8004a8a:	89b3      	ldrh	r3, [r6, #12]
 8004a8c:	061a      	lsls	r2, r3, #24
 8004a8e:	d410      	bmi.n	8004ab2 <__swhatbuf_r+0x3e>
 8004a90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a94:	e00e      	b.n	8004ab4 <__swhatbuf_r+0x40>
 8004a96:	466a      	mov	r2, sp
 8004a98:	f000 f8be 	bl	8004c18 <_fstat_r>
 8004a9c:	2800      	cmp	r0, #0
 8004a9e:	dbf2      	blt.n	8004a86 <__swhatbuf_r+0x12>
 8004aa0:	9a01      	ldr	r2, [sp, #4]
 8004aa2:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004aa6:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004aaa:	425a      	negs	r2, r3
 8004aac:	415a      	adcs	r2, r3
 8004aae:	602a      	str	r2, [r5, #0]
 8004ab0:	e7ee      	b.n	8004a90 <__swhatbuf_r+0x1c>
 8004ab2:	2340      	movs	r3, #64	; 0x40
 8004ab4:	2000      	movs	r0, #0
 8004ab6:	6023      	str	r3, [r4, #0]
 8004ab8:	b016      	add	sp, #88	; 0x58
 8004aba:	bd70      	pop	{r4, r5, r6, pc}

08004abc <__smakebuf_r>:
 8004abc:	898b      	ldrh	r3, [r1, #12]
 8004abe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ac0:	079d      	lsls	r5, r3, #30
 8004ac2:	4606      	mov	r6, r0
 8004ac4:	460c      	mov	r4, r1
 8004ac6:	d507      	bpl.n	8004ad8 <__smakebuf_r+0x1c>
 8004ac8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004acc:	6023      	str	r3, [r4, #0]
 8004ace:	6123      	str	r3, [r4, #16]
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	6163      	str	r3, [r4, #20]
 8004ad4:	b002      	add	sp, #8
 8004ad6:	bd70      	pop	{r4, r5, r6, pc}
 8004ad8:	ab01      	add	r3, sp, #4
 8004ada:	466a      	mov	r2, sp
 8004adc:	f7ff ffca 	bl	8004a74 <__swhatbuf_r>
 8004ae0:	9900      	ldr	r1, [sp, #0]
 8004ae2:	4605      	mov	r5, r0
 8004ae4:	4630      	mov	r0, r6
 8004ae6:	f7ff faad 	bl	8004044 <_malloc_r>
 8004aea:	b948      	cbnz	r0, 8004b00 <__smakebuf_r+0x44>
 8004aec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004af0:	059a      	lsls	r2, r3, #22
 8004af2:	d4ef      	bmi.n	8004ad4 <__smakebuf_r+0x18>
 8004af4:	f023 0303 	bic.w	r3, r3, #3
 8004af8:	f043 0302 	orr.w	r3, r3, #2
 8004afc:	81a3      	strh	r3, [r4, #12]
 8004afe:	e7e3      	b.n	8004ac8 <__smakebuf_r+0xc>
 8004b00:	4b0d      	ldr	r3, [pc, #52]	; (8004b38 <__smakebuf_r+0x7c>)
 8004b02:	62b3      	str	r3, [r6, #40]	; 0x28
 8004b04:	89a3      	ldrh	r3, [r4, #12]
 8004b06:	6020      	str	r0, [r4, #0]
 8004b08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b0c:	81a3      	strh	r3, [r4, #12]
 8004b0e:	9b00      	ldr	r3, [sp, #0]
 8004b10:	6120      	str	r0, [r4, #16]
 8004b12:	6163      	str	r3, [r4, #20]
 8004b14:	9b01      	ldr	r3, [sp, #4]
 8004b16:	b15b      	cbz	r3, 8004b30 <__smakebuf_r+0x74>
 8004b18:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f000 f88d 	bl	8004c3c <_isatty_r>
 8004b22:	b128      	cbz	r0, 8004b30 <__smakebuf_r+0x74>
 8004b24:	89a3      	ldrh	r3, [r4, #12]
 8004b26:	f023 0303 	bic.w	r3, r3, #3
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	81a3      	strh	r3, [r4, #12]
 8004b30:	89a3      	ldrh	r3, [r4, #12]
 8004b32:	431d      	orrs	r5, r3
 8004b34:	81a5      	strh	r5, [r4, #12]
 8004b36:	e7cd      	b.n	8004ad4 <__smakebuf_r+0x18>
 8004b38:	08003ef9 	.word	0x08003ef9

08004b3c <memchr>:
 8004b3c:	b510      	push	{r4, lr}
 8004b3e:	b2c9      	uxtb	r1, r1
 8004b40:	4402      	add	r2, r0
 8004b42:	4290      	cmp	r0, r2
 8004b44:	4603      	mov	r3, r0
 8004b46:	d101      	bne.n	8004b4c <memchr+0x10>
 8004b48:	2300      	movs	r3, #0
 8004b4a:	e003      	b.n	8004b54 <memchr+0x18>
 8004b4c:	781c      	ldrb	r4, [r3, #0]
 8004b4e:	3001      	adds	r0, #1
 8004b50:	428c      	cmp	r4, r1
 8004b52:	d1f6      	bne.n	8004b42 <memchr+0x6>
 8004b54:	4618      	mov	r0, r3
 8004b56:	bd10      	pop	{r4, pc}

08004b58 <__malloc_lock>:
 8004b58:	4770      	bx	lr

08004b5a <__malloc_unlock>:
 8004b5a:	4770      	bx	lr

08004b5c <_free_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4605      	mov	r5, r0
 8004b60:	2900      	cmp	r1, #0
 8004b62:	d043      	beq.n	8004bec <_free_r+0x90>
 8004b64:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004b68:	1f0c      	subs	r4, r1, #4
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	bfb8      	it	lt
 8004b6e:	18e4      	addlt	r4, r4, r3
 8004b70:	f7ff fff2 	bl	8004b58 <__malloc_lock>
 8004b74:	4a1e      	ldr	r2, [pc, #120]	; (8004bf0 <_free_r+0x94>)
 8004b76:	6813      	ldr	r3, [r2, #0]
 8004b78:	4610      	mov	r0, r2
 8004b7a:	b933      	cbnz	r3, 8004b8a <_free_r+0x2e>
 8004b7c:	6063      	str	r3, [r4, #4]
 8004b7e:	6014      	str	r4, [r2, #0]
 8004b80:	4628      	mov	r0, r5
 8004b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b86:	f7ff bfe8 	b.w	8004b5a <__malloc_unlock>
 8004b8a:	42a3      	cmp	r3, r4
 8004b8c:	d90b      	bls.n	8004ba6 <_free_r+0x4a>
 8004b8e:	6821      	ldr	r1, [r4, #0]
 8004b90:	1862      	adds	r2, r4, r1
 8004b92:	4293      	cmp	r3, r2
 8004b94:	bf01      	itttt	eq
 8004b96:	681a      	ldreq	r2, [r3, #0]
 8004b98:	685b      	ldreq	r3, [r3, #4]
 8004b9a:	1852      	addeq	r2, r2, r1
 8004b9c:	6022      	streq	r2, [r4, #0]
 8004b9e:	6063      	str	r3, [r4, #4]
 8004ba0:	6004      	str	r4, [r0, #0]
 8004ba2:	e7ed      	b.n	8004b80 <_free_r+0x24>
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	685a      	ldr	r2, [r3, #4]
 8004ba8:	b10a      	cbz	r2, 8004bae <_free_r+0x52>
 8004baa:	42a2      	cmp	r2, r4
 8004bac:	d9fa      	bls.n	8004ba4 <_free_r+0x48>
 8004bae:	6819      	ldr	r1, [r3, #0]
 8004bb0:	1858      	adds	r0, r3, r1
 8004bb2:	42a0      	cmp	r0, r4
 8004bb4:	d10b      	bne.n	8004bce <_free_r+0x72>
 8004bb6:	6820      	ldr	r0, [r4, #0]
 8004bb8:	4401      	add	r1, r0
 8004bba:	1858      	adds	r0, r3, r1
 8004bbc:	4282      	cmp	r2, r0
 8004bbe:	6019      	str	r1, [r3, #0]
 8004bc0:	d1de      	bne.n	8004b80 <_free_r+0x24>
 8004bc2:	6810      	ldr	r0, [r2, #0]
 8004bc4:	6852      	ldr	r2, [r2, #4]
 8004bc6:	4401      	add	r1, r0
 8004bc8:	6019      	str	r1, [r3, #0]
 8004bca:	605a      	str	r2, [r3, #4]
 8004bcc:	e7d8      	b.n	8004b80 <_free_r+0x24>
 8004bce:	d902      	bls.n	8004bd6 <_free_r+0x7a>
 8004bd0:	230c      	movs	r3, #12
 8004bd2:	602b      	str	r3, [r5, #0]
 8004bd4:	e7d4      	b.n	8004b80 <_free_r+0x24>
 8004bd6:	6820      	ldr	r0, [r4, #0]
 8004bd8:	1821      	adds	r1, r4, r0
 8004bda:	428a      	cmp	r2, r1
 8004bdc:	bf01      	itttt	eq
 8004bde:	6811      	ldreq	r1, [r2, #0]
 8004be0:	6852      	ldreq	r2, [r2, #4]
 8004be2:	1809      	addeq	r1, r1, r0
 8004be4:	6021      	streq	r1, [r4, #0]
 8004be6:	6062      	str	r2, [r4, #4]
 8004be8:	605c      	str	r4, [r3, #4]
 8004bea:	e7c9      	b.n	8004b80 <_free_r+0x24>
 8004bec:	bd38      	pop	{r3, r4, r5, pc}
 8004bee:	bf00      	nop
 8004bf0:	200000a4 	.word	0x200000a4

08004bf4 <_read_r>:
 8004bf4:	b538      	push	{r3, r4, r5, lr}
 8004bf6:	4605      	mov	r5, r0
 8004bf8:	4608      	mov	r0, r1
 8004bfa:	4611      	mov	r1, r2
 8004bfc:	2200      	movs	r2, #0
 8004bfe:	4c05      	ldr	r4, [pc, #20]	; (8004c14 <_read_r+0x20>)
 8004c00:	6022      	str	r2, [r4, #0]
 8004c02:	461a      	mov	r2, r3
 8004c04:	f7fb fbd2 	bl	80003ac <_read>
 8004c08:	1c43      	adds	r3, r0, #1
 8004c0a:	d102      	bne.n	8004c12 <_read_r+0x1e>
 8004c0c:	6823      	ldr	r3, [r4, #0]
 8004c0e:	b103      	cbz	r3, 8004c12 <_read_r+0x1e>
 8004c10:	602b      	str	r3, [r5, #0]
 8004c12:	bd38      	pop	{r3, r4, r5, pc}
 8004c14:	20000180 	.word	0x20000180

08004c18 <_fstat_r>:
 8004c18:	b538      	push	{r3, r4, r5, lr}
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	4c06      	ldr	r4, [pc, #24]	; (8004c38 <_fstat_r+0x20>)
 8004c1e:	4605      	mov	r5, r0
 8004c20:	4608      	mov	r0, r1
 8004c22:	4611      	mov	r1, r2
 8004c24:	6023      	str	r3, [r4, #0]
 8004c26:	f7fb fc05 	bl	8000434 <_fstat>
 8004c2a:	1c43      	adds	r3, r0, #1
 8004c2c:	d102      	bne.n	8004c34 <_fstat_r+0x1c>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	b103      	cbz	r3, 8004c34 <_fstat_r+0x1c>
 8004c32:	602b      	str	r3, [r5, #0]
 8004c34:	bd38      	pop	{r3, r4, r5, pc}
 8004c36:	bf00      	nop
 8004c38:	20000180 	.word	0x20000180

08004c3c <_isatty_r>:
 8004c3c:	b538      	push	{r3, r4, r5, lr}
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4c05      	ldr	r4, [pc, #20]	; (8004c58 <_isatty_r+0x1c>)
 8004c42:	4605      	mov	r5, r0
 8004c44:	4608      	mov	r0, r1
 8004c46:	6023      	str	r3, [r4, #0]
 8004c48:	f7fb fc03 	bl	8000452 <_isatty>
 8004c4c:	1c43      	adds	r3, r0, #1
 8004c4e:	d102      	bne.n	8004c56 <_isatty_r+0x1a>
 8004c50:	6823      	ldr	r3, [r4, #0]
 8004c52:	b103      	cbz	r3, 8004c56 <_isatty_r+0x1a>
 8004c54:	602b      	str	r3, [r5, #0]
 8004c56:	bd38      	pop	{r3, r4, r5, pc}
 8004c58:	20000180 	.word	0x20000180

08004c5c <_init>:
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c5e:	bf00      	nop
 8004c60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c62:	bc08      	pop	{r3}
 8004c64:	469e      	mov	lr, r3
 8004c66:	4770      	bx	lr

08004c68 <_fini>:
 8004c68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c6a:	bf00      	nop
 8004c6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c6e:	bc08      	pop	{r3}
 8004c70:	469e      	mov	lr, r3
 8004c72:	4770      	bx	lr

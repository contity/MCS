
SSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003484  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08003590  08003590  00013590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003748  08003748  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08003748  08003748  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003748  08003748  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003748  08003748  00013748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800374c  0800374c  0001374c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000007c  20000070  080037c0  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ec  080037c0  000200ec  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009275  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e34  00000000  00000000  0002930e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000820  00000000  00000000  0002b148  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  0002b968  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000152f1  00000000  00000000  0002c060  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e47  00000000  00000000  00041351  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0006b7cd  00000000  00000000  0004a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5965  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002438  00000000  00000000  000b59e0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08003578 	.word	0x08003578

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08003578 	.word	0x08003578

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b28      	ldr	r3, [pc, #160]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a27      	ldr	r2, [pc, #156]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b25      	ldr	r3, [pc, #148]	; (8000204 <MX_GPIO_Init+0xb8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b22      	ldr	r3, [pc, #136]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a21      	ldr	r2, [pc, #132]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1b      	ldr	r2, [pc, #108]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <MX_GPIO_Init+0xb8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001b0:	f000 fea2 	bl	8000ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80001ba:	4814      	ldr	r0, [pc, #80]	; (800020c <MX_GPIO_Init+0xc0>)
 80001bc:	f000 fe9c 	bl	8000ef8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001da:	f000 fc53 	bl	8000a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001de:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80001e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	2301      	movs	r3, #1
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	4619      	mov	r1, r3
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <MX_GPIO_Init+0xc0>)
 80001f8:	f000 fc44 	bl	8000a84 <HAL_GPIO_Init>

}
 80001fc:	bf00      	nop
 80001fe:	3720      	adds	r7, #32
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 fa34 	bl	8000680 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f809 	bl	800022e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f7ff ff96 	bl	800014c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000220:	f000 f98a 	bl	8000538 <MX_USART1_UART_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  scheduler_init();
 8000224:	f002 fa0a 	bl	800263c <scheduler_init>
  scheduler_main();
 8000228:	f002 fa1a 	bl	8002660 <scheduler_main>

  while (1)
 800022c:	e7fe      	b.n	800022c <main+0x1c>

0800022e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022e:	b580      	push	{r7, lr}
 8000230:	b090      	sub	sp, #64	; 0x40
 8000232:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000234:	f107 0318 	add.w	r3, r7, #24
 8000238:	2228      	movs	r2, #40	; 0x28
 800023a:	2100      	movs	r1, #0
 800023c:	4618      	mov	r0, r3
 800023e:	f002 faa5 	bl	800278c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000242:	1d3b      	adds	r3, r7, #4
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]
 8000248:	605a      	str	r2, [r3, #4]
 800024a:	609a      	str	r2, [r3, #8]
 800024c:	60da      	str	r2, [r3, #12]
 800024e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000250:	2301      	movs	r3, #1
 8000252:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000254:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000258:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800025a:	2300      	movs	r3, #0
 800025c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025e:	2301      	movs	r3, #1
 8000260:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000262:	2302      	movs	r3, #2
 8000264:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000266:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800026a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800026c:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000270:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000272:	f107 0318 	add.w	r3, r7, #24
 8000276:	4618      	mov	r0, r3
 8000278:	f000 fe70 	bl	8000f5c <HAL_RCC_OscConfig>
 800027c:	4603      	mov	r3, r0
 800027e:	2b00      	cmp	r3, #0
 8000280:	d001      	beq.n	8000286 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000282:	f000 f819 	bl	80002b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000286:	230f      	movs	r3, #15
 8000288:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800028a:	2302      	movs	r3, #2
 800028c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028e:	2300      	movs	r3, #0
 8000290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000292:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000296:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000298:	2300      	movs	r3, #0
 800029a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800029c:	1d3b      	adds	r3, r7, #4
 800029e:	2102      	movs	r1, #2
 80002a0:	4618      	mov	r0, r3
 80002a2:	f001 f9cb 	bl	800163c <HAL_RCC_ClockConfig>
 80002a6:	4603      	mov	r3, r0
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ac:	f000 f804 	bl	80002b8 <Error_Handler>
  }
}
 80002b0:	bf00      	nop
 80002b2:	3740      	adds	r7, #64	; 0x40
 80002b4:	46bd      	mov	sp, r7
 80002b6:	bd80      	pop	{r7, pc}

080002b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b8:	b480      	push	{r7}
 80002ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002bc:	bf00      	nop
 80002be:	46bd      	mov	sp, r7
 80002c0:	bc80      	pop	{r7}
 80002c2:	4770      	bx	lr

080002c4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80002c4:	b480      	push	{r7}
 80002c6:	b083      	sub	sp, #12
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]
 80002cc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80002ce:	bf00      	nop
 80002d0:	370c      	adds	r7, #12
 80002d2:	46bd      	mov	sp, r7
 80002d4:	bc80      	pop	{r7}
 80002d6:	4770      	bx	lr

080002d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002de:	4b15      	ldr	r3, [pc, #84]	; (8000334 <HAL_MspInit+0x5c>)
 80002e0:	699b      	ldr	r3, [r3, #24]
 80002e2:	4a14      	ldr	r2, [pc, #80]	; (8000334 <HAL_MspInit+0x5c>)
 80002e4:	f043 0301 	orr.w	r3, r3, #1
 80002e8:	6193      	str	r3, [r2, #24]
 80002ea:	4b12      	ldr	r3, [pc, #72]	; (8000334 <HAL_MspInit+0x5c>)
 80002ec:	699b      	ldr	r3, [r3, #24]
 80002ee:	f003 0301 	and.w	r3, r3, #1
 80002f2:	60bb      	str	r3, [r7, #8]
 80002f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f6:	4b0f      	ldr	r3, [pc, #60]	; (8000334 <HAL_MspInit+0x5c>)
 80002f8:	69db      	ldr	r3, [r3, #28]
 80002fa:	4a0e      	ldr	r2, [pc, #56]	; (8000334 <HAL_MspInit+0x5c>)
 80002fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000300:	61d3      	str	r3, [r2, #28]
 8000302:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <HAL_MspInit+0x5c>)
 8000304:	69db      	ldr	r3, [r3, #28]
 8000306:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800030a:	607b      	str	r3, [r7, #4]
 800030c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800030e:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <HAL_MspInit+0x60>)
 8000310:	685b      	ldr	r3, [r3, #4]
 8000312:	60fb      	str	r3, [r7, #12]
 8000314:	68fb      	ldr	r3, [r7, #12]
 8000316:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800031a:	60fb      	str	r3, [r7, #12]
 800031c:	68fb      	ldr	r3, [r7, #12]
 800031e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000322:	60fb      	str	r3, [r7, #12]
 8000324:	4a04      	ldr	r2, [pc, #16]	; (8000338 <HAL_MspInit+0x60>)
 8000326:	68fb      	ldr	r3, [r7, #12]
 8000328:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800032a:	bf00      	nop
 800032c:	3714      	adds	r7, #20
 800032e:	46bd      	mov	sp, r7
 8000330:	bc80      	pop	{r7}
 8000332:	4770      	bx	lr
 8000334:	40021000 	.word	0x40021000
 8000338:	40010000 	.word	0x40010000

0800033c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000340:	bf00      	nop
 8000342:	46bd      	mov	sp, r7
 8000344:	bc80      	pop	{r7}
 8000346:	4770      	bx	lr

08000348 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800034c:	e7fe      	b.n	800034c <HardFault_Handler+0x4>

0800034e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <MemManage_Handler+0x4>

08000354 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <BusFault_Handler+0x4>

0800035a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035e:	e7fe      	b.n	800035e <UsageFault_Handler+0x4>

08000360 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800036c:	b480      	push	{r7}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000370:	bf00      	nop
 8000372:	46bd      	mov	sp, r7
 8000374:	bc80      	pop	{r7}
 8000376:	4770      	bx	lr

08000378 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	bc80      	pop	{r7}
 8000382:	4770      	bx	lr

08000384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000384:	b580      	push	{r7, lr}
 8000386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	scheduler_ei_tickUp_ISR();
 8000388:	f002 f9c8 	bl	800271c <scheduler_ei_tickUp_ISR>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800038c:	bf00      	nop
 800038e:	bd80      	pop	{r7, pc}

08000390 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000394:	4802      	ldr	r0, [pc, #8]	; (80003a0 <USART1_IRQHandler+0x10>)
 8000396:	f001 fcd5 	bl	8001d44 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800039a:	bf00      	nop
 800039c:	bd80      	pop	{r7, pc}
 800039e:	bf00      	nop
 80003a0:	200000a0 	.word	0x200000a0

080003a4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80003a4:	b580      	push	{r7, lr}
 80003a6:	b086      	sub	sp, #24
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	60f8      	str	r0, [r7, #12]
 80003ac:	60b9      	str	r1, [r7, #8]
 80003ae:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b0:	2300      	movs	r3, #0
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	e00a      	b.n	80003cc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003b6:	f3af 8000 	nop.w
 80003ba:	4601      	mov	r1, r0
 80003bc:	68bb      	ldr	r3, [r7, #8]
 80003be:	1c5a      	adds	r2, r3, #1
 80003c0:	60ba      	str	r2, [r7, #8]
 80003c2:	b2ca      	uxtb	r2, r1
 80003c4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003c6:	697b      	ldr	r3, [r7, #20]
 80003c8:	3301      	adds	r3, #1
 80003ca:	617b      	str	r3, [r7, #20]
 80003cc:	697a      	ldr	r2, [r7, #20]
 80003ce:	687b      	ldr	r3, [r7, #4]
 80003d0:	429a      	cmp	r2, r3
 80003d2:	dbf0      	blt.n	80003b6 <_read+0x12>
	}

return len;
 80003d4:	687b      	ldr	r3, [r7, #4]
}
 80003d6:	4618      	mov	r0, r3
 80003d8:	3718      	adds	r7, #24
 80003da:	46bd      	mov	sp, r7
 80003dc:	bd80      	pop	{r7, pc}

080003de <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003de:	b580      	push	{r7, lr}
 80003e0:	b086      	sub	sp, #24
 80003e2:	af00      	add	r7, sp, #0
 80003e4:	60f8      	str	r0, [r7, #12]
 80003e6:	60b9      	str	r1, [r7, #8]
 80003e8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ea:	2300      	movs	r3, #0
 80003ec:	617b      	str	r3, [r7, #20]
 80003ee:	e009      	b.n	8000404 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003f0:	68bb      	ldr	r3, [r7, #8]
 80003f2:	1c5a      	adds	r2, r3, #1
 80003f4:	60ba      	str	r2, [r7, #8]
 80003f6:	781b      	ldrb	r3, [r3, #0]
 80003f8:	4618      	mov	r0, r3
 80003fa:	f002 f8c1 	bl	8002580 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003fe:	697b      	ldr	r3, [r7, #20]
 8000400:	3301      	adds	r3, #1
 8000402:	617b      	str	r3, [r7, #20]
 8000404:	697a      	ldr	r2, [r7, #20]
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	429a      	cmp	r2, r3
 800040a:	dbf1      	blt.n	80003f0 <_write+0x12>
	}
	return len;
 800040c:	687b      	ldr	r3, [r7, #4]
}
 800040e:	4618      	mov	r0, r3
 8000410:	3718      	adds	r7, #24
 8000412:	46bd      	mov	sp, r7
 8000414:	bd80      	pop	{r7, pc}

08000416 <_close>:

int _close(int file)
{
 8000416:	b480      	push	{r7}
 8000418:	b083      	sub	sp, #12
 800041a:	af00      	add	r7, sp, #0
 800041c:	6078      	str	r0, [r7, #4]
	return -1;
 800041e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000422:	4618      	mov	r0, r3
 8000424:	370c      	adds	r7, #12
 8000426:	46bd      	mov	sp, r7
 8000428:	bc80      	pop	{r7}
 800042a:	4770      	bx	lr

0800042c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800043c:	605a      	str	r2, [r3, #4]
	return 0;
 800043e:	2300      	movs	r3, #0
}
 8000440:	4618      	mov	r0, r3
 8000442:	370c      	adds	r7, #12
 8000444:	46bd      	mov	sp, r7
 8000446:	bc80      	pop	{r7}
 8000448:	4770      	bx	lr

0800044a <_isatty>:

int _isatty(int file)
{
 800044a:	b480      	push	{r7}
 800044c:	b083      	sub	sp, #12
 800044e:	af00      	add	r7, sp, #0
 8000450:	6078      	str	r0, [r7, #4]
	return 1;
 8000452:	2301      	movs	r3, #1
}
 8000454:	4618      	mov	r0, r3
 8000456:	370c      	adds	r7, #12
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr

0800045e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800045e:	b480      	push	{r7}
 8000460:	b085      	sub	sp, #20
 8000462:	af00      	add	r7, sp, #0
 8000464:	60f8      	str	r0, [r7, #12]
 8000466:	60b9      	str	r1, [r7, #8]
 8000468:	607a      	str	r2, [r7, #4]
	return 0;
 800046a:	2300      	movs	r3, #0
}
 800046c:	4618      	mov	r0, r3
 800046e:	3714      	adds	r7, #20
 8000470:	46bd      	mov	sp, r7
 8000472:	bc80      	pop	{r7}
 8000474:	4770      	bx	lr
	...

08000478 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b084      	sub	sp, #16
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000480:	4b11      	ldr	r3, [pc, #68]	; (80004c8 <_sbrk+0x50>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <_sbrk+0x16>
		heap_end = &end;
 8000488:	4b0f      	ldr	r3, [pc, #60]	; (80004c8 <_sbrk+0x50>)
 800048a:	4a10      	ldr	r2, [pc, #64]	; (80004cc <_sbrk+0x54>)
 800048c:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800048e:	4b0e      	ldr	r3, [pc, #56]	; (80004c8 <_sbrk+0x50>)
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <_sbrk+0x50>)
 8000496:	681a      	ldr	r2, [r3, #0]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	4413      	add	r3, r2
 800049c:	466a      	mov	r2, sp
 800049e:	4293      	cmp	r3, r2
 80004a0:	d907      	bls.n	80004b2 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80004a2:	f002 f949 	bl	8002738 <__errno>
 80004a6:	4602      	mov	r2, r0
 80004a8:	230c      	movs	r3, #12
 80004aa:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80004ac:	f04f 33ff 	mov.w	r3, #4294967295
 80004b0:	e006      	b.n	80004c0 <_sbrk+0x48>
	}

	heap_end += incr;
 80004b2:	4b05      	ldr	r3, [pc, #20]	; (80004c8 <_sbrk+0x50>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	4a03      	ldr	r2, [pc, #12]	; (80004c8 <_sbrk+0x50>)
 80004bc:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3710      	adds	r7, #16
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	2000008c 	.word	0x2000008c
 80004cc:	200000f0 	.word	0x200000f0

080004d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004d0:	b480      	push	{r7}
 80004d2:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004d4:	4b15      	ldr	r3, [pc, #84]	; (800052c <SystemInit+0x5c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a14      	ldr	r2, [pc, #80]	; (800052c <SystemInit+0x5c>)
 80004da:	f043 0301 	orr.w	r3, r3, #1
 80004de:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004e0:	4b12      	ldr	r3, [pc, #72]	; (800052c <SystemInit+0x5c>)
 80004e2:	685a      	ldr	r2, [r3, #4]
 80004e4:	4911      	ldr	r1, [pc, #68]	; (800052c <SystemInit+0x5c>)
 80004e6:	4b12      	ldr	r3, [pc, #72]	; (8000530 <SystemInit+0x60>)
 80004e8:	4013      	ands	r3, r2
 80004ea:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004ec:	4b0f      	ldr	r3, [pc, #60]	; (800052c <SystemInit+0x5c>)
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	4a0e      	ldr	r2, [pc, #56]	; (800052c <SystemInit+0x5c>)
 80004f2:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004fa:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <SystemInit+0x5c>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <SystemInit+0x5c>)
 8000502:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000506:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <SystemInit+0x5c>)
 800050a:	685b      	ldr	r3, [r3, #4]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <SystemInit+0x5c>)
 800050e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8000512:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <SystemInit+0x5c>)
 8000516:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 800051a:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <SystemInit+0x64>)
 800051e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000522:	609a      	str	r2, [r3, #8]
#endif 
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	bc80      	pop	{r7}
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000
 8000530:	f8ff0000 	.word	0xf8ff0000
 8000534:	e000ed00 	.word	0xe000ed00

08000538 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000538:	b580      	push	{r7, lr}
 800053a:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <MX_USART1_UART_Init+0x50>)
 8000540:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 8000544:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000548:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 800054c:	2200      	movs	r2, #0
 800054e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 8000552:	2200      	movs	r2, #0
 8000554:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 8000558:	2200      	movs	r2, #0
 800055a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 800055e:	2208      	movs	r2, #8
 8000560:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 800056a:	2200      	movs	r2, #0
 800056c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800056e:	4805      	ldr	r0, [pc, #20]	; (8000584 <MX_USART1_UART_Init+0x4c>)
 8000570:	f001 faa6 	bl	8001ac0 <HAL_UART_Init>
 8000574:	4603      	mov	r3, r0
 8000576:	2b00      	cmp	r3, #0
 8000578:	d001      	beq.n	800057e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800057a:	f7ff fe9d 	bl	80002b8 <Error_Handler>
  }

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	200000a0 	.word	0x200000a0
 8000588:	40013800 	.word	0x40013800

0800058c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b088      	sub	sp, #32
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000594:	f107 0310 	add.w	r3, r7, #16
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	4a20      	ldr	r2, [pc, #128]	; (8000628 <HAL_UART_MspInit+0x9c>)
 80005a8:	4293      	cmp	r3, r2
 80005aa:	d139      	bne.n	8000620 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80005ac:	4b1f      	ldr	r3, [pc, #124]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	4a1e      	ldr	r2, [pc, #120]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005b6:	6193      	str	r3, [r2, #24]
 80005b8:	4b1c      	ldr	r3, [pc, #112]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005ba:	699b      	ldr	r3, [r3, #24]
 80005bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005c0:	60fb      	str	r3, [r7, #12]
 80005c2:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005c4:	4b19      	ldr	r3, [pc, #100]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005c6:	699b      	ldr	r3, [r3, #24]
 80005c8:	4a18      	ldr	r2, [pc, #96]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005ca:	f043 0304 	orr.w	r3, r3, #4
 80005ce:	6193      	str	r3, [r2, #24]
 80005d0:	4b16      	ldr	r3, [pc, #88]	; (800062c <HAL_UART_MspInit+0xa0>)
 80005d2:	699b      	ldr	r3, [r3, #24]
 80005d4:	f003 0304 	and.w	r3, r3, #4
 80005d8:	60bb      	str	r3, [r7, #8]
 80005da:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80005dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80005e0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005e2:	2302      	movs	r3, #2
 80005e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80005e6:	2303      	movs	r3, #3
 80005e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005ea:	f107 0310 	add.w	r3, r7, #16
 80005ee:	4619      	mov	r1, r3
 80005f0:	480f      	ldr	r0, [pc, #60]	; (8000630 <HAL_UART_MspInit+0xa4>)
 80005f2:	f000 fa47 	bl	8000a84 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80005f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80005fa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000600:	2300      	movs	r3, #0
 8000602:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000604:	f107 0310 	add.w	r3, r7, #16
 8000608:	4619      	mov	r1, r3
 800060a:	4809      	ldr	r0, [pc, #36]	; (8000630 <HAL_UART_MspInit+0xa4>)
 800060c:	f000 fa3a 	bl	8000a84 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000610:	2200      	movs	r2, #0
 8000612:	2100      	movs	r1, #0
 8000614:	2025      	movs	r0, #37	; 0x25
 8000616:	f000 f96f 	bl	80008f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800061a:	2025      	movs	r0, #37	; 0x25
 800061c:	f000 f998 	bl	8000950 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000620:	bf00      	nop
 8000622:	3720      	adds	r7, #32
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40013800 	.word	0x40013800
 800062c:	40021000 	.word	0x40021000
 8000630:	40010800 	.word	0x40010800

08000634 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000634:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000636:	e003      	b.n	8000640 <LoopCopyDataInit>

08000638 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000638:	4b0b      	ldr	r3, [pc, #44]	; (8000668 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 800063a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 800063c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800063e:	3104      	adds	r1, #4

08000640 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000640:	480a      	ldr	r0, [pc, #40]	; (800066c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000642:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000644:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000646:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000648:	d3f6      	bcc.n	8000638 <CopyDataInit>
  ldr r2, =_sbss
 800064a:	4a0a      	ldr	r2, [pc, #40]	; (8000674 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800064c:	e002      	b.n	8000654 <LoopFillZerobss>

0800064e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800064e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000650:	f842 3b04 	str.w	r3, [r2], #4

08000654 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000656:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000658:	d3f9      	bcc.n	800064e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800065a:	f7ff ff39 	bl	80004d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800065e:	f002 f871 	bl	8002744 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000662:	f7ff fdd5 	bl	8000210 <main>
  bx lr
 8000666:	4770      	bx	lr
  ldr r3, =_sidata
 8000668:	08003750 	.word	0x08003750
  ldr r0, =_sdata
 800066c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000670:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 8000674:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000678:	200000ec 	.word	0x200000ec

0800067c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800067c:	e7fe      	b.n	800067c <ADC1_2_IRQHandler>
	...

08000680 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000684:	4b08      	ldr	r3, [pc, #32]	; (80006a8 <HAL_Init+0x28>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	4a07      	ldr	r2, [pc, #28]	; (80006a8 <HAL_Init+0x28>)
 800068a:	f043 0310 	orr.w	r3, r3, #16
 800068e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000690:	2003      	movs	r0, #3
 8000692:	f000 f911 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000696:	2000      	movs	r0, #0
 8000698:	f000 f808 	bl	80006ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800069c:	f7ff fe1c 	bl	80002d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80006a0:	2300      	movs	r3, #0
}
 80006a2:	4618      	mov	r0, r3
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	40022000 	.word	0x40022000

080006ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006b4:	4b12      	ldr	r3, [pc, #72]	; (8000700 <HAL_InitTick+0x54>)
 80006b6:	681a      	ldr	r2, [r3, #0]
 80006b8:	4b12      	ldr	r3, [pc, #72]	; (8000704 <HAL_InitTick+0x58>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	4619      	mov	r1, r3
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80006c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 f958 	bl	8000980 <HAL_SYSTICK_Config>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d001      	beq.n	80006da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006d6:	2301      	movs	r3, #1
 80006d8:	e00e      	b.n	80006f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	2b0f      	cmp	r3, #15
 80006de:	d80a      	bhi.n	80006f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006e0:	2200      	movs	r2, #0
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	f04f 30ff 	mov.w	r0, #4294967295
 80006e8:	f000 f906 	bl	80008f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006ec:	4a06      	ldr	r2, [pc, #24]	; (8000708 <HAL_InitTick+0x5c>)
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80006f2:	2300      	movs	r3, #0
 80006f4:	e000      	b.n	80006f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006f6:	2301      	movs	r3, #1
}
 80006f8:	4618      	mov	r0, r3
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	20000000 	.word	0x20000000
 8000704:	20000008 	.word	0x20000008
 8000708:	20000004 	.word	0x20000004

0800070c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return uwTick;
 8000710:	4b02      	ldr	r3, [pc, #8]	; (800071c <HAL_GetTick+0x10>)
 8000712:	681b      	ldr	r3, [r3, #0]
}
 8000714:	4618      	mov	r0, r3
 8000716:	46bd      	mov	sp, r7
 8000718:	bc80      	pop	{r7}
 800071a:	4770      	bx	lr
 800071c:	200000e0 	.word	0x200000e0

08000720 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000720:	b480      	push	{r7}
 8000722:	b085      	sub	sp, #20
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f003 0307 	and.w	r3, r3, #7
 800072e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000730:	4b0c      	ldr	r3, [pc, #48]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000732:	68db      	ldr	r3, [r3, #12]
 8000734:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000736:	68ba      	ldr	r2, [r7, #8]
 8000738:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800073c:	4013      	ands	r3, r2
 800073e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800074c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000750:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000752:	4a04      	ldr	r2, [pc, #16]	; (8000764 <__NVIC_SetPriorityGrouping+0x44>)
 8000754:	68bb      	ldr	r3, [r7, #8]
 8000756:	60d3      	str	r3, [r2, #12]
}
 8000758:	bf00      	nop
 800075a:	3714      	adds	r7, #20
 800075c:	46bd      	mov	sp, r7
 800075e:	bc80      	pop	{r7}
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000768:	b480      	push	{r7}
 800076a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800076c:	4b04      	ldr	r3, [pc, #16]	; (8000780 <__NVIC_GetPriorityGrouping+0x18>)
 800076e:	68db      	ldr	r3, [r3, #12]
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	f003 0307 	and.w	r3, r3, #7
}
 8000776:	4618      	mov	r0, r3
 8000778:	46bd      	mov	sp, r7
 800077a:	bc80      	pop	{r7}
 800077c:	4770      	bx	lr
 800077e:	bf00      	nop
 8000780:	e000ed00 	.word	0xe000ed00

08000784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000784:	b480      	push	{r7}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	4603      	mov	r3, r0
 800078c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800078e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000792:	2b00      	cmp	r3, #0
 8000794:	db0b      	blt.n	80007ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000796:	79fb      	ldrb	r3, [r7, #7]
 8000798:	f003 021f 	and.w	r2, r3, #31
 800079c:	4906      	ldr	r1, [pc, #24]	; (80007b8 <__NVIC_EnableIRQ+0x34>)
 800079e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007a2:	095b      	lsrs	r3, r3, #5
 80007a4:	2001      	movs	r0, #1
 80007a6:	fa00 f202 	lsl.w	r2, r0, r2
 80007aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	e000e100 	.word	0xe000e100

080007bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007bc:	b480      	push	{r7}
 80007be:	b083      	sub	sp, #12
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	4603      	mov	r3, r0
 80007c4:	6039      	str	r1, [r7, #0]
 80007c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	db0a      	blt.n	80007e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007d0:	683b      	ldr	r3, [r7, #0]
 80007d2:	b2da      	uxtb	r2, r3
 80007d4:	490c      	ldr	r1, [pc, #48]	; (8000808 <__NVIC_SetPriority+0x4c>)
 80007d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007da:	0112      	lsls	r2, r2, #4
 80007dc:	b2d2      	uxtb	r2, r2
 80007de:	440b      	add	r3, r1
 80007e0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e4:	e00a      	b.n	80007fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e6:	683b      	ldr	r3, [r7, #0]
 80007e8:	b2da      	uxtb	r2, r3
 80007ea:	4908      	ldr	r1, [pc, #32]	; (800080c <__NVIC_SetPriority+0x50>)
 80007ec:	79fb      	ldrb	r3, [r7, #7]
 80007ee:	f003 030f 	and.w	r3, r3, #15
 80007f2:	3b04      	subs	r3, #4
 80007f4:	0112      	lsls	r2, r2, #4
 80007f6:	b2d2      	uxtb	r2, r2
 80007f8:	440b      	add	r3, r1
 80007fa:	761a      	strb	r2, [r3, #24]
}
 80007fc:	bf00      	nop
 80007fe:	370c      	adds	r7, #12
 8000800:	46bd      	mov	sp, r7
 8000802:	bc80      	pop	{r7}
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	e000e100 	.word	0xe000e100
 800080c:	e000ed00 	.word	0xe000ed00

08000810 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000810:	b480      	push	{r7}
 8000812:	b089      	sub	sp, #36	; 0x24
 8000814:	af00      	add	r7, sp, #0
 8000816:	60f8      	str	r0, [r7, #12]
 8000818:	60b9      	str	r1, [r7, #8]
 800081a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800081c:	68fb      	ldr	r3, [r7, #12]
 800081e:	f003 0307 	and.w	r3, r3, #7
 8000822:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000824:	69fb      	ldr	r3, [r7, #28]
 8000826:	f1c3 0307 	rsb	r3, r3, #7
 800082a:	2b04      	cmp	r3, #4
 800082c:	bf28      	it	cs
 800082e:	2304      	movcs	r3, #4
 8000830:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000832:	69fb      	ldr	r3, [r7, #28]
 8000834:	3304      	adds	r3, #4
 8000836:	2b06      	cmp	r3, #6
 8000838:	d902      	bls.n	8000840 <NVIC_EncodePriority+0x30>
 800083a:	69fb      	ldr	r3, [r7, #28]
 800083c:	3b03      	subs	r3, #3
 800083e:	e000      	b.n	8000842 <NVIC_EncodePriority+0x32>
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000844:	f04f 32ff 	mov.w	r2, #4294967295
 8000848:	69bb      	ldr	r3, [r7, #24]
 800084a:	fa02 f303 	lsl.w	r3, r2, r3
 800084e:	43da      	mvns	r2, r3
 8000850:	68bb      	ldr	r3, [r7, #8]
 8000852:	401a      	ands	r2, r3
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000858:	f04f 31ff 	mov.w	r1, #4294967295
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	fa01 f303 	lsl.w	r3, r1, r3
 8000862:	43d9      	mvns	r1, r3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	4313      	orrs	r3, r2
         );
}
 800086a:	4618      	mov	r0, r3
 800086c:	3724      	adds	r7, #36	; 0x24
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f7ff ff90 	bl	80007bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	2b07      	cmp	r3, #7
 80008c4:	d00f      	beq.n	80008e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2b06      	cmp	r3, #6
 80008ca:	d00c      	beq.n	80008e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2b05      	cmp	r3, #5
 80008d0:	d009      	beq.n	80008e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	2b04      	cmp	r3, #4
 80008d6:	d006      	beq.n	80008e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	2b03      	cmp	r3, #3
 80008dc:	d003      	beq.n	80008e6 <HAL_NVIC_SetPriorityGrouping+0x2e>
 80008de:	2192      	movs	r1, #146	; 0x92
 80008e0:	4804      	ldr	r0, [pc, #16]	; (80008f4 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 80008e2:	f7ff fcef 	bl	80002c4 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f7ff ff1a 	bl	8000720 <__NVIC_SetPriorityGrouping>
}
 80008ec:	bf00      	nop
 80008ee:	3708      	adds	r7, #8
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	08003590 	.word	0x08003590

080008f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b086      	sub	sp, #24
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	4603      	mov	r3, r0
 8000900:	60b9      	str	r1, [r7, #8]
 8000902:	607a      	str	r2, [r7, #4]
 8000904:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000906:	2300      	movs	r3, #0
 8000908:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 800090a:	687b      	ldr	r3, [r7, #4]
 800090c:	2b0f      	cmp	r3, #15
 800090e:	d903      	bls.n	8000918 <HAL_NVIC_SetPriority+0x20>
 8000910:	21aa      	movs	r1, #170	; 0xaa
 8000912:	480e      	ldr	r0, [pc, #56]	; (800094c <HAL_NVIC_SetPriority+0x54>)
 8000914:	f7ff fcd6 	bl	80002c4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000918:	68bb      	ldr	r3, [r7, #8]
 800091a:	2b0f      	cmp	r3, #15
 800091c:	d903      	bls.n	8000926 <HAL_NVIC_SetPriority+0x2e>
 800091e:	21ab      	movs	r1, #171	; 0xab
 8000920:	480a      	ldr	r0, [pc, #40]	; (800094c <HAL_NVIC_SetPriority+0x54>)
 8000922:	f7ff fccf 	bl	80002c4 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000926:	f7ff ff1f 	bl	8000768 <__NVIC_GetPriorityGrouping>
 800092a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800092c:	687a      	ldr	r2, [r7, #4]
 800092e:	68b9      	ldr	r1, [r7, #8]
 8000930:	6978      	ldr	r0, [r7, #20]
 8000932:	f7ff ff6d 	bl	8000810 <NVIC_EncodePriority>
 8000936:	4602      	mov	r2, r0
 8000938:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800093c:	4611      	mov	r1, r2
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff ff3c 	bl	80007bc <__NVIC_SetPriority>
}
 8000944:	bf00      	nop
 8000946:	3718      	adds	r7, #24
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	08003590 	.word	0x08003590

08000950 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b082      	sub	sp, #8
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 800095a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800095e:	2b00      	cmp	r3, #0
 8000960:	da03      	bge.n	800096a <HAL_NVIC_EnableIRQ+0x1a>
 8000962:	21be      	movs	r1, #190	; 0xbe
 8000964:	4805      	ldr	r0, [pc, #20]	; (800097c <HAL_NVIC_EnableIRQ+0x2c>)
 8000966:	f7ff fcad 	bl	80002c4 <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800096a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800096e:	4618      	mov	r0, r3
 8000970:	f7ff ff08 	bl	8000784 <__NVIC_EnableIRQ>
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	08003590 	.word	0x08003590

08000980 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
 8000986:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff ff73 	bl	8000874 <SysTick_Config>
 800098e:	4603      	mov	r3, r0
}
 8000990:	4618      	mov	r0, r3
 8000992:	3708      	adds	r7, #8
 8000994:	46bd      	mov	sp, r7
 8000996:	bd80      	pop	{r7, pc}

08000998 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000998:	b580      	push	{r7, lr}
 800099a:	b084      	sub	sp, #16
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80009aa:	2b02      	cmp	r3, #2
 80009ac:	d005      	beq.n	80009ba <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2204      	movs	r2, #4
 80009b2:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80009b4:	2301      	movs	r3, #1
 80009b6:	73fb      	strb	r3, [r7, #15]
 80009b8:	e051      	b.n	8000a5e <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f022 020e 	bic.w	r2, r2, #14
 80009c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80009ca:	687b      	ldr	r3, [r7, #4]
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	681a      	ldr	r2, [r3, #0]
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f022 0201 	bic.w	r2, r2, #1
 80009d8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	4a22      	ldr	r2, [pc, #136]	; (8000a68 <HAL_DMA_Abort_IT+0xd0>)
 80009e0:	4293      	cmp	r3, r2
 80009e2:	d029      	beq.n	8000a38 <HAL_DMA_Abort_IT+0xa0>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a20      	ldr	r2, [pc, #128]	; (8000a6c <HAL_DMA_Abort_IT+0xd4>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d022      	beq.n	8000a34 <HAL_DMA_Abort_IT+0x9c>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681b      	ldr	r3, [r3, #0]
 80009f2:	4a1f      	ldr	r2, [pc, #124]	; (8000a70 <HAL_DMA_Abort_IT+0xd8>)
 80009f4:	4293      	cmp	r3, r2
 80009f6:	d01a      	beq.n	8000a2e <HAL_DMA_Abort_IT+0x96>
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a1d      	ldr	r2, [pc, #116]	; (8000a74 <HAL_DMA_Abort_IT+0xdc>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d012      	beq.n	8000a28 <HAL_DMA_Abort_IT+0x90>
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4a1c      	ldr	r2, [pc, #112]	; (8000a78 <HAL_DMA_Abort_IT+0xe0>)
 8000a08:	4293      	cmp	r3, r2
 8000a0a:	d00a      	beq.n	8000a22 <HAL_DMA_Abort_IT+0x8a>
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a1a      	ldr	r2, [pc, #104]	; (8000a7c <HAL_DMA_Abort_IT+0xe4>)
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d102      	bne.n	8000a1c <HAL_DMA_Abort_IT+0x84>
 8000a16:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000a1a:	e00e      	b.n	8000a3a <HAL_DMA_Abort_IT+0xa2>
 8000a1c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a20:	e00b      	b.n	8000a3a <HAL_DMA_Abort_IT+0xa2>
 8000a22:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000a26:	e008      	b.n	8000a3a <HAL_DMA_Abort_IT+0xa2>
 8000a28:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a2c:	e005      	b.n	8000a3a <HAL_DMA_Abort_IT+0xa2>
 8000a2e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000a32:	e002      	b.n	8000a3a <HAL_DMA_Abort_IT+0xa2>
 8000a34:	2310      	movs	r3, #16
 8000a36:	e000      	b.n	8000a3a <HAL_DMA_Abort_IT+0xa2>
 8000a38:	2301      	movs	r3, #1
 8000a3a:	4a11      	ldr	r2, [pc, #68]	; (8000a80 <HAL_DMA_Abort_IT+0xe8>)
 8000a3c:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	2201      	movs	r2, #1
 8000a42:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d003      	beq.n	8000a5e <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a5a:	6878      	ldr	r0, [r7, #4]
 8000a5c:	4798      	blx	r3
    } 
  }
  return status;
 8000a5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a60:	4618      	mov	r0, r3
 8000a62:	3710      	adds	r7, #16
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40020008 	.word	0x40020008
 8000a6c:	4002001c 	.word	0x4002001c
 8000a70:	40020030 	.word	0x40020030
 8000a74:	40020044 	.word	0x40020044
 8000a78:	40020058 	.word	0x40020058
 8000a7c:	4002006c 	.word	0x4002006c
 8000a80:	40020000 	.word	0x40020000

08000a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	; 0x28
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000a92:	2300      	movs	r3, #0
 8000a94:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a9c      	ldr	r2, [pc, #624]	; (8000d0c <HAL_GPIO_Init+0x288>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d013      	beq.n	8000ac6 <HAL_GPIO_Init+0x42>
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	4a9b      	ldr	r2, [pc, #620]	; (8000d10 <HAL_GPIO_Init+0x28c>)
 8000aa2:	4293      	cmp	r3, r2
 8000aa4:	d00f      	beq.n	8000ac6 <HAL_GPIO_Init+0x42>
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	4a9a      	ldr	r2, [pc, #616]	; (8000d14 <HAL_GPIO_Init+0x290>)
 8000aaa:	4293      	cmp	r3, r2
 8000aac:	d00b      	beq.n	8000ac6 <HAL_GPIO_Init+0x42>
 8000aae:	687b      	ldr	r3, [r7, #4]
 8000ab0:	4a99      	ldr	r2, [pc, #612]	; (8000d18 <HAL_GPIO_Init+0x294>)
 8000ab2:	4293      	cmp	r3, r2
 8000ab4:	d007      	beq.n	8000ac6 <HAL_GPIO_Init+0x42>
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4a98      	ldr	r2, [pc, #608]	; (8000d1c <HAL_GPIO_Init+0x298>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d003      	beq.n	8000ac6 <HAL_GPIO_Init+0x42>
 8000abe:	21bd      	movs	r1, #189	; 0xbd
 8000ac0:	4897      	ldr	r0, [pc, #604]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000ac2:	f7ff fbff 	bl	80002c4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d005      	beq.n	8000adc <HAL_GPIO_Init+0x58>
 8000ad0:	683b      	ldr	r3, [r7, #0]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	0c1b      	lsrs	r3, r3, #16
 8000ad6:	041b      	lsls	r3, r3, #16
 8000ad8:	2b00      	cmp	r3, #0
 8000ada:	d003      	beq.n	8000ae4 <HAL_GPIO_Init+0x60>
 8000adc:	21be      	movs	r1, #190	; 0xbe
 8000ade:	4890      	ldr	r0, [pc, #576]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000ae0:	f7ff fbf0 	bl	80002c4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 81eb 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	f000 81e6 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000af8:	683b      	ldr	r3, [r7, #0]
 8000afa:	685b      	ldr	r3, [r3, #4]
 8000afc:	2b11      	cmp	r3, #17
 8000afe:	f000 81e1 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	2b02      	cmp	r3, #2
 8000b08:	f000 81dc 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	685b      	ldr	r3, [r3, #4]
 8000b10:	2b12      	cmp	r3, #18
 8000b12:	f000 81d7 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	4a82      	ldr	r2, [pc, #520]	; (8000d24 <HAL_GPIO_Init+0x2a0>)
 8000b1c:	4293      	cmp	r3, r2
 8000b1e:	f000 81d1 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	685b      	ldr	r3, [r3, #4]
 8000b26:	4a80      	ldr	r2, [pc, #512]	; (8000d28 <HAL_GPIO_Init+0x2a4>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	f000 81cb 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	685b      	ldr	r3, [r3, #4]
 8000b32:	4a7e      	ldr	r2, [pc, #504]	; (8000d2c <HAL_GPIO_Init+0x2a8>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	f000 81c5 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	4a7c      	ldr	r2, [pc, #496]	; (8000d30 <HAL_GPIO_Init+0x2ac>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	f000 81bf 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	685b      	ldr	r3, [r3, #4]
 8000b4a:	4a7a      	ldr	r2, [pc, #488]	; (8000d34 <HAL_GPIO_Init+0x2b0>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	f000 81b9 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	4a78      	ldr	r2, [pc, #480]	; (8000d38 <HAL_GPIO_Init+0x2b4>)
 8000b58:	4293      	cmp	r3, r2
 8000b5a:	f000 81b3 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b5e:	683b      	ldr	r3, [r7, #0]
 8000b60:	685b      	ldr	r3, [r3, #4]
 8000b62:	2b03      	cmp	r3, #3
 8000b64:	f000 81ae 	beq.w	8000ec4 <HAL_GPIO_Init+0x440>
 8000b68:	21bf      	movs	r1, #191	; 0xbf
 8000b6a:	486d      	ldr	r0, [pc, #436]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000b6c:	f7ff fbaa 	bl	80002c4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b70:	e1a8      	b.n	8000ec4 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000b72:	2201      	movs	r2, #1
 8000b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000b7c:	683b      	ldr	r3, [r7, #0]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	69fa      	ldr	r2, [r7, #28]
 8000b82:	4013      	ands	r3, r2
 8000b84:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000b86:	69ba      	ldr	r2, [r7, #24]
 8000b88:	69fb      	ldr	r3, [r7, #28]
 8000b8a:	429a      	cmp	r2, r3
 8000b8c:	f040 8197 	bne.w	8000ebe <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	4a5e      	ldr	r2, [pc, #376]	; (8000d0c <HAL_GPIO_Init+0x288>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d013      	beq.n	8000bc0 <HAL_GPIO_Init+0x13c>
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a5d      	ldr	r2, [pc, #372]	; (8000d10 <HAL_GPIO_Init+0x28c>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d00f      	beq.n	8000bc0 <HAL_GPIO_Init+0x13c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	4a5c      	ldr	r2, [pc, #368]	; (8000d14 <HAL_GPIO_Init+0x290>)
 8000ba4:	4293      	cmp	r3, r2
 8000ba6:	d00b      	beq.n	8000bc0 <HAL_GPIO_Init+0x13c>
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	4a5b      	ldr	r2, [pc, #364]	; (8000d18 <HAL_GPIO_Init+0x294>)
 8000bac:	4293      	cmp	r3, r2
 8000bae:	d007      	beq.n	8000bc0 <HAL_GPIO_Init+0x13c>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	4a5a      	ldr	r2, [pc, #360]	; (8000d1c <HAL_GPIO_Init+0x298>)
 8000bb4:	4293      	cmp	r3, r2
 8000bb6:	d003      	beq.n	8000bc0 <HAL_GPIO_Init+0x13c>
 8000bb8:	21cd      	movs	r1, #205	; 0xcd
 8000bba:	4859      	ldr	r0, [pc, #356]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000bbc:	f7ff fb82 	bl	80002c4 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	2b12      	cmp	r3, #18
 8000bc6:	d065      	beq.n	8000c94 <HAL_GPIO_Init+0x210>
 8000bc8:	2b12      	cmp	r3, #18
 8000bca:	d80e      	bhi.n	8000bea <HAL_GPIO_Init+0x166>
 8000bcc:	2b02      	cmp	r3, #2
 8000bce:	d04c      	beq.n	8000c6a <HAL_GPIO_Init+0x1e6>
 8000bd0:	2b02      	cmp	r3, #2
 8000bd2:	d804      	bhi.n	8000bde <HAL_GPIO_Init+0x15a>
 8000bd4:	2b00      	cmp	r3, #0
 8000bd6:	d072      	beq.n	8000cbe <HAL_GPIO_Init+0x23a>
 8000bd8:	2b01      	cmp	r3, #1
 8000bda:	d01d      	beq.n	8000c18 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000bdc:	e0b1      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	f000 80ac 	beq.w	8000d3c <HAL_GPIO_Init+0x2b8>
 8000be4:	2b11      	cmp	r3, #17
 8000be6:	d02b      	beq.n	8000c40 <HAL_GPIO_Init+0x1bc>
          break;
 8000be8:	e0ab      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000bea:	4a4f      	ldr	r2, [pc, #316]	; (8000d28 <HAL_GPIO_Init+0x2a4>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d066      	beq.n	8000cbe <HAL_GPIO_Init+0x23a>
 8000bf0:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <HAL_GPIO_Init+0x2a4>)
 8000bf2:	4293      	cmp	r3, r2
 8000bf4:	d806      	bhi.n	8000c04 <HAL_GPIO_Init+0x180>
 8000bf6:	4a4b      	ldr	r2, [pc, #300]	; (8000d24 <HAL_GPIO_Init+0x2a0>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d060      	beq.n	8000cbe <HAL_GPIO_Init+0x23a>
 8000bfc:	4a4c      	ldr	r2, [pc, #304]	; (8000d30 <HAL_GPIO_Init+0x2ac>)
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d05d      	beq.n	8000cbe <HAL_GPIO_Init+0x23a>
          break;
 8000c02:	e09e      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000c04:	4a49      	ldr	r2, [pc, #292]	; (8000d2c <HAL_GPIO_Init+0x2a8>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d059      	beq.n	8000cbe <HAL_GPIO_Init+0x23a>
 8000c0a:	4a4b      	ldr	r2, [pc, #300]	; (8000d38 <HAL_GPIO_Init+0x2b4>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d056      	beq.n	8000cbe <HAL_GPIO_Init+0x23a>
 8000c10:	4a48      	ldr	r2, [pc, #288]	; (8000d34 <HAL_GPIO_Init+0x2b0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d053      	beq.n	8000cbe <HAL_GPIO_Init+0x23a>
          break;
 8000c16:	e094      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000c18:	683b      	ldr	r3, [r7, #0]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d00b      	beq.n	8000c38 <HAL_GPIO_Init+0x1b4>
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	68db      	ldr	r3, [r3, #12]
 8000c24:	2b01      	cmp	r3, #1
 8000c26:	d007      	beq.n	8000c38 <HAL_GPIO_Init+0x1b4>
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	2b03      	cmp	r3, #3
 8000c2e:	d003      	beq.n	8000c38 <HAL_GPIO_Init+0x1b4>
 8000c30:	21d5      	movs	r1, #213	; 0xd5
 8000c32:	483b      	ldr	r0, [pc, #236]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000c34:	f7ff fb46 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	623b      	str	r3, [r7, #32]
          break;
 8000c3e:	e080      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	68db      	ldr	r3, [r3, #12]
 8000c44:	2b02      	cmp	r3, #2
 8000c46:	d00b      	beq.n	8000c60 <HAL_GPIO_Init+0x1dc>
 8000c48:	683b      	ldr	r3, [r7, #0]
 8000c4a:	68db      	ldr	r3, [r3, #12]
 8000c4c:	2b01      	cmp	r3, #1
 8000c4e:	d007      	beq.n	8000c60 <HAL_GPIO_Init+0x1dc>
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	68db      	ldr	r3, [r3, #12]
 8000c54:	2b03      	cmp	r3, #3
 8000c56:	d003      	beq.n	8000c60 <HAL_GPIO_Init+0x1dc>
 8000c58:	21dc      	movs	r1, #220	; 0xdc
 8000c5a:	4831      	ldr	r0, [pc, #196]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000c5c:	f7ff fb32 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000c60:	683b      	ldr	r3, [r7, #0]
 8000c62:	68db      	ldr	r3, [r3, #12]
 8000c64:	3304      	adds	r3, #4
 8000c66:	623b      	str	r3, [r7, #32]
          break;
 8000c68:	e06b      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	68db      	ldr	r3, [r3, #12]
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d00b      	beq.n	8000c8a <HAL_GPIO_Init+0x206>
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	68db      	ldr	r3, [r3, #12]
 8000c76:	2b01      	cmp	r3, #1
 8000c78:	d007      	beq.n	8000c8a <HAL_GPIO_Init+0x206>
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	68db      	ldr	r3, [r3, #12]
 8000c7e:	2b03      	cmp	r3, #3
 8000c80:	d003      	beq.n	8000c8a <HAL_GPIO_Init+0x206>
 8000c82:	21e3      	movs	r1, #227	; 0xe3
 8000c84:	4826      	ldr	r0, [pc, #152]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000c86:	f7ff fb1d 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68db      	ldr	r3, [r3, #12]
 8000c8e:	3308      	adds	r3, #8
 8000c90:	623b      	str	r3, [r7, #32]
          break;
 8000c92:	e056      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	68db      	ldr	r3, [r3, #12]
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d00b      	beq.n	8000cb4 <HAL_GPIO_Init+0x230>
 8000c9c:	683b      	ldr	r3, [r7, #0]
 8000c9e:	68db      	ldr	r3, [r3, #12]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	d007      	beq.n	8000cb4 <HAL_GPIO_Init+0x230>
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	68db      	ldr	r3, [r3, #12]
 8000ca8:	2b03      	cmp	r3, #3
 8000caa:	d003      	beq.n	8000cb4 <HAL_GPIO_Init+0x230>
 8000cac:	21ea      	movs	r1, #234	; 0xea
 8000cae:	481c      	ldr	r0, [pc, #112]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000cb0:	f7ff fb08 	bl	80002c4 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	68db      	ldr	r3, [r3, #12]
 8000cb8:	330c      	adds	r3, #12
 8000cba:	623b      	str	r3, [r7, #32]
          break;
 8000cbc:	e041      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	689b      	ldr	r3, [r3, #8]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d00b      	beq.n	8000cde <HAL_GPIO_Init+0x25a>
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	689b      	ldr	r3, [r3, #8]
 8000cca:	2b01      	cmp	r3, #1
 8000ccc:	d007      	beq.n	8000cde <HAL_GPIO_Init+0x25a>
 8000cce:	683b      	ldr	r3, [r7, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b02      	cmp	r3, #2
 8000cd4:	d003      	beq.n	8000cde <HAL_GPIO_Init+0x25a>
 8000cd6:	21f7      	movs	r1, #247	; 0xf7
 8000cd8:	4811      	ldr	r0, [pc, #68]	; (8000d20 <HAL_GPIO_Init+0x29c>)
 8000cda:	f7ff faf3 	bl	80002c4 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000cde:	683b      	ldr	r3, [r7, #0]
 8000ce0:	689b      	ldr	r3, [r3, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d102      	bne.n	8000cec <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000ce6:	2304      	movs	r3, #4
 8000ce8:	623b      	str	r3, [r7, #32]
          break;
 8000cea:	e02a      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000cf4:	2308      	movs	r3, #8
 8000cf6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	69fa      	ldr	r2, [r7, #28]
 8000cfc:	611a      	str	r2, [r3, #16]
          break;
 8000cfe:	e020      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d00:	2308      	movs	r3, #8
 8000d02:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69fa      	ldr	r2, [r7, #28]
 8000d08:	615a      	str	r2, [r3, #20]
          break;
 8000d0a:	e01a      	b.n	8000d42 <HAL_GPIO_Init+0x2be>
 8000d0c:	40010800 	.word	0x40010800
 8000d10:	40010c00 	.word	0x40010c00
 8000d14:	40011000 	.word	0x40011000
 8000d18:	40011400 	.word	0x40011400
 8000d1c:	40011800 	.word	0x40011800
 8000d20:	080035cc 	.word	0x080035cc
 8000d24:	10110000 	.word	0x10110000
 8000d28:	10210000 	.word	0x10210000
 8000d2c:	10310000 	.word	0x10310000
 8000d30:	10120000 	.word	0x10120000
 8000d34:	10220000 	.word	0x10220000
 8000d38:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d42:	69bb      	ldr	r3, [r7, #24]
 8000d44:	2bff      	cmp	r3, #255	; 0xff
 8000d46:	d801      	bhi.n	8000d4c <HAL_GPIO_Init+0x2c8>
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	e001      	b.n	8000d50 <HAL_GPIO_Init+0x2cc>
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	3304      	adds	r3, #4
 8000d50:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d52:	69bb      	ldr	r3, [r7, #24]
 8000d54:	2bff      	cmp	r3, #255	; 0xff
 8000d56:	d802      	bhi.n	8000d5e <HAL_GPIO_Init+0x2da>
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	009b      	lsls	r3, r3, #2
 8000d5c:	e002      	b.n	8000d64 <HAL_GPIO_Init+0x2e0>
 8000d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d60:	3b08      	subs	r3, #8
 8000d62:	009b      	lsls	r3, r3, #2
 8000d64:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000d66:	697b      	ldr	r3, [r7, #20]
 8000d68:	681a      	ldr	r2, [r3, #0]
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	693b      	ldr	r3, [r7, #16]
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	43db      	mvns	r3, r3
 8000d74:	401a      	ands	r2, r3
 8000d76:	6a39      	ldr	r1, [r7, #32]
 8000d78:	693b      	ldr	r3, [r7, #16]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	431a      	orrs	r2, r3
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000d84:	683b      	ldr	r3, [r7, #0]
 8000d86:	685b      	ldr	r3, [r3, #4]
 8000d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	f000 8096 	beq.w	8000ebe <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000d92:	4b52      	ldr	r3, [pc, #328]	; (8000edc <HAL_GPIO_Init+0x458>)
 8000d94:	699b      	ldr	r3, [r3, #24]
 8000d96:	4a51      	ldr	r2, [pc, #324]	; (8000edc <HAL_GPIO_Init+0x458>)
 8000d98:	f043 0301 	orr.w	r3, r3, #1
 8000d9c:	6193      	str	r3, [r2, #24]
 8000d9e:	4b4f      	ldr	r3, [pc, #316]	; (8000edc <HAL_GPIO_Init+0x458>)
 8000da0:	699b      	ldr	r3, [r3, #24]
 8000da2:	f003 0301 	and.w	r3, r3, #1
 8000da6:	60bb      	str	r3, [r7, #8]
 8000da8:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000daa:	4a4d      	ldr	r2, [pc, #308]	; (8000ee0 <HAL_GPIO_Init+0x45c>)
 8000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dae:	089b      	lsrs	r3, r3, #2
 8000db0:	3302      	adds	r3, #2
 8000db2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000db6:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dba:	f003 0303 	and.w	r3, r3, #3
 8000dbe:	009b      	lsls	r3, r3, #2
 8000dc0:	220f      	movs	r2, #15
 8000dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc6:	43db      	mvns	r3, r3
 8000dc8:	68fa      	ldr	r2, [r7, #12]
 8000dca:	4013      	ands	r3, r2
 8000dcc:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4a44      	ldr	r2, [pc, #272]	; (8000ee4 <HAL_GPIO_Init+0x460>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d013      	beq.n	8000dfe <HAL_GPIO_Init+0x37a>
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	4a43      	ldr	r2, [pc, #268]	; (8000ee8 <HAL_GPIO_Init+0x464>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d00d      	beq.n	8000dfa <HAL_GPIO_Init+0x376>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4a42      	ldr	r2, [pc, #264]	; (8000eec <HAL_GPIO_Init+0x468>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d007      	beq.n	8000df6 <HAL_GPIO_Init+0x372>
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a41      	ldr	r2, [pc, #260]	; (8000ef0 <HAL_GPIO_Init+0x46c>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d101      	bne.n	8000df2 <HAL_GPIO_Init+0x36e>
 8000dee:	2303      	movs	r3, #3
 8000df0:	e006      	b.n	8000e00 <HAL_GPIO_Init+0x37c>
 8000df2:	2304      	movs	r3, #4
 8000df4:	e004      	b.n	8000e00 <HAL_GPIO_Init+0x37c>
 8000df6:	2302      	movs	r3, #2
 8000df8:	e002      	b.n	8000e00 <HAL_GPIO_Init+0x37c>
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	e000      	b.n	8000e00 <HAL_GPIO_Init+0x37c>
 8000dfe:	2300      	movs	r3, #0
 8000e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e02:	f002 0203 	and.w	r2, r2, #3
 8000e06:	0092      	lsls	r2, r2, #2
 8000e08:	4093      	lsls	r3, r2
 8000e0a:	68fa      	ldr	r2, [r7, #12]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e10:	4933      	ldr	r1, [pc, #204]	; (8000ee0 <HAL_GPIO_Init+0x45c>)
 8000e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e14:	089b      	lsrs	r3, r3, #2
 8000e16:	3302      	adds	r3, #2
 8000e18:	68fa      	ldr	r2, [r7, #12]
 8000e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	d006      	beq.n	8000e38 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000e2a:	4b32      	ldr	r3, [pc, #200]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e2c:	681a      	ldr	r2, [r3, #0]
 8000e2e:	4931      	ldr	r1, [pc, #196]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e30:	69bb      	ldr	r3, [r7, #24]
 8000e32:	4313      	orrs	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]
 8000e36:	e006      	b.n	8000e46 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000e38:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e3a:	681a      	ldr	r2, [r3, #0]
 8000e3c:	69bb      	ldr	r3, [r7, #24]
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	492c      	ldr	r1, [pc, #176]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e42:	4013      	ands	r3, r2
 8000e44:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d006      	beq.n	8000e60 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e54:	685a      	ldr	r2, [r3, #4]
 8000e56:	4927      	ldr	r1, [pc, #156]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e58:	69bb      	ldr	r3, [r7, #24]
 8000e5a:	4313      	orrs	r3, r2
 8000e5c:	604b      	str	r3, [r1, #4]
 8000e5e:	e006      	b.n	8000e6e <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000e60:	4b24      	ldr	r3, [pc, #144]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e62:	685a      	ldr	r2, [r3, #4]
 8000e64:	69bb      	ldr	r3, [r7, #24]
 8000e66:	43db      	mvns	r3, r3
 8000e68:	4922      	ldr	r1, [pc, #136]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e6a:	4013      	ands	r3, r2
 8000e6c:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	685b      	ldr	r3, [r3, #4]
 8000e72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d006      	beq.n	8000e88 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e7a:	4b1e      	ldr	r3, [pc, #120]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e7c:	689a      	ldr	r2, [r3, #8]
 8000e7e:	491d      	ldr	r1, [pc, #116]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	608b      	str	r3, [r1, #8]
 8000e86:	e006      	b.n	8000e96 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e88:	4b1a      	ldr	r3, [pc, #104]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e8a:	689a      	ldr	r2, [r3, #8]
 8000e8c:	69bb      	ldr	r3, [r7, #24]
 8000e8e:	43db      	mvns	r3, r3
 8000e90:	4918      	ldr	r1, [pc, #96]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000e92:	4013      	ands	r3, r2
 8000e94:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d006      	beq.n	8000eb0 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000ea2:	4b14      	ldr	r3, [pc, #80]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000ea4:	68da      	ldr	r2, [r3, #12]
 8000ea6:	4913      	ldr	r1, [pc, #76]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000ea8:	69bb      	ldr	r3, [r7, #24]
 8000eaa:	4313      	orrs	r3, r2
 8000eac:	60cb      	str	r3, [r1, #12]
 8000eae:	e006      	b.n	8000ebe <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eb0:	4b10      	ldr	r3, [pc, #64]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000eb2:	68da      	ldr	r2, [r3, #12]
 8000eb4:	69bb      	ldr	r3, [r7, #24]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	490e      	ldr	r1, [pc, #56]	; (8000ef4 <HAL_GPIO_Init+0x470>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000ebe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000eca:	fa22 f303 	lsr.w	r3, r2, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	f47f ae4f 	bne.w	8000b72 <HAL_GPIO_Init+0xee>
  }
}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40021000 	.word	0x40021000
 8000ee0:	40010000 	.word	0x40010000
 8000ee4:	40010800 	.word	0x40010800
 8000ee8:	40010c00 	.word	0x40010c00
 8000eec:	40011000 	.word	0x40011000
 8000ef0:	40011400 	.word	0x40011400
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
 8000f00:	460b      	mov	r3, r1
 8000f02:	807b      	strh	r3, [r7, #2]
 8000f04:	4613      	mov	r3, r2
 8000f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d004      	beq.n	8000f18 <HAL_GPIO_WritePin+0x20>
 8000f0e:	887b      	ldrh	r3, [r7, #2]
 8000f10:	0c1b      	lsrs	r3, r3, #16
 8000f12:	041b      	lsls	r3, r3, #16
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d004      	beq.n	8000f22 <HAL_GPIO_WritePin+0x2a>
 8000f18:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8000f1c:	480e      	ldr	r0, [pc, #56]	; (8000f58 <HAL_GPIO_WritePin+0x60>)
 8000f1e:	f7ff f9d1 	bl	80002c4 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000f22:	787b      	ldrb	r3, [r7, #1]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d007      	beq.n	8000f38 <HAL_GPIO_WritePin+0x40>
 8000f28:	787b      	ldrb	r3, [r7, #1]
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d004      	beq.n	8000f38 <HAL_GPIO_WritePin+0x40>
 8000f2e:	f240 11d5 	movw	r1, #469	; 0x1d5
 8000f32:	4809      	ldr	r0, [pc, #36]	; (8000f58 <HAL_GPIO_WritePin+0x60>)
 8000f34:	f7ff f9c6 	bl	80002c4 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000f38:	787b      	ldrb	r3, [r7, #1]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d003      	beq.n	8000f46 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f3e:	887a      	ldrh	r2, [r7, #2]
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000f44:	e003      	b.n	8000f4e <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000f46:	887b      	ldrh	r3, [r7, #2]
 8000f48:	041a      	lsls	r2, r3, #16
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	611a      	str	r2, [r3, #16]
}
 8000f4e:	bf00      	nop
 8000f50:	3708      	adds	r7, #8
 8000f52:	46bd      	mov	sp, r7
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	080035cc 	.word	0x080035cc

08000f5c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d101      	bne.n	8000f6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	e35c      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d01c      	beq.n	8000fb0 <HAL_RCC_OscConfig+0x54>
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d116      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x54>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d110      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x54>
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0308 	and.w	r3, r3, #8
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d10a      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x54>
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f003 0304 	and.w	r3, r3, #4
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d104      	bne.n	8000fb0 <HAL_RCC_OscConfig+0x54>
 8000fa6:	f240 1167 	movw	r1, #359	; 0x167
 8000faa:	48a5      	ldr	r0, [pc, #660]	; (8001240 <HAL_RCC_OscConfig+0x2e4>)
 8000fac:	f7ff f98a 	bl	80002c4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 809a 	beq.w	80010f2 <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	685b      	ldr	r3, [r3, #4]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d00e      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x88>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fce:	d009      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x88>
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	685b      	ldr	r3, [r3, #4]
 8000fd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fd8:	d004      	beq.n	8000fe4 <HAL_RCC_OscConfig+0x88>
 8000fda:	f240 116d 	movw	r1, #365	; 0x16d
 8000fde:	4898      	ldr	r0, [pc, #608]	; (8001240 <HAL_RCC_OscConfig+0x2e4>)
 8000fe0:	f7ff f970 	bl	80002c4 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000fe4:	4b97      	ldr	r3, [pc, #604]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b04      	cmp	r3, #4
 8000fee:	d00c      	beq.n	800100a <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000ff0:	4b94      	ldr	r3, [pc, #592]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f003 030c 	and.w	r3, r3, #12
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d112      	bne.n	8001022 <HAL_RCC_OscConfig+0xc6>
 8000ffc:	4b91      	ldr	r3, [pc, #580]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001004:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001008:	d10b      	bne.n	8001022 <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800100a:	4b8e      	ldr	r3, [pc, #568]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001012:	2b00      	cmp	r3, #0
 8001014:	d06c      	beq.n	80010f0 <HAL_RCC_OscConfig+0x194>
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	2b00      	cmp	r3, #0
 800101c:	d168      	bne.n	80010f0 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
 8001020:	e302      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800102a:	d106      	bne.n	800103a <HAL_RCC_OscConfig+0xde>
 800102c:	4b85      	ldr	r3, [pc, #532]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a84      	ldr	r2, [pc, #528]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001032:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001036:	6013      	str	r3, [r2, #0]
 8001038:	e02e      	b.n	8001098 <HAL_RCC_OscConfig+0x13c>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b00      	cmp	r3, #0
 8001040:	d10c      	bne.n	800105c <HAL_RCC_OscConfig+0x100>
 8001042:	4b80      	ldr	r3, [pc, #512]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4a7f      	ldr	r2, [pc, #508]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001048:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800104c:	6013      	str	r3, [r2, #0]
 800104e:	4b7d      	ldr	r3, [pc, #500]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a7c      	ldr	r2, [pc, #496]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001054:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	e01d      	b.n	8001098 <HAL_RCC_OscConfig+0x13c>
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	685b      	ldr	r3, [r3, #4]
 8001060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001064:	d10c      	bne.n	8001080 <HAL_RCC_OscConfig+0x124>
 8001066:	4b77      	ldr	r3, [pc, #476]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a76      	ldr	r2, [pc, #472]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 800106c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001070:	6013      	str	r3, [r2, #0]
 8001072:	4b74      	ldr	r3, [pc, #464]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a73      	ldr	r2, [pc, #460]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	e00b      	b.n	8001098 <HAL_RCC_OscConfig+0x13c>
 8001080:	4b70      	ldr	r3, [pc, #448]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	4a6f      	ldr	r2, [pc, #444]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800108a:	6013      	str	r3, [r2, #0]
 800108c:	4b6d      	ldr	r3, [pc, #436]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	4a6c      	ldr	r2, [pc, #432]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001096:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	685b      	ldr	r3, [r3, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d013      	beq.n	80010c8 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010a0:	f7ff fb34 	bl	800070c <HAL_GetTick>
 80010a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010a6:	e008      	b.n	80010ba <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010a8:	f7ff fb30 	bl	800070c <HAL_GetTick>
 80010ac:	4602      	mov	r2, r0
 80010ae:	693b      	ldr	r3, [r7, #16]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	2b64      	cmp	r3, #100	; 0x64
 80010b4:	d901      	bls.n	80010ba <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 80010b6:	2303      	movs	r3, #3
 80010b8:	e2b6      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ba:	4b62      	ldr	r3, [pc, #392]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d0f0      	beq.n	80010a8 <HAL_RCC_OscConfig+0x14c>
 80010c6:	e014      	b.n	80010f2 <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010c8:	f7ff fb20 	bl	800070c <HAL_GetTick>
 80010cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010ce:	e008      	b.n	80010e2 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d0:	f7ff fb1c 	bl	800070c <HAL_GetTick>
 80010d4:	4602      	mov	r2, r0
 80010d6:	693b      	ldr	r3, [r7, #16]
 80010d8:	1ad3      	subs	r3, r2, r3
 80010da:	2b64      	cmp	r3, #100	; 0x64
 80010dc:	d901      	bls.n	80010e2 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80010de:	2303      	movs	r3, #3
 80010e0:	e2a2      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010e2:	4b58      	ldr	r3, [pc, #352]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d1f0      	bne.n	80010d0 <HAL_RCC_OscConfig+0x174>
 80010ee:	e000      	b.n	80010f2 <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f003 0302 	and.w	r3, r3, #2
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d079      	beq.n	80011f2 <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	691b      	ldr	r3, [r3, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d008      	beq.n	8001118 <HAL_RCC_OscConfig+0x1bc>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	691b      	ldr	r3, [r3, #16]
 800110a:	2b01      	cmp	r3, #1
 800110c:	d004      	beq.n	8001118 <HAL_RCC_OscConfig+0x1bc>
 800110e:	f240 11a1 	movw	r1, #417	; 0x1a1
 8001112:	484b      	ldr	r0, [pc, #300]	; (8001240 <HAL_RCC_OscConfig+0x2e4>)
 8001114:	f7ff f8d6 	bl	80002c4 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	695b      	ldr	r3, [r3, #20]
 800111c:	2b1f      	cmp	r3, #31
 800111e:	d904      	bls.n	800112a <HAL_RCC_OscConfig+0x1ce>
 8001120:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8001124:	4846      	ldr	r0, [pc, #280]	; (8001240 <HAL_RCC_OscConfig+0x2e4>)
 8001126:	f7ff f8cd 	bl	80002c4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112a:	4b46      	ldr	r3, [pc, #280]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f003 030c 	and.w	r3, r3, #12
 8001132:	2b00      	cmp	r3, #0
 8001134:	d00b      	beq.n	800114e <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001136:	4b43      	ldr	r3, [pc, #268]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001138:	685b      	ldr	r3, [r3, #4]
 800113a:	f003 030c 	and.w	r3, r3, #12
 800113e:	2b08      	cmp	r3, #8
 8001140:	d11c      	bne.n	800117c <HAL_RCC_OscConfig+0x220>
 8001142:	4b40      	ldr	r3, [pc, #256]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d116      	bne.n	800117c <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800114e:	4b3d      	ldr	r3, [pc, #244]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d005      	beq.n	8001166 <HAL_RCC_OscConfig+0x20a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	691b      	ldr	r3, [r3, #16]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e260      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001166:	4b37      	ldr	r3, [pc, #220]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4933      	ldr	r1, [pc, #204]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 8001176:	4313      	orrs	r3, r2
 8001178:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117a:	e03a      	b.n	80011f2 <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	691b      	ldr	r3, [r3, #16]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d020      	beq.n	80011c6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001184:	4b30      	ldr	r3, [pc, #192]	; (8001248 <HAL_RCC_OscConfig+0x2ec>)
 8001186:	2201      	movs	r2, #1
 8001188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118a:	f7ff fabf 	bl	800070c <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001190:	e008      	b.n	80011a4 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001192:	f7ff fabb 	bl	800070c <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e241      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a4:	4b27      	ldr	r3, [pc, #156]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f003 0302 	and.w	r3, r3, #2
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0f0      	beq.n	8001192 <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b0:	4b24      	ldr	r3, [pc, #144]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	695b      	ldr	r3, [r3, #20]
 80011bc:	00db      	lsls	r3, r3, #3
 80011be:	4921      	ldr	r1, [pc, #132]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 80011c0:	4313      	orrs	r3, r2
 80011c2:	600b      	str	r3, [r1, #0]
 80011c4:	e015      	b.n	80011f2 <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_RCC_OscConfig+0x2ec>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fa9e 	bl	800070c <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d4:	f7ff fa9a 	bl	800070c <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e220      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011e6:	4b17      	ldr	r3, [pc, #92]	; (8001244 <HAL_RCC_OscConfig+0x2e8>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f003 0308 	and.w	r3, r3, #8
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d048      	beq.n	8001290 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	2b00      	cmp	r3, #0
 8001204:	d008      	beq.n	8001218 <HAL_RCC_OscConfig+0x2bc>
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	2b01      	cmp	r3, #1
 800120c:	d004      	beq.n	8001218 <HAL_RCC_OscConfig+0x2bc>
 800120e:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8001212:	480b      	ldr	r0, [pc, #44]	; (8001240 <HAL_RCC_OscConfig+0x2e4>)
 8001214:	f7ff f856 	bl	80002c4 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	699b      	ldr	r3, [r3, #24]
 800121c:	2b00      	cmp	r3, #0
 800121e:	d021      	beq.n	8001264 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001220:	4b0a      	ldr	r3, [pc, #40]	; (800124c <HAL_RCC_OscConfig+0x2f0>)
 8001222:	2201      	movs	r2, #1
 8001224:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001226:	f7ff fa71 	bl	800070c <HAL_GetTick>
 800122a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122c:	e010      	b.n	8001250 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800122e:	f7ff fa6d 	bl	800070c <HAL_GetTick>
 8001232:	4602      	mov	r2, r0
 8001234:	693b      	ldr	r3, [r7, #16]
 8001236:	1ad3      	subs	r3, r2, r3
 8001238:	2b02      	cmp	r3, #2
 800123a:	d909      	bls.n	8001250 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 800123c:	2303      	movs	r3, #3
 800123e:	e1f3      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
 8001240:	08003608 	.word	0x08003608
 8001244:	40021000 	.word	0x40021000
 8001248:	42420000 	.word	0x42420000
 800124c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001250:	4b67      	ldr	r3, [pc, #412]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001252:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	2b00      	cmp	r3, #0
 800125a:	d0e8      	beq.n	800122e <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800125c:	2001      	movs	r0, #1
 800125e:	f000 fc11 	bl	8001a84 <RCC_Delay>
 8001262:	e015      	b.n	8001290 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001264:	4b63      	ldr	r3, [pc, #396]	; (80013f4 <HAL_RCC_OscConfig+0x498>)
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800126a:	f7ff fa4f 	bl	800070c <HAL_GetTick>
 800126e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001270:	e008      	b.n	8001284 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001272:	f7ff fa4b 	bl	800070c <HAL_GetTick>
 8001276:	4602      	mov	r2, r0
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	1ad3      	subs	r3, r2, r3
 800127c:	2b02      	cmp	r3, #2
 800127e:	d901      	bls.n	8001284 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001280:	2303      	movs	r3, #3
 8001282:	e1d1      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001284:	4b5a      	ldr	r3, [pc, #360]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001288:	f003 0302 	and.w	r3, r3, #2
 800128c:	2b00      	cmp	r3, #0
 800128e:	d1f0      	bne.n	8001272 <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f003 0304 	and.w	r3, r3, #4
 8001298:	2b00      	cmp	r3, #0
 800129a:	f000 80c0 	beq.w	800141e <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800129e:	2300      	movs	r3, #0
 80012a0:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d00c      	beq.n	80012c4 <HAL_RCC_OscConfig+0x368>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	68db      	ldr	r3, [r3, #12]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d008      	beq.n	80012c4 <HAL_RCC_OscConfig+0x368>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	2b05      	cmp	r3, #5
 80012b8:	d004      	beq.n	80012c4 <HAL_RCC_OscConfig+0x368>
 80012ba:	f240 2111 	movw	r1, #529	; 0x211
 80012be:	484e      	ldr	r0, [pc, #312]	; (80013f8 <HAL_RCC_OscConfig+0x49c>)
 80012c0:	f7ff f800 	bl	80002c4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012c4:	4b4a      	ldr	r3, [pc, #296]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 80012c6:	69db      	ldr	r3, [r3, #28]
 80012c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d10d      	bne.n	80012ec <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012d0:	4b47      	ldr	r3, [pc, #284]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 80012d2:	69db      	ldr	r3, [r3, #28]
 80012d4:	4a46      	ldr	r2, [pc, #280]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 80012d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012da:	61d3      	str	r3, [r2, #28]
 80012dc:	4b44      	ldr	r3, [pc, #272]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 80012de:	69db      	ldr	r3, [r3, #28]
 80012e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e4:	60bb      	str	r3, [r7, #8]
 80012e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012e8:	2301      	movs	r3, #1
 80012ea:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012ec:	4b43      	ldr	r3, [pc, #268]	; (80013fc <HAL_RCC_OscConfig+0x4a0>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d118      	bne.n	800132a <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f8:	4b40      	ldr	r3, [pc, #256]	; (80013fc <HAL_RCC_OscConfig+0x4a0>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	4a3f      	ldr	r2, [pc, #252]	; (80013fc <HAL_RCC_OscConfig+0x4a0>)
 80012fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001304:	f7ff fa02 	bl	800070c <HAL_GetTick>
 8001308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800130a:	e008      	b.n	800131e <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800130c:	f7ff f9fe 	bl	800070c <HAL_GetTick>
 8001310:	4602      	mov	r2, r0
 8001312:	693b      	ldr	r3, [r7, #16]
 8001314:	1ad3      	subs	r3, r2, r3
 8001316:	2b64      	cmp	r3, #100	; 0x64
 8001318:	d901      	bls.n	800131e <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 800131a:	2303      	movs	r3, #3
 800131c:	e184      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800131e:	4b37      	ldr	r3, [pc, #220]	; (80013fc <HAL_RCC_OscConfig+0x4a0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001326:	2b00      	cmp	r3, #0
 8001328:	d0f0      	beq.n	800130c <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	68db      	ldr	r3, [r3, #12]
 800132e:	2b01      	cmp	r3, #1
 8001330:	d106      	bne.n	8001340 <HAL_RCC_OscConfig+0x3e4>
 8001332:	4b2f      	ldr	r3, [pc, #188]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4a2e      	ldr	r2, [pc, #184]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001338:	f043 0301 	orr.w	r3, r3, #1
 800133c:	6213      	str	r3, [r2, #32]
 800133e:	e02d      	b.n	800139c <HAL_RCC_OscConfig+0x440>
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	68db      	ldr	r3, [r3, #12]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d10c      	bne.n	8001362 <HAL_RCC_OscConfig+0x406>
 8001348:	4b29      	ldr	r3, [pc, #164]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 800134a:	6a1b      	ldr	r3, [r3, #32]
 800134c:	4a28      	ldr	r2, [pc, #160]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 800134e:	f023 0301 	bic.w	r3, r3, #1
 8001352:	6213      	str	r3, [r2, #32]
 8001354:	4b26      	ldr	r3, [pc, #152]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001356:	6a1b      	ldr	r3, [r3, #32]
 8001358:	4a25      	ldr	r2, [pc, #148]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 800135a:	f023 0304 	bic.w	r3, r3, #4
 800135e:	6213      	str	r3, [r2, #32]
 8001360:	e01c      	b.n	800139c <HAL_RCC_OscConfig+0x440>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b05      	cmp	r3, #5
 8001368:	d10c      	bne.n	8001384 <HAL_RCC_OscConfig+0x428>
 800136a:	4b21      	ldr	r3, [pc, #132]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 800136c:	6a1b      	ldr	r3, [r3, #32]
 800136e:	4a20      	ldr	r2, [pc, #128]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001370:	f043 0304 	orr.w	r3, r3, #4
 8001374:	6213      	str	r3, [r2, #32]
 8001376:	4b1e      	ldr	r3, [pc, #120]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	4a1d      	ldr	r2, [pc, #116]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 800137c:	f043 0301 	orr.w	r3, r3, #1
 8001380:	6213      	str	r3, [r2, #32]
 8001382:	e00b      	b.n	800139c <HAL_RCC_OscConfig+0x440>
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001386:	6a1b      	ldr	r3, [r3, #32]
 8001388:	4a19      	ldr	r2, [pc, #100]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 800138a:	f023 0301 	bic.w	r3, r3, #1
 800138e:	6213      	str	r3, [r2, #32]
 8001390:	4b17      	ldr	r3, [pc, #92]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001392:	6a1b      	ldr	r3, [r3, #32]
 8001394:	4a16      	ldr	r2, [pc, #88]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 8001396:	f023 0304 	bic.w	r3, r3, #4
 800139a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d015      	beq.n	80013d0 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013a4:	f7ff f9b2 	bl	800070c <HAL_GetTick>
 80013a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013aa:	e00a      	b.n	80013c2 <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013ac:	f7ff f9ae 	bl	800070c <HAL_GetTick>
 80013b0:	4602      	mov	r2, r0
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	1ad3      	subs	r3, r2, r3
 80013b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80013ba:	4293      	cmp	r3, r2
 80013bc:	d901      	bls.n	80013c2 <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80013be:	2303      	movs	r3, #3
 80013c0:	e132      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013c2:	4b0b      	ldr	r3, [pc, #44]	; (80013f0 <HAL_RCC_OscConfig+0x494>)
 80013c4:	6a1b      	ldr	r3, [r3, #32]
 80013c6:	f003 0302 	and.w	r3, r3, #2
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d0ee      	beq.n	80013ac <HAL_RCC_OscConfig+0x450>
 80013ce:	e01d      	b.n	800140c <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d0:	f7ff f99c 	bl	800070c <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d6:	e013      	b.n	8001400 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80013d8:	f7ff f998 	bl	800070c <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80013e6:	4293      	cmp	r3, r2
 80013e8:	d90a      	bls.n	8001400 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 80013ea:	2303      	movs	r3, #3
 80013ec:	e11c      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
 80013ee:	bf00      	nop
 80013f0:	40021000 	.word	0x40021000
 80013f4:	42420480 	.word	0x42420480
 80013f8:	08003608 	.word	0x08003608
 80013fc:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001400:	4b8b      	ldr	r3, [pc, #556]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 8001402:	6a1b      	ldr	r3, [r3, #32]
 8001404:	f003 0302 	and.w	r3, r3, #2
 8001408:	2b00      	cmp	r3, #0
 800140a:	d1e5      	bne.n	80013d8 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800140c:	7dfb      	ldrb	r3, [r7, #23]
 800140e:	2b01      	cmp	r3, #1
 8001410:	d105      	bne.n	800141e <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001412:	4b87      	ldr	r3, [pc, #540]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 8001414:	69db      	ldr	r3, [r3, #28]
 8001416:	4a86      	ldr	r2, [pc, #536]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 8001418:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800141c:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d00c      	beq.n	8001440 <HAL_RCC_OscConfig+0x4e4>
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	69db      	ldr	r3, [r3, #28]
 800142a:	2b01      	cmp	r3, #1
 800142c:	d008      	beq.n	8001440 <HAL_RCC_OscConfig+0x4e4>
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	69db      	ldr	r3, [r3, #28]
 8001432:	2b02      	cmp	r3, #2
 8001434:	d004      	beq.n	8001440 <HAL_RCC_OscConfig+0x4e4>
 8001436:	f240 21af 	movw	r1, #687	; 0x2af
 800143a:	487e      	ldr	r0, [pc, #504]	; (8001634 <HAL_RCC_OscConfig+0x6d8>)
 800143c:	f7fe ff42 	bl	80002c4 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	69db      	ldr	r3, [r3, #28]
 8001444:	2b00      	cmp	r3, #0
 8001446:	f000 80ee 	beq.w	8001626 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800144a:	4b79      	ldr	r3, [pc, #484]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	f003 030c 	and.w	r3, r3, #12
 8001452:	2b08      	cmp	r3, #8
 8001454:	f000 80ce 	beq.w	80015f4 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	2b02      	cmp	r3, #2
 800145e:	f040 80b2 	bne.w	80015c6 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6a1b      	ldr	r3, [r3, #32]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d009      	beq.n	800147e <HAL_RCC_OscConfig+0x522>
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	6a1b      	ldr	r3, [r3, #32]
 800146e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001472:	d004      	beq.n	800147e <HAL_RCC_OscConfig+0x522>
 8001474:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001478:	486e      	ldr	r0, [pc, #440]	; (8001634 <HAL_RCC_OscConfig+0x6d8>)
 800147a:	f7fe ff23 	bl	80002c4 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001482:	2b00      	cmp	r3, #0
 8001484:	d04a      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800148a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800148e:	d045      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001494:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001498:	d040      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800149e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80014a2:	d03b      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80014ac:	d036      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014b2:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80014b6:	d031      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014bc:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80014c0:	d02c      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80014ca:	d027      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014d4:	d022      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014da:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80014de:	d01d      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014e4:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80014e8:	d018      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ee:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80014f2:	d013      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80014fc:	d00e      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001506:	d009      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800150c:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 8001510:	d004      	beq.n	800151c <HAL_RCC_OscConfig+0x5c0>
 8001512:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001516:	4847      	ldr	r0, [pc, #284]	; (8001634 <HAL_RCC_OscConfig+0x6d8>)
 8001518:	f7fe fed4 	bl	80002c4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800151c:	4b46      	ldr	r3, [pc, #280]	; (8001638 <HAL_RCC_OscConfig+0x6dc>)
 800151e:	2200      	movs	r2, #0
 8001520:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001522:	f7ff f8f3 	bl	800070c <HAL_GetTick>
 8001526:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001528:	e008      	b.n	800153c <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800152a:	f7ff f8ef 	bl	800070c <HAL_GetTick>
 800152e:	4602      	mov	r2, r0
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b02      	cmp	r3, #2
 8001536:	d901      	bls.n	800153c <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 8001538:	2303      	movs	r3, #3
 800153a:	e075      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800153c:	4b3c      	ldr	r3, [pc, #240]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001544:	2b00      	cmp	r3, #0
 8001546:	d1f0      	bne.n	800152a <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a1b      	ldr	r3, [r3, #32]
 800154c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001550:	d116      	bne.n	8001580 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	689b      	ldr	r3, [r3, #8]
 8001556:	2b00      	cmp	r3, #0
 8001558:	d009      	beq.n	800156e <HAL_RCC_OscConfig+0x612>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	689b      	ldr	r3, [r3, #8]
 800155e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001562:	d004      	beq.n	800156e <HAL_RCC_OscConfig+0x612>
 8001564:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001568:	4832      	ldr	r0, [pc, #200]	; (8001634 <HAL_RCC_OscConfig+0x6d8>)
 800156a:	f7fe feab 	bl	80002c4 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800156e:	4b30      	ldr	r3, [pc, #192]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	689b      	ldr	r3, [r3, #8]
 800157a:	492d      	ldr	r1, [pc, #180]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 800157c:	4313      	orrs	r3, r2
 800157e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001580:	4b2b      	ldr	r3, [pc, #172]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6a19      	ldr	r1, [r3, #32]
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	430b      	orrs	r3, r1
 8001592:	4927      	ldr	r1, [pc, #156]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 8001594:	4313      	orrs	r3, r2
 8001596:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001598:	4b27      	ldr	r3, [pc, #156]	; (8001638 <HAL_RCC_OscConfig+0x6dc>)
 800159a:	2201      	movs	r2, #1
 800159c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800159e:	f7ff f8b5 	bl	800070c <HAL_GetTick>
 80015a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015a4:	e008      	b.n	80015b8 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015a6:	f7ff f8b1 	bl	800070c <HAL_GetTick>
 80015aa:	4602      	mov	r2, r0
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	1ad3      	subs	r3, r2, r3
 80015b0:	2b02      	cmp	r3, #2
 80015b2:	d901      	bls.n	80015b8 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e037      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80015b8:	4b1d      	ldr	r3, [pc, #116]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d0f0      	beq.n	80015a6 <HAL_RCC_OscConfig+0x64a>
 80015c4:	e02f      	b.n	8001626 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015c6:	4b1c      	ldr	r3, [pc, #112]	; (8001638 <HAL_RCC_OscConfig+0x6dc>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015cc:	f7ff f89e 	bl	800070c <HAL_GetTick>
 80015d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015d2:	e008      	b.n	80015e6 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80015d4:	f7ff f89a 	bl	800070c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	1ad3      	subs	r3, r2, r3
 80015de:	2b02      	cmp	r3, #2
 80015e0:	d901      	bls.n	80015e6 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 80015e2:	2303      	movs	r3, #3
 80015e4:	e020      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80015e6:	4b12      	ldr	r3, [pc, #72]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d1f0      	bne.n	80015d4 <HAL_RCC_OscConfig+0x678>
 80015f2:	e018      	b.n	8001626 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	69db      	ldr	r3, [r3, #28]
 80015f8:	2b01      	cmp	r3, #1
 80015fa:	d101      	bne.n	8001600 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80015fc:	2301      	movs	r3, #1
 80015fe:	e013      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001600:	4b0b      	ldr	r3, [pc, #44]	; (8001630 <HAL_RCC_OscConfig+0x6d4>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	6a1b      	ldr	r3, [r3, #32]
 8001610:	429a      	cmp	r2, r3
 8001612:	d106      	bne.n	8001622 <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800161e:	429a      	cmp	r2, r3
 8001620:	d001      	beq.n	8001626 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	e000      	b.n	8001628 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001626:	2300      	movs	r3, #0
}
 8001628:	4618      	mov	r0, r3
 800162a:	3718      	adds	r7, #24
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40021000 	.word	0x40021000
 8001634:	08003608 	.word	0x08003608
 8001638:	42420060 	.word	0x42420060

0800163c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b084      	sub	sp, #16
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
 8001644:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d101      	bne.n	8001650 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800164c:	2301      	movs	r3, #1
 800164e:	e176      	b.n	800193e <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f003 0301 	and.w	r3, r3, #1
 8001658:	2b00      	cmp	r3, #0
 800165a:	d116      	bne.n	800168a <HAL_RCC_ClockConfig+0x4e>
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d110      	bne.n	800168a <HAL_RCC_ClockConfig+0x4e>
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0304 	and.w	r3, r3, #4
 8001670:	2b00      	cmp	r3, #0
 8001672:	d10a      	bne.n	800168a <HAL_RCC_ClockConfig+0x4e>
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 0308 	and.w	r3, r3, #8
 800167c:	2b00      	cmp	r3, #0
 800167e:	d104      	bne.n	800168a <HAL_RCC_ClockConfig+0x4e>
 8001680:	f44f 714e 	mov.w	r1, #824	; 0x338
 8001684:	4874      	ldr	r0, [pc, #464]	; (8001858 <HAL_RCC_ClockConfig+0x21c>)
 8001686:	f7fe fe1d 	bl	80002c4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d00a      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x6a>
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	2b01      	cmp	r3, #1
 8001694:	d007      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x6a>
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	2b02      	cmp	r3, #2
 800169a:	d004      	beq.n	80016a6 <HAL_RCC_ClockConfig+0x6a>
 800169c:	f240 3139 	movw	r1, #825	; 0x339
 80016a0:	486d      	ldr	r0, [pc, #436]	; (8001858 <HAL_RCC_ClockConfig+0x21c>)
 80016a2:	f7fe fe0f 	bl	80002c4 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80016a6:	4b6d      	ldr	r3, [pc, #436]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 0307 	and.w	r3, r3, #7
 80016ae:	683a      	ldr	r2, [r7, #0]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	d910      	bls.n	80016d6 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016b4:	4b69      	ldr	r3, [pc, #420]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f023 0207 	bic.w	r2, r3, #7
 80016bc:	4967      	ldr	r1, [pc, #412]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c4:	4b65      	ldr	r3, [pc, #404]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f003 0307 	and.w	r3, r3, #7
 80016cc:	683a      	ldr	r2, [r7, #0]
 80016ce:	429a      	cmp	r2, r3
 80016d0:	d001      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e133      	b.n	800193e <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d049      	beq.n	8001776 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d005      	beq.n	80016fa <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ee:	4b5c      	ldr	r3, [pc, #368]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 80016f0:	685b      	ldr	r3, [r3, #4]
 80016f2:	4a5b      	ldr	r2, [pc, #364]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 80016f4:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80016f8:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0308 	and.w	r3, r3, #8
 8001702:	2b00      	cmp	r3, #0
 8001704:	d005      	beq.n	8001712 <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001706:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 8001708:	685b      	ldr	r3, [r3, #4]
 800170a:	4a55      	ldr	r2, [pc, #340]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 800170c:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8001710:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d024      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	689b      	ldr	r3, [r3, #8]
 800171e:	2b80      	cmp	r3, #128	; 0x80
 8001720:	d020      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	689b      	ldr	r3, [r3, #8]
 8001726:	2b90      	cmp	r3, #144	; 0x90
 8001728:	d01c      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2ba0      	cmp	r3, #160	; 0xa0
 8001730:	d018      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2bb0      	cmp	r3, #176	; 0xb0
 8001738:	d014      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	689b      	ldr	r3, [r3, #8]
 800173e:	2bc0      	cmp	r3, #192	; 0xc0
 8001740:	d010      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	689b      	ldr	r3, [r3, #8]
 8001746:	2bd0      	cmp	r3, #208	; 0xd0
 8001748:	d00c      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	2be0      	cmp	r3, #224	; 0xe0
 8001750:	d008      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2bf0      	cmp	r3, #240	; 0xf0
 8001758:	d004      	beq.n	8001764 <HAL_RCC_ClockConfig+0x128>
 800175a:	f240 315f 	movw	r1, #863	; 0x35f
 800175e:	483e      	ldr	r0, [pc, #248]	; (8001858 <HAL_RCC_ClockConfig+0x21c>)
 8001760:	f7fe fdb0 	bl	80002c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001764:	4b3e      	ldr	r3, [pc, #248]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	493b      	ldr	r1, [pc, #236]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 8001772:	4313      	orrs	r3, r2
 8001774:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d051      	beq.n	8001826 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d00c      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x168>
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	2b01      	cmp	r3, #1
 8001790:	d008      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x168>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b02      	cmp	r3, #2
 8001798:	d004      	beq.n	80017a4 <HAL_RCC_ClockConfig+0x168>
 800179a:	f240 3166 	movw	r1, #870	; 0x366
 800179e:	482e      	ldr	r0, [pc, #184]	; (8001858 <HAL_RCC_ClockConfig+0x21c>)
 80017a0:	f7fe fd90 	bl	80002c4 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	2b01      	cmp	r3, #1
 80017aa:	d107      	bne.n	80017bc <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017ac:	4b2c      	ldr	r3, [pc, #176]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d115      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e0c0      	b.n	800193e <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017c4:	4b26      	ldr	r3, [pc, #152]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d109      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80017d0:	2301      	movs	r3, #1
 80017d2:	e0b4      	b.n	800193e <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017d4:	4b22      	ldr	r3, [pc, #136]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0302 	and.w	r3, r3, #2
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0ac      	b.n	800193e <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f023 0203 	bic.w	r2, r3, #3
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	491b      	ldr	r1, [pc, #108]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 80017f2:	4313      	orrs	r3, r2
 80017f4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017f6:	f7fe ff89 	bl	800070c <HAL_GetTick>
 80017fa:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017fe:	f7fe ff85 	bl	800070c <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e094      	b.n	800193e <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001814:	4b12      	ldr	r3, [pc, #72]	; (8001860 <HAL_RCC_ClockConfig+0x224>)
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 020c 	and.w	r2, r3, #12
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	009b      	lsls	r3, r3, #2
 8001822:	429a      	cmp	r2, r3
 8001824:	d1eb      	bne.n	80017fe <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001826:	4b0d      	ldr	r3, [pc, #52]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0307 	and.w	r3, r3, #7
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	429a      	cmp	r2, r3
 8001832:	d217      	bcs.n	8001864 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001834:	4b09      	ldr	r3, [pc, #36]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f023 0207 	bic.w	r2, r3, #7
 800183c:	4907      	ldr	r1, [pc, #28]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 800183e:	683b      	ldr	r3, [r7, #0]
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <HAL_RCC_ClockConfig+0x220>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0307 	and.w	r3, r3, #7
 800184c:	683a      	ldr	r2, [r7, #0]
 800184e:	429a      	cmp	r2, r3
 8001850:	d008      	beq.n	8001864 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001852:	2301      	movs	r3, #1
 8001854:	e073      	b.n	800193e <HAL_RCC_ClockConfig+0x302>
 8001856:	bf00      	nop
 8001858:	08003608 	.word	0x08003608
 800185c:	40022000 	.word	0x40022000
 8001860:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0304 	and.w	r3, r3, #4
 800186c:	2b00      	cmp	r3, #0
 800186e:	d025      	beq.n	80018bc <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	2b00      	cmp	r3, #0
 8001876:	d018      	beq.n	80018aa <HAL_RCC_ClockConfig+0x26e>
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	68db      	ldr	r3, [r3, #12]
 800187c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001880:	d013      	beq.n	80018aa <HAL_RCC_ClockConfig+0x26e>
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	68db      	ldr	r3, [r3, #12]
 8001886:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800188a:	d00e      	beq.n	80018aa <HAL_RCC_ClockConfig+0x26e>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001894:	d009      	beq.n	80018aa <HAL_RCC_ClockConfig+0x26e>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800189e:	d004      	beq.n	80018aa <HAL_RCC_ClockConfig+0x26e>
 80018a0:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 80018a4:	4828      	ldr	r0, [pc, #160]	; (8001948 <HAL_RCC_ClockConfig+0x30c>)
 80018a6:	f7fe fd0d 	bl	80002c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80018aa:	4b28      	ldr	r3, [pc, #160]	; (800194c <HAL_RCC_ClockConfig+0x310>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	68db      	ldr	r3, [r3, #12]
 80018b6:	4925      	ldr	r1, [pc, #148]	; (800194c <HAL_RCC_ClockConfig+0x310>)
 80018b8:	4313      	orrs	r3, r2
 80018ba:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	f003 0308 	and.w	r3, r3, #8
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d026      	beq.n	8001916 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d018      	beq.n	8001902 <HAL_RCC_ClockConfig+0x2c6>
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	691b      	ldr	r3, [r3, #16]
 80018d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80018d8:	d013      	beq.n	8001902 <HAL_RCC_ClockConfig+0x2c6>
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	691b      	ldr	r3, [r3, #16]
 80018de:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80018e2:	d00e      	beq.n	8001902 <HAL_RCC_ClockConfig+0x2c6>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	691b      	ldr	r3, [r3, #16]
 80018e8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80018ec:	d009      	beq.n	8001902 <HAL_RCC_ClockConfig+0x2c6>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80018f6:	d004      	beq.n	8001902 <HAL_RCC_ClockConfig+0x2c6>
 80018f8:	f240 31ab 	movw	r1, #939	; 0x3ab
 80018fc:	4812      	ldr	r0, [pc, #72]	; (8001948 <HAL_RCC_ClockConfig+0x30c>)
 80018fe:	f7fe fce1 	bl	80002c4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001902:	4b12      	ldr	r3, [pc, #72]	; (800194c <HAL_RCC_ClockConfig+0x310>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00db      	lsls	r3, r3, #3
 8001910:	490e      	ldr	r1, [pc, #56]	; (800194c <HAL_RCC_ClockConfig+0x310>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001916:	f000 f821 	bl	800195c <HAL_RCC_GetSysClockFreq>
 800191a:	4601      	mov	r1, r0
 800191c:	4b0b      	ldr	r3, [pc, #44]	; (800194c <HAL_RCC_ClockConfig+0x310>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	091b      	lsrs	r3, r3, #4
 8001922:	f003 030f 	and.w	r3, r3, #15
 8001926:	4a0a      	ldr	r2, [pc, #40]	; (8001950 <HAL_RCC_ClockConfig+0x314>)
 8001928:	5cd3      	ldrb	r3, [r2, r3]
 800192a:	fa21 f303 	lsr.w	r3, r1, r3
 800192e:	4a09      	ldr	r2, [pc, #36]	; (8001954 <HAL_RCC_ClockConfig+0x318>)
 8001930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001932:	4b09      	ldr	r3, [pc, #36]	; (8001958 <HAL_RCC_ClockConfig+0x31c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4618      	mov	r0, r3
 8001938:	f7fe feb8 	bl	80006ac <HAL_InitTick>

  return HAL_OK;
 800193c:	2300      	movs	r3, #0
}
 800193e:	4618      	mov	r0, r3
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	08003608 	.word	0x08003608
 800194c:	40021000 	.word	0x40021000
 8001950:	08003698 	.word	0x08003698
 8001954:	20000000 	.word	0x20000000
 8001958:	20000004 	.word	0x20000004

0800195c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800195c:	b490      	push	{r4, r7}
 800195e:	b08a      	sub	sp, #40	; 0x28
 8001960:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001962:	4b2a      	ldr	r3, [pc, #168]	; (8001a0c <HAL_RCC_GetSysClockFreq+0xb0>)
 8001964:	1d3c      	adds	r4, r7, #4
 8001966:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001968:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 800196c:	4b28      	ldr	r3, [pc, #160]	; (8001a10 <HAL_RCC_GetSysClockFreq+0xb4>)
 800196e:	881b      	ldrh	r3, [r3, #0]
 8001970:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001972:	2300      	movs	r3, #0
 8001974:	61fb      	str	r3, [r7, #28]
 8001976:	2300      	movs	r3, #0
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	2300      	movs	r3, #0
 800197c:	627b      	str	r3, [r7, #36]	; 0x24
 800197e:	2300      	movs	r3, #0
 8001980:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001982:	2300      	movs	r3, #0
 8001984:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001986:	4b23      	ldr	r3, [pc, #140]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b04      	cmp	r3, #4
 8001994:	d002      	beq.n	800199c <HAL_RCC_GetSysClockFreq+0x40>
 8001996:	2b08      	cmp	r3, #8
 8001998:	d003      	beq.n	80019a2 <HAL_RCC_GetSysClockFreq+0x46>
 800199a:	e02d      	b.n	80019f8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800199c:	4b1e      	ldr	r3, [pc, #120]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 800199e:	623b      	str	r3, [r7, #32]
      break;
 80019a0:	e02d      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	0c9b      	lsrs	r3, r3, #18
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ae:	4413      	add	r3, r2
 80019b0:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80019b4:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80019b6:	69fb      	ldr	r3, [r7, #28]
 80019b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d013      	beq.n	80019e8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80019c0:	4b14      	ldr	r3, [pc, #80]	; (8001a14 <HAL_RCC_GetSysClockFreq+0xb8>)
 80019c2:	685b      	ldr	r3, [r3, #4]
 80019c4:	0c5b      	lsrs	r3, r3, #17
 80019c6:	f003 0301 	and.w	r3, r3, #1
 80019ca:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80019ce:	4413      	add	r3, r2
 80019d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80019d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	4a0f      	ldr	r2, [pc, #60]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019da:	fb02 f203 	mul.w	r2, r2, r3
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80019e4:	627b      	str	r3, [r7, #36]	; 0x24
 80019e6:	e004      	b.n	80019f2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	4a0c      	ldr	r2, [pc, #48]	; (8001a1c <HAL_RCC_GetSysClockFreq+0xc0>)
 80019ec:	fb02 f303 	mul.w	r3, r2, r3
 80019f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80019f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019f4:	623b      	str	r3, [r7, #32]
      break;
 80019f6:	e002      	b.n	80019fe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80019f8:	4b07      	ldr	r3, [pc, #28]	; (8001a18 <HAL_RCC_GetSysClockFreq+0xbc>)
 80019fa:	623b      	str	r3, [r7, #32]
      break;
 80019fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019fe:	6a3b      	ldr	r3, [r7, #32]
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3728      	adds	r7, #40	; 0x28
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc90      	pop	{r4, r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	08003640 	.word	0x08003640
 8001a10:	08003650 	.word	0x08003650
 8001a14:	40021000 	.word	0x40021000
 8001a18:	007a1200 	.word	0x007a1200
 8001a1c:	003d0900 	.word	0x003d0900

08001a20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a24:	4b02      	ldr	r3, [pc, #8]	; (8001a30 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a26:	681b      	ldr	r3, [r3, #0]
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bc80      	pop	{r7}
 8001a2e:	4770      	bx	lr
 8001a30:	20000000 	.word	0x20000000

08001a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a38:	f7ff fff2 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a3c:	4601      	mov	r1, r0
 8001a3e:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	0a1b      	lsrs	r3, r3, #8
 8001a44:	f003 0307 	and.w	r3, r3, #7
 8001a48:	4a03      	ldr	r2, [pc, #12]	; (8001a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a4a:	5cd3      	ldrb	r3, [r2, r3]
 8001a4c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	40021000 	.word	0x40021000
 8001a58:	080036a8 	.word	0x080036a8

08001a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001a60:	f7ff ffde 	bl	8001a20 <HAL_RCC_GetHCLKFreq>
 8001a64:	4601      	mov	r1, r0
 8001a66:	4b05      	ldr	r3, [pc, #20]	; (8001a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8001a68:	685b      	ldr	r3, [r3, #4]
 8001a6a:	0adb      	lsrs	r3, r3, #11
 8001a6c:	f003 0307 	and.w	r3, r3, #7
 8001a70:	4a03      	ldr	r2, [pc, #12]	; (8001a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001a72:	5cd3      	ldrb	r3, [r2, r3]
 8001a74:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001a78:	4618      	mov	r0, r3
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40021000 	.word	0x40021000
 8001a80:	080036a8 	.word	0x080036a8

08001a84 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001a8c:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <RCC_Delay+0x34>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a0a      	ldr	r2, [pc, #40]	; (8001abc <RCC_Delay+0x38>)
 8001a92:	fba2 2303 	umull	r2, r3, r2, r3
 8001a96:	0a5b      	lsrs	r3, r3, #9
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	fb02 f303 	mul.w	r3, r2, r3
 8001a9e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001aa0:	bf00      	nop
  }
  while (Delay --);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	1e5a      	subs	r2, r3, #1
 8001aa6:	60fa      	str	r2, [r7, #12]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d1f9      	bne.n	8001aa0 <RCC_Delay+0x1c>
}
 8001aac:	bf00      	nop
 8001aae:	3714      	adds	r7, #20
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bc80      	pop	{r7}
 8001ab4:	4770      	bx	lr
 8001ab6:	bf00      	nop
 8001ab8:	20000000 	.word	0x20000000
 8001abc:	10624dd3 	.word	0x10624dd3

08001ac0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b082      	sub	sp, #8
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d101      	bne.n	8001ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001ace:	2301      	movs	r3, #1
 8001ad0:	e092      	b.n	8001bf8 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	699b      	ldr	r3, [r3, #24]
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d02c      	beq.n	8001b34 <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a48      	ldr	r2, [pc, #288]	; (8001c00 <HAL_UART_Init+0x140>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d00e      	beq.n	8001b02 <HAL_UART_Init+0x42>
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a46      	ldr	r2, [pc, #280]	; (8001c04 <HAL_UART_Init+0x144>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d009      	beq.n	8001b02 <HAL_UART_Init+0x42>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a45      	ldr	r2, [pc, #276]	; (8001c08 <HAL_UART_Init+0x148>)
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d004      	beq.n	8001b02 <HAL_UART_Init+0x42>
 8001af8:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8001afc:	4843      	ldr	r0, [pc, #268]	; (8001c0c <HAL_UART_Init+0x14c>)
 8001afe:	f7fe fbe1 	bl	80002c4 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	699b      	ldr	r3, [r3, #24]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d028      	beq.n	8001b5c <HAL_UART_Init+0x9c>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001b12:	d023      	beq.n	8001b5c <HAL_UART_Init+0x9c>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b1c:	d01e      	beq.n	8001b5c <HAL_UART_Init+0x9c>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	699b      	ldr	r3, [r3, #24]
 8001b22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001b26:	d019      	beq.n	8001b5c <HAL_UART_Init+0x9c>
 8001b28:	f240 1147 	movw	r1, #327	; 0x147
 8001b2c:	4837      	ldr	r0, [pc, #220]	; (8001c0c <HAL_UART_Init+0x14c>)
 8001b2e:	f7fe fbc9 	bl	80002c4 <assert_failed>
 8001b32:	e013      	b.n	8001b5c <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a31      	ldr	r2, [pc, #196]	; (8001c00 <HAL_UART_Init+0x140>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d00e      	beq.n	8001b5c <HAL_UART_Init+0x9c>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	4a30      	ldr	r2, [pc, #192]	; (8001c04 <HAL_UART_Init+0x144>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d009      	beq.n	8001b5c <HAL_UART_Init+0x9c>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a2e      	ldr	r2, [pc, #184]	; (8001c08 <HAL_UART_Init+0x148>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d004      	beq.n	8001b5c <HAL_UART_Init+0x9c>
 8001b52:	f240 114b 	movw	r1, #331	; 0x14b
 8001b56:	482d      	ldr	r0, [pc, #180]	; (8001c0c <HAL_UART_Init+0x14c>)
 8001b58:	f7fe fbb4 	bl	80002c4 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	d009      	beq.n	8001b78 <HAL_UART_Init+0xb8>
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	689b      	ldr	r3, [r3, #8]
 8001b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001b6c:	d004      	beq.n	8001b78 <HAL_UART_Init+0xb8>
 8001b6e:	f240 114d 	movw	r1, #333	; 0x14d
 8001b72:	4826      	ldr	r0, [pc, #152]	; (8001c0c <HAL_UART_Init+0x14c>)
 8001b74:	f7fe fba6 	bl	80002c4 <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d106      	bne.n	8001b92 <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7fe fcfd 	bl	800058c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2224      	movs	r2, #36	; 0x24
 8001b96:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	68da      	ldr	r2, [r3, #12]
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001ba8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 fb4a 	bl	8002244 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	691a      	ldr	r2, [r3, #16]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bbe:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695a      	ldr	r2, [r3, #20]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bce:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	68da      	ldr	r2, [r3, #12]
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001bde:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	2200      	movs	r2, #0
 8001be4:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2220      	movs	r2, #32
 8001bea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	3708      	adds	r7, #8
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	40013800 	.word	0x40013800
 8001c04:	40004400 	.word	0x40004400
 8001c08:	40004800 	.word	0x40004800
 8001c0c:	08003654 	.word	0x08003654

08001c10 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c10:	b580      	push	{r7, lr}
 8001c12:	b088      	sub	sp, #32
 8001c14:	af02      	add	r7, sp, #8
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	603b      	str	r3, [r7, #0]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8001c20:	2300      	movs	r3, #0
 8001c22:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c24:	68fb      	ldr	r3, [r7, #12]
 8001c26:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b20      	cmp	r3, #32
 8001c2e:	f040 8083 	bne.w	8001d38 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c32:	68bb      	ldr	r3, [r7, #8]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d002      	beq.n	8001c3e <HAL_UART_Transmit+0x2e>
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e07b      	b.n	8001d3a <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d101      	bne.n	8001c50 <HAL_UART_Transmit+0x40>
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	e074      	b.n	8001d3a <HAL_UART_Transmit+0x12a>
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2201      	movs	r2, #1
 8001c54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2221      	movs	r2, #33	; 0x21
 8001c62:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8001c66:	f7fe fd51 	bl	800070c <HAL_GetTick>
 8001c6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	88fa      	ldrh	r2, [r7, #6]
 8001c70:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	88fa      	ldrh	r2, [r7, #6]
 8001c76:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001c78:	e042      	b.n	8001d00 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001c7e:	b29b      	uxth	r3, r3
 8001c80:	3b01      	subs	r3, #1
 8001c82:	b29a      	uxth	r2, r3
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001c90:	d122      	bne.n	8001cd8 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	9300      	str	r3, [sp, #0]
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	2200      	movs	r2, #0
 8001c9a:	2180      	movs	r1, #128	; 0x80
 8001c9c:	68f8      	ldr	r0, [r7, #12]
 8001c9e:	f000 f968 	bl	8001f72 <UART_WaitOnFlagUntilTimeout>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d001      	beq.n	8001cac <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8001ca8:	2303      	movs	r3, #3
 8001caa:	e046      	b.n	8001d3a <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8001cac:	68bb      	ldr	r3, [r7, #8]
 8001cae:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	881b      	ldrh	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001cbe:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d103      	bne.n	8001cd0 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	3302      	adds	r3, #2
 8001ccc:	60bb      	str	r3, [r7, #8]
 8001cce:	e017      	b.n	8001d00 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 8001cd0:	68bb      	ldr	r3, [r7, #8]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	60bb      	str	r3, [r7, #8]
 8001cd6:	e013      	b.n	8001d00 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cd8:	683b      	ldr	r3, [r7, #0]
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	697b      	ldr	r3, [r7, #20]
 8001cde:	2200      	movs	r2, #0
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	68f8      	ldr	r0, [r7, #12]
 8001ce4:	f000 f945 	bl	8001f72 <UART_WaitOnFlagUntilTimeout>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 8001cee:	2303      	movs	r3, #3
 8001cf0:	e023      	b.n	8001d3a <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8001cf2:	68bb      	ldr	r3, [r7, #8]
 8001cf4:	1c5a      	adds	r2, r3, #1
 8001cf6:	60ba      	str	r2, [r7, #8]
 8001cf8:	781a      	ldrb	r2, [r3, #0]
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d04:	b29b      	uxth	r3, r3
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d1b7      	bne.n	8001c7a <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	9300      	str	r3, [sp, #0]
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2200      	movs	r2, #0
 8001d12:	2140      	movs	r1, #64	; 0x40
 8001d14:	68f8      	ldr	r0, [r7, #12]
 8001d16:	f000 f92c 	bl	8001f72 <UART_WaitOnFlagUntilTimeout>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d001      	beq.n	8001d24 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8001d20:	2303      	movs	r3, #3
 8001d22:	e00a      	b.n	8001d3a <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2220      	movs	r2, #32
 8001d28:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 8001d34:	2300      	movs	r3, #0
 8001d36:	e000      	b.n	8001d3a <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8001d38:	2302      	movs	r3, #2
  }
}
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	3718      	adds	r7, #24
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
	...

08001d44 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b088      	sub	sp, #32
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	68db      	ldr	r3, [r3, #12]
 8001d5a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695b      	ldr	r3, [r3, #20]
 8001d62:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8001d64:	2300      	movs	r3, #0
 8001d66:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	f003 030f 	and.w	r3, r3, #15
 8001d72:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8001d74:	693b      	ldr	r3, [r7, #16]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d10d      	bne.n	8001d96 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	f003 0320 	and.w	r3, r3, #32
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d008      	beq.n	8001d96 <HAL_UART_IRQHandler+0x52>
 8001d84:	69bb      	ldr	r3, [r7, #24]
 8001d86:	f003 0320 	and.w	r3, r3, #32
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f9d7 	bl	8002142 <UART_Receive_IT>
      return;
 8001d94:	e0cc      	b.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001d96:	693b      	ldr	r3, [r7, #16]
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	f000 80ab 	beq.w	8001ef4 <HAL_UART_IRQHandler+0x1b0>
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0301 	and.w	r3, r3, #1
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d105      	bne.n	8001db4 <HAL_UART_IRQHandler+0x70>
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	f000 80a0 	beq.w	8001ef4 <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001db4:	69fb      	ldr	r3, [r7, #28]
 8001db6:	f003 0301 	and.w	r3, r3, #1
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d00a      	beq.n	8001dd4 <HAL_UART_IRQHandler+0x90>
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d005      	beq.n	8001dd4 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dcc:	f043 0201 	orr.w	r2, r3, #1
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	f003 0304 	and.w	r3, r3, #4
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d00a      	beq.n	8001df4 <HAL_UART_IRQHandler+0xb0>
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	f003 0301 	and.w	r3, r3, #1
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dec:	f043 0202 	orr.w	r2, r3, #2
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d00a      	beq.n	8001e14 <HAL_UART_IRQHandler+0xd0>
 8001dfe:	697b      	ldr	r3, [r7, #20]
 8001e00:	f003 0301 	and.w	r3, r3, #1
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e0c:	f043 0204 	orr.w	r2, r3, #4
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001e14:	69fb      	ldr	r3, [r7, #28]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d00a      	beq.n	8001e34 <HAL_UART_IRQHandler+0xf0>
 8001e1e:	697b      	ldr	r3, [r7, #20]
 8001e20:	f003 0301 	and.w	r3, r3, #1
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d005      	beq.n	8001e34 <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	f043 0208 	orr.w	r2, r3, #8
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d078      	beq.n	8001f2e <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001e3c:	69fb      	ldr	r3, [r7, #28]
 8001e3e:	f003 0320 	and.w	r3, r3, #32
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d007      	beq.n	8001e56 <HAL_UART_IRQHandler+0x112>
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	f003 0320 	and.w	r3, r3, #32
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d002      	beq.n	8001e56 <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f000 f976 	bl	8002142 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	bf14      	ite	ne
 8001e64:	2301      	movne	r3, #1
 8001e66:	2300      	moveq	r3, #0
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d102      	bne.n	8001e7e <HAL_UART_IRQHandler+0x13a>
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d031      	beq.n	8001ee2 <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8001e7e:	6878      	ldr	r0, [r7, #4]
 8001e80:	f000 f8c1 	bl	8002006 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	695b      	ldr	r3, [r3, #20]
 8001e8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d023      	beq.n	8001eda <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	695a      	ldr	r2, [r3, #20]
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001ea0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d013      	beq.n	8001ed2 <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eae:	4a22      	ldr	r2, [pc, #136]	; (8001f38 <HAL_UART_IRQHandler+0x1f4>)
 8001eb0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f7fe fd6e 	bl	8000998 <HAL_DMA_Abort_IT>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d016      	beq.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ec8:	687a      	ldr	r2, [r7, #4]
 8001eca:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ecc:	4610      	mov	r0, r2
 8001ece:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed0:	e00e      	b.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f000 f844 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ed8:	e00a      	b.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8001eda:	6878      	ldr	r0, [r7, #4]
 8001edc:	f000 f840 	bl	8001f60 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ee0:	e006      	b.n	8001ef0 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8001ee2:	6878      	ldr	r0, [r7, #4]
 8001ee4:	f000 f83c 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 8001eee:	e01e      	b.n	8001f2e <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001ef0:	bf00      	nop
    return;
 8001ef2:	e01c      	b.n	8001f2e <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001ef4:	69fb      	ldr	r3, [r7, #28]
 8001ef6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d008      	beq.n	8001f10 <HAL_UART_IRQHandler+0x1cc>
 8001efe:	69bb      	ldr	r3, [r7, #24]
 8001f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d003      	beq.n	8001f10 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 8001f08:	6878      	ldr	r0, [r7, #4]
 8001f0a:	f000 f8ad 	bl	8002068 <UART_Transmit_IT>
    return;
 8001f0e:	e00f      	b.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001f10:	69fb      	ldr	r3, [r7, #28]
 8001f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d00a      	beq.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
 8001f1a:	69bb      	ldr	r3, [r7, #24]
 8001f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d005      	beq.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 8001f24:	6878      	ldr	r0, [r7, #4]
 8001f26:	f000 f8f4 	bl	8002112 <UART_EndTransmit_IT>
    return;
 8001f2a:	bf00      	nop
 8001f2c:	e000      	b.n	8001f30 <HAL_UART_IRQHandler+0x1ec>
    return;
 8001f2e:	bf00      	nop
  }
}
 8001f30:	3720      	adds	r7, #32
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	08002041 	.word	0x08002041

08001f3c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b083      	sub	sp, #12
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8001f44:	bf00      	nop
 8001f46:	370c      	adds	r7, #12
 8001f48:	46bd      	mov	sp, r7
 8001f4a:	bc80      	pop	{r7}
 8001f4c:	4770      	bx	lr

08001f4e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001f4e:	b480      	push	{r7}
 8001f50:	b083      	sub	sp, #12
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bc80      	pop	{r7}
 8001f5e:	4770      	bx	lr

08001f60 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001f60:	b480      	push	{r7}
 8001f62:	b083      	sub	sp, #12
 8001f64:	af00      	add	r7, sp, #0
 8001f66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8001f68:	bf00      	nop
 8001f6a:	370c      	adds	r7, #12
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bc80      	pop	{r7}
 8001f70:	4770      	bx	lr

08001f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f82:	e02c      	b.n	8001fde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d028      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f92:	f7fe fbbb 	bl	800070c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d21d      	bcs.n	8001fde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	68da      	ldr	r2, [r3, #12]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fb0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	695a      	ldr	r2, [r3, #20]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e00f      	b.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d0c3      	beq.n	8001f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68da      	ldr	r2, [r3, #12]
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800201c:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	695a      	ldr	r2, [r3, #20]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f022 0201 	bic.w	r2, r2, #1
 800202c:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8002036:	bf00      	nop
 8002038:	370c      	adds	r7, #12
 800203a:	46bd      	mov	sp, r7
 800203c:	bc80      	pop	{r7}
 800203e:	4770      	bx	lr

08002040 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	2200      	movs	r2, #0
 8002052:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8002054:	68fb      	ldr	r3, [r7, #12]
 8002056:	2200      	movs	r2, #0
 8002058:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800205a:	68f8      	ldr	r0, [r7, #12]
 800205c:	f7ff ff80 	bl	8001f60 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002060:	bf00      	nop
 8002062:	3710      	adds	r7, #16
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}

08002068 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002068:	b480      	push	{r7}
 800206a:	b085      	sub	sp, #20
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002076:	b2db      	uxtb	r3, r3
 8002078:	2b21      	cmp	r3, #33	; 0x21
 800207a:	d144      	bne.n	8002106 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002084:	d11a      	bne.n	80020bc <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	881b      	ldrh	r3, [r3, #0]
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800209a:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	691b      	ldr	r3, [r3, #16]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d105      	bne.n	80020b0 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6a1b      	ldr	r3, [r3, #32]
 80020a8:	1c9a      	adds	r2, r3, #2
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	621a      	str	r2, [r3, #32]
 80020ae:	e00e      	b.n	80020ce <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6a1b      	ldr	r3, [r3, #32]
 80020b4:	1c5a      	adds	r2, r3, #1
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	621a      	str	r2, [r3, #32]
 80020ba:	e008      	b.n	80020ce <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	6a1b      	ldr	r3, [r3, #32]
 80020c0:	1c59      	adds	r1, r3, #1
 80020c2:	687a      	ldr	r2, [r7, #4]
 80020c4:	6211      	str	r1, [r2, #32]
 80020c6:	781a      	ldrb	r2, [r3, #0]
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	3b01      	subs	r3, #1
 80020d6:	b29b      	uxth	r3, r3
 80020d8:	687a      	ldr	r2, [r7, #4]
 80020da:	4619      	mov	r1, r3
 80020dc:	84d1      	strh	r1, [r2, #38]	; 0x26
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d10f      	bne.n	8002102 <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	68da      	ldr	r2, [r3, #12]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020f0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68da      	ldr	r2, [r3, #12]
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002100:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002102:	2300      	movs	r3, #0
 8002104:	e000      	b.n	8002108 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
  }
}
 8002108:	4618      	mov	r0, r3
 800210a:	3714      	adds	r7, #20
 800210c:	46bd      	mov	sp, r7
 800210e:	bc80      	pop	{r7}
 8002110:	4770      	bx	lr

08002112 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002112:	b580      	push	{r7, lr}
 8002114:	b082      	sub	sp, #8
 8002116:	af00      	add	r7, sp, #0
 8002118:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	68da      	ldr	r2, [r3, #12]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002128:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2220      	movs	r2, #32
 800212e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002132:	6878      	ldr	r0, [r7, #4]
 8002134:	f7ff ff02 	bl	8001f3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002138:	2300      	movs	r3, #0
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b084      	sub	sp, #16
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8002150:	b2db      	uxtb	r3, r3
 8002152:	2b22      	cmp	r3, #34	; 0x22
 8002154:	d171      	bne.n	800223a <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800215e:	d123      	bne.n	80021a8 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002164:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d10e      	bne.n	800218c <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	b29b      	uxth	r3, r3
 8002176:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800217a:	b29a      	uxth	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002184:	1c9a      	adds	r2, r3, #2
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	629a      	str	r2, [r3, #40]	; 0x28
 800218a:	e029      	b.n	80021e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	b29b      	uxth	r3, r3
 8002194:	b2db      	uxtb	r3, r3
 8002196:	b29a      	uxth	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	1c5a      	adds	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	629a      	str	r2, [r3, #40]	; 0x28
 80021a6:	e01b      	b.n	80021e0 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d10a      	bne.n	80021c6 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6858      	ldr	r0, [r3, #4]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021ba:	1c59      	adds	r1, r3, #1
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	6291      	str	r1, [r2, #40]	; 0x28
 80021c0:	b2c2      	uxtb	r2, r0
 80021c2:	701a      	strb	r2, [r3, #0]
 80021c4:	e00c      	b.n	80021e0 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	b2da      	uxtb	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	1c58      	adds	r0, r3, #1
 80021d4:	6879      	ldr	r1, [r7, #4]
 80021d6:	6288      	str	r0, [r1, #40]	; 0x28
 80021d8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80021dc:	b2d2      	uxtb	r2, r2
 80021de:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29b      	uxth	r3, r3
 80021ea:	687a      	ldr	r2, [r7, #4]
 80021ec:	4619      	mov	r1, r3
 80021ee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d120      	bne.n	8002236 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	68da      	ldr	r2, [r3, #12]
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	f022 0220 	bic.w	r2, r2, #32
 8002202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	68da      	ldr	r2, [r3, #12]
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002212:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	695a      	ldr	r2, [r3, #20]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2220      	movs	r2, #32
 8002228:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fe8e 	bl	8001f4e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8002232:	2300      	movs	r3, #0
 8002234:	e002      	b.n	800223c <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8002236:	2300      	movs	r3, #0
 8002238:	e000      	b.n	800223c <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 800223a:	2302      	movs	r3, #2
  }
}
 800223c:	4618      	mov	r0, r3
 800223e:	3710      	adds	r7, #16
 8002240:	46bd      	mov	sp, r7
 8002242:	bd80      	pop	{r7, pc}

08002244 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b084      	sub	sp, #16
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	685b      	ldr	r3, [r3, #4]
 8002250:	4a84      	ldr	r2, [pc, #528]	; (8002464 <UART_SetConfig+0x220>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d904      	bls.n	8002260 <UART_SetConfig+0x1c>
 8002256:	f640 31fd 	movw	r1, #3069	; 0xbfd
 800225a:	4883      	ldr	r0, [pc, #524]	; (8002468 <UART_SetConfig+0x224>)
 800225c:	f7fe f832 	bl	80002c4 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d009      	beq.n	800227c <UART_SetConfig+0x38>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	68db      	ldr	r3, [r3, #12]
 800226c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002270:	d004      	beq.n	800227c <UART_SetConfig+0x38>
 8002272:	f640 31fe 	movw	r1, #3070	; 0xbfe
 8002276:	487c      	ldr	r0, [pc, #496]	; (8002468 <UART_SetConfig+0x224>)
 8002278:	f7fe f824 	bl	80002c4 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d00e      	beq.n	80022a2 <UART_SetConfig+0x5e>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	691b      	ldr	r3, [r3, #16]
 8002288:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800228c:	d009      	beq.n	80022a2 <UART_SetConfig+0x5e>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002296:	d004      	beq.n	80022a2 <UART_SetConfig+0x5e>
 8002298:	f640 31ff 	movw	r1, #3071	; 0xbff
 800229c:	4872      	ldr	r0, [pc, #456]	; (8002468 <UART_SetConfig+0x224>)
 800229e:	f7fe f811 	bl	80002c4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	695a      	ldr	r2, [r3, #20]
 80022a6:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 80022aa:	4013      	ands	r3, r2
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d103      	bne.n	80022b8 <UART_SetConfig+0x74>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d104      	bne.n	80022c2 <UART_SetConfig+0x7e>
 80022b8:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80022bc:	486a      	ldr	r0, [pc, #424]	; (8002468 <UART_SetConfig+0x224>)
 80022be:	f7fe f801 	bl	80002c4 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	691b      	ldr	r3, [r3, #16]
 80022c8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	68da      	ldr	r2, [r3, #12]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	430a      	orrs	r2, r1
 80022d6:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689a      	ldr	r2, [r3, #8]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	691b      	ldr	r3, [r3, #16]
 80022e0:	431a      	orrs	r2, r3
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	68db      	ldr	r3, [r3, #12]
 80022f0:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80022f4:	f023 030c 	bic.w	r3, r3, #12
 80022f8:	687a      	ldr	r2, [r7, #4]
 80022fa:	6812      	ldr	r2, [r2, #0]
 80022fc:	68f9      	ldr	r1, [r7, #12]
 80022fe:	430b      	orrs	r3, r1
 8002300:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	695b      	ldr	r3, [r3, #20]
 8002308:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	699a      	ldr	r2, [r3, #24]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	430a      	orrs	r2, r1
 8002316:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a53      	ldr	r2, [pc, #332]	; (800246c <UART_SetConfig+0x228>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d14e      	bne.n	80023c0 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002322:	f7ff fb9b 	bl	8001a5c <HAL_RCC_GetPCLK2Freq>
 8002326:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002328:	68ba      	ldr	r2, [r7, #8]
 800232a:	4613      	mov	r3, r2
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	009a      	lsls	r2, r3, #2
 8002332:	441a      	add	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	fbb2 f3f3 	udiv	r3, r2, r3
 800233e:	4a4c      	ldr	r2, [pc, #304]	; (8002470 <UART_SetConfig+0x22c>)
 8002340:	fba2 2303 	umull	r2, r3, r2, r3
 8002344:	095b      	lsrs	r3, r3, #5
 8002346:	0119      	lsls	r1, r3, #4
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	4613      	mov	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4413      	add	r3, r2
 8002350:	009a      	lsls	r2, r3, #2
 8002352:	441a      	add	r2, r3
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	fbb2 f2f3 	udiv	r2, r2, r3
 800235e:	4b44      	ldr	r3, [pc, #272]	; (8002470 <UART_SetConfig+0x22c>)
 8002360:	fba3 0302 	umull	r0, r3, r3, r2
 8002364:	095b      	lsrs	r3, r3, #5
 8002366:	2064      	movs	r0, #100	; 0x64
 8002368:	fb00 f303 	mul.w	r3, r0, r3
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	011b      	lsls	r3, r3, #4
 8002370:	3332      	adds	r3, #50	; 0x32
 8002372:	4a3f      	ldr	r2, [pc, #252]	; (8002470 <UART_SetConfig+0x22c>)
 8002374:	fba2 2303 	umull	r2, r3, r2, r3
 8002378:	095b      	lsrs	r3, r3, #5
 800237a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800237e:	4419      	add	r1, r3
 8002380:	68ba      	ldr	r2, [r7, #8]
 8002382:	4613      	mov	r3, r2
 8002384:	009b      	lsls	r3, r3, #2
 8002386:	4413      	add	r3, r2
 8002388:	009a      	lsls	r2, r3, #2
 800238a:	441a      	add	r2, r3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	009b      	lsls	r3, r3, #2
 8002392:	fbb2 f2f3 	udiv	r2, r2, r3
 8002396:	4b36      	ldr	r3, [pc, #216]	; (8002470 <UART_SetConfig+0x22c>)
 8002398:	fba3 0302 	umull	r0, r3, r3, r2
 800239c:	095b      	lsrs	r3, r3, #5
 800239e:	2064      	movs	r0, #100	; 0x64
 80023a0:	fb00 f303 	mul.w	r3, r0, r3
 80023a4:	1ad3      	subs	r3, r2, r3
 80023a6:	011b      	lsls	r3, r3, #4
 80023a8:	3332      	adds	r3, #50	; 0x32
 80023aa:	4a31      	ldr	r2, [pc, #196]	; (8002470 <UART_SetConfig+0x22c>)
 80023ac:	fba2 2303 	umull	r2, r3, r2, r3
 80023b0:	095b      	lsrs	r3, r3, #5
 80023b2:	f003 020f 	and.w	r2, r3, #15
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	440a      	add	r2, r1
 80023bc:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80023be:	e04d      	b.n	800245c <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80023c0:	f7ff fb38 	bl	8001a34 <HAL_RCC_GetPCLK1Freq>
 80023c4:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	4613      	mov	r3, r2
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	009a      	lsls	r2, r3, #2
 80023d0:	441a      	add	r2, r3
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	009b      	lsls	r3, r3, #2
 80023d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80023dc:	4a24      	ldr	r2, [pc, #144]	; (8002470 <UART_SetConfig+0x22c>)
 80023de:	fba2 2303 	umull	r2, r3, r2, r3
 80023e2:	095b      	lsrs	r3, r3, #5
 80023e4:	0119      	lsls	r1, r3, #4
 80023e6:	68ba      	ldr	r2, [r7, #8]
 80023e8:	4613      	mov	r3, r2
 80023ea:	009b      	lsls	r3, r3, #2
 80023ec:	4413      	add	r3, r2
 80023ee:	009a      	lsls	r2, r3, #2
 80023f0:	441a      	add	r2, r3
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80023fc:	4b1c      	ldr	r3, [pc, #112]	; (8002470 <UART_SetConfig+0x22c>)
 80023fe:	fba3 0302 	umull	r0, r3, r3, r2
 8002402:	095b      	lsrs	r3, r3, #5
 8002404:	2064      	movs	r0, #100	; 0x64
 8002406:	fb00 f303 	mul.w	r3, r0, r3
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	3332      	adds	r3, #50	; 0x32
 8002410:	4a17      	ldr	r2, [pc, #92]	; (8002470 <UART_SetConfig+0x22c>)
 8002412:	fba2 2303 	umull	r2, r3, r2, r3
 8002416:	095b      	lsrs	r3, r3, #5
 8002418:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800241c:	4419      	add	r1, r3
 800241e:	68ba      	ldr	r2, [r7, #8]
 8002420:	4613      	mov	r3, r2
 8002422:	009b      	lsls	r3, r3, #2
 8002424:	4413      	add	r3, r2
 8002426:	009a      	lsls	r2, r3, #2
 8002428:	441a      	add	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	009b      	lsls	r3, r3, #2
 8002430:	fbb2 f2f3 	udiv	r2, r2, r3
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <UART_SetConfig+0x22c>)
 8002436:	fba3 0302 	umull	r0, r3, r3, r2
 800243a:	095b      	lsrs	r3, r3, #5
 800243c:	2064      	movs	r0, #100	; 0x64
 800243e:	fb00 f303 	mul.w	r3, r0, r3
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	011b      	lsls	r3, r3, #4
 8002446:	3332      	adds	r3, #50	; 0x32
 8002448:	4a09      	ldr	r2, [pc, #36]	; (8002470 <UART_SetConfig+0x22c>)
 800244a:	fba2 2303 	umull	r2, r3, r2, r3
 800244e:	095b      	lsrs	r3, r3, #5
 8002450:	f003 020f 	and.w	r2, r3, #15
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	440a      	add	r2, r1
 800245a:	609a      	str	r2, [r3, #8]
}
 800245c:	bf00      	nop
 800245e:	3710      	adds	r7, #16
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	0044aa20 	.word	0x0044aa20
 8002468:	08003654 	.word	0x08003654
 800246c:	40013800 	.word	0x40013800
 8002470:	51eb851f 	.word	0x51eb851f

08002474 <rola_task1ms>:
	rola.out = 0u;
	rola.step = 0u;
}

void rola_task1ms(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (rola.out&0x01u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002478:	4b2f      	ldr	r3, [pc, #188]	; (8002538 <rola_task1ms+0xc4>)
 800247a:	781b      	ldrb	r3, [r3, #0]
 800247c:	f003 0301 	and.w	r3, r3, #1
 8002480:	b2db      	uxtb	r3, r3
 8002482:	461a      	mov	r2, r3
 8002484:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002488:	482c      	ldr	r0, [pc, #176]	; (800253c <rola_task1ms+0xc8>)
 800248a:	f7fe fd35 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (rola.out&0x02u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800248e:	4b2a      	ldr	r3, [pc, #168]	; (8002538 <rola_task1ms+0xc4>)
 8002490:	781b      	ldrb	r3, [r3, #0]
 8002492:	085b      	lsrs	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	f003 0301 	and.w	r3, r3, #1
 800249a:	b2db      	uxtb	r3, r3
 800249c:	461a      	mov	r2, r3
 800249e:	2108      	movs	r1, #8
 80024a0:	4827      	ldr	r0, [pc, #156]	; (8002540 <rola_task1ms+0xcc>)
 80024a2:	f7fe fd29 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (rola.out&0x04u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80024a6:	4b24      	ldr	r3, [pc, #144]	; (8002538 <rola_task1ms+0xc4>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	089b      	lsrs	r3, r3, #2
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	461a      	mov	r2, r3
 80024b6:	2110      	movs	r1, #16
 80024b8:	4821      	ldr	r0, [pc, #132]	; (8002540 <rola_task1ms+0xcc>)
 80024ba:	f7fe fd1d 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (rola.out&0x08u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80024be:	4b1e      	ldr	r3, [pc, #120]	; (8002538 <rola_task1ms+0xc4>)
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	08db      	lsrs	r3, r3, #3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	f003 0301 	and.w	r3, r3, #1
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	461a      	mov	r2, r3
 80024ce:	2120      	movs	r1, #32
 80024d0:	481b      	ldr	r0, [pc, #108]	; (8002540 <rola_task1ms+0xcc>)
 80024d2:	f7fe fd11 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  (rola.out&0x10u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80024d6:	4b18      	ldr	r3, [pc, #96]	; (8002538 <rola_task1ms+0xc4>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	091b      	lsrs	r3, r3, #4
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 0301 	and.w	r3, r3, #1
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	461a      	mov	r2, r3
 80024e6:	2140      	movs	r1, #64	; 0x40
 80024e8:	4815      	ldr	r0, [pc, #84]	; (8002540 <rola_task1ms+0xcc>)
 80024ea:	f7fe fd05 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  (rola.out&0x20u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80024ee:	4b12      	ldr	r3, [pc, #72]	; (8002538 <rola_task1ms+0xc4>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	095b      	lsrs	r3, r3, #5
 80024f4:	b2db      	uxtb	r3, r3
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	b2db      	uxtb	r3, r3
 80024fc:	461a      	mov	r2, r3
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	480f      	ldr	r0, [pc, #60]	; (8002540 <rola_task1ms+0xcc>)
 8002502:	f7fe fcf9 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  (rola.out&0x40u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002506:	4b0c      	ldr	r3, [pc, #48]	; (8002538 <rola_task1ms+0xc4>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	b2db      	uxtb	r3, r3
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	b2db      	uxtb	r3, r3
 8002514:	461a      	mov	r2, r3
 8002516:	f44f 7180 	mov.w	r1, #256	; 0x100
 800251a:	4809      	ldr	r0, [pc, #36]	; (8002540 <rola_task1ms+0xcc>)
 800251c:	f7fe fcec 	bl	8000ef8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  (rola.out&0x80u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8002520:	4b05      	ldr	r3, [pc, #20]	; (8002538 <rola_task1ms+0xc4>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	09db      	lsrs	r3, r3, #7
 8002526:	b2db      	uxtb	r3, r3
 8002528:	461a      	mov	r2, r3
 800252a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800252e:	4804      	ldr	r0, [pc, #16]	; (8002540 <rola_task1ms+0xcc>)
 8002530:	f7fe fce2 	bl	8000ef8 <HAL_GPIO_WritePin>
}
 8002534:	bf00      	nop
 8002536:	bd80      	pop	{r7, pc}
 8002538:	200000e4 	.word	0x200000e4
 800253c:	40010800 	.word	0x40010800
 8002540:	40010c00 	.word	0x40010c00

08002544 <rola_task>:

void rola_task(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
	rola.step++;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <rola_task+0x38>)
 800254a:	785b      	ldrb	r3, [r3, #1]
 800254c:	3301      	adds	r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	4b0a      	ldr	r3, [pc, #40]	; (800257c <rola_task+0x38>)
 8002552:	705a      	strb	r2, [r3, #1]
	rola.step &= 0x07;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <rola_task+0x38>)
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	f003 0307 	and.w	r3, r3, #7
 800255c:	b2da      	uxtb	r2, r3
 800255e:	4b07      	ldr	r3, [pc, #28]	; (800257c <rola_task+0x38>)
 8002560:	705a      	strb	r2, [r3, #1]
	rola.out = (0x01u << rola.step);
 8002562:	4b06      	ldr	r3, [pc, #24]	; (800257c <rola_task+0x38>)
 8002564:	785b      	ldrb	r3, [r3, #1]
 8002566:	461a      	mov	r2, r3
 8002568:	2301      	movs	r3, #1
 800256a:	4093      	lsls	r3, r2
 800256c:	b2da      	uxtb	r2, r3
 800256e:	4b03      	ldr	r3, [pc, #12]	; (800257c <rola_task+0x38>)
 8002570:	701a      	strb	r2, [r3, #0]
}
 8002572:	bf00      	nop
 8002574:	46bd      	mov	sp, r7
 8002576:	bc80      	pop	{r7}
 8002578:	4770      	bx	lr
 800257a:	bf00      	nop
 800257c:	200000e4 	.word	0x200000e4

08002580 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b084      	sub	sp, #16
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
	uint8 txdata = ch;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	b2db      	uxtb	r3, r3
 800258c:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &txdata, 1, 72000);
 800258e:	f107 010f 	add.w	r1, r7, #15
 8002592:	4b05      	ldr	r3, [pc, #20]	; (80025a8 <__io_putchar+0x28>)
 8002594:	2201      	movs	r2, #1
 8002596:	4805      	ldr	r0, [pc, #20]	; (80025ac <__io_putchar+0x2c>)
 8002598:	f7ff fb3a 	bl	8001c10 <HAL_UART_Transmit>
	return ch;
 800259c:	687b      	ldr	r3, [r7, #4]
}
 800259e:	4618      	mov	r0, r3
 80025a0:	3710      	adds	r7, #16
 80025a2:	46bd      	mov	sp, r7
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	00011940 	.word	0x00011940
 80025ac:	200000a0 	.word	0x200000a0

080025b0 <task_2pow0>:
#include <stdio.h>

unsigned int time_ms = 0u;

void task_2pow0(void)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	af00      	add	r7, sp, #0
	time_ms++;
 80025b4:	4b04      	ldr	r3, [pc, #16]	; (80025c8 <task_2pow0+0x18>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	3301      	adds	r3, #1
 80025ba:	4a03      	ldr	r2, [pc, #12]	; (80025c8 <task_2pow0+0x18>)
 80025bc:	6013      	str	r3, [r2, #0]
	rola_task1ms();
 80025be:	f7ff ff59 	bl	8002474 <rola_task1ms>
}
 80025c2:	bf00      	nop
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	20000090 	.word	0x20000090

080025cc <task_2pow1>:

void task_2pow1(void)
{
 80025cc:	b480      	push	{r7}
 80025ce:	af00      	add	r7, sp, #0
}
 80025d0:	bf00      	nop
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bc80      	pop	{r7}
 80025d6:	4770      	bx	lr

080025d8 <task_2pow2>:

void task_2pow2(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
}
 80025dc:	bf00      	nop
 80025de:	46bd      	mov	sp, r7
 80025e0:	bc80      	pop	{r7}
 80025e2:	4770      	bx	lr

080025e4 <task_2pow3>:

void task_2pow3(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
}
 80025e8:	bf00      	nop
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bc80      	pop	{r7}
 80025ee:	4770      	bx	lr

080025f0 <task_2pow4>:

void task_2pow4(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
}
 80025f4:	bf00      	nop
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bc80      	pop	{r7}
 80025fa:	4770      	bx	lr

080025fc <task_2pow5>:

void task_2pow5(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
}
 8002600:	bf00      	nop
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr

08002608 <task_2pow6>:

void task_2pow6(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
	rola_task();
 800260c:	f7ff ff9a 	bl	8002544 <rola_task>
}
 8002610:	bf00      	nop
 8002612:	bd80      	pop	{r7, pc}

08002614 <task_2pow7>:

void task_2pow7(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
}
 8002618:	bf00      	nop
 800261a:	46bd      	mov	sp, r7
 800261c:	bc80      	pop	{r7}
 800261e:	4770      	bx	lr

08002620 <task_2pow8>:

void task_2pow8(void)
{
 8002620:	b580      	push	{r7, lr}
 8002622:	af00      	add	r7, sp, #0
	printf("%u\r\n", time_ms);
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <task_2pow8+0x14>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4619      	mov	r1, r3
 800262a:	4803      	ldr	r0, [pc, #12]	; (8002638 <task_2pow8+0x18>)
 800262c:	f000 f8b6 	bl	800279c <iprintf>
}
 8002630:	bf00      	nop
 8002632:	bd80      	pop	{r7, pc}
 8002634:	20000090 	.word	0x20000090
 8002638:	08003690 	.word	0x08003690

0800263c <scheduler_init>:
scheduler_t;

static scheduler_t scheduler;

void scheduler_init(void)
{
 800263c:	b480      	push	{r7}
 800263e:	af00      	add	r7, sp, #0
	scheduler.input.tick = 0u;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <scheduler_init+0x20>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
	scheduler.local.tick = 0u;
 8002646:	4b05      	ldr	r3, [pc, #20]	; (800265c <scheduler_init+0x20>)
 8002648:	2200      	movs	r2, #0
 800264a:	705a      	strb	r2, [r3, #1]
	scheduler.local.count = 0u;
 800264c:	4b03      	ldr	r3, [pc, #12]	; (800265c <scheduler_init+0x20>)
 800264e:	2200      	movs	r2, #0
 8002650:	709a      	strb	r2, [r3, #2]
}
 8002652:	bf00      	nop
 8002654:	46bd      	mov	sp, r7
 8002656:	bc80      	pop	{r7}
 8002658:	4770      	bx	lr
 800265a:	bf00      	nop
 800265c:	20000094 	.word	0x20000094

08002660 <scheduler_main>:

void scheduler_main(void)
{
 8002660:	b580      	push	{r7, lr}
 8002662:	af00      	add	r7, sp, #0
	for(;;)
	{
		if( scheduler.local.tick != scheduler.input.tick )
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <scheduler_main+0xb8>)
 8002666:	785a      	ldrb	r2, [r3, #1]
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <scheduler_main+0xb8>)
 800266a:	781b      	ldrb	r3, [r3, #0]
 800266c:	429a      	cmp	r2, r3
 800266e:	d0f9      	beq.n	8002664 <scheduler_main+0x4>
		{
			/* sync */
			scheduler.local.tick = scheduler.input.tick;
 8002670:	4b29      	ldr	r3, [pc, #164]	; (8002718 <scheduler_main+0xb8>)
 8002672:	781a      	ldrb	r2, [r3, #0]
 8002674:	4b28      	ldr	r3, [pc, #160]	; (8002718 <scheduler_main+0xb8>)
 8002676:	705a      	strb	r2, [r3, #1]

			/* schedule tasks */
			                                      task_2pow0();
 8002678:	f7ff ff9a 	bl	80025b0 <task_2pow0>
			if( scheduler.local.count&0x01 )      task_2pow1();
 800267c:	4b26      	ldr	r3, [pc, #152]	; (8002718 <scheduler_main+0xb8>)
 800267e:	789b      	ldrb	r3, [r3, #2]
 8002680:	f003 0301 	and.w	r3, r3, #1
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <scheduler_main+0x2e>
 8002688:	f7ff ffa0 	bl	80025cc <task_2pow1>
 800268c:	e03c      	b.n	8002708 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x02 ) task_2pow2();
 800268e:	4b22      	ldr	r3, [pc, #136]	; (8002718 <scheduler_main+0xb8>)
 8002690:	789b      	ldrb	r3, [r3, #2]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d002      	beq.n	80026a0 <scheduler_main+0x40>
 800269a:	f7ff ff9d 	bl	80025d8 <task_2pow2>
 800269e:	e033      	b.n	8002708 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x04 ) task_2pow3();
 80026a0:	4b1d      	ldr	r3, [pc, #116]	; (8002718 <scheduler_main+0xb8>)
 80026a2:	789b      	ldrb	r3, [r3, #2]
 80026a4:	f003 0304 	and.w	r3, r3, #4
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <scheduler_main+0x52>
 80026ac:	f7ff ff9a 	bl	80025e4 <task_2pow3>
 80026b0:	e02a      	b.n	8002708 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x08 ) task_2pow4();
 80026b2:	4b19      	ldr	r3, [pc, #100]	; (8002718 <scheduler_main+0xb8>)
 80026b4:	789b      	ldrb	r3, [r3, #2]
 80026b6:	f003 0308 	and.w	r3, r3, #8
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d002      	beq.n	80026c4 <scheduler_main+0x64>
 80026be:	f7ff ff97 	bl	80025f0 <task_2pow4>
 80026c2:	e021      	b.n	8002708 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x10 ) task_2pow5();
 80026c4:	4b14      	ldr	r3, [pc, #80]	; (8002718 <scheduler_main+0xb8>)
 80026c6:	789b      	ldrb	r3, [r3, #2]
 80026c8:	f003 0310 	and.w	r3, r3, #16
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d002      	beq.n	80026d6 <scheduler_main+0x76>
 80026d0:	f7ff ff94 	bl	80025fc <task_2pow5>
 80026d4:	e018      	b.n	8002708 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x20 ) task_2pow6();
 80026d6:	4b10      	ldr	r3, [pc, #64]	; (8002718 <scheduler_main+0xb8>)
 80026d8:	789b      	ldrb	r3, [r3, #2]
 80026da:	f003 0320 	and.w	r3, r3, #32
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d002      	beq.n	80026e8 <scheduler_main+0x88>
 80026e2:	f7ff ff91 	bl	8002608 <task_2pow6>
 80026e6:	e00f      	b.n	8002708 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x40 ) task_2pow7();
 80026e8:	4b0b      	ldr	r3, [pc, #44]	; (8002718 <scheduler_main+0xb8>)
 80026ea:	789b      	ldrb	r3, [r3, #2]
 80026ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d002      	beq.n	80026fa <scheduler_main+0x9a>
 80026f4:	f7ff ff8e 	bl	8002614 <task_2pow7>
 80026f8:	e006      	b.n	8002708 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x80 ) task_2pow8();
 80026fa:	4b07      	ldr	r3, [pc, #28]	; (8002718 <scheduler_main+0xb8>)
 80026fc:	789b      	ldrb	r3, [r3, #2]
 80026fe:	b25b      	sxtb	r3, r3
 8002700:	2b00      	cmp	r3, #0
 8002702:	da01      	bge.n	8002708 <scheduler_main+0xa8>
 8002704:	f7ff ff8c 	bl	8002620 <task_2pow8>
			else ;

			/* count up */
			scheduler.local.count++;
 8002708:	4b03      	ldr	r3, [pc, #12]	; (8002718 <scheduler_main+0xb8>)
 800270a:	789b      	ldrb	r3, [r3, #2]
 800270c:	3301      	adds	r3, #1
 800270e:	b2da      	uxtb	r2, r3
 8002710:	4b01      	ldr	r3, [pc, #4]	; (8002718 <scheduler_main+0xb8>)
 8002712:	709a      	strb	r2, [r3, #2]
		if( scheduler.local.tick != scheduler.input.tick )
 8002714:	e7a6      	b.n	8002664 <scheduler_main+0x4>
 8002716:	bf00      	nop
 8002718:	20000094 	.word	0x20000094

0800271c <scheduler_ei_tickUp_ISR>:
		}
	}
}

void scheduler_ei_tickUp_ISR(void)
{
 800271c:	b480      	push	{r7}
 800271e:	af00      	add	r7, sp, #0
	scheduler.input.tick++;
 8002720:	4b04      	ldr	r3, [pc, #16]	; (8002734 <scheduler_ei_tickUp_ISR+0x18>)
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	3301      	adds	r3, #1
 8002726:	b2da      	uxtb	r2, r3
 8002728:	4b02      	ldr	r3, [pc, #8]	; (8002734 <scheduler_ei_tickUp_ISR+0x18>)
 800272a:	701a      	strb	r2, [r3, #0]
}
 800272c:	bf00      	nop
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	20000094 	.word	0x20000094

08002738 <__errno>:
 8002738:	4b01      	ldr	r3, [pc, #4]	; (8002740 <__errno+0x8>)
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	4770      	bx	lr
 800273e:	bf00      	nop
 8002740:	2000000c 	.word	0x2000000c

08002744 <__libc_init_array>:
 8002744:	b570      	push	{r4, r5, r6, lr}
 8002746:	2500      	movs	r5, #0
 8002748:	4e0c      	ldr	r6, [pc, #48]	; (800277c <__libc_init_array+0x38>)
 800274a:	4c0d      	ldr	r4, [pc, #52]	; (8002780 <__libc_init_array+0x3c>)
 800274c:	1ba4      	subs	r4, r4, r6
 800274e:	10a4      	asrs	r4, r4, #2
 8002750:	42a5      	cmp	r5, r4
 8002752:	d109      	bne.n	8002768 <__libc_init_array+0x24>
 8002754:	f000 ff10 	bl	8003578 <_init>
 8002758:	2500      	movs	r5, #0
 800275a:	4e0a      	ldr	r6, [pc, #40]	; (8002784 <__libc_init_array+0x40>)
 800275c:	4c0a      	ldr	r4, [pc, #40]	; (8002788 <__libc_init_array+0x44>)
 800275e:	1ba4      	subs	r4, r4, r6
 8002760:	10a4      	asrs	r4, r4, #2
 8002762:	42a5      	cmp	r5, r4
 8002764:	d105      	bne.n	8002772 <__libc_init_array+0x2e>
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800276c:	4798      	blx	r3
 800276e:	3501      	adds	r5, #1
 8002770:	e7ee      	b.n	8002750 <__libc_init_array+0xc>
 8002772:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002776:	4798      	blx	r3
 8002778:	3501      	adds	r5, #1
 800277a:	e7f2      	b.n	8002762 <__libc_init_array+0x1e>
 800277c:	08003748 	.word	0x08003748
 8002780:	08003748 	.word	0x08003748
 8002784:	08003748 	.word	0x08003748
 8002788:	0800374c 	.word	0x0800374c

0800278c <memset>:
 800278c:	4603      	mov	r3, r0
 800278e:	4402      	add	r2, r0
 8002790:	4293      	cmp	r3, r2
 8002792:	d100      	bne.n	8002796 <memset+0xa>
 8002794:	4770      	bx	lr
 8002796:	f803 1b01 	strb.w	r1, [r3], #1
 800279a:	e7f9      	b.n	8002790 <memset+0x4>

0800279c <iprintf>:
 800279c:	b40f      	push	{r0, r1, r2, r3}
 800279e:	4b0a      	ldr	r3, [pc, #40]	; (80027c8 <iprintf+0x2c>)
 80027a0:	b513      	push	{r0, r1, r4, lr}
 80027a2:	681c      	ldr	r4, [r3, #0]
 80027a4:	b124      	cbz	r4, 80027b0 <iprintf+0x14>
 80027a6:	69a3      	ldr	r3, [r4, #24]
 80027a8:	b913      	cbnz	r3, 80027b0 <iprintf+0x14>
 80027aa:	4620      	mov	r0, r4
 80027ac:	f000 f84e 	bl	800284c <__sinit>
 80027b0:	ab05      	add	r3, sp, #20
 80027b2:	9a04      	ldr	r2, [sp, #16]
 80027b4:	68a1      	ldr	r1, [r4, #8]
 80027b6:	4620      	mov	r0, r4
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	f000 f953 	bl	8002a64 <_vfiprintf_r>
 80027be:	b002      	add	sp, #8
 80027c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80027c4:	b004      	add	sp, #16
 80027c6:	4770      	bx	lr
 80027c8:	2000000c 	.word	0x2000000c

080027cc <std>:
 80027cc:	2300      	movs	r3, #0
 80027ce:	b510      	push	{r4, lr}
 80027d0:	4604      	mov	r4, r0
 80027d2:	e9c0 3300 	strd	r3, r3, [r0]
 80027d6:	6083      	str	r3, [r0, #8]
 80027d8:	8181      	strh	r1, [r0, #12]
 80027da:	6643      	str	r3, [r0, #100]	; 0x64
 80027dc:	81c2      	strh	r2, [r0, #14]
 80027de:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027e2:	6183      	str	r3, [r0, #24]
 80027e4:	4619      	mov	r1, r3
 80027e6:	2208      	movs	r2, #8
 80027e8:	305c      	adds	r0, #92	; 0x5c
 80027ea:	f7ff ffcf 	bl	800278c <memset>
 80027ee:	4b05      	ldr	r3, [pc, #20]	; (8002804 <std+0x38>)
 80027f0:	6224      	str	r4, [r4, #32]
 80027f2:	6263      	str	r3, [r4, #36]	; 0x24
 80027f4:	4b04      	ldr	r3, [pc, #16]	; (8002808 <std+0x3c>)
 80027f6:	62a3      	str	r3, [r4, #40]	; 0x28
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <std+0x40>)
 80027fa:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027fc:	4b04      	ldr	r3, [pc, #16]	; (8002810 <std+0x44>)
 80027fe:	6323      	str	r3, [r4, #48]	; 0x30
 8002800:	bd10      	pop	{r4, pc}
 8002802:	bf00      	nop
 8002804:	08002fc1 	.word	0x08002fc1
 8002808:	08002fe3 	.word	0x08002fe3
 800280c:	0800301b 	.word	0x0800301b
 8002810:	0800303f 	.word	0x0800303f

08002814 <_cleanup_r>:
 8002814:	4901      	ldr	r1, [pc, #4]	; (800281c <_cleanup_r+0x8>)
 8002816:	f000 b885 	b.w	8002924 <_fwalk_reent>
 800281a:	bf00      	nop
 800281c:	08003319 	.word	0x08003319

08002820 <__sfmoreglue>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	2568      	movs	r5, #104	; 0x68
 8002824:	1e4a      	subs	r2, r1, #1
 8002826:	4355      	muls	r5, r2
 8002828:	460e      	mov	r6, r1
 800282a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800282e:	f000 f897 	bl	8002960 <_malloc_r>
 8002832:	4604      	mov	r4, r0
 8002834:	b140      	cbz	r0, 8002848 <__sfmoreglue+0x28>
 8002836:	2100      	movs	r1, #0
 8002838:	e9c0 1600 	strd	r1, r6, [r0]
 800283c:	300c      	adds	r0, #12
 800283e:	60a0      	str	r0, [r4, #8]
 8002840:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002844:	f7ff ffa2 	bl	800278c <memset>
 8002848:	4620      	mov	r0, r4
 800284a:	bd70      	pop	{r4, r5, r6, pc}

0800284c <__sinit>:
 800284c:	6983      	ldr	r3, [r0, #24]
 800284e:	b510      	push	{r4, lr}
 8002850:	4604      	mov	r4, r0
 8002852:	bb33      	cbnz	r3, 80028a2 <__sinit+0x56>
 8002854:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002858:	6503      	str	r3, [r0, #80]	; 0x50
 800285a:	4b12      	ldr	r3, [pc, #72]	; (80028a4 <__sinit+0x58>)
 800285c:	4a12      	ldr	r2, [pc, #72]	; (80028a8 <__sinit+0x5c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6282      	str	r2, [r0, #40]	; 0x28
 8002862:	4298      	cmp	r0, r3
 8002864:	bf04      	itt	eq
 8002866:	2301      	moveq	r3, #1
 8002868:	6183      	streq	r3, [r0, #24]
 800286a:	f000 f81f 	bl	80028ac <__sfp>
 800286e:	6060      	str	r0, [r4, #4]
 8002870:	4620      	mov	r0, r4
 8002872:	f000 f81b 	bl	80028ac <__sfp>
 8002876:	60a0      	str	r0, [r4, #8]
 8002878:	4620      	mov	r0, r4
 800287a:	f000 f817 	bl	80028ac <__sfp>
 800287e:	2200      	movs	r2, #0
 8002880:	60e0      	str	r0, [r4, #12]
 8002882:	2104      	movs	r1, #4
 8002884:	6860      	ldr	r0, [r4, #4]
 8002886:	f7ff ffa1 	bl	80027cc <std>
 800288a:	2201      	movs	r2, #1
 800288c:	2109      	movs	r1, #9
 800288e:	68a0      	ldr	r0, [r4, #8]
 8002890:	f7ff ff9c 	bl	80027cc <std>
 8002894:	2202      	movs	r2, #2
 8002896:	2112      	movs	r1, #18
 8002898:	68e0      	ldr	r0, [r4, #12]
 800289a:	f7ff ff97 	bl	80027cc <std>
 800289e:	2301      	movs	r3, #1
 80028a0:	61a3      	str	r3, [r4, #24]
 80028a2:	bd10      	pop	{r4, pc}
 80028a4:	080036b0 	.word	0x080036b0
 80028a8:	08002815 	.word	0x08002815

080028ac <__sfp>:
 80028ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028ae:	4b1b      	ldr	r3, [pc, #108]	; (800291c <__sfp+0x70>)
 80028b0:	4607      	mov	r7, r0
 80028b2:	681e      	ldr	r6, [r3, #0]
 80028b4:	69b3      	ldr	r3, [r6, #24]
 80028b6:	b913      	cbnz	r3, 80028be <__sfp+0x12>
 80028b8:	4630      	mov	r0, r6
 80028ba:	f7ff ffc7 	bl	800284c <__sinit>
 80028be:	3648      	adds	r6, #72	; 0x48
 80028c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028c4:	3b01      	subs	r3, #1
 80028c6:	d503      	bpl.n	80028d0 <__sfp+0x24>
 80028c8:	6833      	ldr	r3, [r6, #0]
 80028ca:	b133      	cbz	r3, 80028da <__sfp+0x2e>
 80028cc:	6836      	ldr	r6, [r6, #0]
 80028ce:	e7f7      	b.n	80028c0 <__sfp+0x14>
 80028d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028d4:	b16d      	cbz	r5, 80028f2 <__sfp+0x46>
 80028d6:	3468      	adds	r4, #104	; 0x68
 80028d8:	e7f4      	b.n	80028c4 <__sfp+0x18>
 80028da:	2104      	movs	r1, #4
 80028dc:	4638      	mov	r0, r7
 80028de:	f7ff ff9f 	bl	8002820 <__sfmoreglue>
 80028e2:	6030      	str	r0, [r6, #0]
 80028e4:	2800      	cmp	r0, #0
 80028e6:	d1f1      	bne.n	80028cc <__sfp+0x20>
 80028e8:	230c      	movs	r3, #12
 80028ea:	4604      	mov	r4, r0
 80028ec:	603b      	str	r3, [r7, #0]
 80028ee:	4620      	mov	r0, r4
 80028f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <__sfp+0x74>)
 80028f4:	6665      	str	r5, [r4, #100]	; 0x64
 80028f6:	e9c4 5500 	strd	r5, r5, [r4]
 80028fa:	60a5      	str	r5, [r4, #8]
 80028fc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002900:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002904:	2208      	movs	r2, #8
 8002906:	4629      	mov	r1, r5
 8002908:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800290c:	f7ff ff3e 	bl	800278c <memset>
 8002910:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002914:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002918:	e7e9      	b.n	80028ee <__sfp+0x42>
 800291a:	bf00      	nop
 800291c:	080036b0 	.word	0x080036b0
 8002920:	ffff0001 	.word	0xffff0001

08002924 <_fwalk_reent>:
 8002924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002928:	4680      	mov	r8, r0
 800292a:	4689      	mov	r9, r1
 800292c:	2600      	movs	r6, #0
 800292e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002932:	b914      	cbnz	r4, 800293a <_fwalk_reent+0x16>
 8002934:	4630      	mov	r0, r6
 8002936:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800293a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800293e:	3f01      	subs	r7, #1
 8002940:	d501      	bpl.n	8002946 <_fwalk_reent+0x22>
 8002942:	6824      	ldr	r4, [r4, #0]
 8002944:	e7f5      	b.n	8002932 <_fwalk_reent+0xe>
 8002946:	89ab      	ldrh	r3, [r5, #12]
 8002948:	2b01      	cmp	r3, #1
 800294a:	d907      	bls.n	800295c <_fwalk_reent+0x38>
 800294c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002950:	3301      	adds	r3, #1
 8002952:	d003      	beq.n	800295c <_fwalk_reent+0x38>
 8002954:	4629      	mov	r1, r5
 8002956:	4640      	mov	r0, r8
 8002958:	47c8      	blx	r9
 800295a:	4306      	orrs	r6, r0
 800295c:	3568      	adds	r5, #104	; 0x68
 800295e:	e7ee      	b.n	800293e <_fwalk_reent+0x1a>

08002960 <_malloc_r>:
 8002960:	b570      	push	{r4, r5, r6, lr}
 8002962:	1ccd      	adds	r5, r1, #3
 8002964:	f025 0503 	bic.w	r5, r5, #3
 8002968:	3508      	adds	r5, #8
 800296a:	2d0c      	cmp	r5, #12
 800296c:	bf38      	it	cc
 800296e:	250c      	movcc	r5, #12
 8002970:	2d00      	cmp	r5, #0
 8002972:	4606      	mov	r6, r0
 8002974:	db01      	blt.n	800297a <_malloc_r+0x1a>
 8002976:	42a9      	cmp	r1, r5
 8002978:	d903      	bls.n	8002982 <_malloc_r+0x22>
 800297a:	230c      	movs	r3, #12
 800297c:	6033      	str	r3, [r6, #0]
 800297e:	2000      	movs	r0, #0
 8002980:	bd70      	pop	{r4, r5, r6, pc}
 8002982:	f000 fd77 	bl	8003474 <__malloc_lock>
 8002986:	4a21      	ldr	r2, [pc, #132]	; (8002a0c <_malloc_r+0xac>)
 8002988:	6814      	ldr	r4, [r2, #0]
 800298a:	4621      	mov	r1, r4
 800298c:	b991      	cbnz	r1, 80029b4 <_malloc_r+0x54>
 800298e:	4c20      	ldr	r4, [pc, #128]	; (8002a10 <_malloc_r+0xb0>)
 8002990:	6823      	ldr	r3, [r4, #0]
 8002992:	b91b      	cbnz	r3, 800299c <_malloc_r+0x3c>
 8002994:	4630      	mov	r0, r6
 8002996:	f000 fb03 	bl	8002fa0 <_sbrk_r>
 800299a:	6020      	str	r0, [r4, #0]
 800299c:	4629      	mov	r1, r5
 800299e:	4630      	mov	r0, r6
 80029a0:	f000 fafe 	bl	8002fa0 <_sbrk_r>
 80029a4:	1c43      	adds	r3, r0, #1
 80029a6:	d124      	bne.n	80029f2 <_malloc_r+0x92>
 80029a8:	230c      	movs	r3, #12
 80029aa:	4630      	mov	r0, r6
 80029ac:	6033      	str	r3, [r6, #0]
 80029ae:	f000 fd62 	bl	8003476 <__malloc_unlock>
 80029b2:	e7e4      	b.n	800297e <_malloc_r+0x1e>
 80029b4:	680b      	ldr	r3, [r1, #0]
 80029b6:	1b5b      	subs	r3, r3, r5
 80029b8:	d418      	bmi.n	80029ec <_malloc_r+0x8c>
 80029ba:	2b0b      	cmp	r3, #11
 80029bc:	d90f      	bls.n	80029de <_malloc_r+0x7e>
 80029be:	600b      	str	r3, [r1, #0]
 80029c0:	18cc      	adds	r4, r1, r3
 80029c2:	50cd      	str	r5, [r1, r3]
 80029c4:	4630      	mov	r0, r6
 80029c6:	f000 fd56 	bl	8003476 <__malloc_unlock>
 80029ca:	f104 000b 	add.w	r0, r4, #11
 80029ce:	1d23      	adds	r3, r4, #4
 80029d0:	f020 0007 	bic.w	r0, r0, #7
 80029d4:	1ac3      	subs	r3, r0, r3
 80029d6:	d0d3      	beq.n	8002980 <_malloc_r+0x20>
 80029d8:	425a      	negs	r2, r3
 80029da:	50e2      	str	r2, [r4, r3]
 80029dc:	e7d0      	b.n	8002980 <_malloc_r+0x20>
 80029de:	684b      	ldr	r3, [r1, #4]
 80029e0:	428c      	cmp	r4, r1
 80029e2:	bf16      	itet	ne
 80029e4:	6063      	strne	r3, [r4, #4]
 80029e6:	6013      	streq	r3, [r2, #0]
 80029e8:	460c      	movne	r4, r1
 80029ea:	e7eb      	b.n	80029c4 <_malloc_r+0x64>
 80029ec:	460c      	mov	r4, r1
 80029ee:	6849      	ldr	r1, [r1, #4]
 80029f0:	e7cc      	b.n	800298c <_malloc_r+0x2c>
 80029f2:	1cc4      	adds	r4, r0, #3
 80029f4:	f024 0403 	bic.w	r4, r4, #3
 80029f8:	42a0      	cmp	r0, r4
 80029fa:	d005      	beq.n	8002a08 <_malloc_r+0xa8>
 80029fc:	1a21      	subs	r1, r4, r0
 80029fe:	4630      	mov	r0, r6
 8002a00:	f000 face 	bl	8002fa0 <_sbrk_r>
 8002a04:	3001      	adds	r0, #1
 8002a06:	d0cf      	beq.n	80029a8 <_malloc_r+0x48>
 8002a08:	6025      	str	r5, [r4, #0]
 8002a0a:	e7db      	b.n	80029c4 <_malloc_r+0x64>
 8002a0c:	20000098 	.word	0x20000098
 8002a10:	2000009c 	.word	0x2000009c

08002a14 <__sfputc_r>:
 8002a14:	6893      	ldr	r3, [r2, #8]
 8002a16:	b410      	push	{r4}
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	6093      	str	r3, [r2, #8]
 8002a1e:	da07      	bge.n	8002a30 <__sfputc_r+0x1c>
 8002a20:	6994      	ldr	r4, [r2, #24]
 8002a22:	42a3      	cmp	r3, r4
 8002a24:	db01      	blt.n	8002a2a <__sfputc_r+0x16>
 8002a26:	290a      	cmp	r1, #10
 8002a28:	d102      	bne.n	8002a30 <__sfputc_r+0x1c>
 8002a2a:	bc10      	pop	{r4}
 8002a2c:	f000 bb0c 	b.w	8003048 <__swbuf_r>
 8002a30:	6813      	ldr	r3, [r2, #0]
 8002a32:	1c58      	adds	r0, r3, #1
 8002a34:	6010      	str	r0, [r2, #0]
 8002a36:	7019      	strb	r1, [r3, #0]
 8002a38:	4608      	mov	r0, r1
 8002a3a:	bc10      	pop	{r4}
 8002a3c:	4770      	bx	lr

08002a3e <__sfputs_r>:
 8002a3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a40:	4606      	mov	r6, r0
 8002a42:	460f      	mov	r7, r1
 8002a44:	4614      	mov	r4, r2
 8002a46:	18d5      	adds	r5, r2, r3
 8002a48:	42ac      	cmp	r4, r5
 8002a4a:	d101      	bne.n	8002a50 <__sfputs_r+0x12>
 8002a4c:	2000      	movs	r0, #0
 8002a4e:	e007      	b.n	8002a60 <__sfputs_r+0x22>
 8002a50:	463a      	mov	r2, r7
 8002a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002a56:	4630      	mov	r0, r6
 8002a58:	f7ff ffdc 	bl	8002a14 <__sfputc_r>
 8002a5c:	1c43      	adds	r3, r0, #1
 8002a5e:	d1f3      	bne.n	8002a48 <__sfputs_r+0xa>
 8002a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002a64 <_vfiprintf_r>:
 8002a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a68:	460c      	mov	r4, r1
 8002a6a:	b09d      	sub	sp, #116	; 0x74
 8002a6c:	4617      	mov	r7, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4606      	mov	r6, r0
 8002a72:	b118      	cbz	r0, 8002a7c <_vfiprintf_r+0x18>
 8002a74:	6983      	ldr	r3, [r0, #24]
 8002a76:	b90b      	cbnz	r3, 8002a7c <_vfiprintf_r+0x18>
 8002a78:	f7ff fee8 	bl	800284c <__sinit>
 8002a7c:	4b7c      	ldr	r3, [pc, #496]	; (8002c70 <_vfiprintf_r+0x20c>)
 8002a7e:	429c      	cmp	r4, r3
 8002a80:	d158      	bne.n	8002b34 <_vfiprintf_r+0xd0>
 8002a82:	6874      	ldr	r4, [r6, #4]
 8002a84:	89a3      	ldrh	r3, [r4, #12]
 8002a86:	0718      	lsls	r0, r3, #28
 8002a88:	d55e      	bpl.n	8002b48 <_vfiprintf_r+0xe4>
 8002a8a:	6923      	ldr	r3, [r4, #16]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d05b      	beq.n	8002b48 <_vfiprintf_r+0xe4>
 8002a90:	2300      	movs	r3, #0
 8002a92:	9309      	str	r3, [sp, #36]	; 0x24
 8002a94:	2320      	movs	r3, #32
 8002a96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002a9a:	2330      	movs	r3, #48	; 0x30
 8002a9c:	f04f 0b01 	mov.w	fp, #1
 8002aa0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002aa4:	9503      	str	r5, [sp, #12]
 8002aa6:	46b8      	mov	r8, r7
 8002aa8:	4645      	mov	r5, r8
 8002aaa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002aae:	b10b      	cbz	r3, 8002ab4 <_vfiprintf_r+0x50>
 8002ab0:	2b25      	cmp	r3, #37	; 0x25
 8002ab2:	d154      	bne.n	8002b5e <_vfiprintf_r+0xfa>
 8002ab4:	ebb8 0a07 	subs.w	sl, r8, r7
 8002ab8:	d00b      	beq.n	8002ad2 <_vfiprintf_r+0x6e>
 8002aba:	4653      	mov	r3, sl
 8002abc:	463a      	mov	r2, r7
 8002abe:	4621      	mov	r1, r4
 8002ac0:	4630      	mov	r0, r6
 8002ac2:	f7ff ffbc 	bl	8002a3e <__sfputs_r>
 8002ac6:	3001      	adds	r0, #1
 8002ac8:	f000 80c2 	beq.w	8002c50 <_vfiprintf_r+0x1ec>
 8002acc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ace:	4453      	add	r3, sl
 8002ad0:	9309      	str	r3, [sp, #36]	; 0x24
 8002ad2:	f898 3000 	ldrb.w	r3, [r8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80ba 	beq.w	8002c50 <_vfiprintf_r+0x1ec>
 8002adc:	2300      	movs	r3, #0
 8002ade:	f04f 32ff 	mov.w	r2, #4294967295
 8002ae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002ae6:	9304      	str	r3, [sp, #16]
 8002ae8:	9307      	str	r3, [sp, #28]
 8002aea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002aee:	931a      	str	r3, [sp, #104]	; 0x68
 8002af0:	46a8      	mov	r8, r5
 8002af2:	2205      	movs	r2, #5
 8002af4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002af8:	485e      	ldr	r0, [pc, #376]	; (8002c74 <_vfiprintf_r+0x210>)
 8002afa:	f000 fcad 	bl	8003458 <memchr>
 8002afe:	9b04      	ldr	r3, [sp, #16]
 8002b00:	bb78      	cbnz	r0, 8002b62 <_vfiprintf_r+0xfe>
 8002b02:	06d9      	lsls	r1, r3, #27
 8002b04:	bf44      	itt	mi
 8002b06:	2220      	movmi	r2, #32
 8002b08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b0c:	071a      	lsls	r2, r3, #28
 8002b0e:	bf44      	itt	mi
 8002b10:	222b      	movmi	r2, #43	; 0x2b
 8002b12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002b16:	782a      	ldrb	r2, [r5, #0]
 8002b18:	2a2a      	cmp	r2, #42	; 0x2a
 8002b1a:	d02a      	beq.n	8002b72 <_vfiprintf_r+0x10e>
 8002b1c:	46a8      	mov	r8, r5
 8002b1e:	2000      	movs	r0, #0
 8002b20:	250a      	movs	r5, #10
 8002b22:	9a07      	ldr	r2, [sp, #28]
 8002b24:	4641      	mov	r1, r8
 8002b26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002b2a:	3b30      	subs	r3, #48	; 0x30
 8002b2c:	2b09      	cmp	r3, #9
 8002b2e:	d969      	bls.n	8002c04 <_vfiprintf_r+0x1a0>
 8002b30:	b360      	cbz	r0, 8002b8c <_vfiprintf_r+0x128>
 8002b32:	e024      	b.n	8002b7e <_vfiprintf_r+0x11a>
 8002b34:	4b50      	ldr	r3, [pc, #320]	; (8002c78 <_vfiprintf_r+0x214>)
 8002b36:	429c      	cmp	r4, r3
 8002b38:	d101      	bne.n	8002b3e <_vfiprintf_r+0xda>
 8002b3a:	68b4      	ldr	r4, [r6, #8]
 8002b3c:	e7a2      	b.n	8002a84 <_vfiprintf_r+0x20>
 8002b3e:	4b4f      	ldr	r3, [pc, #316]	; (8002c7c <_vfiprintf_r+0x218>)
 8002b40:	429c      	cmp	r4, r3
 8002b42:	bf08      	it	eq
 8002b44:	68f4      	ldreq	r4, [r6, #12]
 8002b46:	e79d      	b.n	8002a84 <_vfiprintf_r+0x20>
 8002b48:	4621      	mov	r1, r4
 8002b4a:	4630      	mov	r0, r6
 8002b4c:	f000 fae0 	bl	8003110 <__swsetup_r>
 8002b50:	2800      	cmp	r0, #0
 8002b52:	d09d      	beq.n	8002a90 <_vfiprintf_r+0x2c>
 8002b54:	f04f 30ff 	mov.w	r0, #4294967295
 8002b58:	b01d      	add	sp, #116	; 0x74
 8002b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b5e:	46a8      	mov	r8, r5
 8002b60:	e7a2      	b.n	8002aa8 <_vfiprintf_r+0x44>
 8002b62:	4a44      	ldr	r2, [pc, #272]	; (8002c74 <_vfiprintf_r+0x210>)
 8002b64:	4645      	mov	r5, r8
 8002b66:	1a80      	subs	r0, r0, r2
 8002b68:	fa0b f000 	lsl.w	r0, fp, r0
 8002b6c:	4318      	orrs	r0, r3
 8002b6e:	9004      	str	r0, [sp, #16]
 8002b70:	e7be      	b.n	8002af0 <_vfiprintf_r+0x8c>
 8002b72:	9a03      	ldr	r2, [sp, #12]
 8002b74:	1d11      	adds	r1, r2, #4
 8002b76:	6812      	ldr	r2, [r2, #0]
 8002b78:	9103      	str	r1, [sp, #12]
 8002b7a:	2a00      	cmp	r2, #0
 8002b7c:	db01      	blt.n	8002b82 <_vfiprintf_r+0x11e>
 8002b7e:	9207      	str	r2, [sp, #28]
 8002b80:	e004      	b.n	8002b8c <_vfiprintf_r+0x128>
 8002b82:	4252      	negs	r2, r2
 8002b84:	f043 0302 	orr.w	r3, r3, #2
 8002b88:	9207      	str	r2, [sp, #28]
 8002b8a:	9304      	str	r3, [sp, #16]
 8002b8c:	f898 3000 	ldrb.w	r3, [r8]
 8002b90:	2b2e      	cmp	r3, #46	; 0x2e
 8002b92:	d10e      	bne.n	8002bb2 <_vfiprintf_r+0x14e>
 8002b94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002b98:	2b2a      	cmp	r3, #42	; 0x2a
 8002b9a:	d138      	bne.n	8002c0e <_vfiprintf_r+0x1aa>
 8002b9c:	9b03      	ldr	r3, [sp, #12]
 8002b9e:	f108 0802 	add.w	r8, r8, #2
 8002ba2:	1d1a      	adds	r2, r3, #4
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	9203      	str	r2, [sp, #12]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	bfb8      	it	lt
 8002bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8002bb0:	9305      	str	r3, [sp, #20]
 8002bb2:	4d33      	ldr	r5, [pc, #204]	; (8002c80 <_vfiprintf_r+0x21c>)
 8002bb4:	2203      	movs	r2, #3
 8002bb6:	f898 1000 	ldrb.w	r1, [r8]
 8002bba:	4628      	mov	r0, r5
 8002bbc:	f000 fc4c 	bl	8003458 <memchr>
 8002bc0:	b140      	cbz	r0, 8002bd4 <_vfiprintf_r+0x170>
 8002bc2:	2340      	movs	r3, #64	; 0x40
 8002bc4:	1b40      	subs	r0, r0, r5
 8002bc6:	fa03 f000 	lsl.w	r0, r3, r0
 8002bca:	9b04      	ldr	r3, [sp, #16]
 8002bcc:	f108 0801 	add.w	r8, r8, #1
 8002bd0:	4303      	orrs	r3, r0
 8002bd2:	9304      	str	r3, [sp, #16]
 8002bd4:	f898 1000 	ldrb.w	r1, [r8]
 8002bd8:	2206      	movs	r2, #6
 8002bda:	482a      	ldr	r0, [pc, #168]	; (8002c84 <_vfiprintf_r+0x220>)
 8002bdc:	f108 0701 	add.w	r7, r8, #1
 8002be0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002be4:	f000 fc38 	bl	8003458 <memchr>
 8002be8:	2800      	cmp	r0, #0
 8002bea:	d037      	beq.n	8002c5c <_vfiprintf_r+0x1f8>
 8002bec:	4b26      	ldr	r3, [pc, #152]	; (8002c88 <_vfiprintf_r+0x224>)
 8002bee:	bb1b      	cbnz	r3, 8002c38 <_vfiprintf_r+0x1d4>
 8002bf0:	9b03      	ldr	r3, [sp, #12]
 8002bf2:	3307      	adds	r3, #7
 8002bf4:	f023 0307 	bic.w	r3, r3, #7
 8002bf8:	3308      	adds	r3, #8
 8002bfa:	9303      	str	r3, [sp, #12]
 8002bfc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002bfe:	444b      	add	r3, r9
 8002c00:	9309      	str	r3, [sp, #36]	; 0x24
 8002c02:	e750      	b.n	8002aa6 <_vfiprintf_r+0x42>
 8002c04:	fb05 3202 	mla	r2, r5, r2, r3
 8002c08:	2001      	movs	r0, #1
 8002c0a:	4688      	mov	r8, r1
 8002c0c:	e78a      	b.n	8002b24 <_vfiprintf_r+0xc0>
 8002c0e:	2300      	movs	r3, #0
 8002c10:	250a      	movs	r5, #10
 8002c12:	4619      	mov	r1, r3
 8002c14:	f108 0801 	add.w	r8, r8, #1
 8002c18:	9305      	str	r3, [sp, #20]
 8002c1a:	4640      	mov	r0, r8
 8002c1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002c20:	3a30      	subs	r2, #48	; 0x30
 8002c22:	2a09      	cmp	r2, #9
 8002c24:	d903      	bls.n	8002c2e <_vfiprintf_r+0x1ca>
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0c3      	beq.n	8002bb2 <_vfiprintf_r+0x14e>
 8002c2a:	9105      	str	r1, [sp, #20]
 8002c2c:	e7c1      	b.n	8002bb2 <_vfiprintf_r+0x14e>
 8002c2e:	fb05 2101 	mla	r1, r5, r1, r2
 8002c32:	2301      	movs	r3, #1
 8002c34:	4680      	mov	r8, r0
 8002c36:	e7f0      	b.n	8002c1a <_vfiprintf_r+0x1b6>
 8002c38:	ab03      	add	r3, sp, #12
 8002c3a:	9300      	str	r3, [sp, #0]
 8002c3c:	4622      	mov	r2, r4
 8002c3e:	4b13      	ldr	r3, [pc, #76]	; (8002c8c <_vfiprintf_r+0x228>)
 8002c40:	a904      	add	r1, sp, #16
 8002c42:	4630      	mov	r0, r6
 8002c44:	f3af 8000 	nop.w
 8002c48:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002c4c:	4681      	mov	r9, r0
 8002c4e:	d1d5      	bne.n	8002bfc <_vfiprintf_r+0x198>
 8002c50:	89a3      	ldrh	r3, [r4, #12]
 8002c52:	065b      	lsls	r3, r3, #25
 8002c54:	f53f af7e 	bmi.w	8002b54 <_vfiprintf_r+0xf0>
 8002c58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002c5a:	e77d      	b.n	8002b58 <_vfiprintf_r+0xf4>
 8002c5c:	ab03      	add	r3, sp, #12
 8002c5e:	9300      	str	r3, [sp, #0]
 8002c60:	4622      	mov	r2, r4
 8002c62:	4b0a      	ldr	r3, [pc, #40]	; (8002c8c <_vfiprintf_r+0x228>)
 8002c64:	a904      	add	r1, sp, #16
 8002c66:	4630      	mov	r0, r6
 8002c68:	f000 f888 	bl	8002d7c <_printf_i>
 8002c6c:	e7ec      	b.n	8002c48 <_vfiprintf_r+0x1e4>
 8002c6e:	bf00      	nop
 8002c70:	080036d4 	.word	0x080036d4
 8002c74:	08003714 	.word	0x08003714
 8002c78:	080036f4 	.word	0x080036f4
 8002c7c:	080036b4 	.word	0x080036b4
 8002c80:	0800371a 	.word	0x0800371a
 8002c84:	0800371e 	.word	0x0800371e
 8002c88:	00000000 	.word	0x00000000
 8002c8c:	08002a3f 	.word	0x08002a3f

08002c90 <_printf_common>:
 8002c90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002c94:	4691      	mov	r9, r2
 8002c96:	461f      	mov	r7, r3
 8002c98:	688a      	ldr	r2, [r1, #8]
 8002c9a:	690b      	ldr	r3, [r1, #16]
 8002c9c:	4606      	mov	r6, r0
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	bfb8      	it	lt
 8002ca2:	4613      	movlt	r3, r2
 8002ca4:	f8c9 3000 	str.w	r3, [r9]
 8002ca8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002cac:	460c      	mov	r4, r1
 8002cae:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002cb2:	b112      	cbz	r2, 8002cba <_printf_common+0x2a>
 8002cb4:	3301      	adds	r3, #1
 8002cb6:	f8c9 3000 	str.w	r3, [r9]
 8002cba:	6823      	ldr	r3, [r4, #0]
 8002cbc:	0699      	lsls	r1, r3, #26
 8002cbe:	bf42      	ittt	mi
 8002cc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002cc4:	3302      	addmi	r3, #2
 8002cc6:	f8c9 3000 	strmi.w	r3, [r9]
 8002cca:	6825      	ldr	r5, [r4, #0]
 8002ccc:	f015 0506 	ands.w	r5, r5, #6
 8002cd0:	d107      	bne.n	8002ce2 <_printf_common+0x52>
 8002cd2:	f104 0a19 	add.w	sl, r4, #25
 8002cd6:	68e3      	ldr	r3, [r4, #12]
 8002cd8:	f8d9 2000 	ldr.w	r2, [r9]
 8002cdc:	1a9b      	subs	r3, r3, r2
 8002cde:	42ab      	cmp	r3, r5
 8002ce0:	dc29      	bgt.n	8002d36 <_printf_common+0xa6>
 8002ce2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002ce6:	6822      	ldr	r2, [r4, #0]
 8002ce8:	3300      	adds	r3, #0
 8002cea:	bf18      	it	ne
 8002cec:	2301      	movne	r3, #1
 8002cee:	0692      	lsls	r2, r2, #26
 8002cf0:	d42e      	bmi.n	8002d50 <_printf_common+0xc0>
 8002cf2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002cf6:	4639      	mov	r1, r7
 8002cf8:	4630      	mov	r0, r6
 8002cfa:	47c0      	blx	r8
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d021      	beq.n	8002d44 <_printf_common+0xb4>
 8002d00:	6823      	ldr	r3, [r4, #0]
 8002d02:	68e5      	ldr	r5, [r4, #12]
 8002d04:	f003 0306 	and.w	r3, r3, #6
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	bf18      	it	ne
 8002d0c:	2500      	movne	r5, #0
 8002d0e:	f8d9 2000 	ldr.w	r2, [r9]
 8002d12:	f04f 0900 	mov.w	r9, #0
 8002d16:	bf08      	it	eq
 8002d18:	1aad      	subeq	r5, r5, r2
 8002d1a:	68a3      	ldr	r3, [r4, #8]
 8002d1c:	6922      	ldr	r2, [r4, #16]
 8002d1e:	bf08      	it	eq
 8002d20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002d24:	4293      	cmp	r3, r2
 8002d26:	bfc4      	itt	gt
 8002d28:	1a9b      	subgt	r3, r3, r2
 8002d2a:	18ed      	addgt	r5, r5, r3
 8002d2c:	341a      	adds	r4, #26
 8002d2e:	454d      	cmp	r5, r9
 8002d30:	d11a      	bne.n	8002d68 <_printf_common+0xd8>
 8002d32:	2000      	movs	r0, #0
 8002d34:	e008      	b.n	8002d48 <_printf_common+0xb8>
 8002d36:	2301      	movs	r3, #1
 8002d38:	4652      	mov	r2, sl
 8002d3a:	4639      	mov	r1, r7
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	47c0      	blx	r8
 8002d40:	3001      	adds	r0, #1
 8002d42:	d103      	bne.n	8002d4c <_printf_common+0xbc>
 8002d44:	f04f 30ff 	mov.w	r0, #4294967295
 8002d48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002d4c:	3501      	adds	r5, #1
 8002d4e:	e7c2      	b.n	8002cd6 <_printf_common+0x46>
 8002d50:	2030      	movs	r0, #48	; 0x30
 8002d52:	18e1      	adds	r1, r4, r3
 8002d54:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002d58:	1c5a      	adds	r2, r3, #1
 8002d5a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002d5e:	4422      	add	r2, r4
 8002d60:	3302      	adds	r3, #2
 8002d62:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002d66:	e7c4      	b.n	8002cf2 <_printf_common+0x62>
 8002d68:	2301      	movs	r3, #1
 8002d6a:	4622      	mov	r2, r4
 8002d6c:	4639      	mov	r1, r7
 8002d6e:	4630      	mov	r0, r6
 8002d70:	47c0      	blx	r8
 8002d72:	3001      	adds	r0, #1
 8002d74:	d0e6      	beq.n	8002d44 <_printf_common+0xb4>
 8002d76:	f109 0901 	add.w	r9, r9, #1
 8002d7a:	e7d8      	b.n	8002d2e <_printf_common+0x9e>

08002d7c <_printf_i>:
 8002d7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002d80:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002d84:	460c      	mov	r4, r1
 8002d86:	7e09      	ldrb	r1, [r1, #24]
 8002d88:	b085      	sub	sp, #20
 8002d8a:	296e      	cmp	r1, #110	; 0x6e
 8002d8c:	4617      	mov	r7, r2
 8002d8e:	4606      	mov	r6, r0
 8002d90:	4698      	mov	r8, r3
 8002d92:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002d94:	f000 80b3 	beq.w	8002efe <_printf_i+0x182>
 8002d98:	d822      	bhi.n	8002de0 <_printf_i+0x64>
 8002d9a:	2963      	cmp	r1, #99	; 0x63
 8002d9c:	d036      	beq.n	8002e0c <_printf_i+0x90>
 8002d9e:	d80a      	bhi.n	8002db6 <_printf_i+0x3a>
 8002da0:	2900      	cmp	r1, #0
 8002da2:	f000 80b9 	beq.w	8002f18 <_printf_i+0x19c>
 8002da6:	2958      	cmp	r1, #88	; 0x58
 8002da8:	f000 8083 	beq.w	8002eb2 <_printf_i+0x136>
 8002dac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002db0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002db4:	e032      	b.n	8002e1c <_printf_i+0xa0>
 8002db6:	2964      	cmp	r1, #100	; 0x64
 8002db8:	d001      	beq.n	8002dbe <_printf_i+0x42>
 8002dba:	2969      	cmp	r1, #105	; 0x69
 8002dbc:	d1f6      	bne.n	8002dac <_printf_i+0x30>
 8002dbe:	6820      	ldr	r0, [r4, #0]
 8002dc0:	6813      	ldr	r3, [r2, #0]
 8002dc2:	0605      	lsls	r5, r0, #24
 8002dc4:	f103 0104 	add.w	r1, r3, #4
 8002dc8:	d52a      	bpl.n	8002e20 <_printf_i+0xa4>
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	6011      	str	r1, [r2, #0]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	da03      	bge.n	8002dda <_printf_i+0x5e>
 8002dd2:	222d      	movs	r2, #45	; 0x2d
 8002dd4:	425b      	negs	r3, r3
 8002dd6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002dda:	486f      	ldr	r0, [pc, #444]	; (8002f98 <_printf_i+0x21c>)
 8002ddc:	220a      	movs	r2, #10
 8002dde:	e039      	b.n	8002e54 <_printf_i+0xd8>
 8002de0:	2973      	cmp	r1, #115	; 0x73
 8002de2:	f000 809d 	beq.w	8002f20 <_printf_i+0x1a4>
 8002de6:	d808      	bhi.n	8002dfa <_printf_i+0x7e>
 8002de8:	296f      	cmp	r1, #111	; 0x6f
 8002dea:	d020      	beq.n	8002e2e <_printf_i+0xb2>
 8002dec:	2970      	cmp	r1, #112	; 0x70
 8002dee:	d1dd      	bne.n	8002dac <_printf_i+0x30>
 8002df0:	6823      	ldr	r3, [r4, #0]
 8002df2:	f043 0320 	orr.w	r3, r3, #32
 8002df6:	6023      	str	r3, [r4, #0]
 8002df8:	e003      	b.n	8002e02 <_printf_i+0x86>
 8002dfa:	2975      	cmp	r1, #117	; 0x75
 8002dfc:	d017      	beq.n	8002e2e <_printf_i+0xb2>
 8002dfe:	2978      	cmp	r1, #120	; 0x78
 8002e00:	d1d4      	bne.n	8002dac <_printf_i+0x30>
 8002e02:	2378      	movs	r3, #120	; 0x78
 8002e04:	4865      	ldr	r0, [pc, #404]	; (8002f9c <_printf_i+0x220>)
 8002e06:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002e0a:	e055      	b.n	8002eb8 <_printf_i+0x13c>
 8002e0c:	6813      	ldr	r3, [r2, #0]
 8002e0e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e12:	1d19      	adds	r1, r3, #4
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	6011      	str	r1, [r2, #0]
 8002e18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e1c:	2301      	movs	r3, #1
 8002e1e:	e08c      	b.n	8002f3a <_printf_i+0x1be>
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002e26:	6011      	str	r1, [r2, #0]
 8002e28:	bf18      	it	ne
 8002e2a:	b21b      	sxthne	r3, r3
 8002e2c:	e7cf      	b.n	8002dce <_printf_i+0x52>
 8002e2e:	6813      	ldr	r3, [r2, #0]
 8002e30:	6825      	ldr	r5, [r4, #0]
 8002e32:	1d18      	adds	r0, r3, #4
 8002e34:	6010      	str	r0, [r2, #0]
 8002e36:	0628      	lsls	r0, r5, #24
 8002e38:	d501      	bpl.n	8002e3e <_printf_i+0xc2>
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	e002      	b.n	8002e44 <_printf_i+0xc8>
 8002e3e:	0668      	lsls	r0, r5, #25
 8002e40:	d5fb      	bpl.n	8002e3a <_printf_i+0xbe>
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	296f      	cmp	r1, #111	; 0x6f
 8002e46:	bf14      	ite	ne
 8002e48:	220a      	movne	r2, #10
 8002e4a:	2208      	moveq	r2, #8
 8002e4c:	4852      	ldr	r0, [pc, #328]	; (8002f98 <_printf_i+0x21c>)
 8002e4e:	2100      	movs	r1, #0
 8002e50:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002e54:	6865      	ldr	r5, [r4, #4]
 8002e56:	2d00      	cmp	r5, #0
 8002e58:	60a5      	str	r5, [r4, #8]
 8002e5a:	f2c0 8095 	blt.w	8002f88 <_printf_i+0x20c>
 8002e5e:	6821      	ldr	r1, [r4, #0]
 8002e60:	f021 0104 	bic.w	r1, r1, #4
 8002e64:	6021      	str	r1, [r4, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d13d      	bne.n	8002ee6 <_printf_i+0x16a>
 8002e6a:	2d00      	cmp	r5, #0
 8002e6c:	f040 808e 	bne.w	8002f8c <_printf_i+0x210>
 8002e70:	4665      	mov	r5, ip
 8002e72:	2a08      	cmp	r2, #8
 8002e74:	d10b      	bne.n	8002e8e <_printf_i+0x112>
 8002e76:	6823      	ldr	r3, [r4, #0]
 8002e78:	07db      	lsls	r3, r3, #31
 8002e7a:	d508      	bpl.n	8002e8e <_printf_i+0x112>
 8002e7c:	6923      	ldr	r3, [r4, #16]
 8002e7e:	6862      	ldr	r2, [r4, #4]
 8002e80:	429a      	cmp	r2, r3
 8002e82:	bfde      	ittt	le
 8002e84:	2330      	movle	r3, #48	; 0x30
 8002e86:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002e8a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002e8e:	ebac 0305 	sub.w	r3, ip, r5
 8002e92:	6123      	str	r3, [r4, #16]
 8002e94:	f8cd 8000 	str.w	r8, [sp]
 8002e98:	463b      	mov	r3, r7
 8002e9a:	aa03      	add	r2, sp, #12
 8002e9c:	4621      	mov	r1, r4
 8002e9e:	4630      	mov	r0, r6
 8002ea0:	f7ff fef6 	bl	8002c90 <_printf_common>
 8002ea4:	3001      	adds	r0, #1
 8002ea6:	d14d      	bne.n	8002f44 <_printf_i+0x1c8>
 8002ea8:	f04f 30ff 	mov.w	r0, #4294967295
 8002eac:	b005      	add	sp, #20
 8002eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002eb2:	4839      	ldr	r0, [pc, #228]	; (8002f98 <_printf_i+0x21c>)
 8002eb4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002eb8:	6813      	ldr	r3, [r2, #0]
 8002eba:	6821      	ldr	r1, [r4, #0]
 8002ebc:	1d1d      	adds	r5, r3, #4
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6015      	str	r5, [r2, #0]
 8002ec2:	060a      	lsls	r2, r1, #24
 8002ec4:	d50b      	bpl.n	8002ede <_printf_i+0x162>
 8002ec6:	07ca      	lsls	r2, r1, #31
 8002ec8:	bf44      	itt	mi
 8002eca:	f041 0120 	orrmi.w	r1, r1, #32
 8002ece:	6021      	strmi	r1, [r4, #0]
 8002ed0:	b91b      	cbnz	r3, 8002eda <_printf_i+0x15e>
 8002ed2:	6822      	ldr	r2, [r4, #0]
 8002ed4:	f022 0220 	bic.w	r2, r2, #32
 8002ed8:	6022      	str	r2, [r4, #0]
 8002eda:	2210      	movs	r2, #16
 8002edc:	e7b7      	b.n	8002e4e <_printf_i+0xd2>
 8002ede:	064d      	lsls	r5, r1, #25
 8002ee0:	bf48      	it	mi
 8002ee2:	b29b      	uxthmi	r3, r3
 8002ee4:	e7ef      	b.n	8002ec6 <_printf_i+0x14a>
 8002ee6:	4665      	mov	r5, ip
 8002ee8:	fbb3 f1f2 	udiv	r1, r3, r2
 8002eec:	fb02 3311 	mls	r3, r2, r1, r3
 8002ef0:	5cc3      	ldrb	r3, [r0, r3]
 8002ef2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	2900      	cmp	r1, #0
 8002efa:	d1f5      	bne.n	8002ee8 <_printf_i+0x16c>
 8002efc:	e7b9      	b.n	8002e72 <_printf_i+0xf6>
 8002efe:	6813      	ldr	r3, [r2, #0]
 8002f00:	6825      	ldr	r5, [r4, #0]
 8002f02:	1d18      	adds	r0, r3, #4
 8002f04:	6961      	ldr	r1, [r4, #20]
 8002f06:	6010      	str	r0, [r2, #0]
 8002f08:	0628      	lsls	r0, r5, #24
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	d501      	bpl.n	8002f12 <_printf_i+0x196>
 8002f0e:	6019      	str	r1, [r3, #0]
 8002f10:	e002      	b.n	8002f18 <_printf_i+0x19c>
 8002f12:	066a      	lsls	r2, r5, #25
 8002f14:	d5fb      	bpl.n	8002f0e <_printf_i+0x192>
 8002f16:	8019      	strh	r1, [r3, #0]
 8002f18:	2300      	movs	r3, #0
 8002f1a:	4665      	mov	r5, ip
 8002f1c:	6123      	str	r3, [r4, #16]
 8002f1e:	e7b9      	b.n	8002e94 <_printf_i+0x118>
 8002f20:	6813      	ldr	r3, [r2, #0]
 8002f22:	1d19      	adds	r1, r3, #4
 8002f24:	6011      	str	r1, [r2, #0]
 8002f26:	681d      	ldr	r5, [r3, #0]
 8002f28:	6862      	ldr	r2, [r4, #4]
 8002f2a:	2100      	movs	r1, #0
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	f000 fa93 	bl	8003458 <memchr>
 8002f32:	b108      	cbz	r0, 8002f38 <_printf_i+0x1bc>
 8002f34:	1b40      	subs	r0, r0, r5
 8002f36:	6060      	str	r0, [r4, #4]
 8002f38:	6863      	ldr	r3, [r4, #4]
 8002f3a:	6123      	str	r3, [r4, #16]
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002f42:	e7a7      	b.n	8002e94 <_printf_i+0x118>
 8002f44:	6923      	ldr	r3, [r4, #16]
 8002f46:	462a      	mov	r2, r5
 8002f48:	4639      	mov	r1, r7
 8002f4a:	4630      	mov	r0, r6
 8002f4c:	47c0      	blx	r8
 8002f4e:	3001      	adds	r0, #1
 8002f50:	d0aa      	beq.n	8002ea8 <_printf_i+0x12c>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	079b      	lsls	r3, r3, #30
 8002f56:	d413      	bmi.n	8002f80 <_printf_i+0x204>
 8002f58:	68e0      	ldr	r0, [r4, #12]
 8002f5a:	9b03      	ldr	r3, [sp, #12]
 8002f5c:	4298      	cmp	r0, r3
 8002f5e:	bfb8      	it	lt
 8002f60:	4618      	movlt	r0, r3
 8002f62:	e7a3      	b.n	8002eac <_printf_i+0x130>
 8002f64:	2301      	movs	r3, #1
 8002f66:	464a      	mov	r2, r9
 8002f68:	4639      	mov	r1, r7
 8002f6a:	4630      	mov	r0, r6
 8002f6c:	47c0      	blx	r8
 8002f6e:	3001      	adds	r0, #1
 8002f70:	d09a      	beq.n	8002ea8 <_printf_i+0x12c>
 8002f72:	3501      	adds	r5, #1
 8002f74:	68e3      	ldr	r3, [r4, #12]
 8002f76:	9a03      	ldr	r2, [sp, #12]
 8002f78:	1a9b      	subs	r3, r3, r2
 8002f7a:	42ab      	cmp	r3, r5
 8002f7c:	dcf2      	bgt.n	8002f64 <_printf_i+0x1e8>
 8002f7e:	e7eb      	b.n	8002f58 <_printf_i+0x1dc>
 8002f80:	2500      	movs	r5, #0
 8002f82:	f104 0919 	add.w	r9, r4, #25
 8002f86:	e7f5      	b.n	8002f74 <_printf_i+0x1f8>
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d1ac      	bne.n	8002ee6 <_printf_i+0x16a>
 8002f8c:	7803      	ldrb	r3, [r0, #0]
 8002f8e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002f92:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002f96:	e76c      	b.n	8002e72 <_printf_i+0xf6>
 8002f98:	08003725 	.word	0x08003725
 8002f9c:	08003736 	.word	0x08003736

08002fa0 <_sbrk_r>:
 8002fa0:	b538      	push	{r3, r4, r5, lr}
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	4c05      	ldr	r4, [pc, #20]	; (8002fbc <_sbrk_r+0x1c>)
 8002fa6:	4605      	mov	r5, r0
 8002fa8:	4608      	mov	r0, r1
 8002faa:	6023      	str	r3, [r4, #0]
 8002fac:	f7fd fa64 	bl	8000478 <_sbrk>
 8002fb0:	1c43      	adds	r3, r0, #1
 8002fb2:	d102      	bne.n	8002fba <_sbrk_r+0x1a>
 8002fb4:	6823      	ldr	r3, [r4, #0]
 8002fb6:	b103      	cbz	r3, 8002fba <_sbrk_r+0x1a>
 8002fb8:	602b      	str	r3, [r5, #0]
 8002fba:	bd38      	pop	{r3, r4, r5, pc}
 8002fbc:	200000e8 	.word	0x200000e8

08002fc0 <__sread>:
 8002fc0:	b510      	push	{r4, lr}
 8002fc2:	460c      	mov	r4, r1
 8002fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fc8:	f000 faa2 	bl	8003510 <_read_r>
 8002fcc:	2800      	cmp	r0, #0
 8002fce:	bfab      	itete	ge
 8002fd0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002fd2:	89a3      	ldrhlt	r3, [r4, #12]
 8002fd4:	181b      	addge	r3, r3, r0
 8002fd6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002fda:	bfac      	ite	ge
 8002fdc:	6563      	strge	r3, [r4, #84]	; 0x54
 8002fde:	81a3      	strhlt	r3, [r4, #12]
 8002fe0:	bd10      	pop	{r4, pc}

08002fe2 <__swrite>:
 8002fe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002fe6:	461f      	mov	r7, r3
 8002fe8:	898b      	ldrh	r3, [r1, #12]
 8002fea:	4605      	mov	r5, r0
 8002fec:	05db      	lsls	r3, r3, #23
 8002fee:	460c      	mov	r4, r1
 8002ff0:	4616      	mov	r6, r2
 8002ff2:	d505      	bpl.n	8003000 <__swrite+0x1e>
 8002ff4:	2302      	movs	r3, #2
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ffc:	f000 f9b6 	bl	800336c <_lseek_r>
 8003000:	89a3      	ldrh	r3, [r4, #12]
 8003002:	4632      	mov	r2, r6
 8003004:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003008:	81a3      	strh	r3, [r4, #12]
 800300a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800300e:	463b      	mov	r3, r7
 8003010:	4628      	mov	r0, r5
 8003012:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003016:	f000 b869 	b.w	80030ec <_write_r>

0800301a <__sseek>:
 800301a:	b510      	push	{r4, lr}
 800301c:	460c      	mov	r4, r1
 800301e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003022:	f000 f9a3 	bl	800336c <_lseek_r>
 8003026:	1c43      	adds	r3, r0, #1
 8003028:	89a3      	ldrh	r3, [r4, #12]
 800302a:	bf15      	itete	ne
 800302c:	6560      	strne	r0, [r4, #84]	; 0x54
 800302e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003032:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003036:	81a3      	strheq	r3, [r4, #12]
 8003038:	bf18      	it	ne
 800303a:	81a3      	strhne	r3, [r4, #12]
 800303c:	bd10      	pop	{r4, pc}

0800303e <__sclose>:
 800303e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003042:	f000 b8d3 	b.w	80031ec <_close_r>
	...

08003048 <__swbuf_r>:
 8003048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800304a:	460e      	mov	r6, r1
 800304c:	4614      	mov	r4, r2
 800304e:	4605      	mov	r5, r0
 8003050:	b118      	cbz	r0, 800305a <__swbuf_r+0x12>
 8003052:	6983      	ldr	r3, [r0, #24]
 8003054:	b90b      	cbnz	r3, 800305a <__swbuf_r+0x12>
 8003056:	f7ff fbf9 	bl	800284c <__sinit>
 800305a:	4b21      	ldr	r3, [pc, #132]	; (80030e0 <__swbuf_r+0x98>)
 800305c:	429c      	cmp	r4, r3
 800305e:	d12a      	bne.n	80030b6 <__swbuf_r+0x6e>
 8003060:	686c      	ldr	r4, [r5, #4]
 8003062:	69a3      	ldr	r3, [r4, #24]
 8003064:	60a3      	str	r3, [r4, #8]
 8003066:	89a3      	ldrh	r3, [r4, #12]
 8003068:	071a      	lsls	r2, r3, #28
 800306a:	d52e      	bpl.n	80030ca <__swbuf_r+0x82>
 800306c:	6923      	ldr	r3, [r4, #16]
 800306e:	b363      	cbz	r3, 80030ca <__swbuf_r+0x82>
 8003070:	6923      	ldr	r3, [r4, #16]
 8003072:	6820      	ldr	r0, [r4, #0]
 8003074:	b2f6      	uxtb	r6, r6
 8003076:	1ac0      	subs	r0, r0, r3
 8003078:	6963      	ldr	r3, [r4, #20]
 800307a:	4637      	mov	r7, r6
 800307c:	4283      	cmp	r3, r0
 800307e:	dc04      	bgt.n	800308a <__swbuf_r+0x42>
 8003080:	4621      	mov	r1, r4
 8003082:	4628      	mov	r0, r5
 8003084:	f000 f948 	bl	8003318 <_fflush_r>
 8003088:	bb28      	cbnz	r0, 80030d6 <__swbuf_r+0x8e>
 800308a:	68a3      	ldr	r3, [r4, #8]
 800308c:	3001      	adds	r0, #1
 800308e:	3b01      	subs	r3, #1
 8003090:	60a3      	str	r3, [r4, #8]
 8003092:	6823      	ldr	r3, [r4, #0]
 8003094:	1c5a      	adds	r2, r3, #1
 8003096:	6022      	str	r2, [r4, #0]
 8003098:	701e      	strb	r6, [r3, #0]
 800309a:	6963      	ldr	r3, [r4, #20]
 800309c:	4283      	cmp	r3, r0
 800309e:	d004      	beq.n	80030aa <__swbuf_r+0x62>
 80030a0:	89a3      	ldrh	r3, [r4, #12]
 80030a2:	07db      	lsls	r3, r3, #31
 80030a4:	d519      	bpl.n	80030da <__swbuf_r+0x92>
 80030a6:	2e0a      	cmp	r6, #10
 80030a8:	d117      	bne.n	80030da <__swbuf_r+0x92>
 80030aa:	4621      	mov	r1, r4
 80030ac:	4628      	mov	r0, r5
 80030ae:	f000 f933 	bl	8003318 <_fflush_r>
 80030b2:	b190      	cbz	r0, 80030da <__swbuf_r+0x92>
 80030b4:	e00f      	b.n	80030d6 <__swbuf_r+0x8e>
 80030b6:	4b0b      	ldr	r3, [pc, #44]	; (80030e4 <__swbuf_r+0x9c>)
 80030b8:	429c      	cmp	r4, r3
 80030ba:	d101      	bne.n	80030c0 <__swbuf_r+0x78>
 80030bc:	68ac      	ldr	r4, [r5, #8]
 80030be:	e7d0      	b.n	8003062 <__swbuf_r+0x1a>
 80030c0:	4b09      	ldr	r3, [pc, #36]	; (80030e8 <__swbuf_r+0xa0>)
 80030c2:	429c      	cmp	r4, r3
 80030c4:	bf08      	it	eq
 80030c6:	68ec      	ldreq	r4, [r5, #12]
 80030c8:	e7cb      	b.n	8003062 <__swbuf_r+0x1a>
 80030ca:	4621      	mov	r1, r4
 80030cc:	4628      	mov	r0, r5
 80030ce:	f000 f81f 	bl	8003110 <__swsetup_r>
 80030d2:	2800      	cmp	r0, #0
 80030d4:	d0cc      	beq.n	8003070 <__swbuf_r+0x28>
 80030d6:	f04f 37ff 	mov.w	r7, #4294967295
 80030da:	4638      	mov	r0, r7
 80030dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80030de:	bf00      	nop
 80030e0:	080036d4 	.word	0x080036d4
 80030e4:	080036f4 	.word	0x080036f4
 80030e8:	080036b4 	.word	0x080036b4

080030ec <_write_r>:
 80030ec:	b538      	push	{r3, r4, r5, lr}
 80030ee:	4605      	mov	r5, r0
 80030f0:	4608      	mov	r0, r1
 80030f2:	4611      	mov	r1, r2
 80030f4:	2200      	movs	r2, #0
 80030f6:	4c05      	ldr	r4, [pc, #20]	; (800310c <_write_r+0x20>)
 80030f8:	6022      	str	r2, [r4, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	f7fd f96f 	bl	80003de <_write>
 8003100:	1c43      	adds	r3, r0, #1
 8003102:	d102      	bne.n	800310a <_write_r+0x1e>
 8003104:	6823      	ldr	r3, [r4, #0]
 8003106:	b103      	cbz	r3, 800310a <_write_r+0x1e>
 8003108:	602b      	str	r3, [r5, #0]
 800310a:	bd38      	pop	{r3, r4, r5, pc}
 800310c:	200000e8 	.word	0x200000e8

08003110 <__swsetup_r>:
 8003110:	4b32      	ldr	r3, [pc, #200]	; (80031dc <__swsetup_r+0xcc>)
 8003112:	b570      	push	{r4, r5, r6, lr}
 8003114:	681d      	ldr	r5, [r3, #0]
 8003116:	4606      	mov	r6, r0
 8003118:	460c      	mov	r4, r1
 800311a:	b125      	cbz	r5, 8003126 <__swsetup_r+0x16>
 800311c:	69ab      	ldr	r3, [r5, #24]
 800311e:	b913      	cbnz	r3, 8003126 <__swsetup_r+0x16>
 8003120:	4628      	mov	r0, r5
 8003122:	f7ff fb93 	bl	800284c <__sinit>
 8003126:	4b2e      	ldr	r3, [pc, #184]	; (80031e0 <__swsetup_r+0xd0>)
 8003128:	429c      	cmp	r4, r3
 800312a:	d10f      	bne.n	800314c <__swsetup_r+0x3c>
 800312c:	686c      	ldr	r4, [r5, #4]
 800312e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003132:	b29a      	uxth	r2, r3
 8003134:	0715      	lsls	r5, r2, #28
 8003136:	d42c      	bmi.n	8003192 <__swsetup_r+0x82>
 8003138:	06d0      	lsls	r0, r2, #27
 800313a:	d411      	bmi.n	8003160 <__swsetup_r+0x50>
 800313c:	2209      	movs	r2, #9
 800313e:	6032      	str	r2, [r6, #0]
 8003140:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003144:	81a3      	strh	r3, [r4, #12]
 8003146:	f04f 30ff 	mov.w	r0, #4294967295
 800314a:	e03e      	b.n	80031ca <__swsetup_r+0xba>
 800314c:	4b25      	ldr	r3, [pc, #148]	; (80031e4 <__swsetup_r+0xd4>)
 800314e:	429c      	cmp	r4, r3
 8003150:	d101      	bne.n	8003156 <__swsetup_r+0x46>
 8003152:	68ac      	ldr	r4, [r5, #8]
 8003154:	e7eb      	b.n	800312e <__swsetup_r+0x1e>
 8003156:	4b24      	ldr	r3, [pc, #144]	; (80031e8 <__swsetup_r+0xd8>)
 8003158:	429c      	cmp	r4, r3
 800315a:	bf08      	it	eq
 800315c:	68ec      	ldreq	r4, [r5, #12]
 800315e:	e7e6      	b.n	800312e <__swsetup_r+0x1e>
 8003160:	0751      	lsls	r1, r2, #29
 8003162:	d512      	bpl.n	800318a <__swsetup_r+0x7a>
 8003164:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003166:	b141      	cbz	r1, 800317a <__swsetup_r+0x6a>
 8003168:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800316c:	4299      	cmp	r1, r3
 800316e:	d002      	beq.n	8003176 <__swsetup_r+0x66>
 8003170:	4630      	mov	r0, r6
 8003172:	f000 f981 	bl	8003478 <_free_r>
 8003176:	2300      	movs	r3, #0
 8003178:	6363      	str	r3, [r4, #52]	; 0x34
 800317a:	89a3      	ldrh	r3, [r4, #12]
 800317c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	2300      	movs	r3, #0
 8003184:	6063      	str	r3, [r4, #4]
 8003186:	6923      	ldr	r3, [r4, #16]
 8003188:	6023      	str	r3, [r4, #0]
 800318a:	89a3      	ldrh	r3, [r4, #12]
 800318c:	f043 0308 	orr.w	r3, r3, #8
 8003190:	81a3      	strh	r3, [r4, #12]
 8003192:	6923      	ldr	r3, [r4, #16]
 8003194:	b94b      	cbnz	r3, 80031aa <__swsetup_r+0x9a>
 8003196:	89a3      	ldrh	r3, [r4, #12]
 8003198:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a0:	d003      	beq.n	80031aa <__swsetup_r+0x9a>
 80031a2:	4621      	mov	r1, r4
 80031a4:	4630      	mov	r0, r6
 80031a6:	f000 f917 	bl	80033d8 <__smakebuf_r>
 80031aa:	89a2      	ldrh	r2, [r4, #12]
 80031ac:	f012 0301 	ands.w	r3, r2, #1
 80031b0:	d00c      	beq.n	80031cc <__swsetup_r+0xbc>
 80031b2:	2300      	movs	r3, #0
 80031b4:	60a3      	str	r3, [r4, #8]
 80031b6:	6963      	ldr	r3, [r4, #20]
 80031b8:	425b      	negs	r3, r3
 80031ba:	61a3      	str	r3, [r4, #24]
 80031bc:	6923      	ldr	r3, [r4, #16]
 80031be:	b953      	cbnz	r3, 80031d6 <__swsetup_r+0xc6>
 80031c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80031c4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80031c8:	d1ba      	bne.n	8003140 <__swsetup_r+0x30>
 80031ca:	bd70      	pop	{r4, r5, r6, pc}
 80031cc:	0792      	lsls	r2, r2, #30
 80031ce:	bf58      	it	pl
 80031d0:	6963      	ldrpl	r3, [r4, #20]
 80031d2:	60a3      	str	r3, [r4, #8]
 80031d4:	e7f2      	b.n	80031bc <__swsetup_r+0xac>
 80031d6:	2000      	movs	r0, #0
 80031d8:	e7f7      	b.n	80031ca <__swsetup_r+0xba>
 80031da:	bf00      	nop
 80031dc:	2000000c 	.word	0x2000000c
 80031e0:	080036d4 	.word	0x080036d4
 80031e4:	080036f4 	.word	0x080036f4
 80031e8:	080036b4 	.word	0x080036b4

080031ec <_close_r>:
 80031ec:	b538      	push	{r3, r4, r5, lr}
 80031ee:	2300      	movs	r3, #0
 80031f0:	4c05      	ldr	r4, [pc, #20]	; (8003208 <_close_r+0x1c>)
 80031f2:	4605      	mov	r5, r0
 80031f4:	4608      	mov	r0, r1
 80031f6:	6023      	str	r3, [r4, #0]
 80031f8:	f7fd f90d 	bl	8000416 <_close>
 80031fc:	1c43      	adds	r3, r0, #1
 80031fe:	d102      	bne.n	8003206 <_close_r+0x1a>
 8003200:	6823      	ldr	r3, [r4, #0]
 8003202:	b103      	cbz	r3, 8003206 <_close_r+0x1a>
 8003204:	602b      	str	r3, [r5, #0]
 8003206:	bd38      	pop	{r3, r4, r5, pc}
 8003208:	200000e8 	.word	0x200000e8

0800320c <__sflush_r>:
 800320c:	898a      	ldrh	r2, [r1, #12]
 800320e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003212:	4605      	mov	r5, r0
 8003214:	0710      	lsls	r0, r2, #28
 8003216:	460c      	mov	r4, r1
 8003218:	d458      	bmi.n	80032cc <__sflush_r+0xc0>
 800321a:	684b      	ldr	r3, [r1, #4]
 800321c:	2b00      	cmp	r3, #0
 800321e:	dc05      	bgt.n	800322c <__sflush_r+0x20>
 8003220:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003222:	2b00      	cmp	r3, #0
 8003224:	dc02      	bgt.n	800322c <__sflush_r+0x20>
 8003226:	2000      	movs	r0, #0
 8003228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800322c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800322e:	2e00      	cmp	r6, #0
 8003230:	d0f9      	beq.n	8003226 <__sflush_r+0x1a>
 8003232:	2300      	movs	r3, #0
 8003234:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003238:	682f      	ldr	r7, [r5, #0]
 800323a:	6a21      	ldr	r1, [r4, #32]
 800323c:	602b      	str	r3, [r5, #0]
 800323e:	d032      	beq.n	80032a6 <__sflush_r+0x9a>
 8003240:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003242:	89a3      	ldrh	r3, [r4, #12]
 8003244:	075a      	lsls	r2, r3, #29
 8003246:	d505      	bpl.n	8003254 <__sflush_r+0x48>
 8003248:	6863      	ldr	r3, [r4, #4]
 800324a:	1ac0      	subs	r0, r0, r3
 800324c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800324e:	b10b      	cbz	r3, 8003254 <__sflush_r+0x48>
 8003250:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003252:	1ac0      	subs	r0, r0, r3
 8003254:	2300      	movs	r3, #0
 8003256:	4602      	mov	r2, r0
 8003258:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800325a:	6a21      	ldr	r1, [r4, #32]
 800325c:	4628      	mov	r0, r5
 800325e:	47b0      	blx	r6
 8003260:	1c43      	adds	r3, r0, #1
 8003262:	89a3      	ldrh	r3, [r4, #12]
 8003264:	d106      	bne.n	8003274 <__sflush_r+0x68>
 8003266:	6829      	ldr	r1, [r5, #0]
 8003268:	291d      	cmp	r1, #29
 800326a:	d848      	bhi.n	80032fe <__sflush_r+0xf2>
 800326c:	4a29      	ldr	r2, [pc, #164]	; (8003314 <__sflush_r+0x108>)
 800326e:	40ca      	lsrs	r2, r1
 8003270:	07d6      	lsls	r6, r2, #31
 8003272:	d544      	bpl.n	80032fe <__sflush_r+0xf2>
 8003274:	2200      	movs	r2, #0
 8003276:	6062      	str	r2, [r4, #4]
 8003278:	6922      	ldr	r2, [r4, #16]
 800327a:	04d9      	lsls	r1, r3, #19
 800327c:	6022      	str	r2, [r4, #0]
 800327e:	d504      	bpl.n	800328a <__sflush_r+0x7e>
 8003280:	1c42      	adds	r2, r0, #1
 8003282:	d101      	bne.n	8003288 <__sflush_r+0x7c>
 8003284:	682b      	ldr	r3, [r5, #0]
 8003286:	b903      	cbnz	r3, 800328a <__sflush_r+0x7e>
 8003288:	6560      	str	r0, [r4, #84]	; 0x54
 800328a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800328c:	602f      	str	r7, [r5, #0]
 800328e:	2900      	cmp	r1, #0
 8003290:	d0c9      	beq.n	8003226 <__sflush_r+0x1a>
 8003292:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003296:	4299      	cmp	r1, r3
 8003298:	d002      	beq.n	80032a0 <__sflush_r+0x94>
 800329a:	4628      	mov	r0, r5
 800329c:	f000 f8ec 	bl	8003478 <_free_r>
 80032a0:	2000      	movs	r0, #0
 80032a2:	6360      	str	r0, [r4, #52]	; 0x34
 80032a4:	e7c0      	b.n	8003228 <__sflush_r+0x1c>
 80032a6:	2301      	movs	r3, #1
 80032a8:	4628      	mov	r0, r5
 80032aa:	47b0      	blx	r6
 80032ac:	1c41      	adds	r1, r0, #1
 80032ae:	d1c8      	bne.n	8003242 <__sflush_r+0x36>
 80032b0:	682b      	ldr	r3, [r5, #0]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d0c5      	beq.n	8003242 <__sflush_r+0x36>
 80032b6:	2b1d      	cmp	r3, #29
 80032b8:	d001      	beq.n	80032be <__sflush_r+0xb2>
 80032ba:	2b16      	cmp	r3, #22
 80032bc:	d101      	bne.n	80032c2 <__sflush_r+0xb6>
 80032be:	602f      	str	r7, [r5, #0]
 80032c0:	e7b1      	b.n	8003226 <__sflush_r+0x1a>
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	e7ad      	b.n	8003228 <__sflush_r+0x1c>
 80032cc:	690f      	ldr	r7, [r1, #16]
 80032ce:	2f00      	cmp	r7, #0
 80032d0:	d0a9      	beq.n	8003226 <__sflush_r+0x1a>
 80032d2:	0793      	lsls	r3, r2, #30
 80032d4:	bf18      	it	ne
 80032d6:	2300      	movne	r3, #0
 80032d8:	680e      	ldr	r6, [r1, #0]
 80032da:	bf08      	it	eq
 80032dc:	694b      	ldreq	r3, [r1, #20]
 80032de:	eba6 0807 	sub.w	r8, r6, r7
 80032e2:	600f      	str	r7, [r1, #0]
 80032e4:	608b      	str	r3, [r1, #8]
 80032e6:	f1b8 0f00 	cmp.w	r8, #0
 80032ea:	dd9c      	ble.n	8003226 <__sflush_r+0x1a>
 80032ec:	4643      	mov	r3, r8
 80032ee:	463a      	mov	r2, r7
 80032f0:	6a21      	ldr	r1, [r4, #32]
 80032f2:	4628      	mov	r0, r5
 80032f4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80032f6:	47b0      	blx	r6
 80032f8:	2800      	cmp	r0, #0
 80032fa:	dc06      	bgt.n	800330a <__sflush_r+0xfe>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003302:	81a3      	strh	r3, [r4, #12]
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	e78e      	b.n	8003228 <__sflush_r+0x1c>
 800330a:	4407      	add	r7, r0
 800330c:	eba8 0800 	sub.w	r8, r8, r0
 8003310:	e7e9      	b.n	80032e6 <__sflush_r+0xda>
 8003312:	bf00      	nop
 8003314:	20400001 	.word	0x20400001

08003318 <_fflush_r>:
 8003318:	b538      	push	{r3, r4, r5, lr}
 800331a:	690b      	ldr	r3, [r1, #16]
 800331c:	4605      	mov	r5, r0
 800331e:	460c      	mov	r4, r1
 8003320:	b1db      	cbz	r3, 800335a <_fflush_r+0x42>
 8003322:	b118      	cbz	r0, 800332c <_fflush_r+0x14>
 8003324:	6983      	ldr	r3, [r0, #24]
 8003326:	b90b      	cbnz	r3, 800332c <_fflush_r+0x14>
 8003328:	f7ff fa90 	bl	800284c <__sinit>
 800332c:	4b0c      	ldr	r3, [pc, #48]	; (8003360 <_fflush_r+0x48>)
 800332e:	429c      	cmp	r4, r3
 8003330:	d109      	bne.n	8003346 <_fflush_r+0x2e>
 8003332:	686c      	ldr	r4, [r5, #4]
 8003334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003338:	b17b      	cbz	r3, 800335a <_fflush_r+0x42>
 800333a:	4621      	mov	r1, r4
 800333c:	4628      	mov	r0, r5
 800333e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003342:	f7ff bf63 	b.w	800320c <__sflush_r>
 8003346:	4b07      	ldr	r3, [pc, #28]	; (8003364 <_fflush_r+0x4c>)
 8003348:	429c      	cmp	r4, r3
 800334a:	d101      	bne.n	8003350 <_fflush_r+0x38>
 800334c:	68ac      	ldr	r4, [r5, #8]
 800334e:	e7f1      	b.n	8003334 <_fflush_r+0x1c>
 8003350:	4b05      	ldr	r3, [pc, #20]	; (8003368 <_fflush_r+0x50>)
 8003352:	429c      	cmp	r4, r3
 8003354:	bf08      	it	eq
 8003356:	68ec      	ldreq	r4, [r5, #12]
 8003358:	e7ec      	b.n	8003334 <_fflush_r+0x1c>
 800335a:	2000      	movs	r0, #0
 800335c:	bd38      	pop	{r3, r4, r5, pc}
 800335e:	bf00      	nop
 8003360:	080036d4 	.word	0x080036d4
 8003364:	080036f4 	.word	0x080036f4
 8003368:	080036b4 	.word	0x080036b4

0800336c <_lseek_r>:
 800336c:	b538      	push	{r3, r4, r5, lr}
 800336e:	4605      	mov	r5, r0
 8003370:	4608      	mov	r0, r1
 8003372:	4611      	mov	r1, r2
 8003374:	2200      	movs	r2, #0
 8003376:	4c05      	ldr	r4, [pc, #20]	; (800338c <_lseek_r+0x20>)
 8003378:	6022      	str	r2, [r4, #0]
 800337a:	461a      	mov	r2, r3
 800337c:	f7fd f86f 	bl	800045e <_lseek>
 8003380:	1c43      	adds	r3, r0, #1
 8003382:	d102      	bne.n	800338a <_lseek_r+0x1e>
 8003384:	6823      	ldr	r3, [r4, #0]
 8003386:	b103      	cbz	r3, 800338a <_lseek_r+0x1e>
 8003388:	602b      	str	r3, [r5, #0]
 800338a:	bd38      	pop	{r3, r4, r5, pc}
 800338c:	200000e8 	.word	0x200000e8

08003390 <__swhatbuf_r>:
 8003390:	b570      	push	{r4, r5, r6, lr}
 8003392:	460e      	mov	r6, r1
 8003394:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003398:	b096      	sub	sp, #88	; 0x58
 800339a:	2900      	cmp	r1, #0
 800339c:	4614      	mov	r4, r2
 800339e:	461d      	mov	r5, r3
 80033a0:	da07      	bge.n	80033b2 <__swhatbuf_r+0x22>
 80033a2:	2300      	movs	r3, #0
 80033a4:	602b      	str	r3, [r5, #0]
 80033a6:	89b3      	ldrh	r3, [r6, #12]
 80033a8:	061a      	lsls	r2, r3, #24
 80033aa:	d410      	bmi.n	80033ce <__swhatbuf_r+0x3e>
 80033ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033b0:	e00e      	b.n	80033d0 <__swhatbuf_r+0x40>
 80033b2:	466a      	mov	r2, sp
 80033b4:	f000 f8be 	bl	8003534 <_fstat_r>
 80033b8:	2800      	cmp	r0, #0
 80033ba:	dbf2      	blt.n	80033a2 <__swhatbuf_r+0x12>
 80033bc:	9a01      	ldr	r2, [sp, #4]
 80033be:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80033c2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80033c6:	425a      	negs	r2, r3
 80033c8:	415a      	adcs	r2, r3
 80033ca:	602a      	str	r2, [r5, #0]
 80033cc:	e7ee      	b.n	80033ac <__swhatbuf_r+0x1c>
 80033ce:	2340      	movs	r3, #64	; 0x40
 80033d0:	2000      	movs	r0, #0
 80033d2:	6023      	str	r3, [r4, #0]
 80033d4:	b016      	add	sp, #88	; 0x58
 80033d6:	bd70      	pop	{r4, r5, r6, pc}

080033d8 <__smakebuf_r>:
 80033d8:	898b      	ldrh	r3, [r1, #12]
 80033da:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80033dc:	079d      	lsls	r5, r3, #30
 80033de:	4606      	mov	r6, r0
 80033e0:	460c      	mov	r4, r1
 80033e2:	d507      	bpl.n	80033f4 <__smakebuf_r+0x1c>
 80033e4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80033e8:	6023      	str	r3, [r4, #0]
 80033ea:	6123      	str	r3, [r4, #16]
 80033ec:	2301      	movs	r3, #1
 80033ee:	6163      	str	r3, [r4, #20]
 80033f0:	b002      	add	sp, #8
 80033f2:	bd70      	pop	{r4, r5, r6, pc}
 80033f4:	ab01      	add	r3, sp, #4
 80033f6:	466a      	mov	r2, sp
 80033f8:	f7ff ffca 	bl	8003390 <__swhatbuf_r>
 80033fc:	9900      	ldr	r1, [sp, #0]
 80033fe:	4605      	mov	r5, r0
 8003400:	4630      	mov	r0, r6
 8003402:	f7ff faad 	bl	8002960 <_malloc_r>
 8003406:	b948      	cbnz	r0, 800341c <__smakebuf_r+0x44>
 8003408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800340c:	059a      	lsls	r2, r3, #22
 800340e:	d4ef      	bmi.n	80033f0 <__smakebuf_r+0x18>
 8003410:	f023 0303 	bic.w	r3, r3, #3
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	81a3      	strh	r3, [r4, #12]
 800341a:	e7e3      	b.n	80033e4 <__smakebuf_r+0xc>
 800341c:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <__smakebuf_r+0x7c>)
 800341e:	62b3      	str	r3, [r6, #40]	; 0x28
 8003420:	89a3      	ldrh	r3, [r4, #12]
 8003422:	6020      	str	r0, [r4, #0]
 8003424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003428:	81a3      	strh	r3, [r4, #12]
 800342a:	9b00      	ldr	r3, [sp, #0]
 800342c:	6120      	str	r0, [r4, #16]
 800342e:	6163      	str	r3, [r4, #20]
 8003430:	9b01      	ldr	r3, [sp, #4]
 8003432:	b15b      	cbz	r3, 800344c <__smakebuf_r+0x74>
 8003434:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003438:	4630      	mov	r0, r6
 800343a:	f000 f88d 	bl	8003558 <_isatty_r>
 800343e:	b128      	cbz	r0, 800344c <__smakebuf_r+0x74>
 8003440:	89a3      	ldrh	r3, [r4, #12]
 8003442:	f023 0303 	bic.w	r3, r3, #3
 8003446:	f043 0301 	orr.w	r3, r3, #1
 800344a:	81a3      	strh	r3, [r4, #12]
 800344c:	89a3      	ldrh	r3, [r4, #12]
 800344e:	431d      	orrs	r5, r3
 8003450:	81a5      	strh	r5, [r4, #12]
 8003452:	e7cd      	b.n	80033f0 <__smakebuf_r+0x18>
 8003454:	08002815 	.word	0x08002815

08003458 <memchr>:
 8003458:	b510      	push	{r4, lr}
 800345a:	b2c9      	uxtb	r1, r1
 800345c:	4402      	add	r2, r0
 800345e:	4290      	cmp	r0, r2
 8003460:	4603      	mov	r3, r0
 8003462:	d101      	bne.n	8003468 <memchr+0x10>
 8003464:	2300      	movs	r3, #0
 8003466:	e003      	b.n	8003470 <memchr+0x18>
 8003468:	781c      	ldrb	r4, [r3, #0]
 800346a:	3001      	adds	r0, #1
 800346c:	428c      	cmp	r4, r1
 800346e:	d1f6      	bne.n	800345e <memchr+0x6>
 8003470:	4618      	mov	r0, r3
 8003472:	bd10      	pop	{r4, pc}

08003474 <__malloc_lock>:
 8003474:	4770      	bx	lr

08003476 <__malloc_unlock>:
 8003476:	4770      	bx	lr

08003478 <_free_r>:
 8003478:	b538      	push	{r3, r4, r5, lr}
 800347a:	4605      	mov	r5, r0
 800347c:	2900      	cmp	r1, #0
 800347e:	d043      	beq.n	8003508 <_free_r+0x90>
 8003480:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003484:	1f0c      	subs	r4, r1, #4
 8003486:	2b00      	cmp	r3, #0
 8003488:	bfb8      	it	lt
 800348a:	18e4      	addlt	r4, r4, r3
 800348c:	f7ff fff2 	bl	8003474 <__malloc_lock>
 8003490:	4a1e      	ldr	r2, [pc, #120]	; (800350c <_free_r+0x94>)
 8003492:	6813      	ldr	r3, [r2, #0]
 8003494:	4610      	mov	r0, r2
 8003496:	b933      	cbnz	r3, 80034a6 <_free_r+0x2e>
 8003498:	6063      	str	r3, [r4, #4]
 800349a:	6014      	str	r4, [r2, #0]
 800349c:	4628      	mov	r0, r5
 800349e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034a2:	f7ff bfe8 	b.w	8003476 <__malloc_unlock>
 80034a6:	42a3      	cmp	r3, r4
 80034a8:	d90b      	bls.n	80034c2 <_free_r+0x4a>
 80034aa:	6821      	ldr	r1, [r4, #0]
 80034ac:	1862      	adds	r2, r4, r1
 80034ae:	4293      	cmp	r3, r2
 80034b0:	bf01      	itttt	eq
 80034b2:	681a      	ldreq	r2, [r3, #0]
 80034b4:	685b      	ldreq	r3, [r3, #4]
 80034b6:	1852      	addeq	r2, r2, r1
 80034b8:	6022      	streq	r2, [r4, #0]
 80034ba:	6063      	str	r3, [r4, #4]
 80034bc:	6004      	str	r4, [r0, #0]
 80034be:	e7ed      	b.n	800349c <_free_r+0x24>
 80034c0:	4613      	mov	r3, r2
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	b10a      	cbz	r2, 80034ca <_free_r+0x52>
 80034c6:	42a2      	cmp	r2, r4
 80034c8:	d9fa      	bls.n	80034c0 <_free_r+0x48>
 80034ca:	6819      	ldr	r1, [r3, #0]
 80034cc:	1858      	adds	r0, r3, r1
 80034ce:	42a0      	cmp	r0, r4
 80034d0:	d10b      	bne.n	80034ea <_free_r+0x72>
 80034d2:	6820      	ldr	r0, [r4, #0]
 80034d4:	4401      	add	r1, r0
 80034d6:	1858      	adds	r0, r3, r1
 80034d8:	4282      	cmp	r2, r0
 80034da:	6019      	str	r1, [r3, #0]
 80034dc:	d1de      	bne.n	800349c <_free_r+0x24>
 80034de:	6810      	ldr	r0, [r2, #0]
 80034e0:	6852      	ldr	r2, [r2, #4]
 80034e2:	4401      	add	r1, r0
 80034e4:	6019      	str	r1, [r3, #0]
 80034e6:	605a      	str	r2, [r3, #4]
 80034e8:	e7d8      	b.n	800349c <_free_r+0x24>
 80034ea:	d902      	bls.n	80034f2 <_free_r+0x7a>
 80034ec:	230c      	movs	r3, #12
 80034ee:	602b      	str	r3, [r5, #0]
 80034f0:	e7d4      	b.n	800349c <_free_r+0x24>
 80034f2:	6820      	ldr	r0, [r4, #0]
 80034f4:	1821      	adds	r1, r4, r0
 80034f6:	428a      	cmp	r2, r1
 80034f8:	bf01      	itttt	eq
 80034fa:	6811      	ldreq	r1, [r2, #0]
 80034fc:	6852      	ldreq	r2, [r2, #4]
 80034fe:	1809      	addeq	r1, r1, r0
 8003500:	6021      	streq	r1, [r4, #0]
 8003502:	6062      	str	r2, [r4, #4]
 8003504:	605c      	str	r4, [r3, #4]
 8003506:	e7c9      	b.n	800349c <_free_r+0x24>
 8003508:	bd38      	pop	{r3, r4, r5, pc}
 800350a:	bf00      	nop
 800350c:	20000098 	.word	0x20000098

08003510 <_read_r>:
 8003510:	b538      	push	{r3, r4, r5, lr}
 8003512:	4605      	mov	r5, r0
 8003514:	4608      	mov	r0, r1
 8003516:	4611      	mov	r1, r2
 8003518:	2200      	movs	r2, #0
 800351a:	4c05      	ldr	r4, [pc, #20]	; (8003530 <_read_r+0x20>)
 800351c:	6022      	str	r2, [r4, #0]
 800351e:	461a      	mov	r2, r3
 8003520:	f7fc ff40 	bl	80003a4 <_read>
 8003524:	1c43      	adds	r3, r0, #1
 8003526:	d102      	bne.n	800352e <_read_r+0x1e>
 8003528:	6823      	ldr	r3, [r4, #0]
 800352a:	b103      	cbz	r3, 800352e <_read_r+0x1e>
 800352c:	602b      	str	r3, [r5, #0]
 800352e:	bd38      	pop	{r3, r4, r5, pc}
 8003530:	200000e8 	.word	0x200000e8

08003534 <_fstat_r>:
 8003534:	b538      	push	{r3, r4, r5, lr}
 8003536:	2300      	movs	r3, #0
 8003538:	4c06      	ldr	r4, [pc, #24]	; (8003554 <_fstat_r+0x20>)
 800353a:	4605      	mov	r5, r0
 800353c:	4608      	mov	r0, r1
 800353e:	4611      	mov	r1, r2
 8003540:	6023      	str	r3, [r4, #0]
 8003542:	f7fc ff73 	bl	800042c <_fstat>
 8003546:	1c43      	adds	r3, r0, #1
 8003548:	d102      	bne.n	8003550 <_fstat_r+0x1c>
 800354a:	6823      	ldr	r3, [r4, #0]
 800354c:	b103      	cbz	r3, 8003550 <_fstat_r+0x1c>
 800354e:	602b      	str	r3, [r5, #0]
 8003550:	bd38      	pop	{r3, r4, r5, pc}
 8003552:	bf00      	nop
 8003554:	200000e8 	.word	0x200000e8

08003558 <_isatty_r>:
 8003558:	b538      	push	{r3, r4, r5, lr}
 800355a:	2300      	movs	r3, #0
 800355c:	4c05      	ldr	r4, [pc, #20]	; (8003574 <_isatty_r+0x1c>)
 800355e:	4605      	mov	r5, r0
 8003560:	4608      	mov	r0, r1
 8003562:	6023      	str	r3, [r4, #0]
 8003564:	f7fc ff71 	bl	800044a <_isatty>
 8003568:	1c43      	adds	r3, r0, #1
 800356a:	d102      	bne.n	8003572 <_isatty_r+0x1a>
 800356c:	6823      	ldr	r3, [r4, #0]
 800356e:	b103      	cbz	r3, 8003572 <_isatty_r+0x1a>
 8003570:	602b      	str	r3, [r5, #0]
 8003572:	bd38      	pop	{r3, r4, r5, pc}
 8003574:	200000e8 	.word	0x200000e8

08003578 <_init>:
 8003578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800357a:	bf00      	nop
 800357c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800357e:	bc08      	pop	{r3}
 8003580:	469e      	mov	lr, r3
 8003582:	4770      	bx	lr

08003584 <_fini>:
 8003584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003586:	bf00      	nop
 8003588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800358a:	bc08      	pop	{r3}
 800358c:	469e      	mov	lr, r3
 800358e:	4770      	bx	lr


SSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c74  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000258  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd8  08004fd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08004fd8  08004fd8  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fd8  08004fd8  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fd8  08004fd8  00014fd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fdc  08004fdc  00014fdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08004fe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  20000070  08005050  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  08005050  000201ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ead0  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000281f  00000000  00000000  0002eb69  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e08  00000000  00000000  00031388  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c80  00000000  00000000  00032190  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   000092d5  00000000  00000000  00032e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00003d32  00000000  00000000  0003c0e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      0000007b  00000000  00000000  0003fe17  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00003d70  00000000  00000000  0003fe94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d68 	.word	0x08004d68

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	08004d68 	.word	0x08004d68

0800014c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b086      	sub	sp, #24
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0308 	add.w	r3, r7, #8
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000160:	4b22      	ldr	r3, [pc, #136]	; (80001ec <MX_GPIO_Init+0xa0>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a21      	ldr	r2, [pc, #132]	; (80001ec <MX_GPIO_Init+0xa0>)
 8000166:	f043 0304 	orr.w	r3, r3, #4
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b1f      	ldr	r3, [pc, #124]	; (80001ec <MX_GPIO_Init+0xa0>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0304 	and.w	r3, r3, #4
 8000174:	607b      	str	r3, [r7, #4]
 8000176:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000178:	4b1c      	ldr	r3, [pc, #112]	; (80001ec <MX_GPIO_Init+0xa0>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a1b      	ldr	r2, [pc, #108]	; (80001ec <MX_GPIO_Init+0xa0>)
 800017e:	f043 0308 	orr.w	r3, r3, #8
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b19      	ldr	r3, [pc, #100]	; (80001ec <MX_GPIO_Init+0xa0>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0308 	and.w	r3, r3, #8
 800018c:	603b      	str	r3, [r7, #0]
 800018e:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000190:	2200      	movs	r2, #0
 8000192:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000196:	4816      	ldr	r0, [pc, #88]	; (80001f0 <MX_GPIO_Init+0xa4>)
 8000198:	f001 f802 	bl	80011a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 800019c:	2200      	movs	r2, #0
 800019e:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80001a2:	4814      	ldr	r0, [pc, #80]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001a4:	f000 fffc 	bl	80011a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001ac:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001ae:	2301      	movs	r3, #1
 80001b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001b2:	2300      	movs	r3, #0
 80001b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001b6:	2302      	movs	r3, #2
 80001b8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001ba:	f107 0308 	add.w	r3, r7, #8
 80001be:	4619      	mov	r1, r3
 80001c0:	480b      	ldr	r0, [pc, #44]	; (80001f0 <MX_GPIO_Init+0xa4>)
 80001c2:	f000 fdb3 	bl	8000d2c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001c6:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80001ca:	60bb      	str	r3, [r7, #8]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001cc:	2301      	movs	r3, #1
 80001ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001d0:	2300      	movs	r3, #0
 80001d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001d4:	2302      	movs	r3, #2
 80001d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001d8:	f107 0308 	add.w	r3, r7, #8
 80001dc:	4619      	mov	r1, r3
 80001de:	4805      	ldr	r0, [pc, #20]	; (80001f4 <MX_GPIO_Init+0xa8>)
 80001e0:	f000 fda4 	bl	8000d2c <HAL_GPIO_Init>

}
 80001e4:	bf00      	nop
 80001e6:	3718      	adds	r7, #24
 80001e8:	46bd      	mov	sp, r7
 80001ea:	bd80      	pop	{r7, pc}
 80001ec:	40021000 	.word	0x40021000
 80001f0:	40010800 	.word	0x40010800
 80001f4:	40010c00 	.word	0x40010c00

080001f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001fc:	f000 fb94 	bl	8000928 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000200:	f000 f80d 	bl	800021e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000204:	f7ff ffa2 	bl	800014c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000208:	f000 f98a 	bl	8000520 <MX_TIM2_Init>
  MX_TIM3_Init();
 800020c:	f000 fa02 	bl	8000614 <MX_TIM3_Init>
  MX_USART1_UART_Init();
 8000210:	f000 fae6 	bl	80007e0 <MX_USART1_UART_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  scheduler_init();
 8000214:	f003 fe0a 	bl	8003e2c <scheduler_init>
  scheduler_main();
 8000218:	f003 fe1a 	bl	8003e50 <scheduler_main>

  while (1)
 800021c:	e7fe      	b.n	800021c <main+0x24>

0800021e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800021e:	b580      	push	{r7, lr}
 8000220:	b090      	sub	sp, #64	; 0x40
 8000222:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000224:	f107 0318 	add.w	r3, r7, #24
 8000228:	2228      	movs	r2, #40	; 0x28
 800022a:	2100      	movs	r1, #0
 800022c:	4618      	mov	r0, r3
 800022e:	f003 fea5 	bl	8003f7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	2200      	movs	r2, #0
 8000236:	601a      	str	r2, [r3, #0]
 8000238:	605a      	str	r2, [r3, #4]
 800023a:	609a      	str	r2, [r3, #8]
 800023c:	60da      	str	r2, [r3, #12]
 800023e:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000240:	2302      	movs	r3, #2
 8000242:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000244:	2301      	movs	r3, #1
 8000246:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000248:	2310      	movs	r3, #16
 800024a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800024c:	2302      	movs	r3, #2
 800024e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000250:	2300      	movs	r3, #0
 8000252:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8000254:	f44f 1320 	mov.w	r3, #2621440	; 0x280000
 8000258:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800025a:	f107 0318 	add.w	r3, r7, #24
 800025e:	4618      	mov	r0, r3
 8000260:	f000 ffd0 	bl	8001204 <HAL_RCC_OscConfig>
 8000264:	4603      	mov	r3, r0
 8000266:	2b00      	cmp	r3, #0
 8000268:	d001      	beq.n	800026e <SystemClock_Config+0x50>
  {
    Error_Handler();
 800026a:	f000 f819 	bl	80002a0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800026e:	230f      	movs	r3, #15
 8000270:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000272:	2302      	movs	r3, #2
 8000274:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800027a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800027e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000280:	2300      	movs	r3, #0
 8000282:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2101      	movs	r1, #1
 8000288:	4618      	mov	r0, r3
 800028a:	f001 fb2b 	bl	80018e4 <HAL_RCC_ClockConfig>
 800028e:	4603      	mov	r3, r0
 8000290:	2b00      	cmp	r3, #0
 8000292:	d001      	beq.n	8000298 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000294:	f000 f804 	bl	80002a0 <Error_Handler>
  }
}
 8000298:	bf00      	nop
 800029a:	3740      	adds	r7, #64	; 0x40
 800029c:	46bd      	mov	sp, r7
 800029e:	bd80      	pop	{r7, pc}

080002a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002a0:	b480      	push	{r7}
 80002a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	bc80      	pop	{r7}
 80002aa:	4770      	bx	lr

080002ac <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	6078      	str	r0, [r7, #4]
 80002b4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80002b6:	bf00      	nop
 80002b8:	370c      	adds	r7, #12
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002c6:	4b15      	ldr	r3, [pc, #84]	; (800031c <HAL_MspInit+0x5c>)
 80002c8:	699b      	ldr	r3, [r3, #24]
 80002ca:	4a14      	ldr	r2, [pc, #80]	; (800031c <HAL_MspInit+0x5c>)
 80002cc:	f043 0301 	orr.w	r3, r3, #1
 80002d0:	6193      	str	r3, [r2, #24]
 80002d2:	4b12      	ldr	r3, [pc, #72]	; (800031c <HAL_MspInit+0x5c>)
 80002d4:	699b      	ldr	r3, [r3, #24]
 80002d6:	f003 0301 	and.w	r3, r3, #1
 80002da:	60bb      	str	r3, [r7, #8]
 80002dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002de:	4b0f      	ldr	r3, [pc, #60]	; (800031c <HAL_MspInit+0x5c>)
 80002e0:	69db      	ldr	r3, [r3, #28]
 80002e2:	4a0e      	ldr	r2, [pc, #56]	; (800031c <HAL_MspInit+0x5c>)
 80002e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002e8:	61d3      	str	r3, [r2, #28]
 80002ea:	4b0c      	ldr	r3, [pc, #48]	; (800031c <HAL_MspInit+0x5c>)
 80002ec:	69db      	ldr	r3, [r3, #28]
 80002ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80002f2:	607b      	str	r3, [r7, #4]
 80002f4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <HAL_MspInit+0x60>)
 80002f8:	685b      	ldr	r3, [r3, #4]
 80002fa:	60fb      	str	r3, [r7, #12]
 80002fc:	68fb      	ldr	r3, [r7, #12]
 80002fe:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000302:	60fb      	str	r3, [r7, #12]
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800030a:	60fb      	str	r3, [r7, #12]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <HAL_MspInit+0x60>)
 800030e:	68fb      	ldr	r3, [r7, #12]
 8000310:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000312:	bf00      	nop
 8000314:	3714      	adds	r7, #20
 8000316:	46bd      	mov	sp, r7
 8000318:	bc80      	pop	{r7}
 800031a:	4770      	bx	lr
 800031c:	40021000 	.word	0x40021000
 8000320:	40010000 	.word	0x40010000

08000324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr

08000330 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000330:	b480      	push	{r7}
 8000332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000334:	e7fe      	b.n	8000334 <HardFault_Handler+0x4>

08000336 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000336:	b480      	push	{r7}
 8000338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033a:	e7fe      	b.n	800033a <MemManage_Handler+0x4>

0800033c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033c:	b480      	push	{r7}
 800033e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000340:	e7fe      	b.n	8000340 <BusFault_Handler+0x4>

08000342 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000342:	b480      	push	{r7}
 8000344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000346:	e7fe      	b.n	8000346 <UsageFault_Handler+0x4>

08000348 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800034c:	bf00      	nop
 800034e:	46bd      	mov	sp, r7
 8000350:	bc80      	pop	{r7}
 8000352:	4770      	bx	lr

08000354 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000358:	bf00      	nop
 800035a:	46bd      	mov	sp, r7
 800035c:	bc80      	pop	{r7}
 800035e:	4770      	bx	lr

08000360 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	scheduler_ei_tickUp_ISR();
 8000370:	f003 fdcc 	bl	8003f0c <scheduler_ei_tickUp_ISR>
  /* USER CODE END SysTick_IRQn 0 */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000374:	bf00      	nop
 8000376:	bd80      	pop	{r7, pc}

08000378 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000378:	b580      	push	{r7, lr}
 800037a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800037c:	4802      	ldr	r0, [pc, #8]	; (8000388 <USART1_IRQHandler+0x10>)
 800037e:	f002 fed5 	bl	800312c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000382:	bf00      	nop
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	2000012c 	.word	0x2000012c

0800038c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800038c:	b580      	push	{r7, lr}
 800038e:	b086      	sub	sp, #24
 8000390:	af00      	add	r7, sp, #0
 8000392:	60f8      	str	r0, [r7, #12]
 8000394:	60b9      	str	r1, [r7, #8]
 8000396:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000398:	2300      	movs	r3, #0
 800039a:	617b      	str	r3, [r7, #20]
 800039c:	e00a      	b.n	80003b4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800039e:	f3af 8000 	nop.w
 80003a2:	4601      	mov	r1, r0
 80003a4:	68bb      	ldr	r3, [r7, #8]
 80003a6:	1c5a      	adds	r2, r3, #1
 80003a8:	60ba      	str	r2, [r7, #8]
 80003aa:	b2ca      	uxtb	r2, r1
 80003ac:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ae:	697b      	ldr	r3, [r7, #20]
 80003b0:	3301      	adds	r3, #1
 80003b2:	617b      	str	r3, [r7, #20]
 80003b4:	697a      	ldr	r2, [r7, #20]
 80003b6:	687b      	ldr	r3, [r7, #4]
 80003b8:	429a      	cmp	r2, r3
 80003ba:	dbf0      	blt.n	800039e <_read+0x12>
	}

return len;
 80003bc:	687b      	ldr	r3, [r7, #4]
}
 80003be:	4618      	mov	r0, r3
 80003c0:	3718      	adds	r7, #24
 80003c2:	46bd      	mov	sp, r7
 80003c4:	bd80      	pop	{r7, pc}

080003c6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003c6:	b580      	push	{r7, lr}
 80003c8:	b086      	sub	sp, #24
 80003ca:	af00      	add	r7, sp, #0
 80003cc:	60f8      	str	r0, [r7, #12]
 80003ce:	60b9      	str	r1, [r7, #8]
 80003d0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d2:	2300      	movs	r3, #0
 80003d4:	617b      	str	r3, [r7, #20]
 80003d6:	e009      	b.n	80003ec <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003d8:	68bb      	ldr	r3, [r7, #8]
 80003da:	1c5a      	adds	r2, r3, #1
 80003dc:	60ba      	str	r2, [r7, #8]
 80003de:	781b      	ldrb	r3, [r3, #0]
 80003e0:	4618      	mov	r0, r3
 80003e2:	f003 fcc7 	bl	8003d74 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003e6:	697b      	ldr	r3, [r7, #20]
 80003e8:	3301      	adds	r3, #1
 80003ea:	617b      	str	r3, [r7, #20]
 80003ec:	697a      	ldr	r2, [r7, #20]
 80003ee:	687b      	ldr	r3, [r7, #4]
 80003f0:	429a      	cmp	r2, r3
 80003f2:	dbf1      	blt.n	80003d8 <_write+0x12>
	}
	return len;
 80003f4:	687b      	ldr	r3, [r7, #4]
}
 80003f6:	4618      	mov	r0, r3
 80003f8:	3718      	adds	r7, #24
 80003fa:	46bd      	mov	sp, r7
 80003fc:	bd80      	pop	{r7, pc}

080003fe <_close>:

int _close(int file)
{
 80003fe:	b480      	push	{r7}
 8000400:	b083      	sub	sp, #12
 8000402:	af00      	add	r7, sp, #0
 8000404:	6078      	str	r0, [r7, #4]
	return -1;
 8000406:	f04f 33ff 	mov.w	r3, #4294967295
}
 800040a:	4618      	mov	r0, r3
 800040c:	370c      	adds	r7, #12
 800040e:	46bd      	mov	sp, r7
 8000410:	bc80      	pop	{r7}
 8000412:	4770      	bx	lr

08000414 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000414:	b480      	push	{r7}
 8000416:	b083      	sub	sp, #12
 8000418:	af00      	add	r7, sp, #0
 800041a:	6078      	str	r0, [r7, #4]
 800041c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000424:	605a      	str	r2, [r3, #4]
	return 0;
 8000426:	2300      	movs	r3, #0
}
 8000428:	4618      	mov	r0, r3
 800042a:	370c      	adds	r7, #12
 800042c:	46bd      	mov	sp, r7
 800042e:	bc80      	pop	{r7}
 8000430:	4770      	bx	lr

08000432 <_isatty>:

int _isatty(int file)
{
 8000432:	b480      	push	{r7}
 8000434:	b083      	sub	sp, #12
 8000436:	af00      	add	r7, sp, #0
 8000438:	6078      	str	r0, [r7, #4]
	return 1;
 800043a:	2301      	movs	r3, #1
}
 800043c:	4618      	mov	r0, r3
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000446:	b480      	push	{r7}
 8000448:	b085      	sub	sp, #20
 800044a:	af00      	add	r7, sp, #0
 800044c:	60f8      	str	r0, [r7, #12]
 800044e:	60b9      	str	r1, [r7, #8]
 8000450:	607a      	str	r2, [r7, #4]
	return 0;
 8000452:	2300      	movs	r3, #0
}
 8000454:	4618      	mov	r0, r3
 8000456:	3714      	adds	r7, #20
 8000458:	46bd      	mov	sp, r7
 800045a:	bc80      	pop	{r7}
 800045c:	4770      	bx	lr
	...

08000460 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b084      	sub	sp, #16
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8000468:	4b11      	ldr	r3, [pc, #68]	; (80004b0 <_sbrk+0x50>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d102      	bne.n	8000476 <_sbrk+0x16>
		heap_end = &end;
 8000470:	4b0f      	ldr	r3, [pc, #60]	; (80004b0 <_sbrk+0x50>)
 8000472:	4a10      	ldr	r2, [pc, #64]	; (80004b4 <_sbrk+0x54>)
 8000474:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8000476:	4b0e      	ldr	r3, [pc, #56]	; (80004b0 <_sbrk+0x50>)
 8000478:	681b      	ldr	r3, [r3, #0]
 800047a:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 800047c:	4b0c      	ldr	r3, [pc, #48]	; (80004b0 <_sbrk+0x50>)
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	4413      	add	r3, r2
 8000484:	466a      	mov	r2, sp
 8000486:	4293      	cmp	r3, r2
 8000488:	d907      	bls.n	800049a <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800048a:	f003 fd4d 	bl	8003f28 <__errno>
 800048e:	4602      	mov	r2, r0
 8000490:	230c      	movs	r3, #12
 8000492:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8000494:	f04f 33ff 	mov.w	r3, #4294967295
 8000498:	e006      	b.n	80004a8 <_sbrk+0x48>
	}

	heap_end += incr;
 800049a:	4b05      	ldr	r3, [pc, #20]	; (80004b0 <_sbrk+0x50>)
 800049c:	681a      	ldr	r2, [r3, #0]
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	4413      	add	r3, r2
 80004a2:	4a03      	ldr	r2, [pc, #12]	; (80004b0 <_sbrk+0x50>)
 80004a4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80004a6:	68fb      	ldr	r3, [r7, #12]
}
 80004a8:	4618      	mov	r0, r3
 80004aa:	3710      	adds	r7, #16
 80004ac:	46bd      	mov	sp, r7
 80004ae:	bd80      	pop	{r7, pc}
 80004b0:	2000008c 	.word	0x2000008c
 80004b4:	200001b0 	.word	0x200001b0

080004b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80004b8:	b480      	push	{r7}
 80004ba:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80004bc:	4b15      	ldr	r3, [pc, #84]	; (8000514 <SystemInit+0x5c>)
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	4a14      	ldr	r2, [pc, #80]	; (8000514 <SystemInit+0x5c>)
 80004c2:	f043 0301 	orr.w	r3, r3, #1
 80004c6:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 80004c8:	4b12      	ldr	r3, [pc, #72]	; (8000514 <SystemInit+0x5c>)
 80004ca:	685a      	ldr	r2, [r3, #4]
 80004cc:	4911      	ldr	r1, [pc, #68]	; (8000514 <SystemInit+0x5c>)
 80004ce:	4b12      	ldr	r3, [pc, #72]	; (8000518 <SystemInit+0x60>)
 80004d0:	4013      	ands	r3, r2
 80004d2:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80004d4:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <SystemInit+0x5c>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <SystemInit+0x5c>)
 80004da:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80004de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80004e2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <SystemInit+0x5c>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <SystemInit+0x5c>)
 80004ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80004ee:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <SystemInit+0x5c>)
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <SystemInit+0x5c>)
 80004f6:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80004fa:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80004fc:	4b05      	ldr	r3, [pc, #20]	; (8000514 <SystemInit+0x5c>)
 80004fe:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 8000502:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8000504:	4b05      	ldr	r3, [pc, #20]	; (800051c <SystemInit+0x64>)
 8000506:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800050a:	609a      	str	r2, [r3, #8]
#endif 
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	bc80      	pop	{r7}
 8000512:	4770      	bx	lr
 8000514:	40021000 	.word	0x40021000
 8000518:	f8ff0000 	.word	0xf8ff0000
 800051c:	e000ed00 	.word	0xe000ed00

08000520 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b08a      	sub	sp, #40	; 0x28
 8000524:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000526:	f107 0318 	add.w	r3, r7, #24
 800052a:	2200      	movs	r2, #0
 800052c:	601a      	str	r2, [r3, #0]
 800052e:	605a      	str	r2, [r3, #4]
 8000530:	609a      	str	r2, [r3, #8]
 8000532:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000534:	f107 0310 	add.w	r3, r7, #16
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800053e:	463b      	mov	r3, r7
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	609a      	str	r2, [r3, #8]
 8000548:	60da      	str	r2, [r3, #12]

  htim2.Instance = TIM2;
 800054a:	4b31      	ldr	r3, [pc, #196]	; (8000610 <MX_TIM2_Init+0xf0>)
 800054c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000550:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8000552:	4b2f      	ldr	r3, [pc, #188]	; (8000610 <MX_TIM2_Init+0xf0>)
 8000554:	222f      	movs	r2, #47	; 0x2f
 8000556:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000558:	4b2d      	ldr	r3, [pc, #180]	; (8000610 <MX_TIM2_Init+0xf0>)
 800055a:	2200      	movs	r2, #0
 800055c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xFFFF;
 800055e:	4b2c      	ldr	r3, [pc, #176]	; (8000610 <MX_TIM2_Init+0xf0>)
 8000560:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000564:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000566:	4b2a      	ldr	r3, [pc, #168]	; (8000610 <MX_TIM2_Init+0xf0>)
 8000568:	2200      	movs	r2, #0
 800056a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800056c:	4b28      	ldr	r3, [pc, #160]	; (8000610 <MX_TIM2_Init+0xf0>)
 800056e:	2200      	movs	r2, #0
 8000570:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000572:	4827      	ldr	r0, [pc, #156]	; (8000610 <MX_TIM2_Init+0xf0>)
 8000574:	f001 fbf8 	bl	8001d68 <HAL_TIM_Base_Init>
 8000578:	4603      	mov	r3, r0
 800057a:	2b00      	cmp	r3, #0
 800057c:	d001      	beq.n	8000582 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 800057e:	f7ff fe8f 	bl	80002a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000582:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000586:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000588:	f107 0318 	add.w	r3, r7, #24
 800058c:	4619      	mov	r1, r3
 800058e:	4820      	ldr	r0, [pc, #128]	; (8000610 <MX_TIM2_Init+0xf0>)
 8000590:	f001 ff08 	bl	80023a4 <HAL_TIM_ConfigClockSource>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800059a:	f7ff fe81 	bl	80002a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800059e:	481c      	ldr	r0, [pc, #112]	; (8000610 <MX_TIM2_Init+0xf0>)
 80005a0:	f001 fcac 	bl	8001efc <HAL_TIM_IC_Init>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005aa:	f7ff fe79 	bl	80002a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b2:	2300      	movs	r3, #0
 80005b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005b6:	f107 0310 	add.w	r3, r7, #16
 80005ba:	4619      	mov	r1, r3
 80005bc:	4814      	ldr	r0, [pc, #80]	; (8000610 <MX_TIM2_Init+0xf0>)
 80005be:	f002 fbdd 	bl	8002d7c <HAL_TIMEx_MasterConfigSynchronization>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80005c8:	f7ff fe6a 	bl	80002a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80005cc:	2300      	movs	r3, #0
 80005ce:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80005d0:	2301      	movs	r3, #1
 80005d2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80005dc:	463b      	mov	r3, r7
 80005de:	2208      	movs	r2, #8
 80005e0:	4619      	mov	r1, r3
 80005e2:	480b      	ldr	r0, [pc, #44]	; (8000610 <MX_TIM2_Init+0xf0>)
 80005e4:	f001 fd8e 	bl	8002104 <HAL_TIM_IC_ConfigChannel>
 80005e8:	4603      	mov	r3, r0
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d001      	beq.n	80005f2 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80005ee:	f7ff fe57 	bl	80002a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80005f2:	463b      	mov	r3, r7
 80005f4:	220c      	movs	r2, #12
 80005f6:	4619      	mov	r1, r3
 80005f8:	4805      	ldr	r0, [pc, #20]	; (8000610 <MX_TIM2_Init+0xf0>)
 80005fa:	f001 fd83 	bl	8002104 <HAL_TIM_IC_ConfigChannel>
 80005fe:	4603      	mov	r3, r0
 8000600:	2b00      	cmp	r3, #0
 8000602:	d001      	beq.n	8000608 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000604:	f7ff fe4c 	bl	80002a0 <Error_Handler>
  }

}
 8000608:	bf00      	nop
 800060a:	3728      	adds	r7, #40	; 0x28
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	200000ec 	.word	0x200000ec

08000614 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08a      	sub	sp, #40	; 0x28
 8000618:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0318 	add.w	r3, r7, #24
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	f107 0310 	add.w	r3, r7, #16
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000632:	463b      	mov	r3, r7
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]

  htim3.Instance = TIM3;
 800063e:	4b31      	ldr	r3, [pc, #196]	; (8000704 <MX_TIM3_Init+0xf0>)
 8000640:	4a31      	ldr	r2, [pc, #196]	; (8000708 <MX_TIM3_Init+0xf4>)
 8000642:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 47;
 8000644:	4b2f      	ldr	r3, [pc, #188]	; (8000704 <MX_TIM3_Init+0xf0>)
 8000646:	222f      	movs	r2, #47	; 0x2f
 8000648:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800064a:	4b2e      	ldr	r3, [pc, #184]	; (8000704 <MX_TIM3_Init+0xf0>)
 800064c:	2200      	movs	r2, #0
 800064e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 0xFFFF;
 8000650:	4b2c      	ldr	r3, [pc, #176]	; (8000704 <MX_TIM3_Init+0xf0>)
 8000652:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000656:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000658:	4b2a      	ldr	r3, [pc, #168]	; (8000704 <MX_TIM3_Init+0xf0>)
 800065a:	2200      	movs	r2, #0
 800065c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800065e:	4b29      	ldr	r3, [pc, #164]	; (8000704 <MX_TIM3_Init+0xf0>)
 8000660:	2200      	movs	r2, #0
 8000662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000664:	4827      	ldr	r0, [pc, #156]	; (8000704 <MX_TIM3_Init+0xf0>)
 8000666:	f001 fb7f 	bl	8001d68 <HAL_TIM_Base_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_TIM3_Init+0x60>
  {
    Error_Handler();
 8000670:	f7ff fe16 	bl	80002a0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000678:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800067a:	f107 0318 	add.w	r3, r7, #24
 800067e:	4619      	mov	r1, r3
 8000680:	4820      	ldr	r0, [pc, #128]	; (8000704 <MX_TIM3_Init+0xf0>)
 8000682:	f001 fe8f 	bl	80023a4 <HAL_TIM_ConfigClockSource>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800068c:	f7ff fe08 	bl	80002a0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000690:	481c      	ldr	r0, [pc, #112]	; (8000704 <MX_TIM3_Init+0xf0>)
 8000692:	f001 fc33 	bl	8001efc <HAL_TIM_IC_Init>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d001      	beq.n	80006a0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800069c:	f7ff fe00 	bl	80002a0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006a0:	2300      	movs	r3, #0
 80006a2:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80006a8:	f107 0310 	add.w	r3, r7, #16
 80006ac:	4619      	mov	r1, r3
 80006ae:	4815      	ldr	r0, [pc, #84]	; (8000704 <MX_TIM3_Init+0xf0>)
 80006b0:	f002 fb64 	bl	8002d7c <HAL_TIMEx_MasterConfigSynchronization>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_TIM3_Init+0xaa>
  {
    Error_Handler();
 80006ba:	f7ff fdf1 	bl	80002a0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80006c2:	2301      	movs	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80006ca:	2300      	movs	r3, #0
 80006cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2208      	movs	r2, #8
 80006d2:	4619      	mov	r1, r3
 80006d4:	480b      	ldr	r0, [pc, #44]	; (8000704 <MX_TIM3_Init+0xf0>)
 80006d6:	f001 fd15 	bl	8002104 <HAL_TIM_IC_ConfigChannel>
 80006da:	4603      	mov	r3, r0
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d001      	beq.n	80006e4 <MX_TIM3_Init+0xd0>
  {
    Error_Handler();
 80006e0:	f7ff fdde 	bl	80002a0 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80006e4:	463b      	mov	r3, r7
 80006e6:	220c      	movs	r2, #12
 80006e8:	4619      	mov	r1, r3
 80006ea:	4806      	ldr	r0, [pc, #24]	; (8000704 <MX_TIM3_Init+0xf0>)
 80006ec:	f001 fd0a 	bl	8002104 <HAL_TIM_IC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_TIM3_Init+0xe6>
  {
    Error_Handler();
 80006f6:	f7ff fdd3 	bl	80002a0 <Error_Handler>
  }

}
 80006fa:	bf00      	nop
 80006fc:	3728      	adds	r7, #40	; 0x28
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200000ac 	.word	0x200000ac
 8000708:	40000400 	.word	0x40000400

0800070c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b08a      	sub	sp, #40	; 0x28
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000714:	f107 0318 	add.w	r3, r7, #24
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
 800071e:	609a      	str	r2, [r3, #8]
 8000720:	60da      	str	r2, [r3, #12]
  if(tim_baseHandle->Instance==TIM2)
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800072a:	d124      	bne.n	8000776 <HAL_TIM_Base_MspInit+0x6a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 800072e:	69db      	ldr	r3, [r3, #28]
 8000730:	4a27      	ldr	r2, [pc, #156]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 8000732:	f043 0301 	orr.w	r3, r3, #1
 8000736:	61d3      	str	r3, [r2, #28]
 8000738:	4b25      	ldr	r3, [pc, #148]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 800073a:	69db      	ldr	r3, [r3, #28]
 800073c:	f003 0301 	and.w	r3, r3, #1
 8000740:	617b      	str	r3, [r7, #20]
 8000742:	697b      	ldr	r3, [r7, #20]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000744:	4b22      	ldr	r3, [pc, #136]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 8000746:	699b      	ldr	r3, [r3, #24]
 8000748:	4a21      	ldr	r2, [pc, #132]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 800074a:	f043 0304 	orr.w	r3, r3, #4
 800074e:	6193      	str	r3, [r2, #24]
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 8000752:	699b      	ldr	r3, [r3, #24]
 8000754:	f003 0304 	and.w	r3, r3, #4
 8000758:	613b      	str	r3, [r7, #16]
 800075a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration    
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800075c:	230c      	movs	r3, #12
 800075e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000760:	2300      	movs	r3, #0
 8000762:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	2300      	movs	r3, #0
 8000766:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000768:	f107 0318 	add.w	r3, r7, #24
 800076c:	4619      	mov	r1, r3
 800076e:	4819      	ldr	r0, [pc, #100]	; (80007d4 <HAL_TIM_Base_MspInit+0xc8>)
 8000770:	f000 fadc 	bl	8000d2c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000774:	e028      	b.n	80007c8 <HAL_TIM_Base_MspInit+0xbc>
  else if(tim_baseHandle->Instance==TIM3)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	4a17      	ldr	r2, [pc, #92]	; (80007d8 <HAL_TIM_Base_MspInit+0xcc>)
 800077c:	4293      	cmp	r3, r2
 800077e:	d123      	bne.n	80007c8 <HAL_TIM_Base_MspInit+0xbc>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000780:	4b13      	ldr	r3, [pc, #76]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 8000782:	69db      	ldr	r3, [r3, #28]
 8000784:	4a12      	ldr	r2, [pc, #72]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 8000786:	f043 0302 	orr.w	r3, r3, #2
 800078a:	61d3      	str	r3, [r2, #28]
 800078c:	4b10      	ldr	r3, [pc, #64]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 800078e:	69db      	ldr	r3, [r3, #28]
 8000790:	f003 0302 	and.w	r3, r3, #2
 8000794:	60fb      	str	r3, [r7, #12]
 8000796:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000798:	4b0d      	ldr	r3, [pc, #52]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 800079a:	699b      	ldr	r3, [r3, #24]
 800079c:	4a0c      	ldr	r2, [pc, #48]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 800079e:	f043 0308 	orr.w	r3, r3, #8
 80007a2:	6193      	str	r3, [r2, #24]
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <HAL_TIM_Base_MspInit+0xc4>)
 80007a6:	699b      	ldr	r3, [r3, #24]
 80007a8:	f003 0308 	and.w	r3, r3, #8
 80007ac:	60bb      	str	r3, [r7, #8]
 80007ae:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80007b0:	2303      	movs	r3, #3
 80007b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007b4:	2300      	movs	r3, #0
 80007b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007bc:	f107 0318 	add.w	r3, r7, #24
 80007c0:	4619      	mov	r1, r3
 80007c2:	4806      	ldr	r0, [pc, #24]	; (80007dc <HAL_TIM_Base_MspInit+0xd0>)
 80007c4:	f000 fab2 	bl	8000d2c <HAL_GPIO_Init>
}
 80007c8:	bf00      	nop
 80007ca:	3728      	adds	r7, #40	; 0x28
 80007cc:	46bd      	mov	sp, r7
 80007ce:	bd80      	pop	{r7, pc}
 80007d0:	40021000 	.word	0x40021000
 80007d4:	40010800 	.word	0x40010800
 80007d8:	40000400 	.word	0x40000400
 80007dc:	40010c00 	.word	0x40010c00

080007e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0

  huart1.Instance = USART1;
 80007e4:	4b11      	ldr	r3, [pc, #68]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007e6:	4a12      	ldr	r2, [pc, #72]	; (8000830 <MX_USART1_UART_Init+0x50>)
 80007e8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80007ea:	4b10      	ldr	r3, [pc, #64]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007f2:	4b0e      	ldr	r3, [pc, #56]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007f4:	2200      	movs	r2, #0
 80007f6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007f8:	4b0c      	ldr	r3, [pc, #48]	; (800082c <MX_USART1_UART_Init+0x4c>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007fe:	4b0b      	ldr	r3, [pc, #44]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000800:	2200      	movs	r2, #0
 8000802:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX;
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000806:	2208      	movs	r2, #8
 8000808:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080a:	4b08      	ldr	r3, [pc, #32]	; (800082c <MX_USART1_UART_Init+0x4c>)
 800080c:	2200      	movs	r2, #0
 800080e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000810:	4b06      	ldr	r3, [pc, #24]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000812:	2200      	movs	r2, #0
 8000814:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <MX_USART1_UART_Init+0x4c>)
 8000818:	f002 fb46 	bl	8002ea8 <HAL_UART_Init>
 800081c:	4603      	mov	r3, r0
 800081e:	2b00      	cmp	r3, #0
 8000820:	d001      	beq.n	8000826 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000822:	f7ff fd3d 	bl	80002a0 <Error_Handler>
  }

}
 8000826:	bf00      	nop
 8000828:	bd80      	pop	{r7, pc}
 800082a:	bf00      	nop
 800082c:	2000012c 	.word	0x2000012c
 8000830:	40013800 	.word	0x40013800

08000834 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	b088      	sub	sp, #32
 8000838:	af00      	add	r7, sp, #0
 800083a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
 8000844:	605a      	str	r2, [r3, #4]
 8000846:	609a      	str	r2, [r3, #8]
 8000848:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a20      	ldr	r2, [pc, #128]	; (80008d0 <HAL_UART_MspInit+0x9c>)
 8000850:	4293      	cmp	r3, r2
 8000852:	d139      	bne.n	80008c8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000854:	4b1f      	ldr	r3, [pc, #124]	; (80008d4 <HAL_UART_MspInit+0xa0>)
 8000856:	699b      	ldr	r3, [r3, #24]
 8000858:	4a1e      	ldr	r2, [pc, #120]	; (80008d4 <HAL_UART_MspInit+0xa0>)
 800085a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800085e:	6193      	str	r3, [r2, #24]
 8000860:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <HAL_UART_MspInit+0xa0>)
 8000862:	699b      	ldr	r3, [r3, #24]
 8000864:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000868:	60fb      	str	r3, [r7, #12]
 800086a:	68fb      	ldr	r3, [r7, #12]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800086c:	4b19      	ldr	r3, [pc, #100]	; (80008d4 <HAL_UART_MspInit+0xa0>)
 800086e:	699b      	ldr	r3, [r3, #24]
 8000870:	4a18      	ldr	r2, [pc, #96]	; (80008d4 <HAL_UART_MspInit+0xa0>)
 8000872:	f043 0304 	orr.w	r3, r3, #4
 8000876:	6193      	str	r3, [r2, #24]
 8000878:	4b16      	ldr	r3, [pc, #88]	; (80008d4 <HAL_UART_MspInit+0xa0>)
 800087a:	699b      	ldr	r3, [r3, #24]
 800087c:	f003 0304 	and.w	r3, r3, #4
 8000880:	60bb      	str	r3, [r7, #8]
 8000882:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000884:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000888:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800088a:	2302      	movs	r3, #2
 800088c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800088e:	2303      	movs	r3, #3
 8000890:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	4619      	mov	r1, r3
 8000898:	480f      	ldr	r0, [pc, #60]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 800089a:	f000 fa47 	bl	8000d2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800089e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80008a2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008a4:	2300      	movs	r3, #0
 80008a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ac:	f107 0310 	add.w	r3, r7, #16
 80008b0:	4619      	mov	r1, r3
 80008b2:	4809      	ldr	r0, [pc, #36]	; (80008d8 <HAL_UART_MspInit+0xa4>)
 80008b4:	f000 fa3a 	bl	8000d2c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80008b8:	2200      	movs	r2, #0
 80008ba:	2100      	movs	r1, #0
 80008bc:	2025      	movs	r0, #37	; 0x25
 80008be:	f000 f96f 	bl	8000ba0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80008c2:	2025      	movs	r0, #37	; 0x25
 80008c4:	f000 f998 	bl	8000bf8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80008c8:	bf00      	nop
 80008ca:	3720      	adds	r7, #32
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40013800 	.word	0x40013800
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40010800 	.word	0x40010800

080008dc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80008dc:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80008de:	e003      	b.n	80008e8 <LoopCopyDataInit>

080008e0 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80008e0:	4b0b      	ldr	r3, [pc, #44]	; (8000910 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80008e2:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80008e4:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80008e6:	3104      	adds	r1, #4

080008e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80008e8:	480a      	ldr	r0, [pc, #40]	; (8000914 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80008ea:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80008ec:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80008ee:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80008f0:	d3f6      	bcc.n	80008e0 <CopyDataInit>
  ldr r2, =_sbss
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80008f4:	e002      	b.n	80008fc <LoopFillZerobss>

080008f6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  str r3, [r2], #4
 80008f8:	f842 3b04 	str.w	r3, [r2], #4

080008fc <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80008fc:	4b08      	ldr	r3, [pc, #32]	; (8000920 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80008fe:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000900:	d3f9      	bcc.n	80008f6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000902:	f7ff fdd9 	bl	80004b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f003 fb15 	bl	8003f34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800090a:	f7ff fc75 	bl	80001f8 <main>
  bx lr
 800090e:	4770      	bx	lr
  ldr r3, =_sidata
 8000910:	08004fe0 	.word	0x08004fe0
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000918:	20000070 	.word	0x20000070
  ldr r2, =_sbss
 800091c:	20000070 	.word	0x20000070
  ldr r3, = _ebss
 8000920:	200001ac 	.word	0x200001ac

08000924 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000924:	e7fe      	b.n	8000924 <ADC1_2_IRQHandler>
	...

08000928 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x28>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x28>)
 8000932:	f043 0310 	orr.w	r3, r3, #16
 8000936:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f911 	bl	8000b60 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	2000      	movs	r0, #0
 8000940:	f000 f808 	bl	8000954 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff fcbc 	bl	80002c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40022000 	.word	0x40022000

08000954 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800095c:	4b12      	ldr	r3, [pc, #72]	; (80009a8 <HAL_InitTick+0x54>)
 800095e:	681a      	ldr	r2, [r3, #0]
 8000960:	4b12      	ldr	r3, [pc, #72]	; (80009ac <HAL_InitTick+0x58>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4619      	mov	r1, r3
 8000966:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800096a:	fbb3 f3f1 	udiv	r3, r3, r1
 800096e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000972:	4618      	mov	r0, r3
 8000974:	f000 f958 	bl	8000c28 <HAL_SYSTICK_Config>
 8000978:	4603      	mov	r3, r0
 800097a:	2b00      	cmp	r3, #0
 800097c:	d001      	beq.n	8000982 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800097e:	2301      	movs	r3, #1
 8000980:	e00e      	b.n	80009a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	2b0f      	cmp	r3, #15
 8000986:	d80a      	bhi.n	800099e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000988:	2200      	movs	r2, #0
 800098a:	6879      	ldr	r1, [r7, #4]
 800098c:	f04f 30ff 	mov.w	r0, #4294967295
 8000990:	f000 f906 	bl	8000ba0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000994:	4a06      	ldr	r2, [pc, #24]	; (80009b0 <HAL_InitTick+0x5c>)
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	e000      	b.n	80009a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800099e:	2301      	movs	r3, #1
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3708      	adds	r7, #8
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	20000000 	.word	0x20000000
 80009ac:	20000008 	.word	0x20000008
 80009b0:	20000004 	.word	0x20000004

080009b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  return uwTick;
 80009b8:	4b02      	ldr	r3, [pc, #8]	; (80009c4 <HAL_GetTick+0x10>)
 80009ba:	681b      	ldr	r3, [r3, #0]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr
 80009c4:	2000016c 	.word	0x2000016c

080009c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009c8:	b480      	push	{r7}
 80009ca:	b085      	sub	sp, #20
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	f003 0307 	and.w	r3, r3, #7
 80009d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009d8:	4b0c      	ldr	r3, [pc, #48]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009da:	68db      	ldr	r3, [r3, #12]
 80009dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009de:	68ba      	ldr	r2, [r7, #8]
 80009e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009e4:	4013      	ands	r3, r2
 80009e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80009e8:	68fb      	ldr	r3, [r7, #12]
 80009ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009ec:	68bb      	ldr	r3, [r7, #8]
 80009ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009f0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009fa:	4a04      	ldr	r2, [pc, #16]	; (8000a0c <__NVIC_SetPriorityGrouping+0x44>)
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	60d3      	str	r3, [r2, #12]
}
 8000a00:	bf00      	nop
 8000a02:	3714      	adds	r7, #20
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bc80      	pop	{r7}
 8000a08:	4770      	bx	lr
 8000a0a:	bf00      	nop
 8000a0c:	e000ed00 	.word	0xe000ed00

08000a10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a14:	4b04      	ldr	r3, [pc, #16]	; (8000a28 <__NVIC_GetPriorityGrouping+0x18>)
 8000a16:	68db      	ldr	r3, [r3, #12]
 8000a18:	0a1b      	lsrs	r3, r3, #8
 8000a1a:	f003 0307 	and.w	r3, r3, #7
}
 8000a1e:	4618      	mov	r0, r3
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bc80      	pop	{r7}
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	e000ed00 	.word	0xe000ed00

08000a2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	db0b      	blt.n	8000a56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	f003 021f 	and.w	r2, r3, #31
 8000a44:	4906      	ldr	r1, [pc, #24]	; (8000a60 <__NVIC_EnableIRQ+0x34>)
 8000a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4a:	095b      	lsrs	r3, r3, #5
 8000a4c:	2001      	movs	r0, #1
 8000a4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000a52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a56:	bf00      	nop
 8000a58:	370c      	adds	r7, #12
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bc80      	pop	{r7}
 8000a5e:	4770      	bx	lr
 8000a60:	e000e100 	.word	0xe000e100

08000a64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	6039      	str	r1, [r7, #0]
 8000a6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	db0a      	blt.n	8000a8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	b2da      	uxtb	r2, r3
 8000a7c:	490c      	ldr	r1, [pc, #48]	; (8000ab0 <__NVIC_SetPriority+0x4c>)
 8000a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a82:	0112      	lsls	r2, r2, #4
 8000a84:	b2d2      	uxtb	r2, r2
 8000a86:	440b      	add	r3, r1
 8000a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a8c:	e00a      	b.n	8000aa4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a8e:	683b      	ldr	r3, [r7, #0]
 8000a90:	b2da      	uxtb	r2, r3
 8000a92:	4908      	ldr	r1, [pc, #32]	; (8000ab4 <__NVIC_SetPriority+0x50>)
 8000a94:	79fb      	ldrb	r3, [r7, #7]
 8000a96:	f003 030f 	and.w	r3, r3, #15
 8000a9a:	3b04      	subs	r3, #4
 8000a9c:	0112      	lsls	r2, r2, #4
 8000a9e:	b2d2      	uxtb	r2, r2
 8000aa0:	440b      	add	r3, r1
 8000aa2:	761a      	strb	r2, [r3, #24]
}
 8000aa4:	bf00      	nop
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000e100 	.word	0xe000e100
 8000ab4:	e000ed00 	.word	0xe000ed00

08000ab8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b089      	sub	sp, #36	; 0x24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	f003 0307 	and.w	r3, r3, #7
 8000aca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000acc:	69fb      	ldr	r3, [r7, #28]
 8000ace:	f1c3 0307 	rsb	r3, r3, #7
 8000ad2:	2b04      	cmp	r3, #4
 8000ad4:	bf28      	it	cs
 8000ad6:	2304      	movcs	r3, #4
 8000ad8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3304      	adds	r3, #4
 8000ade:	2b06      	cmp	r3, #6
 8000ae0:	d902      	bls.n	8000ae8 <NVIC_EncodePriority+0x30>
 8000ae2:	69fb      	ldr	r3, [r7, #28]
 8000ae4:	3b03      	subs	r3, #3
 8000ae6:	e000      	b.n	8000aea <NVIC_EncodePriority+0x32>
 8000ae8:	2300      	movs	r3, #0
 8000aea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000aec:	f04f 32ff 	mov.w	r2, #4294967295
 8000af0:	69bb      	ldr	r3, [r7, #24]
 8000af2:	fa02 f303 	lsl.w	r3, r2, r3
 8000af6:	43da      	mvns	r2, r3
 8000af8:	68bb      	ldr	r3, [r7, #8]
 8000afa:	401a      	ands	r2, r3
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b00:	f04f 31ff 	mov.w	r1, #4294967295
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	43d9      	mvns	r1, r3
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b10:	4313      	orrs	r3, r2
         );
}
 8000b12:	4618      	mov	r0, r3
 8000b14:	3724      	adds	r7, #36	; 0x24
 8000b16:	46bd      	mov	sp, r7
 8000b18:	bc80      	pop	{r7}
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	3b01      	subs	r3, #1
 8000b28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000b2c:	d301      	bcc.n	8000b32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2e:	2301      	movs	r3, #1
 8000b30:	e00f      	b.n	8000b52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b32:	4a0a      	ldr	r2, [pc, #40]	; (8000b5c <SysTick_Config+0x40>)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	3b01      	subs	r3, #1
 8000b38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b3a:	210f      	movs	r1, #15
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b40:	f7ff ff90 	bl	8000a64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <SysTick_Config+0x40>)
 8000b46:	2200      	movs	r2, #0
 8000b48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b4a:	4b04      	ldr	r3, [pc, #16]	; (8000b5c <SysTick_Config+0x40>)
 8000b4c:	2207      	movs	r2, #7
 8000b4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b50:	2300      	movs	r3, #0
}
 8000b52:	4618      	mov	r0, r3
 8000b54:	3708      	adds	r7, #8
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	e000e010 	.word	0xe000e010

08000b60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2b07      	cmp	r3, #7
 8000b6c:	d00f      	beq.n	8000b8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2b06      	cmp	r3, #6
 8000b72:	d00c      	beq.n	8000b8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b05      	cmp	r3, #5
 8000b78:	d009      	beq.n	8000b8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b04      	cmp	r3, #4
 8000b7e:	d006      	beq.n	8000b8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	2b03      	cmp	r3, #3
 8000b84:	d003      	beq.n	8000b8e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000b86:	2192      	movs	r1, #146	; 0x92
 8000b88:	4804      	ldr	r0, [pc, #16]	; (8000b9c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8000b8a:	f7ff fb8f 	bl	80002ac <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b8e:	6878      	ldr	r0, [r7, #4]
 8000b90:	f7ff ff1a 	bl	80009c8 <__NVIC_SetPriorityGrouping>
}
 8000b94:	bf00      	nop
 8000b96:	3708      	adds	r7, #8
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	08004d80 	.word	0x08004d80

08000ba0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b0f      	cmp	r3, #15
 8000bb6:	d903      	bls.n	8000bc0 <HAL_NVIC_SetPriority+0x20>
 8000bb8:	21aa      	movs	r1, #170	; 0xaa
 8000bba:	480e      	ldr	r0, [pc, #56]	; (8000bf4 <HAL_NVIC_SetPriority+0x54>)
 8000bbc:	f7ff fb76 	bl	80002ac <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d903      	bls.n	8000bce <HAL_NVIC_SetPriority+0x2e>
 8000bc6:	21ab      	movs	r1, #171	; 0xab
 8000bc8:	480a      	ldr	r0, [pc, #40]	; (8000bf4 <HAL_NVIC_SetPriority+0x54>)
 8000bca:	f7ff fb6f 	bl	80002ac <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bce:	f7ff ff1f 	bl	8000a10 <__NVIC_GetPriorityGrouping>
 8000bd2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd4:	687a      	ldr	r2, [r7, #4]
 8000bd6:	68b9      	ldr	r1, [r7, #8]
 8000bd8:	6978      	ldr	r0, [r7, #20]
 8000bda:	f7ff ff6d 	bl	8000ab8 <NVIC_EncodePriority>
 8000bde:	4602      	mov	r2, r0
 8000be0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be4:	4611      	mov	r1, r2
 8000be6:	4618      	mov	r0, r3
 8000be8:	f7ff ff3c 	bl	8000a64 <__NVIC_SetPriority>
}
 8000bec:	bf00      	nop
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08004d80 	.word	0x08004d80

08000bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	da03      	bge.n	8000c12 <HAL_NVIC_EnableIRQ+0x1a>
 8000c0a:	21be      	movs	r1, #190	; 0xbe
 8000c0c:	4805      	ldr	r0, [pc, #20]	; (8000c24 <HAL_NVIC_EnableIRQ+0x2c>)
 8000c0e:	f7ff fb4d 	bl	80002ac <assert_failed>

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c16:	4618      	mov	r0, r3
 8000c18:	f7ff ff08 	bl	8000a2c <__NVIC_EnableIRQ>
}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	08004d80 	.word	0x08004d80

08000c28 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	b082      	sub	sp, #8
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c30:	6878      	ldr	r0, [r7, #4]
 8000c32:	f7ff ff73 	bl	8000b1c <SysTick_Config>
 8000c36:	4603      	mov	r3, r0
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000c48:	2300      	movs	r3, #0
 8000c4a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8000c52:	2b02      	cmp	r3, #2
 8000c54:	d005      	beq.n	8000c62 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2204      	movs	r2, #4
 8000c5a:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	73fb      	strb	r3, [r7, #15]
 8000c60:	e051      	b.n	8000d06 <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	681a      	ldr	r2, [r3, #0]
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	f022 020e 	bic.w	r2, r2, #14
 8000c70:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f022 0201 	bic.w	r2, r2, #1
 8000c80:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4a22      	ldr	r2, [pc, #136]	; (8000d10 <HAL_DMA_Abort_IT+0xd0>)
 8000c88:	4293      	cmp	r3, r2
 8000c8a:	d029      	beq.n	8000ce0 <HAL_DMA_Abort_IT+0xa0>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	4a20      	ldr	r2, [pc, #128]	; (8000d14 <HAL_DMA_Abort_IT+0xd4>)
 8000c92:	4293      	cmp	r3, r2
 8000c94:	d022      	beq.n	8000cdc <HAL_DMA_Abort_IT+0x9c>
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	4a1f      	ldr	r2, [pc, #124]	; (8000d18 <HAL_DMA_Abort_IT+0xd8>)
 8000c9c:	4293      	cmp	r3, r2
 8000c9e:	d01a      	beq.n	8000cd6 <HAL_DMA_Abort_IT+0x96>
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	4a1d      	ldr	r2, [pc, #116]	; (8000d1c <HAL_DMA_Abort_IT+0xdc>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d012      	beq.n	8000cd0 <HAL_DMA_Abort_IT+0x90>
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a1c      	ldr	r2, [pc, #112]	; (8000d20 <HAL_DMA_Abort_IT+0xe0>)
 8000cb0:	4293      	cmp	r3, r2
 8000cb2:	d00a      	beq.n	8000cca <HAL_DMA_Abort_IT+0x8a>
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a1a      	ldr	r2, [pc, #104]	; (8000d24 <HAL_DMA_Abort_IT+0xe4>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d102      	bne.n	8000cc4 <HAL_DMA_Abort_IT+0x84>
 8000cbe:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000cc2:	e00e      	b.n	8000ce2 <HAL_DMA_Abort_IT+0xa2>
 8000cc4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000cc8:	e00b      	b.n	8000ce2 <HAL_DMA_Abort_IT+0xa2>
 8000cca:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cce:	e008      	b.n	8000ce2 <HAL_DMA_Abort_IT+0xa2>
 8000cd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cd4:	e005      	b.n	8000ce2 <HAL_DMA_Abort_IT+0xa2>
 8000cd6:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000cda:	e002      	b.n	8000ce2 <HAL_DMA_Abort_IT+0xa2>
 8000cdc:	2310      	movs	r3, #16
 8000cde:	e000      	b.n	8000ce2 <HAL_DMA_Abort_IT+0xa2>
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	4a11      	ldr	r2, [pc, #68]	; (8000d28 <HAL_DMA_Abort_IT+0xe8>)
 8000ce4:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2201      	movs	r2, #1
 8000cea:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d003      	beq.n	8000d06 <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d02:	6878      	ldr	r0, [r7, #4]
 8000d04:	4798      	blx	r3
    } 
  }
  return status;
 8000d06:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d08:	4618      	mov	r0, r3
 8000d0a:	3710      	adds	r7, #16
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	bd80      	pop	{r7, pc}
 8000d10:	40020008 	.word	0x40020008
 8000d14:	4002001c 	.word	0x4002001c
 8000d18:	40020030 	.word	0x40020030
 8000d1c:	40020044 	.word	0x40020044
 8000d20:	40020058 	.word	0x40020058
 8000d24:	4002006c 	.word	0x4002006c
 8000d28:	40020000 	.word	0x40020000

08000d2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b08a      	sub	sp, #40	; 0x28
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
 8000d34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d36:	2300      	movs	r3, #0
 8000d38:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	4a9c      	ldr	r2, [pc, #624]	; (8000fb4 <HAL_GPIO_Init+0x288>)
 8000d42:	4293      	cmp	r3, r2
 8000d44:	d013      	beq.n	8000d6e <HAL_GPIO_Init+0x42>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4a9b      	ldr	r2, [pc, #620]	; (8000fb8 <HAL_GPIO_Init+0x28c>)
 8000d4a:	4293      	cmp	r3, r2
 8000d4c:	d00f      	beq.n	8000d6e <HAL_GPIO_Init+0x42>
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	4a9a      	ldr	r2, [pc, #616]	; (8000fbc <HAL_GPIO_Init+0x290>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d00b      	beq.n	8000d6e <HAL_GPIO_Init+0x42>
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	4a99      	ldr	r2, [pc, #612]	; (8000fc0 <HAL_GPIO_Init+0x294>)
 8000d5a:	4293      	cmp	r3, r2
 8000d5c:	d007      	beq.n	8000d6e <HAL_GPIO_Init+0x42>
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	4a98      	ldr	r2, [pc, #608]	; (8000fc4 <HAL_GPIO_Init+0x298>)
 8000d62:	4293      	cmp	r3, r2
 8000d64:	d003      	beq.n	8000d6e <HAL_GPIO_Init+0x42>
 8000d66:	21bd      	movs	r1, #189	; 0xbd
 8000d68:	4897      	ldr	r0, [pc, #604]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000d6a:	f7ff fa9f 	bl	80002ac <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	b29b      	uxth	r3, r3
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d005      	beq.n	8000d84 <HAL_GPIO_Init+0x58>
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	0c1b      	lsrs	r3, r3, #16
 8000d7e:	041b      	lsls	r3, r3, #16
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d003      	beq.n	8000d8c <HAL_GPIO_Init+0x60>
 8000d84:	21be      	movs	r1, #190	; 0xbe
 8000d86:	4890      	ldr	r0, [pc, #576]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000d88:	f7ff fa90 	bl	80002ac <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	f000 81eb 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000d96:	683b      	ldr	r3, [r7, #0]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	2b01      	cmp	r3, #1
 8000d9c:	f000 81e6 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000da0:	683b      	ldr	r3, [r7, #0]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	2b11      	cmp	r3, #17
 8000da6:	f000 81e1 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	685b      	ldr	r3, [r3, #4]
 8000dae:	2b02      	cmp	r3, #2
 8000db0:	f000 81dc 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	2b12      	cmp	r3, #18
 8000dba:	f000 81d7 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	4a82      	ldr	r2, [pc, #520]	; (8000fcc <HAL_GPIO_Init+0x2a0>)
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	f000 81d1 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000dca:	683b      	ldr	r3, [r7, #0]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	4a80      	ldr	r2, [pc, #512]	; (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	f000 81cb 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000dd6:	683b      	ldr	r3, [r7, #0]
 8000dd8:	685b      	ldr	r3, [r3, #4]
 8000dda:	4a7e      	ldr	r2, [pc, #504]	; (8000fd4 <HAL_GPIO_Init+0x2a8>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	f000 81c5 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	4a7c      	ldr	r2, [pc, #496]	; (8000fd8 <HAL_GPIO_Init+0x2ac>)
 8000de8:	4293      	cmp	r3, r2
 8000dea:	f000 81bf 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	4a7a      	ldr	r2, [pc, #488]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	f000 81b9 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000dfa:	683b      	ldr	r3, [r7, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	4a78      	ldr	r2, [pc, #480]	; (8000fe0 <HAL_GPIO_Init+0x2b4>)
 8000e00:	4293      	cmp	r3, r2
 8000e02:	f000 81b3 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000e06:	683b      	ldr	r3, [r7, #0]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	2b03      	cmp	r3, #3
 8000e0c:	f000 81ae 	beq.w	800116c <HAL_GPIO_Init+0x440>
 8000e10:	21bf      	movs	r1, #191	; 0xbf
 8000e12:	486d      	ldr	r0, [pc, #436]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000e14:	f7ff fa4a 	bl	80002ac <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e18:	e1a8      	b.n	800116c <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	69fa      	ldr	r2, [r7, #28]
 8000e2a:	4013      	ands	r3, r2
 8000e2c:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	429a      	cmp	r2, r3
 8000e34:	f040 8197 	bne.w	8001166 <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	4a5e      	ldr	r2, [pc, #376]	; (8000fb4 <HAL_GPIO_Init+0x288>)
 8000e3c:	4293      	cmp	r3, r2
 8000e3e:	d013      	beq.n	8000e68 <HAL_GPIO_Init+0x13c>
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	4a5d      	ldr	r2, [pc, #372]	; (8000fb8 <HAL_GPIO_Init+0x28c>)
 8000e44:	4293      	cmp	r3, r2
 8000e46:	d00f      	beq.n	8000e68 <HAL_GPIO_Init+0x13c>
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	4a5c      	ldr	r2, [pc, #368]	; (8000fbc <HAL_GPIO_Init+0x290>)
 8000e4c:	4293      	cmp	r3, r2
 8000e4e:	d00b      	beq.n	8000e68 <HAL_GPIO_Init+0x13c>
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	4a5b      	ldr	r2, [pc, #364]	; (8000fc0 <HAL_GPIO_Init+0x294>)
 8000e54:	4293      	cmp	r3, r2
 8000e56:	d007      	beq.n	8000e68 <HAL_GPIO_Init+0x13c>
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	4a5a      	ldr	r2, [pc, #360]	; (8000fc4 <HAL_GPIO_Init+0x298>)
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	d003      	beq.n	8000e68 <HAL_GPIO_Init+0x13c>
 8000e60:	21cd      	movs	r1, #205	; 0xcd
 8000e62:	4859      	ldr	r0, [pc, #356]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000e64:	f7ff fa22 	bl	80002ac <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	2b12      	cmp	r3, #18
 8000e6e:	d065      	beq.n	8000f3c <HAL_GPIO_Init+0x210>
 8000e70:	2b12      	cmp	r3, #18
 8000e72:	d80e      	bhi.n	8000e92 <HAL_GPIO_Init+0x166>
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d04c      	beq.n	8000f12 <HAL_GPIO_Init+0x1e6>
 8000e78:	2b02      	cmp	r3, #2
 8000e7a:	d804      	bhi.n	8000e86 <HAL_GPIO_Init+0x15a>
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d072      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d01d      	beq.n	8000ec0 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000e84:	e0b1      	b.n	8000fea <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000e86:	2b03      	cmp	r3, #3
 8000e88:	f000 80ac 	beq.w	8000fe4 <HAL_GPIO_Init+0x2b8>
 8000e8c:	2b11      	cmp	r3, #17
 8000e8e:	d02b      	beq.n	8000ee8 <HAL_GPIO_Init+0x1bc>
          break;
 8000e90:	e0ab      	b.n	8000fea <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000e92:	4a4f      	ldr	r2, [pc, #316]	; (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000e94:	4293      	cmp	r3, r2
 8000e96:	d066      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000e98:	4a4d      	ldr	r2, [pc, #308]	; (8000fd0 <HAL_GPIO_Init+0x2a4>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d806      	bhi.n	8000eac <HAL_GPIO_Init+0x180>
 8000e9e:	4a4b      	ldr	r2, [pc, #300]	; (8000fcc <HAL_GPIO_Init+0x2a0>)
 8000ea0:	4293      	cmp	r3, r2
 8000ea2:	d060      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000ea4:	4a4c      	ldr	r2, [pc, #304]	; (8000fd8 <HAL_GPIO_Init+0x2ac>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d05d      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
          break;
 8000eaa:	e09e      	b.n	8000fea <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000eac:	4a49      	ldr	r2, [pc, #292]	; (8000fd4 <HAL_GPIO_Init+0x2a8>)
 8000eae:	4293      	cmp	r3, r2
 8000eb0:	d059      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000eb2:	4a4b      	ldr	r2, [pc, #300]	; (8000fe0 <HAL_GPIO_Init+0x2b4>)
 8000eb4:	4293      	cmp	r3, r2
 8000eb6:	d056      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
 8000eb8:	4a48      	ldr	r2, [pc, #288]	; (8000fdc <HAL_GPIO_Init+0x2b0>)
 8000eba:	4293      	cmp	r3, r2
 8000ebc:	d053      	beq.n	8000f66 <HAL_GPIO_Init+0x23a>
          break;
 8000ebe:	e094      	b.n	8000fea <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	68db      	ldr	r3, [r3, #12]
 8000ec4:	2b02      	cmp	r3, #2
 8000ec6:	d00b      	beq.n	8000ee0 <HAL_GPIO_Init+0x1b4>
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	68db      	ldr	r3, [r3, #12]
 8000ecc:	2b01      	cmp	r3, #1
 8000ece:	d007      	beq.n	8000ee0 <HAL_GPIO_Init+0x1b4>
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	68db      	ldr	r3, [r3, #12]
 8000ed4:	2b03      	cmp	r3, #3
 8000ed6:	d003      	beq.n	8000ee0 <HAL_GPIO_Init+0x1b4>
 8000ed8:	21d5      	movs	r1, #213	; 0xd5
 8000eda:	483b      	ldr	r0, [pc, #236]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000edc:	f7ff f9e6 	bl	80002ac <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	68db      	ldr	r3, [r3, #12]
 8000ee4:	623b      	str	r3, [r7, #32]
          break;
 8000ee6:	e080      	b.n	8000fea <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	68db      	ldr	r3, [r3, #12]
 8000eec:	2b02      	cmp	r3, #2
 8000eee:	d00b      	beq.n	8000f08 <HAL_GPIO_Init+0x1dc>
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	2b01      	cmp	r3, #1
 8000ef6:	d007      	beq.n	8000f08 <HAL_GPIO_Init+0x1dc>
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	68db      	ldr	r3, [r3, #12]
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d003      	beq.n	8000f08 <HAL_GPIO_Init+0x1dc>
 8000f00:	21dc      	movs	r1, #220	; 0xdc
 8000f02:	4831      	ldr	r0, [pc, #196]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000f04:	f7ff f9d2 	bl	80002ac <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000f08:	683b      	ldr	r3, [r7, #0]
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	3304      	adds	r3, #4
 8000f0e:	623b      	str	r3, [r7, #32]
          break;
 8000f10:	e06b      	b.n	8000fea <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	68db      	ldr	r3, [r3, #12]
 8000f16:	2b02      	cmp	r3, #2
 8000f18:	d00b      	beq.n	8000f32 <HAL_GPIO_Init+0x206>
 8000f1a:	683b      	ldr	r3, [r7, #0]
 8000f1c:	68db      	ldr	r3, [r3, #12]
 8000f1e:	2b01      	cmp	r3, #1
 8000f20:	d007      	beq.n	8000f32 <HAL_GPIO_Init+0x206>
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d003      	beq.n	8000f32 <HAL_GPIO_Init+0x206>
 8000f2a:	21e3      	movs	r1, #227	; 0xe3
 8000f2c:	4826      	ldr	r0, [pc, #152]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000f2e:	f7ff f9bd 	bl	80002ac <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	68db      	ldr	r3, [r3, #12]
 8000f36:	3308      	adds	r3, #8
 8000f38:	623b      	str	r3, [r7, #32]
          break;
 8000f3a:	e056      	b.n	8000fea <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	68db      	ldr	r3, [r3, #12]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d00b      	beq.n	8000f5c <HAL_GPIO_Init+0x230>
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	68db      	ldr	r3, [r3, #12]
 8000f48:	2b01      	cmp	r3, #1
 8000f4a:	d007      	beq.n	8000f5c <HAL_GPIO_Init+0x230>
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	68db      	ldr	r3, [r3, #12]
 8000f50:	2b03      	cmp	r3, #3
 8000f52:	d003      	beq.n	8000f5c <HAL_GPIO_Init+0x230>
 8000f54:	21ea      	movs	r1, #234	; 0xea
 8000f56:	481c      	ldr	r0, [pc, #112]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000f58:	f7ff f9a8 	bl	80002ac <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	330c      	adds	r3, #12
 8000f62:	623b      	str	r3, [r7, #32]
          break;
 8000f64:	e041      	b.n	8000fea <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8000f66:	683b      	ldr	r3, [r7, #0]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00b      	beq.n	8000f86 <HAL_GPIO_Init+0x25a>
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b01      	cmp	r3, #1
 8000f74:	d007      	beq.n	8000f86 <HAL_GPIO_Init+0x25a>
 8000f76:	683b      	ldr	r3, [r7, #0]
 8000f78:	689b      	ldr	r3, [r3, #8]
 8000f7a:	2b02      	cmp	r3, #2
 8000f7c:	d003      	beq.n	8000f86 <HAL_GPIO_Init+0x25a>
 8000f7e:	21f7      	movs	r1, #247	; 0xf7
 8000f80:	4811      	ldr	r0, [pc, #68]	; (8000fc8 <HAL_GPIO_Init+0x29c>)
 8000f82:	f7ff f993 	bl	80002ac <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	689b      	ldr	r3, [r3, #8]
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d102      	bne.n	8000f94 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	623b      	str	r3, [r7, #32]
          break;
 8000f92:	e02a      	b.n	8000fea <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	689b      	ldr	r3, [r3, #8]
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d105      	bne.n	8000fa8 <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000f9c:	2308      	movs	r3, #8
 8000f9e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	69fa      	ldr	r2, [r7, #28]
 8000fa4:	611a      	str	r2, [r3, #16]
          break;
 8000fa6:	e020      	b.n	8000fea <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	69fa      	ldr	r2, [r7, #28]
 8000fb0:	615a      	str	r2, [r3, #20]
          break;
 8000fb2:	e01a      	b.n	8000fea <HAL_GPIO_Init+0x2be>
 8000fb4:	40010800 	.word	0x40010800
 8000fb8:	40010c00 	.word	0x40010c00
 8000fbc:	40011000 	.word	0x40011000
 8000fc0:	40011400 	.word	0x40011400
 8000fc4:	40011800 	.word	0x40011800
 8000fc8:	08004dbc 	.word	0x08004dbc
 8000fcc:	10110000 	.word	0x10110000
 8000fd0:	10210000 	.word	0x10210000
 8000fd4:	10310000 	.word	0x10310000
 8000fd8:	10120000 	.word	0x10120000
 8000fdc:	10220000 	.word	0x10220000
 8000fe0:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	623b      	str	r3, [r7, #32]
          break;
 8000fe8:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000fea:	69bb      	ldr	r3, [r7, #24]
 8000fec:	2bff      	cmp	r3, #255	; 0xff
 8000fee:	d801      	bhi.n	8000ff4 <HAL_GPIO_Init+0x2c8>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	e001      	b.n	8000ff8 <HAL_GPIO_Init+0x2cc>
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3304      	adds	r3, #4
 8000ff8:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	2bff      	cmp	r3, #255	; 0xff
 8000ffe:	d802      	bhi.n	8001006 <HAL_GPIO_Init+0x2da>
 8001000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001002:	009b      	lsls	r3, r3, #2
 8001004:	e002      	b.n	800100c <HAL_GPIO_Init+0x2e0>
 8001006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001008:	3b08      	subs	r3, #8
 800100a:	009b      	lsls	r3, r3, #2
 800100c:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	681a      	ldr	r2, [r3, #0]
 8001012:	210f      	movs	r1, #15
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	fa01 f303 	lsl.w	r3, r1, r3
 800101a:	43db      	mvns	r3, r3
 800101c:	401a      	ands	r2, r3
 800101e:	6a39      	ldr	r1, [r7, #32]
 8001020:	693b      	ldr	r3, [r7, #16]
 8001022:	fa01 f303 	lsl.w	r3, r1, r3
 8001026:	431a      	orrs	r2, r3
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001034:	2b00      	cmp	r3, #0
 8001036:	f000 8096 	beq.w	8001166 <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800103a:	4b52      	ldr	r3, [pc, #328]	; (8001184 <HAL_GPIO_Init+0x458>)
 800103c:	699b      	ldr	r3, [r3, #24]
 800103e:	4a51      	ldr	r2, [pc, #324]	; (8001184 <HAL_GPIO_Init+0x458>)
 8001040:	f043 0301 	orr.w	r3, r3, #1
 8001044:	6193      	str	r3, [r2, #24]
 8001046:	4b4f      	ldr	r3, [pc, #316]	; (8001184 <HAL_GPIO_Init+0x458>)
 8001048:	699b      	ldr	r3, [r3, #24]
 800104a:	f003 0301 	and.w	r3, r3, #1
 800104e:	60bb      	str	r3, [r7, #8]
 8001050:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001052:	4a4d      	ldr	r2, [pc, #308]	; (8001188 <HAL_GPIO_Init+0x45c>)
 8001054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001056:	089b      	lsrs	r3, r3, #2
 8001058:	3302      	adds	r3, #2
 800105a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800105e:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001062:	f003 0303 	and.w	r3, r3, #3
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	220f      	movs	r2, #15
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	4013      	ands	r3, r2
 8001074:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4a44      	ldr	r2, [pc, #272]	; (800118c <HAL_GPIO_Init+0x460>)
 800107a:	4293      	cmp	r3, r2
 800107c:	d013      	beq.n	80010a6 <HAL_GPIO_Init+0x37a>
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	4a43      	ldr	r2, [pc, #268]	; (8001190 <HAL_GPIO_Init+0x464>)
 8001082:	4293      	cmp	r3, r2
 8001084:	d00d      	beq.n	80010a2 <HAL_GPIO_Init+0x376>
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	4a42      	ldr	r2, [pc, #264]	; (8001194 <HAL_GPIO_Init+0x468>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d007      	beq.n	800109e <HAL_GPIO_Init+0x372>
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	4a41      	ldr	r2, [pc, #260]	; (8001198 <HAL_GPIO_Init+0x46c>)
 8001092:	4293      	cmp	r3, r2
 8001094:	d101      	bne.n	800109a <HAL_GPIO_Init+0x36e>
 8001096:	2303      	movs	r3, #3
 8001098:	e006      	b.n	80010a8 <HAL_GPIO_Init+0x37c>
 800109a:	2304      	movs	r3, #4
 800109c:	e004      	b.n	80010a8 <HAL_GPIO_Init+0x37c>
 800109e:	2302      	movs	r3, #2
 80010a0:	e002      	b.n	80010a8 <HAL_GPIO_Init+0x37c>
 80010a2:	2301      	movs	r3, #1
 80010a4:	e000      	b.n	80010a8 <HAL_GPIO_Init+0x37c>
 80010a6:	2300      	movs	r3, #0
 80010a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80010aa:	f002 0203 	and.w	r2, r2, #3
 80010ae:	0092      	lsls	r2, r2, #2
 80010b0:	4093      	lsls	r3, r2
 80010b2:	68fa      	ldr	r2, [r7, #12]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80010b8:	4933      	ldr	r1, [pc, #204]	; (8001188 <HAL_GPIO_Init+0x45c>)
 80010ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010bc:	089b      	lsrs	r3, r3, #2
 80010be:	3302      	adds	r3, #2
 80010c0:	68fa      	ldr	r2, [r7, #12]
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80010c6:	683b      	ldr	r3, [r7, #0]
 80010c8:	685b      	ldr	r3, [r3, #4]
 80010ca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d006      	beq.n	80010e0 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <HAL_GPIO_Init+0x470>)
 80010d4:	681a      	ldr	r2, [r3, #0]
 80010d6:	4931      	ldr	r1, [pc, #196]	; (800119c <HAL_GPIO_Init+0x470>)
 80010d8:	69bb      	ldr	r3, [r7, #24]
 80010da:	4313      	orrs	r3, r2
 80010dc:	600b      	str	r3, [r1, #0]
 80010de:	e006      	b.n	80010ee <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80010e0:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HAL_GPIO_Init+0x470>)
 80010e2:	681a      	ldr	r2, [r3, #0]
 80010e4:	69bb      	ldr	r3, [r7, #24]
 80010e6:	43db      	mvns	r3, r3
 80010e8:	492c      	ldr	r1, [pc, #176]	; (800119c <HAL_GPIO_Init+0x470>)
 80010ea:	4013      	ands	r3, r2
 80010ec:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010ee:	683b      	ldr	r3, [r7, #0]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d006      	beq.n	8001108 <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80010fa:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_GPIO_Init+0x470>)
 80010fc:	685a      	ldr	r2, [r3, #4]
 80010fe:	4927      	ldr	r1, [pc, #156]	; (800119c <HAL_GPIO_Init+0x470>)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	604b      	str	r3, [r1, #4]
 8001106:	e006      	b.n	8001116 <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_GPIO_Init+0x470>)
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	69bb      	ldr	r3, [r7, #24]
 800110e:	43db      	mvns	r3, r3
 8001110:	4922      	ldr	r1, [pc, #136]	; (800119c <HAL_GPIO_Init+0x470>)
 8001112:	4013      	ands	r3, r2
 8001114:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	685b      	ldr	r3, [r3, #4]
 800111a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800111e:	2b00      	cmp	r3, #0
 8001120:	d006      	beq.n	8001130 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001122:	4b1e      	ldr	r3, [pc, #120]	; (800119c <HAL_GPIO_Init+0x470>)
 8001124:	689a      	ldr	r2, [r3, #8]
 8001126:	491d      	ldr	r1, [pc, #116]	; (800119c <HAL_GPIO_Init+0x470>)
 8001128:	69bb      	ldr	r3, [r7, #24]
 800112a:	4313      	orrs	r3, r2
 800112c:	608b      	str	r3, [r1, #8]
 800112e:	e006      	b.n	800113e <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001130:	4b1a      	ldr	r3, [pc, #104]	; (800119c <HAL_GPIO_Init+0x470>)
 8001132:	689a      	ldr	r2, [r3, #8]
 8001134:	69bb      	ldr	r3, [r7, #24]
 8001136:	43db      	mvns	r3, r3
 8001138:	4918      	ldr	r1, [pc, #96]	; (800119c <HAL_GPIO_Init+0x470>)
 800113a:	4013      	ands	r3, r2
 800113c:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001146:	2b00      	cmp	r3, #0
 8001148:	d006      	beq.n	8001158 <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <HAL_GPIO_Init+0x470>)
 800114c:	68da      	ldr	r2, [r3, #12]
 800114e:	4913      	ldr	r1, [pc, #76]	; (800119c <HAL_GPIO_Init+0x470>)
 8001150:	69bb      	ldr	r3, [r7, #24]
 8001152:	4313      	orrs	r3, r2
 8001154:	60cb      	str	r3, [r1, #12]
 8001156:	e006      	b.n	8001166 <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001158:	4b10      	ldr	r3, [pc, #64]	; (800119c <HAL_GPIO_Init+0x470>)
 800115a:	68da      	ldr	r2, [r3, #12]
 800115c:	69bb      	ldr	r3, [r7, #24]
 800115e:	43db      	mvns	r3, r3
 8001160:	490e      	ldr	r1, [pc, #56]	; (800119c <HAL_GPIO_Init+0x470>)
 8001162:	4013      	ands	r3, r2
 8001164:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	3301      	adds	r3, #1
 800116a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	681a      	ldr	r2, [r3, #0]
 8001170:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001172:	fa22 f303 	lsr.w	r3, r2, r3
 8001176:	2b00      	cmp	r3, #0
 8001178:	f47f ae4f 	bne.w	8000e1a <HAL_GPIO_Init+0xee>
  }
}
 800117c:	bf00      	nop
 800117e:	3728      	adds	r7, #40	; 0x28
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	40021000 	.word	0x40021000
 8001188:	40010000 	.word	0x40010000
 800118c:	40010800 	.word	0x40010800
 8001190:	40010c00 	.word	0x40010c00
 8001194:	40011000 	.word	0x40011000
 8001198:	40011400 	.word	0x40011400
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	460b      	mov	r3, r1
 80011aa:	807b      	strh	r3, [r7, #2]
 80011ac:	4613      	mov	r3, r2
 80011ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80011b0:	887b      	ldrh	r3, [r7, #2]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d004      	beq.n	80011c0 <HAL_GPIO_WritePin+0x20>
 80011b6:	887b      	ldrh	r3, [r7, #2]
 80011b8:	0c1b      	lsrs	r3, r3, #16
 80011ba:	041b      	lsls	r3, r3, #16
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d004      	beq.n	80011ca <HAL_GPIO_WritePin+0x2a>
 80011c0:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 80011c4:	480e      	ldr	r0, [pc, #56]	; (8001200 <HAL_GPIO_WritePin+0x60>)
 80011c6:	f7ff f871 	bl	80002ac <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80011ca:	787b      	ldrb	r3, [r7, #1]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d007      	beq.n	80011e0 <HAL_GPIO_WritePin+0x40>
 80011d0:	787b      	ldrb	r3, [r7, #1]
 80011d2:	2b01      	cmp	r3, #1
 80011d4:	d004      	beq.n	80011e0 <HAL_GPIO_WritePin+0x40>
 80011d6:	f240 11d5 	movw	r1, #469	; 0x1d5
 80011da:	4809      	ldr	r0, [pc, #36]	; (8001200 <HAL_GPIO_WritePin+0x60>)
 80011dc:	f7ff f866 	bl	80002ac <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 80011e0:	787b      	ldrb	r3, [r7, #1]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d003      	beq.n	80011ee <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80011e6:	887a      	ldrh	r2, [r7, #2]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80011ec:	e003      	b.n	80011f6 <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80011ee:	887b      	ldrh	r3, [r7, #2]
 80011f0:	041a      	lsls	r2, r3, #16
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	611a      	str	r2, [r3, #16]
}
 80011f6:	bf00      	nop
 80011f8:	3708      	adds	r7, #8
 80011fa:	46bd      	mov	sp, r7
 80011fc:	bd80      	pop	{r7, pc}
 80011fe:	bf00      	nop
 8001200:	08004dbc 	.word	0x08004dbc

08001204 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d101      	bne.n	8001216 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e35c      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d01c      	beq.n	8001258 <HAL_RCC_OscConfig+0x54>
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f003 0301 	and.w	r3, r3, #1
 8001226:	2b00      	cmp	r3, #0
 8001228:	d116      	bne.n	8001258 <HAL_RCC_OscConfig+0x54>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d110      	bne.n	8001258 <HAL_RCC_OscConfig+0x54>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f003 0308 	and.w	r3, r3, #8
 800123e:	2b00      	cmp	r3, #0
 8001240:	d10a      	bne.n	8001258 <HAL_RCC_OscConfig+0x54>
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0304 	and.w	r3, r3, #4
 800124a:	2b00      	cmp	r3, #0
 800124c:	d104      	bne.n	8001258 <HAL_RCC_OscConfig+0x54>
 800124e:	f240 1167 	movw	r1, #359	; 0x167
 8001252:	48a5      	ldr	r0, [pc, #660]	; (80014e8 <HAL_RCC_OscConfig+0x2e4>)
 8001254:	f7ff f82a 	bl	80002ac <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0301 	and.w	r3, r3, #1
 8001260:	2b00      	cmp	r3, #0
 8001262:	f000 809a 	beq.w	800139a <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	685b      	ldr	r3, [r3, #4]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d00e      	beq.n	800128c <HAL_RCC_OscConfig+0x88>
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	685b      	ldr	r3, [r3, #4]
 8001272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001276:	d009      	beq.n	800128c <HAL_RCC_OscConfig+0x88>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001280:	d004      	beq.n	800128c <HAL_RCC_OscConfig+0x88>
 8001282:	f240 116d 	movw	r1, #365	; 0x16d
 8001286:	4898      	ldr	r0, [pc, #608]	; (80014e8 <HAL_RCC_OscConfig+0x2e4>)
 8001288:	f7ff f810 	bl	80002ac <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800128c:	4b97      	ldr	r3, [pc, #604]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800128e:	685b      	ldr	r3, [r3, #4]
 8001290:	f003 030c 	and.w	r3, r3, #12
 8001294:	2b04      	cmp	r3, #4
 8001296:	d00c      	beq.n	80012b2 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001298:	4b94      	ldr	r3, [pc, #592]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 030c 	and.w	r3, r3, #12
 80012a0:	2b08      	cmp	r3, #8
 80012a2:	d112      	bne.n	80012ca <HAL_RCC_OscConfig+0xc6>
 80012a4:	4b91      	ldr	r3, [pc, #580]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b0:	d10b      	bne.n	80012ca <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012b2:	4b8e      	ldr	r3, [pc, #568]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d06c      	beq.n	8001398 <HAL_RCC_OscConfig+0x194>
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d168      	bne.n	8001398 <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 80012c6:	2301      	movs	r3, #1
 80012c8:	e302      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012d2:	d106      	bne.n	80012e2 <HAL_RCC_OscConfig+0xde>
 80012d4:	4b85      	ldr	r3, [pc, #532]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a84      	ldr	r2, [pc, #528]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012de:	6013      	str	r3, [r2, #0]
 80012e0:	e02e      	b.n	8001340 <HAL_RCC_OscConfig+0x13c>
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	685b      	ldr	r3, [r3, #4]
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d10c      	bne.n	8001304 <HAL_RCC_OscConfig+0x100>
 80012ea:	4b80      	ldr	r3, [pc, #512]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	4a7f      	ldr	r2, [pc, #508]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012f4:	6013      	str	r3, [r2, #0]
 80012f6:	4b7d      	ldr	r3, [pc, #500]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4a7c      	ldr	r2, [pc, #496]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80012fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001300:	6013      	str	r3, [r2, #0]
 8001302:	e01d      	b.n	8001340 <HAL_RCC_OscConfig+0x13c>
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x124>
 800130e:	4b77      	ldr	r3, [pc, #476]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4a76      	ldr	r2, [pc, #472]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001314:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001318:	6013      	str	r3, [r2, #0]
 800131a:	4b74      	ldr	r3, [pc, #464]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	4a73      	ldr	r2, [pc, #460]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001320:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001324:	6013      	str	r3, [r2, #0]
 8001326:	e00b      	b.n	8001340 <HAL_RCC_OscConfig+0x13c>
 8001328:	4b70      	ldr	r3, [pc, #448]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	4a6f      	ldr	r2, [pc, #444]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800132e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001332:	6013      	str	r3, [r2, #0]
 8001334:	4b6d      	ldr	r3, [pc, #436]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a6c      	ldr	r2, [pc, #432]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800133a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800133e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	685b      	ldr	r3, [r3, #4]
 8001344:	2b00      	cmp	r3, #0
 8001346:	d013      	beq.n	8001370 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001348:	f7ff fb34 	bl	80009b4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800134e:	e008      	b.n	8001362 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001350:	f7ff fb30 	bl	80009b4 <HAL_GetTick>
 8001354:	4602      	mov	r2, r0
 8001356:	693b      	ldr	r3, [r7, #16]
 8001358:	1ad3      	subs	r3, r2, r3
 800135a:	2b64      	cmp	r3, #100	; 0x64
 800135c:	d901      	bls.n	8001362 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 800135e:	2303      	movs	r3, #3
 8001360:	e2b6      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001362:	4b62      	ldr	r3, [pc, #392]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0f0      	beq.n	8001350 <HAL_RCC_OscConfig+0x14c>
 800136e:	e014      	b.n	800139a <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001370:	f7ff fb20 	bl	80009b4 <HAL_GetTick>
 8001374:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001376:	e008      	b.n	800138a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001378:	f7ff fb1c 	bl	80009b4 <HAL_GetTick>
 800137c:	4602      	mov	r2, r0
 800137e:	693b      	ldr	r3, [r7, #16]
 8001380:	1ad3      	subs	r3, r2, r3
 8001382:	2b64      	cmp	r3, #100	; 0x64
 8001384:	d901      	bls.n	800138a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8001386:	2303      	movs	r3, #3
 8001388:	e2a2      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800138a:	4b58      	ldr	r3, [pc, #352]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001392:	2b00      	cmp	r3, #0
 8001394:	d1f0      	bne.n	8001378 <HAL_RCC_OscConfig+0x174>
 8001396:	e000      	b.n	800139a <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001398:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f003 0302 	and.w	r3, r3, #2
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d079      	beq.n	800149a <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d008      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1bc>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	691b      	ldr	r3, [r3, #16]
 80013b2:	2b01      	cmp	r3, #1
 80013b4:	d004      	beq.n	80013c0 <HAL_RCC_OscConfig+0x1bc>
 80013b6:	f240 11a1 	movw	r1, #417	; 0x1a1
 80013ba:	484b      	ldr	r0, [pc, #300]	; (80014e8 <HAL_RCC_OscConfig+0x2e4>)
 80013bc:	f7fe ff76 	bl	80002ac <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	695b      	ldr	r3, [r3, #20]
 80013c4:	2b1f      	cmp	r3, #31
 80013c6:	d904      	bls.n	80013d2 <HAL_RCC_OscConfig+0x1ce>
 80013c8:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 80013cc:	4846      	ldr	r0, [pc, #280]	; (80014e8 <HAL_RCC_OscConfig+0x2e4>)
 80013ce:	f7fe ff6d 	bl	80002ac <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013d2:	4b46      	ldr	r3, [pc, #280]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80013de:	4b43      	ldr	r3, [pc, #268]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80013e0:	685b      	ldr	r3, [r3, #4]
 80013e2:	f003 030c 	and.w	r3, r3, #12
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x220>
 80013ea:	4b40      	ldr	r3, [pc, #256]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b3d      	ldr	r3, [pc, #244]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x20a>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	691b      	ldr	r3, [r3, #16]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e260      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b37      	ldr	r3, [pc, #220]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	695b      	ldr	r3, [r3, #20]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4933      	ldr	r1, [pc, #204]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	691b      	ldr	r3, [r3, #16]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_RCC_OscConfig+0x2ec>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001432:	f7ff fabf 	bl	80009b4 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fabb 	bl	80009b4 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e241      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b27      	ldr	r3, [pc, #156]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	695b      	ldr	r3, [r3, #20]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4921      	ldr	r1, [pc, #132]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b20      	ldr	r3, [pc, #128]	; (80014f0 <HAL_RCC_OscConfig+0x2ec>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001474:	f7ff fa9e 	bl	80009b4 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fa9a 	bl	80009b4 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e220      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b17      	ldr	r3, [pc, #92]	; (80014ec <HAL_RCC_OscConfig+0x2e8>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d048      	beq.n	8001538 <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	699b      	ldr	r3, [r3, #24]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d008      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2bc>
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	699b      	ldr	r3, [r3, #24]
 80014b2:	2b01      	cmp	r3, #1
 80014b4:	d004      	beq.n	80014c0 <HAL_RCC_OscConfig+0x2bc>
 80014b6:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 80014ba:	480b      	ldr	r0, [pc, #44]	; (80014e8 <HAL_RCC_OscConfig+0x2e4>)
 80014bc:	f7fe fef6 	bl	80002ac <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d021      	beq.n	800150c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_RCC_OscConfig+0x2f0>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014ce:	f7ff fa71 	bl	80009b4 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014d4:	e010      	b.n	80014f8 <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014d6:	f7ff fa6d 	bl	80009b4 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d909      	bls.n	80014f8 <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1f3      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
 80014e8:	08004df8 	.word	0x08004df8
 80014ec:	40021000 	.word	0x40021000
 80014f0:	42420000 	.word	0x42420000
 80014f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014f8:	4b67      	ldr	r3, [pc, #412]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 80014fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014fc:	f003 0302 	and.w	r3, r3, #2
 8001500:	2b00      	cmp	r3, #0
 8001502:	d0e8      	beq.n	80014d6 <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001504:	2001      	movs	r0, #1
 8001506:	f000 fc11 	bl	8001d2c <RCC_Delay>
 800150a:	e015      	b.n	8001538 <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800150c:	4b63      	ldr	r3, [pc, #396]	; (800169c <HAL_RCC_OscConfig+0x498>)
 800150e:	2200      	movs	r2, #0
 8001510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001512:	f7ff fa4f 	bl	80009b4 <HAL_GetTick>
 8001516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001518:	e008      	b.n	800152c <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800151a:	f7ff fa4b 	bl	80009b4 <HAL_GetTick>
 800151e:	4602      	mov	r2, r0
 8001520:	693b      	ldr	r3, [r7, #16]
 8001522:	1ad3      	subs	r3, r2, r3
 8001524:	2b02      	cmp	r3, #2
 8001526:	d901      	bls.n	800152c <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e1d1      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800152c:	4b5a      	ldr	r3, [pc, #360]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d1f0      	bne.n	800151a <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	f003 0304 	and.w	r3, r3, #4
 8001540:	2b00      	cmp	r3, #0
 8001542:	f000 80c0 	beq.w	80016c6 <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001546:	2300      	movs	r3, #0
 8001548:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	68db      	ldr	r3, [r3, #12]
 800154e:	2b00      	cmp	r3, #0
 8001550:	d00c      	beq.n	800156c <HAL_RCC_OscConfig+0x368>
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	68db      	ldr	r3, [r3, #12]
 8001556:	2b01      	cmp	r3, #1
 8001558:	d008      	beq.n	800156c <HAL_RCC_OscConfig+0x368>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	2b05      	cmp	r3, #5
 8001560:	d004      	beq.n	800156c <HAL_RCC_OscConfig+0x368>
 8001562:	f240 2111 	movw	r1, #529	; 0x211
 8001566:	484e      	ldr	r0, [pc, #312]	; (80016a0 <HAL_RCC_OscConfig+0x49c>)
 8001568:	f7fe fea0 	bl	80002ac <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800156c:	4b4a      	ldr	r3, [pc, #296]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800156e:	69db      	ldr	r3, [r3, #28]
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	2b00      	cmp	r3, #0
 8001576:	d10d      	bne.n	8001594 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001578:	4b47      	ldr	r3, [pc, #284]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800157a:	69db      	ldr	r3, [r3, #28]
 800157c:	4a46      	ldr	r2, [pc, #280]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800157e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001582:	61d3      	str	r3, [r2, #28]
 8001584:	4b44      	ldr	r3, [pc, #272]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 8001586:	69db      	ldr	r3, [r3, #28]
 8001588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800158c:	60bb      	str	r3, [r7, #8]
 800158e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001590:	2301      	movs	r3, #1
 8001592:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b43      	ldr	r3, [pc, #268]	; (80016a4 <HAL_RCC_OscConfig+0x4a0>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d118      	bne.n	80015d2 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a0:	4b40      	ldr	r3, [pc, #256]	; (80016a4 <HAL_RCC_OscConfig+0x4a0>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a3f      	ldr	r2, [pc, #252]	; (80016a4 <HAL_RCC_OscConfig+0x4a0>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ac:	f7ff fa02 	bl	80009b4 <HAL_GetTick>
 80015b0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	e008      	b.n	80015c6 <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b4:	f7ff f9fe 	bl	80009b4 <HAL_GetTick>
 80015b8:	4602      	mov	r2, r0
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	1ad3      	subs	r3, r2, r3
 80015be:	2b64      	cmp	r3, #100	; 0x64
 80015c0:	d901      	bls.n	80015c6 <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e184      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015c6:	4b37      	ldr	r3, [pc, #220]	; (80016a4 <HAL_RCC_OscConfig+0x4a0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d0f0      	beq.n	80015b4 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d106      	bne.n	80015e8 <HAL_RCC_OscConfig+0x3e4>
 80015da:	4b2f      	ldr	r3, [pc, #188]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 80015dc:	6a1b      	ldr	r3, [r3, #32]
 80015de:	4a2e      	ldr	r2, [pc, #184]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 80015e0:	f043 0301 	orr.w	r3, r3, #1
 80015e4:	6213      	str	r3, [r2, #32]
 80015e6:	e02d      	b.n	8001644 <HAL_RCC_OscConfig+0x440>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x406>
 80015f0:	4b29      	ldr	r3, [pc, #164]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	4a28      	ldr	r2, [pc, #160]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 80015f6:	f023 0301 	bic.w	r3, r3, #1
 80015fa:	6213      	str	r3, [r2, #32]
 80015fc:	4b26      	ldr	r3, [pc, #152]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4a25      	ldr	r2, [pc, #148]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 8001602:	f023 0304 	bic.w	r3, r3, #4
 8001606:	6213      	str	r3, [r2, #32]
 8001608:	e01c      	b.n	8001644 <HAL_RCC_OscConfig+0x440>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x428>
 8001612:	4b21      	ldr	r3, [pc, #132]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a20      	ldr	r2, [pc, #128]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 8001618:	f043 0304 	orr.w	r3, r3, #4
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	4b1e      	ldr	r3, [pc, #120]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a1d      	ldr	r2, [pc, #116]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 8001624:	f043 0301 	orr.w	r3, r3, #1
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	e00b      	b.n	8001644 <HAL_RCC_OscConfig+0x440>
 800162c:	4b1a      	ldr	r3, [pc, #104]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800162e:	6a1b      	ldr	r3, [r3, #32]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 8001632:	f023 0301 	bic.w	r3, r3, #1
 8001636:	6213      	str	r3, [r2, #32]
 8001638:	4b17      	ldr	r3, [pc, #92]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800163a:	6a1b      	ldr	r3, [r3, #32]
 800163c:	4a16      	ldr	r2, [pc, #88]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800163e:	f023 0304 	bic.w	r3, r3, #4
 8001642:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	68db      	ldr	r3, [r3, #12]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d015      	beq.n	8001678 <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800164c:	f7ff f9b2 	bl	80009b4 <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001652:	e00a      	b.n	800166a <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001654:	f7ff f9ae 	bl	80009b4 <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001662:	4293      	cmp	r3, r2
 8001664:	d901      	bls.n	800166a <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 8001666:	2303      	movs	r3, #3
 8001668:	e132      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800166a:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <HAL_RCC_OscConfig+0x494>)
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	f003 0302 	and.w	r3, r3, #2
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0ee      	beq.n	8001654 <HAL_RCC_OscConfig+0x450>
 8001676:	e01d      	b.n	80016b4 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001678:	f7ff f99c 	bl	80009b4 <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800167e:	e013      	b.n	80016a8 <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001680:	f7ff f998 	bl	80009b4 <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	f241 3288 	movw	r2, #5000	; 0x1388
 800168e:	4293      	cmp	r3, r2
 8001690:	d90a      	bls.n	80016a8 <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e11c      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000
 800169c:	42420480 	.word	0x42420480
 80016a0:	08004df8 	.word	0x08004df8
 80016a4:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016a8:	4b8b      	ldr	r3, [pc, #556]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	f003 0302 	and.w	r3, r3, #2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1e5      	bne.n	8001680 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016b4:	7dfb      	ldrb	r3, [r7, #23]
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d105      	bne.n	80016c6 <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016ba:	4b87      	ldr	r3, [pc, #540]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 80016bc:	69db      	ldr	r3, [r3, #28]
 80016be:	4a86      	ldr	r2, [pc, #536]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 80016c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80016c4:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d00c      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4e4>
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	69db      	ldr	r3, [r3, #28]
 80016d2:	2b01      	cmp	r3, #1
 80016d4:	d008      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4e4>
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	69db      	ldr	r3, [r3, #28]
 80016da:	2b02      	cmp	r3, #2
 80016dc:	d004      	beq.n	80016e8 <HAL_RCC_OscConfig+0x4e4>
 80016de:	f240 21af 	movw	r1, #687	; 0x2af
 80016e2:	487e      	ldr	r0, [pc, #504]	; (80018dc <HAL_RCC_OscConfig+0x6d8>)
 80016e4:	f7fe fde2 	bl	80002ac <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	f000 80ee 	beq.w	80018ce <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016f2:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	f003 030c 	and.w	r3, r3, #12
 80016fa:	2b08      	cmp	r3, #8
 80016fc:	f000 80ce 	beq.w	800189c <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	69db      	ldr	r3, [r3, #28]
 8001704:	2b02      	cmp	r3, #2
 8001706:	f040 80b2 	bne.w	800186e <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	2b00      	cmp	r3, #0
 8001710:	d009      	beq.n	8001726 <HAL_RCC_OscConfig+0x522>
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6a1b      	ldr	r3, [r3, #32]
 8001716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800171a:	d004      	beq.n	8001726 <HAL_RCC_OscConfig+0x522>
 800171c:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 8001720:	486e      	ldr	r0, [pc, #440]	; (80018dc <HAL_RCC_OscConfig+0x6d8>)
 8001722:	f7fe fdc3 	bl	80002ac <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800172a:	2b00      	cmp	r3, #0
 800172c:	d04a      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001736:	d045      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800173c:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001740:	d040      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001746:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800174a:	d03b      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001750:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001754:	d036      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800175e:	d031      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001764:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8001768:	d02c      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001772:	d027      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001778:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800177c:	d022      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001782:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8001786:	d01d      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001790:	d018      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001796:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800179a:	d013      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017a0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80017a4:	d00e      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017aa:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 80017ae:	d009      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b4:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 80017b8:	d004      	beq.n	80017c4 <HAL_RCC_OscConfig+0x5c0>
 80017ba:	f240 21b9 	movw	r1, #697	; 0x2b9
 80017be:	4847      	ldr	r0, [pc, #284]	; (80018dc <HAL_RCC_OscConfig+0x6d8>)
 80017c0:	f7fe fd74 	bl	80002ac <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017c4:	4b46      	ldr	r3, [pc, #280]	; (80018e0 <HAL_RCC_OscConfig+0x6dc>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017ca:	f7ff f8f3 	bl	80009b4 <HAL_GetTick>
 80017ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017d0:	e008      	b.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017d2:	f7ff f8ef 	bl	80009b4 <HAL_GetTick>
 80017d6:	4602      	mov	r2, r0
 80017d8:	693b      	ldr	r3, [r7, #16]
 80017da:	1ad3      	subs	r3, r2, r3
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d901      	bls.n	80017e4 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80017e0:	2303      	movs	r3, #3
 80017e2:	e075      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80017e4:	4b3c      	ldr	r3, [pc, #240]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d1f0      	bne.n	80017d2 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6a1b      	ldr	r3, [r3, #32]
 80017f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017f8:	d116      	bne.n	8001828 <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d009      	beq.n	8001816 <HAL_RCC_OscConfig+0x612>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800180a:	d004      	beq.n	8001816 <HAL_RCC_OscConfig+0x612>
 800180c:	f240 21cf 	movw	r1, #719	; 0x2cf
 8001810:	4832      	ldr	r0, [pc, #200]	; (80018dc <HAL_RCC_OscConfig+0x6d8>)
 8001812:	f7fe fd4b 	bl	80002ac <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001816:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 8001818:	685b      	ldr	r3, [r3, #4]
 800181a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	689b      	ldr	r3, [r3, #8]
 8001822:	492d      	ldr	r1, [pc, #180]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 8001824:	4313      	orrs	r3, r2
 8001826:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001828:	4b2b      	ldr	r3, [pc, #172]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6a19      	ldr	r1, [r3, #32]
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001838:	430b      	orrs	r3, r1
 800183a:	4927      	ldr	r1, [pc, #156]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 800183c:	4313      	orrs	r3, r2
 800183e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001840:	4b27      	ldr	r3, [pc, #156]	; (80018e0 <HAL_RCC_OscConfig+0x6dc>)
 8001842:	2201      	movs	r2, #1
 8001844:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001846:	f7ff f8b5 	bl	80009b4 <HAL_GetTick>
 800184a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800184c:	e008      	b.n	8001860 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800184e:	f7ff f8b1 	bl	80009b4 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	693b      	ldr	r3, [r7, #16]
 8001856:	1ad3      	subs	r3, r2, r3
 8001858:	2b02      	cmp	r3, #2
 800185a:	d901      	bls.n	8001860 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 800185c:	2303      	movs	r3, #3
 800185e:	e037      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001860:	4b1d      	ldr	r3, [pc, #116]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001868:	2b00      	cmp	r3, #0
 800186a:	d0f0      	beq.n	800184e <HAL_RCC_OscConfig+0x64a>
 800186c:	e02f      	b.n	80018ce <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186e:	4b1c      	ldr	r3, [pc, #112]	; (80018e0 <HAL_RCC_OscConfig+0x6dc>)
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001874:	f7ff f89e 	bl	80009b4 <HAL_GetTick>
 8001878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800187a:	e008      	b.n	800188e <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187c:	f7ff f89a 	bl	80009b4 <HAL_GetTick>
 8001880:	4602      	mov	r2, r0
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	2b02      	cmp	r3, #2
 8001888:	d901      	bls.n	800188e <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800188a:	2303      	movs	r3, #3
 800188c:	e020      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188e:	4b12      	ldr	r3, [pc, #72]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f0      	bne.n	800187c <HAL_RCC_OscConfig+0x678>
 800189a:	e018      	b.n	80018ce <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	69db      	ldr	r3, [r3, #28]
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d101      	bne.n	80018a8 <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 80018a4:	2301      	movs	r3, #1
 80018a6:	e013      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018a8:	4b0b      	ldr	r3, [pc, #44]	; (80018d8 <HAL_RCC_OscConfig+0x6d4>)
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6a1b      	ldr	r3, [r3, #32]
 80018b8:	429a      	cmp	r2, r3
 80018ba:	d106      	bne.n	80018ca <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d001      	beq.n	80018ce <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e000      	b.n	80018d0 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3718      	adds	r7, #24
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}
 80018d8:	40021000 	.word	0x40021000
 80018dc:	08004df8 	.word	0x08004df8
 80018e0:	42420060 	.word	0x42420060

080018e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d101      	bne.n	80018f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018f4:	2301      	movs	r3, #1
 80018f6:	e176      	b.n	8001be6 <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d116      	bne.n	8001932 <HAL_RCC_ClockConfig+0x4e>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f003 0302 	and.w	r3, r3, #2
 800190c:	2b00      	cmp	r3, #0
 800190e:	d110      	bne.n	8001932 <HAL_RCC_ClockConfig+0x4e>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	2b00      	cmp	r3, #0
 800191a:	d10a      	bne.n	8001932 <HAL_RCC_ClockConfig+0x4e>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f003 0308 	and.w	r3, r3, #8
 8001924:	2b00      	cmp	r3, #0
 8001926:	d104      	bne.n	8001932 <HAL_RCC_ClockConfig+0x4e>
 8001928:	f44f 714e 	mov.w	r1, #824	; 0x338
 800192c:	4874      	ldr	r0, [pc, #464]	; (8001b00 <HAL_RCC_ClockConfig+0x21c>)
 800192e:	f7fe fcbd 	bl	80002ac <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d00a      	beq.n	800194e <HAL_RCC_ClockConfig+0x6a>
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	2b01      	cmp	r3, #1
 800193c:	d007      	beq.n	800194e <HAL_RCC_ClockConfig+0x6a>
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	2b02      	cmp	r3, #2
 8001942:	d004      	beq.n	800194e <HAL_RCC_ClockConfig+0x6a>
 8001944:	f240 3139 	movw	r1, #825	; 0x339
 8001948:	486d      	ldr	r0, [pc, #436]	; (8001b00 <HAL_RCC_ClockConfig+0x21c>)
 800194a:	f7fe fcaf 	bl	80002ac <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800194e:	4b6d      	ldr	r3, [pc, #436]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0307 	and.w	r3, r3, #7
 8001956:	683a      	ldr	r2, [r7, #0]
 8001958:	429a      	cmp	r2, r3
 800195a:	d910      	bls.n	800197e <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800195c:	4b69      	ldr	r3, [pc, #420]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f023 0207 	bic.w	r2, r3, #7
 8001964:	4967      	ldr	r1, [pc, #412]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	4313      	orrs	r3, r2
 800196a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800196c:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 0307 	and.w	r3, r3, #7
 8001974:	683a      	ldr	r2, [r7, #0]
 8001976:	429a      	cmp	r2, r3
 8001978:	d001      	beq.n	800197e <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e133      	b.n	8001be6 <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d049      	beq.n	8001a1e <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 0304 	and.w	r3, r3, #4
 8001992:	2b00      	cmp	r3, #0
 8001994:	d005      	beq.n	80019a2 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001996:	4b5c      	ldr	r3, [pc, #368]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4a5b      	ldr	r2, [pc, #364]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 800199c:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019a0:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0308 	and.w	r3, r3, #8
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d005      	beq.n	80019ba <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019ae:	4b56      	ldr	r3, [pc, #344]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 80019b0:	685b      	ldr	r3, [r3, #4]
 80019b2:	4a55      	ldr	r2, [pc, #340]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 80019b4:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019b8:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d024      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	689b      	ldr	r3, [r3, #8]
 80019c6:	2b80      	cmp	r3, #128	; 0x80
 80019c8:	d020      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b90      	cmp	r3, #144	; 0x90
 80019d0:	d01c      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	689b      	ldr	r3, [r3, #8]
 80019d6:	2ba0      	cmp	r3, #160	; 0xa0
 80019d8:	d018      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	2bb0      	cmp	r3, #176	; 0xb0
 80019e0:	d014      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2bc0      	cmp	r3, #192	; 0xc0
 80019e8:	d010      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	689b      	ldr	r3, [r3, #8]
 80019ee:	2bd0      	cmp	r3, #208	; 0xd0
 80019f0:	d00c      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2be0      	cmp	r3, #224	; 0xe0
 80019f8:	d008      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	689b      	ldr	r3, [r3, #8]
 80019fe:	2bf0      	cmp	r3, #240	; 0xf0
 8001a00:	d004      	beq.n	8001a0c <HAL_RCC_ClockConfig+0x128>
 8001a02:	f240 315f 	movw	r1, #863	; 0x35f
 8001a06:	483e      	ldr	r0, [pc, #248]	; (8001b00 <HAL_RCC_ClockConfig+0x21c>)
 8001a08:	f7fe fc50 	bl	80002ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a0c:	4b3e      	ldr	r3, [pc, #248]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	493b      	ldr	r1, [pc, #236]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 0301 	and.w	r3, r3, #1
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d051      	beq.n	8001ace <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d00c      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x168>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	2b01      	cmp	r3, #1
 8001a38:	d008      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x168>
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d004      	beq.n	8001a4c <HAL_RCC_ClockConfig+0x168>
 8001a42:	f240 3166 	movw	r1, #870	; 0x366
 8001a46:	482e      	ldr	r0, [pc, #184]	; (8001b00 <HAL_RCC_ClockConfig+0x21c>)
 8001a48:	f7fe fc30 	bl	80002ac <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d107      	bne.n	8001a64 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a54:	4b2c      	ldr	r3, [pc, #176]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d115      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e0c0      	b.n	8001be6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	685b      	ldr	r3, [r3, #4]
 8001a68:	2b02      	cmp	r3, #2
 8001a6a:	d107      	bne.n	8001a7c <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a6c:	4b26      	ldr	r3, [pc, #152]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d109      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0b4      	b.n	8001be6 <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a7c:	4b22      	ldr	r3, [pc, #136]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d101      	bne.n	8001a8c <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	e0ac      	b.n	8001be6 <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	f023 0203 	bic.w	r2, r3, #3
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	491b      	ldr	r1, [pc, #108]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a9e:	f7fe ff89 	bl	80009b4 <HAL_GetTick>
 8001aa2:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001aa4:	e00a      	b.n	8001abc <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001aa6:	f7fe ff85 	bl	80009b4 <HAL_GetTick>
 8001aaa:	4602      	mov	r2, r0
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	1ad3      	subs	r3, r2, r3
 8001ab0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab4:	4293      	cmp	r3, r2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e094      	b.n	8001be6 <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001abc:	4b12      	ldr	r3, [pc, #72]	; (8001b08 <HAL_RCC_ClockConfig+0x224>)
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	f003 020c 	and.w	r2, r3, #12
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	429a      	cmp	r2, r3
 8001acc:	d1eb      	bne.n	8001aa6 <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ace:	4b0d      	ldr	r3, [pc, #52]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	683a      	ldr	r2, [r7, #0]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d217      	bcs.n	8001b0c <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001adc:	4b09      	ldr	r3, [pc, #36]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f023 0207 	bic.w	r2, r3, #7
 8001ae4:	4907      	ldr	r1, [pc, #28]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	4313      	orrs	r3, r2
 8001aea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_ClockConfig+0x220>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d008      	beq.n	8001b0c <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 8001afa:	2301      	movs	r3, #1
 8001afc:	e073      	b.n	8001be6 <HAL_RCC_ClockConfig+0x302>
 8001afe:	bf00      	nop
 8001b00:	08004df8 	.word	0x08004df8
 8001b04:	40022000 	.word	0x40022000
 8001b08:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	f003 0304 	and.w	r3, r3, #4
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d025      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d018      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x26e>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	68db      	ldr	r3, [r3, #12]
 8001b24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b28:	d013      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x26e>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	68db      	ldr	r3, [r3, #12]
 8001b2e:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b32:	d00e      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x26e>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b3c:	d009      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x26e>
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	68db      	ldr	r3, [r3, #12]
 8001b42:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b46:	d004      	beq.n	8001b52 <HAL_RCC_ClockConfig+0x26e>
 8001b48:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001b4c:	4828      	ldr	r0, [pc, #160]	; (8001bf0 <HAL_RCC_ClockConfig+0x30c>)
 8001b4e:	f7fe fbad 	bl	80002ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b52:	4b28      	ldr	r3, [pc, #160]	; (8001bf4 <HAL_RCC_ClockConfig+0x310>)
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68db      	ldr	r3, [r3, #12]
 8001b5e:	4925      	ldr	r1, [pc, #148]	; (8001bf4 <HAL_RCC_ClockConfig+0x310>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d026      	beq.n	8001bbe <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	691b      	ldr	r3, [r3, #16]
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d018      	beq.n	8001baa <HAL_RCC_ClockConfig+0x2c6>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	691b      	ldr	r3, [r3, #16]
 8001b7c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001b80:	d013      	beq.n	8001baa <HAL_RCC_ClockConfig+0x2c6>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 8001b8a:	d00e      	beq.n	8001baa <HAL_RCC_ClockConfig+0x2c6>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	691b      	ldr	r3, [r3, #16]
 8001b90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001b94:	d009      	beq.n	8001baa <HAL_RCC_ClockConfig+0x2c6>
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	691b      	ldr	r3, [r3, #16]
 8001b9a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001b9e:	d004      	beq.n	8001baa <HAL_RCC_ClockConfig+0x2c6>
 8001ba0:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001ba4:	4812      	ldr	r0, [pc, #72]	; (8001bf0 <HAL_RCC_ClockConfig+0x30c>)
 8001ba6:	f7fe fb81 	bl	80002ac <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001baa:	4b12      	ldr	r3, [pc, #72]	; (8001bf4 <HAL_RCC_ClockConfig+0x310>)
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	691b      	ldr	r3, [r3, #16]
 8001bb6:	00db      	lsls	r3, r3, #3
 8001bb8:	490e      	ldr	r1, [pc, #56]	; (8001bf4 <HAL_RCC_ClockConfig+0x310>)
 8001bba:	4313      	orrs	r3, r2
 8001bbc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001bbe:	f000 f821 	bl	8001c04 <HAL_RCC_GetSysClockFreq>
 8001bc2:	4601      	mov	r1, r0
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	; (8001bf4 <HAL_RCC_ClockConfig+0x310>)
 8001bc6:	685b      	ldr	r3, [r3, #4]
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	f003 030f 	and.w	r3, r3, #15
 8001bce:	4a0a      	ldr	r2, [pc, #40]	; (8001bf8 <HAL_RCC_ClockConfig+0x314>)
 8001bd0:	5cd3      	ldrb	r3, [r2, r3]
 8001bd2:	fa21 f303 	lsr.w	r3, r1, r3
 8001bd6:	4a09      	ldr	r2, [pc, #36]	; (8001bfc <HAL_RCC_ClockConfig+0x318>)
 8001bd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001bda:	4b09      	ldr	r3, [pc, #36]	; (8001c00 <HAL_RCC_ClockConfig+0x31c>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4618      	mov	r0, r3
 8001be0:	f7fe feb8 	bl	8000954 <HAL_InitTick>

  return HAL_OK;
 8001be4:	2300      	movs	r3, #0
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	3710      	adds	r7, #16
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bd80      	pop	{r7, pc}
 8001bee:	bf00      	nop
 8001bf0:	08004df8 	.word	0x08004df8
 8001bf4:	40021000 	.word	0x40021000
 8001bf8:	08004f20 	.word	0x08004f20
 8001bfc:	20000000 	.word	0x20000000
 8001c00:	20000004 	.word	0x20000004

08001c04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c04:	b490      	push	{r4, r7}
 8001c06:	b08a      	sub	sp, #40	; 0x28
 8001c08:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001c0a:	4b2a      	ldr	r3, [pc, #168]	; (8001cb4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001c0c:	1d3c      	adds	r4, r7, #4
 8001c0e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001c14:	4b28      	ldr	r3, [pc, #160]	; (8001cb8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001c16:	881b      	ldrh	r3, [r3, #0]
 8001c18:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	61fb      	str	r3, [r7, #28]
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	; 0x24
 8001c26:	2300      	movs	r3, #0
 8001c28:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001c2e:	4b23      	ldr	r3, [pc, #140]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	f003 030c 	and.w	r3, r3, #12
 8001c3a:	2b04      	cmp	r3, #4
 8001c3c:	d002      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0x40>
 8001c3e:	2b08      	cmp	r3, #8
 8001c40:	d003      	beq.n	8001c4a <HAL_RCC_GetSysClockFreq+0x46>
 8001c42:	e02d      	b.n	8001ca0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001c44:	4b1e      	ldr	r3, [pc, #120]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c46:	623b      	str	r3, [r7, #32]
      break;
 8001c48:	e02d      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	0c9b      	lsrs	r3, r3, #18
 8001c4e:	f003 030f 	and.w	r3, r3, #15
 8001c52:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c56:	4413      	add	r3, r2
 8001c58:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001c5c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d013      	beq.n	8001c90 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001c68:	4b14      	ldr	r3, [pc, #80]	; (8001cbc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	0c5b      	lsrs	r3, r3, #17
 8001c6e:	f003 0301 	and.w	r3, r3, #1
 8001c72:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001c76:	4413      	add	r3, r2
 8001c78:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001c7c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4a0f      	ldr	r2, [pc, #60]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001c82:	fb02 f203 	mul.w	r2, r2, r3
 8001c86:	69bb      	ldr	r3, [r7, #24]
 8001c88:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c8e:	e004      	b.n	8001c9a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	4a0c      	ldr	r2, [pc, #48]	; (8001cc4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001c94:	fb02 f303 	mul.w	r3, r2, r3
 8001c98:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c9c:	623b      	str	r3, [r7, #32]
      break;
 8001c9e:	e002      	b.n	8001ca6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ca0:	4b07      	ldr	r3, [pc, #28]	; (8001cc0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001ca2:	623b      	str	r3, [r7, #32]
      break;
 8001ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ca6:	6a3b      	ldr	r3, [r7, #32]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bc90      	pop	{r4, r7}
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	08004e30 	.word	0x08004e30
 8001cb8:	08004e40 	.word	0x08004e40
 8001cbc:	40021000 	.word	0x40021000
 8001cc0:	007a1200 	.word	0x007a1200
 8001cc4:	003d0900 	.word	0x003d0900

08001cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001ccc:	4b02      	ldr	r3, [pc, #8]	; (8001cd8 <HAL_RCC_GetHCLKFreq+0x10>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr
 8001cd8:	20000000 	.word	0x20000000

08001cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ce0:	f7ff fff2 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001ce4:	4601      	mov	r1, r0
 8001ce6:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	0a1b      	lsrs	r3, r3, #8
 8001cec:	f003 0307 	and.w	r3, r3, #7
 8001cf0:	4a03      	ldr	r2, [pc, #12]	; (8001d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cf2:	5cd3      	ldrb	r3, [r2, r3]
 8001cf4:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	bd80      	pop	{r7, pc}
 8001cfc:	40021000 	.word	0x40021000
 8001d00:	08004f30 	.word	0x08004f30

08001d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_RCC_GetHCLKFreq>
 8001d0c:	4601      	mov	r1, r0
 8001d0e:	4b05      	ldr	r3, [pc, #20]	; (8001d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	0adb      	lsrs	r3, r3, #11
 8001d14:	f003 0307 	and.w	r3, r3, #7
 8001d18:	4a03      	ldr	r2, [pc, #12]	; (8001d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d1a:	5cd3      	ldrb	r3, [r2, r3]
 8001d1c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40021000 	.word	0x40021000
 8001d28:	08004f30 	.word	0x08004f30

08001d2c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001d34:	4b0a      	ldr	r3, [pc, #40]	; (8001d60 <RCC_Delay+0x34>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0a      	ldr	r2, [pc, #40]	; (8001d64 <RCC_Delay+0x38>)
 8001d3a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d3e:	0a5b      	lsrs	r3, r3, #9
 8001d40:	687a      	ldr	r2, [r7, #4]
 8001d42:	fb02 f303 	mul.w	r3, r2, r3
 8001d46:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001d48:	bf00      	nop
  }
  while (Delay --);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	1e5a      	subs	r2, r3, #1
 8001d4e:	60fa      	str	r2, [r7, #12]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d1f9      	bne.n	8001d48 <RCC_Delay+0x1c>
}
 8001d54:	bf00      	nop
 8001d56:	3714      	adds	r7, #20
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc80      	pop	{r7}
 8001d5c:	4770      	bx	lr
 8001d5e:	bf00      	nop
 8001d60:	20000000 	.word	0x20000000
 8001d64:	10624dd3 	.word	0x10624dd3

08001d68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b082      	sub	sp, #8
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e06f      	b.n	8001e5a <HAL_TIM_Base_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	4a39      	ldr	r2, [pc, #228]	; (8001e64 <HAL_TIM_Base_Init+0xfc>)
 8001d80:	4293      	cmp	r3, r2
 8001d82:	d013      	beq.n	8001dac <HAL_TIM_Base_Init+0x44>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8c:	d00e      	beq.n	8001dac <HAL_TIM_Base_Init+0x44>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a35      	ldr	r2, [pc, #212]	; (8001e68 <HAL_TIM_Base_Init+0x100>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d009      	beq.n	8001dac <HAL_TIM_Base_Init+0x44>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a33      	ldr	r2, [pc, #204]	; (8001e6c <HAL_TIM_Base_Init+0x104>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d004      	beq.n	8001dac <HAL_TIM_Base_Init+0x44>
 8001da2:	f44f 7189 	mov.w	r1, #274	; 0x112
 8001da6:	4832      	ldr	r0, [pc, #200]	; (8001e70 <HAL_TIM_Base_Init+0x108>)
 8001da8:	f7fe fa80 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d014      	beq.n	8001dde <HAL_TIM_Base_Init+0x76>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2b10      	cmp	r3, #16
 8001dba:	d010      	beq.n	8001dde <HAL_TIM_Base_Init+0x76>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b20      	cmp	r3, #32
 8001dc2:	d00c      	beq.n	8001dde <HAL_TIM_Base_Init+0x76>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	689b      	ldr	r3, [r3, #8]
 8001dc8:	2b40      	cmp	r3, #64	; 0x40
 8001dca:	d008      	beq.n	8001dde <HAL_TIM_Base_Init+0x76>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	2b60      	cmp	r3, #96	; 0x60
 8001dd2:	d004      	beq.n	8001dde <HAL_TIM_Base_Init+0x76>
 8001dd4:	f240 1113 	movw	r1, #275	; 0x113
 8001dd8:	4825      	ldr	r0, [pc, #148]	; (8001e70 <HAL_TIM_Base_Init+0x108>)
 8001dda:	f7fe fa67 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	691b      	ldr	r3, [r3, #16]
 8001de2:	2b00      	cmp	r3, #0
 8001de4:	d00e      	beq.n	8001e04 <HAL_TIM_Base_Init+0x9c>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	691b      	ldr	r3, [r3, #16]
 8001dea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dee:	d009      	beq.n	8001e04 <HAL_TIM_Base_Init+0x9c>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	691b      	ldr	r3, [r3, #16]
 8001df4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001df8:	d004      	beq.n	8001e04 <HAL_TIM_Base_Init+0x9c>
 8001dfa:	f44f 718a 	mov.w	r1, #276	; 0x114
 8001dfe:	481c      	ldr	r0, [pc, #112]	; (8001e70 <HAL_TIM_Base_Init+0x108>)
 8001e00:	f7fe fa54 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d008      	beq.n	8001e1e <HAL_TIM_Base_Init+0xb6>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	2b80      	cmp	r3, #128	; 0x80
 8001e12:	d004      	beq.n	8001e1e <HAL_TIM_Base_Init+0xb6>
 8001e14:	f240 1115 	movw	r1, #277	; 0x115
 8001e18:	4815      	ldr	r0, [pc, #84]	; (8001e70 <HAL_TIM_Base_Init+0x108>)
 8001e1a:	f7fe fa47 	bl	80002ac <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d106      	bne.n	8001e38 <HAL_TIM_Base_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	f7fe fc6a 	bl	800070c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681a      	ldr	r2, [r3, #0]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	3304      	adds	r3, #4
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4610      	mov	r0, r2
 8001e4c:	f000 fd3c 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001e58:	2300      	movs	r3, #0
}
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	40012c00 	.word	0x40012c00
 8001e68:	40000400 	.word	0x40000400
 8001e6c:	40000800 	.word	0x40000800
 8001e70:	08004e44 	.word	0x08004e44

08001e74 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a1a      	ldr	r2, [pc, #104]	; (8001eec <HAL_TIM_Base_Start+0x78>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d013      	beq.n	8001eae <HAL_TIM_Base_Start+0x3a>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e8e:	d00e      	beq.n	8001eae <HAL_TIM_Base_Start+0x3a>
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a16      	ldr	r2, [pc, #88]	; (8001ef0 <HAL_TIM_Base_Start+0x7c>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d009      	beq.n	8001eae <HAL_TIM_Base_Start+0x3a>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	4a15      	ldr	r2, [pc, #84]	; (8001ef4 <HAL_TIM_Base_Start+0x80>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d004      	beq.n	8001eae <HAL_TIM_Base_Start+0x3a>
 8001ea4:	f240 1185 	movw	r1, #389	; 0x185
 8001ea8:	4813      	ldr	r0, [pc, #76]	; (8001ef8 <HAL_TIM_Base_Start+0x84>)
 8001eaa:	f7fe f9ff 	bl	80002ac <assert_failed>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	f003 0307 	and.w	r3, r3, #7
 8001ec0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	2b06      	cmp	r3, #6
 8001ec6:	d007      	beq.n	8001ed8 <HAL_TIM_Base_Start+0x64>
  {
    __HAL_TIM_ENABLE(htim);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f042 0201 	orr.w	r2, r2, #1
 8001ed6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2201      	movs	r2, #1
 8001edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40012c00 	.word	0x40012c00
 8001ef0:	40000400 	.word	0x40000400
 8001ef4:	40000800 	.word	0x40000800
 8001ef8:	08004e44 	.word	0x08004e44

08001efc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d101      	bne.n	8001f0e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e06f      	b.n	8001fee <HAL_TIM_IC_Init+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a39      	ldr	r2, [pc, #228]	; (8001ff8 <HAL_TIM_IC_Init+0xfc>)
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d013      	beq.n	8001f40 <HAL_TIM_IC_Init+0x44>
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d00e      	beq.n	8001f40 <HAL_TIM_IC_Init+0x44>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a35      	ldr	r2, [pc, #212]	; (8001ffc <HAL_TIM_IC_Init+0x100>)
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d009      	beq.n	8001f40 <HAL_TIM_IC_Init+0x44>
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	4a33      	ldr	r2, [pc, #204]	; (8002000 <HAL_TIM_IC_Init+0x104>)
 8001f32:	4293      	cmp	r3, r2
 8001f34:	d004      	beq.n	8001f40 <HAL_TIM_IC_Init+0x44>
 8001f36:	f240 61d9 	movw	r1, #1753	; 0x6d9
 8001f3a:	4832      	ldr	r0, [pc, #200]	; (8002004 <HAL_TIM_IC_Init+0x108>)
 8001f3c:	f7fe f9b6 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d014      	beq.n	8001f72 <HAL_TIM_IC_Init+0x76>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	689b      	ldr	r3, [r3, #8]
 8001f4c:	2b10      	cmp	r3, #16
 8001f4e:	d010      	beq.n	8001f72 <HAL_TIM_IC_Init+0x76>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	2b20      	cmp	r3, #32
 8001f56:	d00c      	beq.n	8001f72 <HAL_TIM_IC_Init+0x76>
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	2b40      	cmp	r3, #64	; 0x40
 8001f5e:	d008      	beq.n	8001f72 <HAL_TIM_IC_Init+0x76>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	2b60      	cmp	r3, #96	; 0x60
 8001f66:	d004      	beq.n	8001f72 <HAL_TIM_IC_Init+0x76>
 8001f68:	f240 61da 	movw	r1, #1754	; 0x6da
 8001f6c:	4825      	ldr	r0, [pc, #148]	; (8002004 <HAL_TIM_IC_Init+0x108>)
 8001f6e:	f7fe f99d 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00e      	beq.n	8001f98 <HAL_TIM_IC_Init+0x9c>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	691b      	ldr	r3, [r3, #16]
 8001f7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f82:	d009      	beq.n	8001f98 <HAL_TIM_IC_Init+0x9c>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	691b      	ldr	r3, [r3, #16]
 8001f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8c:	d004      	beq.n	8001f98 <HAL_TIM_IC_Init+0x9c>
 8001f8e:	f240 61db 	movw	r1, #1755	; 0x6db
 8001f92:	481c      	ldr	r0, [pc, #112]	; (8002004 <HAL_TIM_IC_Init+0x108>)
 8001f94:	f7fe f98a 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d008      	beq.n	8001fb2 <HAL_TIM_IC_Init+0xb6>
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	699b      	ldr	r3, [r3, #24]
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d004      	beq.n	8001fb2 <HAL_TIM_IC_Init+0xb6>
 8001fa8:	f240 61dc 	movw	r1, #1756	; 0x6dc
 8001fac:	4815      	ldr	r0, [pc, #84]	; (8002004 <HAL_TIM_IC_Init+0x108>)
 8001fae:	f7fe f97d 	bl	80002ac <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_TIM_IC_Init+0xd0>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f000 f81e 	bl	8002008 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681a      	ldr	r2, [r3, #0]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3304      	adds	r3, #4
 8001fdc:	4619      	mov	r1, r3
 8001fde:	4610      	mov	r0, r2
 8001fe0:	f000 fc72 	bl	80028c8 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40012c00 	.word	0x40012c00
 8001ffc:	40000400 	.word	0x40000400
 8002000:	40000800 	.word	0x40000800
 8002004:	08004e44 	.word	0x08004e44

08002008 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	4a32      	ldr	r2, [pc, #200]	; (80020f4 <HAL_TIM_IC_Start+0xd8>)
 800202c:	4293      	cmp	r3, r2
 800202e:	d10b      	bne.n	8002048 <HAL_TIM_IC_Start+0x2c>
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d040      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	2b04      	cmp	r3, #4
 800203a:	d03d      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	2b08      	cmp	r3, #8
 8002040:	d03a      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	2b0c      	cmp	r3, #12
 8002046:	d037      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002050:	d10b      	bne.n	800206a <HAL_TIM_IC_Start+0x4e>
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d02f      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	2b04      	cmp	r3, #4
 800205c:	d02c      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	2b08      	cmp	r3, #8
 8002062:	d029      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	2b0c      	cmp	r3, #12
 8002068:	d026      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4a22      	ldr	r2, [pc, #136]	; (80020f8 <HAL_TIM_IC_Start+0xdc>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d10b      	bne.n	800208c <HAL_TIM_IC_Start+0x70>
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01e      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	2b04      	cmp	r3, #4
 800207e:	d01b      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	2b08      	cmp	r3, #8
 8002084:	d018      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	2b0c      	cmp	r3, #12
 800208a:	d015      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4a1a      	ldr	r2, [pc, #104]	; (80020fc <HAL_TIM_IC_Start+0xe0>)
 8002092:	4293      	cmp	r3, r2
 8002094:	d10b      	bne.n	80020ae <HAL_TIM_IC_Start+0x92>
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d00d      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	2b04      	cmp	r3, #4
 80020a0:	d00a      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	2b08      	cmp	r3, #8
 80020a6:	d007      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	2b0c      	cmp	r3, #12
 80020ac:	d004      	beq.n	80020b8 <HAL_TIM_IC_Start+0x9c>
 80020ae:	f240 7151 	movw	r1, #1873	; 0x751
 80020b2:	4813      	ldr	r0, [pc, #76]	; (8002100 <HAL_TIM_IC_Start+0xe4>)
 80020b4:	f7fe f8fa 	bl	80002ac <assert_failed>

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	2201      	movs	r2, #1
 80020be:	6839      	ldr	r1, [r7, #0]
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fe07 	bl	8002cd4 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 0307 	and.w	r3, r3, #7
 80020d0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2b06      	cmp	r3, #6
 80020d6:	d007      	beq.n	80020e8 <HAL_TIM_IC_Start+0xcc>
  {
    __HAL_TIM_ENABLE(htim);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f042 0201 	orr.w	r2, r2, #1
 80020e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80020e8:	2300      	movs	r3, #0
}
 80020ea:	4618      	mov	r0, r3
 80020ec:	3710      	adds	r7, #16
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bd80      	pop	{r7, pc}
 80020f2:	bf00      	nop
 80020f4:	40012c00 	.word	0x40012c00
 80020f8:	40000400 	.word	0x40000400
 80020fc:	40000800 	.word	0x40000800
 8002100:	08004e44 	.word	0x08004e44

08002104 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	60f8      	str	r0, [r7, #12]
 800210c:	60b9      	str	r1, [r7, #8]
 800210e:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4a7a      	ldr	r2, [pc, #488]	; (8002300 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d013      	beq.n	8002142 <HAL_TIM_IC_ConfigChannel+0x3e>
 800211a:	68fb      	ldr	r3, [r7, #12]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002122:	d00e      	beq.n	8002142 <HAL_TIM_IC_ConfigChannel+0x3e>
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4a76      	ldr	r2, [pc, #472]	; (8002304 <HAL_TIM_IC_ConfigChannel+0x200>)
 800212a:	4293      	cmp	r3, r2
 800212c:	d009      	beq.n	8002142 <HAL_TIM_IC_ConfigChannel+0x3e>
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	4a75      	ldr	r2, [pc, #468]	; (8002308 <HAL_TIM_IC_ConfigChannel+0x204>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d004      	beq.n	8002142 <HAL_TIM_IC_ConfigChannel+0x3e>
 8002138:	f640 5188 	movw	r1, #3464	; 0xd88
 800213c:	4873      	ldr	r0, [pc, #460]	; (800230c <HAL_TIM_IC_ConfigChannel+0x208>)
 800213e:	f7fe f8b5 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_IC_POLARITY(sConfig->ICPolarity));
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d00c      	beq.n	8002164 <HAL_TIM_IC_ConfigChannel+0x60>
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	2b02      	cmp	r3, #2
 8002150:	d008      	beq.n	8002164 <HAL_TIM_IC_ConfigChannel+0x60>
 8002152:	68bb      	ldr	r3, [r7, #8]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	2b0a      	cmp	r3, #10
 8002158:	d004      	beq.n	8002164 <HAL_TIM_IC_ConfigChannel+0x60>
 800215a:	f640 5189 	movw	r1, #3465	; 0xd89
 800215e:	486b      	ldr	r0, [pc, #428]	; (800230c <HAL_TIM_IC_ConfigChannel+0x208>)
 8002160:	f7fe f8a4 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	2b01      	cmp	r3, #1
 800216a:	d00c      	beq.n	8002186 <HAL_TIM_IC_ConfigChannel+0x82>
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b02      	cmp	r3, #2
 8002172:	d008      	beq.n	8002186 <HAL_TIM_IC_ConfigChannel+0x82>
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	2b03      	cmp	r3, #3
 800217a:	d004      	beq.n	8002186 <HAL_TIM_IC_ConfigChannel+0x82>
 800217c:	f640 518a 	movw	r1, #3466	; 0xd8a
 8002180:	4862      	ldr	r0, [pc, #392]	; (800230c <HAL_TIM_IC_ConfigChannel+0x208>)
 8002182:	f7fe f893 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d010      	beq.n	80021b0 <HAL_TIM_IC_ConfigChannel+0xac>
 800218e:	68bb      	ldr	r3, [r7, #8]
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	2b04      	cmp	r3, #4
 8002194:	d00c      	beq.n	80021b0 <HAL_TIM_IC_ConfigChannel+0xac>
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	2b08      	cmp	r3, #8
 800219c:	d008      	beq.n	80021b0 <HAL_TIM_IC_ConfigChannel+0xac>
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d004      	beq.n	80021b0 <HAL_TIM_IC_ConfigChannel+0xac>
 80021a6:	f640 518b 	movw	r1, #3467	; 0xd8b
 80021aa:	4858      	ldr	r0, [pc, #352]	; (800230c <HAL_TIM_IC_ConfigChannel+0x208>)
 80021ac:	f7fe f87e 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b0f      	cmp	r3, #15
 80021b6:	d904      	bls.n	80021c2 <HAL_TIM_IC_ConfigChannel+0xbe>
 80021b8:	f640 518c 	movw	r1, #3468	; 0xd8c
 80021bc:	4853      	ldr	r0, [pc, #332]	; (800230c <HAL_TIM_IC_ConfigChannel+0x208>)
 80021be:	f7fe f875 	bl	80002ac <assert_failed>

  /* Process Locked */
  __HAL_LOCK(htim);
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80021c8:	2b01      	cmp	r3, #1
 80021ca:	d101      	bne.n	80021d0 <HAL_TIM_IC_ConfigChannel+0xcc>
 80021cc:	2302      	movs	r3, #2
 80021ce:	e0dd      	b.n	800238c <HAL_TIM_IC_ConfigChannel+0x288>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2201      	movs	r2, #1
 80021d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	2202      	movs	r2, #2
 80021dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d11b      	bne.n	800221e <HAL_TIM_IC_ConfigChannel+0x11a>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6818      	ldr	r0, [r3, #0]
 80021ea:	68bb      	ldr	r3, [r7, #8]
 80021ec:	6819      	ldr	r1, [r3, #0]
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	685a      	ldr	r2, [r3, #4]
 80021f2:	68bb      	ldr	r3, [r7, #8]
 80021f4:	68db      	ldr	r3, [r3, #12]
 80021f6:	f000 fbc9 	bl	800298c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	699a      	ldr	r2, [r3, #24]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f022 020c 	bic.w	r2, r2, #12
 8002208:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	6999      	ldr	r1, [r3, #24]
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	689a      	ldr	r2, [r3, #8]
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	430a      	orrs	r2, r1
 800221a:	619a      	str	r2, [r3, #24]
 800221c:	e0ad      	b.n	800237a <HAL_TIM_IC_ConfigChannel+0x276>
  }
  else if (Channel == TIM_CHANNEL_2)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2b04      	cmp	r3, #4
 8002222:	d135      	bne.n	8002290 <HAL_TIM_IC_ConfigChannel+0x18c>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a35      	ldr	r2, [pc, #212]	; (8002300 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d013      	beq.n	8002256 <HAL_TIM_IC_ConfigChannel+0x152>
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002236:	d00e      	beq.n	8002256 <HAL_TIM_IC_ConfigChannel+0x152>
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	4a31      	ldr	r2, [pc, #196]	; (8002304 <HAL_TIM_IC_ConfigChannel+0x200>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d009      	beq.n	8002256 <HAL_TIM_IC_ConfigChannel+0x152>
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a30      	ldr	r2, [pc, #192]	; (8002308 <HAL_TIM_IC_ConfigChannel+0x204>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d004      	beq.n	8002256 <HAL_TIM_IC_ConfigChannel+0x152>
 800224c:	f640 51a4 	movw	r1, #3492	; 0xda4
 8002250:	482e      	ldr	r0, [pc, #184]	; (800230c <HAL_TIM_IC_ConfigChannel+0x208>)
 8002252:	f7fe f82b 	bl	80002ac <assert_failed>

    TIM_TI2_SetConfig(htim->Instance,
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	6818      	ldr	r0, [r3, #0]
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	6819      	ldr	r1, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	685a      	ldr	r2, [r3, #4]
 8002262:	68bb      	ldr	r3, [r7, #8]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	f000 fc19 	bl	8002a9c <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	699a      	ldr	r2, [r3, #24]
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002278:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	6999      	ldr	r1, [r3, #24]
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	021a      	lsls	r2, r3, #8
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	430a      	orrs	r2, r1
 800228c:	619a      	str	r2, [r3, #24]
 800228e:	e074      	b.n	800237a <HAL_TIM_IC_ConfigChannel+0x276>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2b08      	cmp	r3, #8
 8002294:	d13c      	bne.n	8002310 <HAL_TIM_IC_ConfigChannel+0x20c>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_TIM_IC_ConfigChannel+0x1fc>)
 800229c:	4293      	cmp	r3, r2
 800229e:	d013      	beq.n	80022c8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80022a8:	d00e      	beq.n	80022c8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a15      	ldr	r2, [pc, #84]	; (8002304 <HAL_TIM_IC_ConfigChannel+0x200>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d009      	beq.n	80022c8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	4a13      	ldr	r2, [pc, #76]	; (8002308 <HAL_TIM_IC_ConfigChannel+0x204>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d004      	beq.n	80022c8 <HAL_TIM_IC_ConfigChannel+0x1c4>
 80022be:	f640 51b4 	movw	r1, #3508	; 0xdb4
 80022c2:	4812      	ldr	r0, [pc, #72]	; (800230c <HAL_TIM_IC_ConfigChannel+0x208>)
 80022c4:	f7fd fff2 	bl	80002ac <assert_failed>

    TIM_TI3_SetConfig(htim->Instance,
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	6819      	ldr	r1, [r3, #0]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	f000 fc4b 	bl	8002b72 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	69da      	ldr	r2, [r3, #28]
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f022 020c 	bic.w	r2, r2, #12
 80022ea:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	69d9      	ldr	r1, [r3, #28]
 80022f2:	68bb      	ldr	r3, [r7, #8]
 80022f4:	689a      	ldr	r2, [r3, #8]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	430a      	orrs	r2, r1
 80022fc:	61da      	str	r2, [r3, #28]
 80022fe:	e03c      	b.n	800237a <HAL_TIM_IC_ConfigChannel+0x276>
 8002300:	40012c00 	.word	0x40012c00
 8002304:	40000400 	.word	0x40000400
 8002308:	40000800 	.word	0x40000800
 800230c:	08004e44 	.word	0x08004e44
  }
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a1f      	ldr	r2, [pc, #124]	; (8002394 <HAL_TIM_IC_ConfigChannel+0x290>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d013      	beq.n	8002342 <HAL_TIM_IC_ConfigChannel+0x23e>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002322:	d00e      	beq.n	8002342 <HAL_TIM_IC_ConfigChannel+0x23e>
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a1b      	ldr	r2, [pc, #108]	; (8002398 <HAL_TIM_IC_ConfigChannel+0x294>)
 800232a:	4293      	cmp	r3, r2
 800232c:	d009      	beq.n	8002342 <HAL_TIM_IC_ConfigChannel+0x23e>
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4a1a      	ldr	r2, [pc, #104]	; (800239c <HAL_TIM_IC_ConfigChannel+0x298>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d004      	beq.n	8002342 <HAL_TIM_IC_ConfigChannel+0x23e>
 8002338:	f640 51c4 	movw	r1, #3524	; 0xdc4
 800233c:	4818      	ldr	r0, [pc, #96]	; (80023a0 <HAL_TIM_IC_ConfigChannel+0x29c>)
 800233e:	f7fd ffb5 	bl	80002ac <assert_failed>

    TIM_TI4_SetConfig(htim->Instance,
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	6818      	ldr	r0, [r3, #0]
 8002346:	68bb      	ldr	r3, [r7, #8]
 8002348:	6819      	ldr	r1, [r3, #0]
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	68bb      	ldr	r3, [r7, #8]
 8002350:	68db      	ldr	r3, [r3, #12]
 8002352:	f000 fc49 	bl	8002be8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	69da      	ldr	r2, [r3, #28]
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002364:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	69d9      	ldr	r1, [r3, #28]
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	021a      	lsls	r2, r3, #8
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	430a      	orrs	r2, r1
 8002378:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800238a:	2300      	movs	r3, #0
}
 800238c:	4618      	mov	r0, r3
 800238e:	3710      	adds	r7, #16
 8002390:	46bd      	mov	sp, r7
 8002392:	bd80      	pop	{r7, pc}
 8002394:	40012c00 	.word	0x40012c00
 8002398:	40000400 	.word	0x40000400
 800239c:	40000800 	.word	0x40000800
 80023a0:	08004e44 	.word	0x08004e44

080023a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIM_ConfigClockSource+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e279      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x50c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80023d4:	d029      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023de:	d024      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d020      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	2b10      	cmp	r3, #16
 80023ee:	d01c      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2b20      	cmp	r3, #32
 80023f6:	d018      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2b30      	cmp	r3, #48	; 0x30
 80023fe:	d014      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	2b40      	cmp	r3, #64	; 0x40
 8002406:	d010      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	2b50      	cmp	r3, #80	; 0x50
 800240e:	d00c      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 8002410:	683b      	ldr	r3, [r7, #0]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2b60      	cmp	r3, #96	; 0x60
 8002416:	d008      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	2b70      	cmp	r3, #112	; 0x70
 800241e:	d004      	beq.n	800242a <HAL_TIM_ConfigClockSource+0x86>
 8002420:	f241 118a 	movw	r1, #4490	; 0x118a
 8002424:	4896      	ldr	r0, [pc, #600]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002426:	f7fd ff41 	bl	80002ac <assert_failed>

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	689b      	ldr	r3, [r3, #8]
 8002430:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002438:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002440:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	68fa      	ldr	r2, [r7, #12]
 8002448:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2b40      	cmp	r3, #64	; 0x40
 8002450:	f000 81b6 	beq.w	80027c0 <HAL_TIM_ConfigClockSource+0x41c>
 8002454:	2b40      	cmp	r3, #64	; 0x40
 8002456:	d80f      	bhi.n	8002478 <HAL_TIM_ConfigClockSource+0xd4>
 8002458:	2b10      	cmp	r3, #16
 800245a:	f000 81fd 	beq.w	8002858 <HAL_TIM_ConfigClockSource+0x4b4>
 800245e:	2b10      	cmp	r3, #16
 8002460:	d803      	bhi.n	800246a <HAL_TIM_ConfigClockSource+0xc6>
 8002462:	2b00      	cmp	r3, #0
 8002464:	f000 81f8 	beq.w	8002858 <HAL_TIM_ConfigClockSource+0x4b4>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002468:	e219      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800246a:	2b20      	cmp	r3, #32
 800246c:	f000 81f4 	beq.w	8002858 <HAL_TIM_ConfigClockSource+0x4b4>
 8002470:	2b30      	cmp	r3, #48	; 0x30
 8002472:	f000 81f1 	beq.w	8002858 <HAL_TIM_ConfigClockSource+0x4b4>
      break;
 8002476:	e212      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 8002478:	2b70      	cmp	r3, #112	; 0x70
 800247a:	d02e      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x136>
 800247c:	2b70      	cmp	r3, #112	; 0x70
 800247e:	d806      	bhi.n	800248e <HAL_TIM_ConfigClockSource+0xea>
 8002480:	2b50      	cmp	r3, #80	; 0x50
 8002482:	f000 8105 	beq.w	8002690 <HAL_TIM_ConfigClockSource+0x2ec>
 8002486:	2b60      	cmp	r3, #96	; 0x60
 8002488:	f000 814e 	beq.w	8002728 <HAL_TIM_ConfigClockSource+0x384>
      break;
 800248c:	e207      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
  switch (sClockSourceConfig->ClockSource)
 800248e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002492:	d004      	beq.n	800249e <HAL_TIM_ConfigClockSource+0xfa>
 8002494:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002498:	f000 808a 	beq.w	80025b0 <HAL_TIM_ConfigClockSource+0x20c>
      break;
 800249c:	e1ff      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_INSTANCE(htim->Instance));
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4a78      	ldr	r2, [pc, #480]	; (8002684 <HAL_TIM_ConfigClockSource+0x2e0>)
 80024a4:	4293      	cmp	r3, r2
 80024a6:	f000 81f9 	beq.w	800289c <HAL_TIM_ConfigClockSource+0x4f8>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b2:	f000 81f3 	beq.w	800289c <HAL_TIM_ConfigClockSource+0x4f8>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a73      	ldr	r2, [pc, #460]	; (8002688 <HAL_TIM_ConfigClockSource+0x2e4>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	f000 81ed 	beq.w	800289c <HAL_TIM_ConfigClockSource+0x4f8>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a71      	ldr	r2, [pc, #452]	; (800268c <HAL_TIM_ConfigClockSource+0x2e8>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	f000 81e7 	beq.w	800289c <HAL_TIM_ConfigClockSource+0x4f8>
 80024ce:	f241 1196 	movw	r1, #4502	; 0x1196
 80024d2:	486b      	ldr	r0, [pc, #428]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 80024d4:	f7fd feea 	bl	80002ac <assert_failed>
      break;
 80024d8:	e1e0      	b.n	800289c <HAL_TIM_ConfigClockSource+0x4f8>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	4a69      	ldr	r2, [pc, #420]	; (8002684 <HAL_TIM_ConfigClockSource+0x2e0>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d013      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x168>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024ec:	d00e      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x168>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a65      	ldr	r2, [pc, #404]	; (8002688 <HAL_TIM_ConfigClockSource+0x2e4>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d009      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x168>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a63      	ldr	r2, [pc, #396]	; (800268c <HAL_TIM_ConfigClockSource+0x2e8>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d004      	beq.n	800250c <HAL_TIM_ConfigClockSource+0x168>
 8002502:	f241 119d 	movw	r1, #4509	; 0x119d
 8002506:	485e      	ldr	r0, [pc, #376]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002508:	f7fd fed0 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d013      	beq.n	800253c <HAL_TIM_ConfigClockSource+0x198>
 8002514:	683b      	ldr	r3, [r7, #0]
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800251c:	d00e      	beq.n	800253c <HAL_TIM_ConfigClockSource+0x198>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002526:	d009      	beq.n	800253c <HAL_TIM_ConfigClockSource+0x198>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	689b      	ldr	r3, [r3, #8]
 800252c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002530:	d004      	beq.n	800253c <HAL_TIM_ConfigClockSource+0x198>
 8002532:	f44f 518d 	mov.w	r1, #4512	; 0x11a0
 8002536:	4852      	ldr	r0, [pc, #328]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002538:	f7fd feb8 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002544:	d014      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x1cc>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d010      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x1cc>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	685b      	ldr	r3, [r3, #4]
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00c      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x1cc>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	2b02      	cmp	r3, #2
 800255c:	d008      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x1cc>
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	2b0a      	cmp	r3, #10
 8002564:	d004      	beq.n	8002570 <HAL_TIM_ConfigClockSource+0x1cc>
 8002566:	f241 11a1 	movw	r1, #4513	; 0x11a1
 800256a:	4845      	ldr	r0, [pc, #276]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 800256c:	f7fd fe9e 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	68db      	ldr	r3, [r3, #12]
 8002574:	2b0f      	cmp	r3, #15
 8002576:	d904      	bls.n	8002582 <HAL_TIM_ConfigClockSource+0x1de>
 8002578:	f241 11a2 	movw	r1, #4514	; 0x11a2
 800257c:	4840      	ldr	r0, [pc, #256]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 800257e:	f7fd fe95 	bl	80002ac <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6818      	ldr	r0, [r3, #0]
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	6899      	ldr	r1, [r3, #8]
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	685a      	ldr	r2, [r3, #4]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	68db      	ldr	r3, [r3, #12]
 8002592:	f000 fb7f 	bl	8002c94 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80025a4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	68fa      	ldr	r2, [r7, #12]
 80025ac:	609a      	str	r2, [r3, #8]
      break;
 80025ae:	e176      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE2_INSTANCE(htim->Instance));
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	4a33      	ldr	r2, [pc, #204]	; (8002684 <HAL_TIM_ConfigClockSource+0x2e0>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d013      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x23e>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025c2:	d00e      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x23e>
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a2f      	ldr	r2, [pc, #188]	; (8002688 <HAL_TIM_ConfigClockSource+0x2e4>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d009      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x23e>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a2e      	ldr	r2, [pc, #184]	; (800268c <HAL_TIM_ConfigClockSource+0x2e8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d004      	beq.n	80025e2 <HAL_TIM_ConfigClockSource+0x23e>
 80025d8:	f241 11b5 	movw	r1, #4533	; 0x11b5
 80025dc:	4828      	ldr	r0, [pc, #160]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 80025de:	f7fd fe65 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d013      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x26e>
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	689b      	ldr	r3, [r3, #8]
 80025ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025f2:	d00e      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x26e>
 80025f4:	683b      	ldr	r3, [r7, #0]
 80025f6:	689b      	ldr	r3, [r3, #8]
 80025f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025fc:	d009      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x26e>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002606:	d004      	beq.n	8002612 <HAL_TIM_ConfigClockSource+0x26e>
 8002608:	f241 11b8 	movw	r1, #4536	; 0x11b8
 800260c:	481c      	ldr	r0, [pc, #112]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 800260e:	f7fd fe4d 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800261a:	d014      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x2a2>
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	2b00      	cmp	r3, #0
 8002622:	d010      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x2a2>
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	685b      	ldr	r3, [r3, #4]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d00c      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x2a2>
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	2b02      	cmp	r3, #2
 8002632:	d008      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x2a2>
 8002634:	683b      	ldr	r3, [r7, #0]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	2b0a      	cmp	r3, #10
 800263a:	d004      	beq.n	8002646 <HAL_TIM_ConfigClockSource+0x2a2>
 800263c:	f241 11b9 	movw	r1, #4537	; 0x11b9
 8002640:	480f      	ldr	r0, [pc, #60]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002642:	f7fd fe33 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	68db      	ldr	r3, [r3, #12]
 800264a:	2b0f      	cmp	r3, #15
 800264c:	d904      	bls.n	8002658 <HAL_TIM_ConfigClockSource+0x2b4>
 800264e:	f241 11ba 	movw	r1, #4538	; 0x11ba
 8002652:	480b      	ldr	r0, [pc, #44]	; (8002680 <HAL_TIM_ConfigClockSource+0x2dc>)
 8002654:	f7fd fe2a 	bl	80002ac <assert_failed>
      TIM_ETR_SetConfig(htim->Instance,
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	6899      	ldr	r1, [r3, #8]
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	685a      	ldr	r2, [r3, #4]
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	68db      	ldr	r3, [r3, #12]
 8002668:	f000 fb14 	bl	8002c94 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800267a:	609a      	str	r2, [r3, #8]
      break;
 800267c:	e10f      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
 800267e:	bf00      	nop
 8002680:	08004e44 	.word	0x08004e44
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	40000800 	.word	0x40000800
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a88      	ldr	r2, [pc, #544]	; (80028b8 <HAL_TIM_ConfigClockSource+0x514>)
 8002696:	4293      	cmp	r3, r2
 8002698:	d013      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x31e>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026a2:	d00e      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x31e>
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a84      	ldr	r2, [pc, #528]	; (80028bc <HAL_TIM_ConfigClockSource+0x518>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d009      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x31e>
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a83      	ldr	r2, [pc, #524]	; (80028c0 <HAL_TIM_ConfigClockSource+0x51c>)
 80026b4:	4293      	cmp	r3, r2
 80026b6:	d004      	beq.n	80026c2 <HAL_TIM_ConfigClockSource+0x31e>
 80026b8:	f241 11c9 	movw	r1, #4553	; 0x11c9
 80026bc:	4881      	ldr	r0, [pc, #516]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 80026be:	f7fd fdf5 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80026c2:	683b      	ldr	r3, [r7, #0]
 80026c4:	685b      	ldr	r3, [r3, #4]
 80026c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ca:	d014      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x352>
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d010      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x352>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00c      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x352>
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d008      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x352>
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	2b0a      	cmp	r3, #10
 80026ea:	d004      	beq.n	80026f6 <HAL_TIM_ConfigClockSource+0x352>
 80026ec:	f241 11cc 	movw	r1, #4556	; 0x11cc
 80026f0:	4874      	ldr	r0, [pc, #464]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 80026f2:	f7fd fddb 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b0f      	cmp	r3, #15
 80026fc:	d904      	bls.n	8002708 <HAL_TIM_ConfigClockSource+0x364>
 80026fe:	f241 11cd 	movw	r1, #4557	; 0x11cd
 8002702:	4870      	ldr	r0, [pc, #448]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 8002704:	f7fd fdd2 	bl	80002ac <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6818      	ldr	r0, [r3, #0]
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	6859      	ldr	r1, [r3, #4]
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	461a      	mov	r2, r3
 8002716:	f000 f993 	bl	8002a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	2150      	movs	r1, #80	; 0x50
 8002720:	4618      	mov	r0, r3
 8002722:	f000 fa9d 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 8002726:	e0ba      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a62      	ldr	r2, [pc, #392]	; (80028b8 <HAL_TIM_ConfigClockSource+0x514>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d013      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x3b6>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800273a:	d00e      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x3b6>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a5e      	ldr	r2, [pc, #376]	; (80028bc <HAL_TIM_ConfigClockSource+0x518>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d009      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x3b6>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	4a5d      	ldr	r2, [pc, #372]	; (80028c0 <HAL_TIM_ConfigClockSource+0x51c>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d004      	beq.n	800275a <HAL_TIM_ConfigClockSource+0x3b6>
 8002750:	f241 11d9 	movw	r1, #4569	; 0x11d9
 8002754:	485b      	ldr	r0, [pc, #364]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 8002756:	f7fd fda9 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002762:	d014      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x3ea>
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d010      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x3ea>
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d00c      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x3ea>
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d008      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x3ea>
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	685b      	ldr	r3, [r3, #4]
 8002780:	2b0a      	cmp	r3, #10
 8002782:	d004      	beq.n	800278e <HAL_TIM_ConfigClockSource+0x3ea>
 8002784:	f241 11dc 	movw	r1, #4572	; 0x11dc
 8002788:	484e      	ldr	r0, [pc, #312]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 800278a:	f7fd fd8f 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	d904      	bls.n	80027a0 <HAL_TIM_ConfigClockSource+0x3fc>
 8002796:	f241 11dd 	movw	r1, #4573	; 0x11dd
 800279a:	484a      	ldr	r0, [pc, #296]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 800279c:	f7fd fd86 	bl	80002ac <assert_failed>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	6818      	ldr	r0, [r3, #0]
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	6859      	ldr	r1, [r3, #4]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	68db      	ldr	r3, [r3, #12]
 80027ac:	461a      	mov	r2, r3
 80027ae:	f000 f9b1 	bl	8002b14 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	2160      	movs	r1, #96	; 0x60
 80027b8:	4618      	mov	r0, r3
 80027ba:	f000 fa51 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 80027be:	e06e      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_TIX_INSTANCE(htim->Instance));
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a3c      	ldr	r2, [pc, #240]	; (80028b8 <HAL_TIM_ConfigClockSource+0x514>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d013      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x44e>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027d2:	d00e      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x44e>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_TIM_ConfigClockSource+0x518>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d009      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x44e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a37      	ldr	r2, [pc, #220]	; (80028c0 <HAL_TIM_ConfigClockSource+0x51c>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d004      	beq.n	80027f2 <HAL_TIM_ConfigClockSource+0x44e>
 80027e8:	f241 11e9 	movw	r1, #4585	; 0x11e9
 80027ec:	4835      	ldr	r0, [pc, #212]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 80027ee:	f7fd fd5d 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027fa:	d014      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x482>
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d010      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x482>
 8002804:	683b      	ldr	r3, [r7, #0]
 8002806:	685b      	ldr	r3, [r3, #4]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00c      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x482>
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	2b02      	cmp	r3, #2
 8002812:	d008      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x482>
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	2b0a      	cmp	r3, #10
 800281a:	d004      	beq.n	8002826 <HAL_TIM_ConfigClockSource+0x482>
 800281c:	f241 11ec 	movw	r1, #4588	; 0x11ec
 8002820:	4828      	ldr	r0, [pc, #160]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 8002822:	f7fd fd43 	bl	80002ac <assert_failed>
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	68db      	ldr	r3, [r3, #12]
 800282a:	2b0f      	cmp	r3, #15
 800282c:	d904      	bls.n	8002838 <HAL_TIM_ConfigClockSource+0x494>
 800282e:	f241 11ed 	movw	r1, #4589	; 0x11ed
 8002832:	4824      	ldr	r0, [pc, #144]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 8002834:	f7fd fd3a 	bl	80002ac <assert_failed>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6818      	ldr	r0, [r3, #0]
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	6859      	ldr	r1, [r3, #4]
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	68db      	ldr	r3, [r3, #12]
 8002844:	461a      	mov	r2, r3
 8002846:	f000 f8fb 	bl	8002a40 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	2140      	movs	r1, #64	; 0x40
 8002850:	4618      	mov	r0, r3
 8002852:	f000 fa05 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 8002856:	e022      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a16      	ldr	r2, [pc, #88]	; (80028b8 <HAL_TIM_ConfigClockSource+0x514>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d013      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x4e6>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800286a:	d00e      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x4e6>
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a12      	ldr	r2, [pc, #72]	; (80028bc <HAL_TIM_ConfigClockSource+0x518>)
 8002872:	4293      	cmp	r3, r2
 8002874:	d009      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x4e6>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a11      	ldr	r2, [pc, #68]	; (80028c0 <HAL_TIM_ConfigClockSource+0x51c>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d004      	beq.n	800288a <HAL_TIM_ConfigClockSource+0x4e6>
 8002880:	f241 11fc 	movw	r1, #4604	; 0x11fc
 8002884:	480f      	ldr	r0, [pc, #60]	; (80028c4 <HAL_TIM_ConfigClockSource+0x520>)
 8002886:	f7fd fd11 	bl	80002ac <assert_failed>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681a      	ldr	r2, [r3, #0]
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4619      	mov	r1, r3
 8002894:	4610      	mov	r0, r2
 8002896:	f000 f9e3 	bl	8002c60 <TIM_ITRx_SetConfig>
      break;
 800289a:	e000      	b.n	800289e <HAL_TIM_ConfigClockSource+0x4fa>
      break;
 800289c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	2201      	movs	r2, #1
 80028a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	40012c00 	.word	0x40012c00
 80028bc:	40000400 	.word	0x40000400
 80028c0:	40000800 	.word	0x40000800
 80028c4:	08004e44 	.word	0x08004e44

080028c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80028c8:	b480      	push	{r7}
 80028ca:	b085      	sub	sp, #20
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	4a29      	ldr	r2, [pc, #164]	; (8002980 <TIM_Base_SetConfig+0xb8>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d00b      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e6:	d007      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	4a26      	ldr	r2, [pc, #152]	; (8002984 <TIM_Base_SetConfig+0xbc>)
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d003      	beq.n	80028f8 <TIM_Base_SetConfig+0x30>
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	4a25      	ldr	r2, [pc, #148]	; (8002988 <TIM_Base_SetConfig+0xc0>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d108      	bne.n	800290a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68fa      	ldr	r2, [r7, #12]
 8002906:	4313      	orrs	r3, r2
 8002908:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a1c      	ldr	r2, [pc, #112]	; (8002980 <TIM_Base_SetConfig+0xb8>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d00b      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002918:	d007      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a19      	ldr	r2, [pc, #100]	; (8002984 <TIM_Base_SetConfig+0xbc>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d003      	beq.n	800292a <TIM_Base_SetConfig+0x62>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a18      	ldr	r2, [pc, #96]	; (8002988 <TIM_Base_SetConfig+0xc0>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d108      	bne.n	800293c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002930:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	68fa      	ldr	r2, [r7, #12]
 8002938:	4313      	orrs	r3, r2
 800293a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	695b      	ldr	r3, [r3, #20]
 8002946:	4313      	orrs	r3, r2
 8002948:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	68fa      	ldr	r2, [r7, #12]
 800294e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	689a      	ldr	r2, [r3, #8]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681a      	ldr	r2, [r3, #0]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a07      	ldr	r2, [pc, #28]	; (8002980 <TIM_Base_SetConfig+0xb8>)
 8002964:	4293      	cmp	r3, r2
 8002966:	d103      	bne.n	8002970 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2201      	movs	r2, #1
 8002974:	615a      	str	r2, [r3, #20]
}
 8002976:	bf00      	nop
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	bc80      	pop	{r7}
 800297e:	4770      	bx	lr
 8002980:	40012c00 	.word	0x40012c00
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800

0800298c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800298c:	b480      	push	{r7}
 800298e:	b087      	sub	sp, #28
 8002990:	af00      	add	r7, sp, #0
 8002992:	60f8      	str	r0, [r7, #12]
 8002994:	60b9      	str	r1, [r7, #8]
 8002996:	607a      	str	r2, [r7, #4]
 8002998:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	6a1b      	ldr	r3, [r3, #32]
 800299e:	f023 0201 	bic.w	r2, r3, #1
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	699b      	ldr	r3, [r3, #24]
 80029aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	4a1f      	ldr	r2, [pc, #124]	; (8002a34 <TIM_TI1_SetConfig+0xa8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00b      	beq.n	80029d2 <TIM_TI1_SetConfig+0x46>
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029c0:	d007      	beq.n	80029d2 <TIM_TI1_SetConfig+0x46>
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	4a1c      	ldr	r2, [pc, #112]	; (8002a38 <TIM_TI1_SetConfig+0xac>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d003      	beq.n	80029d2 <TIM_TI1_SetConfig+0x46>
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	4a1b      	ldr	r2, [pc, #108]	; (8002a3c <TIM_TI1_SetConfig+0xb0>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d101      	bne.n	80029d6 <TIM_TI1_SetConfig+0x4a>
 80029d2:	2301      	movs	r3, #1
 80029d4:	e000      	b.n	80029d8 <TIM_TI1_SetConfig+0x4c>
 80029d6:	2300      	movs	r3, #0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d008      	beq.n	80029ee <TIM_TI1_SetConfig+0x62>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80029e4:	697a      	ldr	r2, [r7, #20]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	4313      	orrs	r3, r2
 80029ea:	617b      	str	r3, [r7, #20]
 80029ec:	e003      	b.n	80029f6 <TIM_TI1_SetConfig+0x6a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f043 0301 	orr.w	r3, r3, #1
 80029f4:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	011b      	lsls	r3, r3, #4
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	697a      	ldr	r2, [r7, #20]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	f023 030a 	bic.w	r3, r3, #10
 8002a10:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	f003 030a 	and.w	r3, r3, #10
 8002a18:	693a      	ldr	r2, [r7, #16]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	697a      	ldr	r2, [r7, #20]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr
 8002a34:	40012c00 	.word	0x40012c00
 8002a38:	40000400 	.word	0x40000400
 8002a3c:	40000800 	.word	0x40000800

08002a40 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	60f8      	str	r0, [r7, #12]
 8002a48:	60b9      	str	r1, [r7, #8]
 8002a4a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6a1b      	ldr	r3, [r3, #32]
 8002a56:	f023 0201 	bic.w	r2, r3, #1
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	699b      	ldr	r3, [r3, #24]
 8002a62:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002a64:	693b      	ldr	r3, [r7, #16]
 8002a66:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002a6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	011b      	lsls	r3, r3, #4
 8002a70:	693a      	ldr	r2, [r7, #16]
 8002a72:	4313      	orrs	r3, r2
 8002a74:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	f023 030a 	bic.w	r3, r3, #10
 8002a7c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a7e:	697a      	ldr	r2, [r7, #20]
 8002a80:	68bb      	ldr	r3, [r7, #8]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	621a      	str	r2, [r3, #32]
}
 8002a92:	bf00      	nop
 8002a94:	371c      	adds	r7, #28
 8002a96:	46bd      	mov	sp, r7
 8002a98:	bc80      	pop	{r7}
 8002a9a:	4770      	bx	lr

08002a9c <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002a9c:	b480      	push	{r7}
 8002a9e:	b087      	sub	sp, #28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	60f8      	str	r0, [r7, #12]
 8002aa4:	60b9      	str	r1, [r7, #8]
 8002aa6:	607a      	str	r2, [r7, #4]
 8002aa8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	f023 0210 	bic.w	r2, r3, #16
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	699b      	ldr	r3, [r3, #24]
 8002aba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	6a1b      	ldr	r3, [r3, #32]
 8002ac0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	021b      	lsls	r3, r3, #8
 8002ace:	697a      	ldr	r2, [r7, #20]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ada:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	031b      	lsls	r3, r3, #12
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	697a      	ldr	r2, [r7, #20]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002aee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	011b      	lsls	r3, r3, #4
 8002af4:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002af8:	693a      	ldr	r2, [r7, #16]
 8002afa:	4313      	orrs	r3, r2
 8002afc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	697a      	ldr	r2, [r7, #20]
 8002b02:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	693a      	ldr	r2, [r7, #16]
 8002b08:	621a      	str	r2, [r3, #32]
}
 8002b0a:	bf00      	nop
 8002b0c:	371c      	adds	r7, #28
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr

08002b14 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	60f8      	str	r0, [r7, #12]
 8002b1c:	60b9      	str	r1, [r7, #8]
 8002b1e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	6a1b      	ldr	r3, [r3, #32]
 8002b24:	f023 0210 	bic.w	r2, r3, #16
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	699b      	ldr	r3, [r3, #24]
 8002b30:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	6a1b      	ldr	r3, [r3, #32]
 8002b36:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002b3e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	031b      	lsls	r3, r3, #12
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002b50:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002b52:	68bb      	ldr	r3, [r7, #8]
 8002b54:	011b      	lsls	r3, r3, #4
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	693a      	ldr	r2, [r7, #16]
 8002b66:	621a      	str	r2, [r3, #32]
}
 8002b68:	bf00      	nop
 8002b6a:	371c      	adds	r7, #28
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr

08002b72 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002b72:	b480      	push	{r7}
 8002b74:	b087      	sub	sp, #28
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
 8002b7e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a1b      	ldr	r3, [r3, #32]
 8002b84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	6a1b      	ldr	r3, [r3, #32]
 8002b96:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	f023 0303 	bic.w	r3, r3, #3
 8002b9e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002bae:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	011b      	lsls	r3, r3, #4
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & TIM_CCER_CC3P);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002bcc:	693a      	ldr	r2, [r7, #16]
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	693a      	ldr	r2, [r7, #16]
 8002bdc:	621a      	str	r2, [r3, #32]
}
 8002bde:	bf00      	nop
 8002be0:	371c      	adds	r7, #28
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bc80      	pop	{r7}
 8002be6:	4770      	bx	lr

08002be8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b087      	sub	sp, #28
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	60f8      	str	r0, [r7, #12]
 8002bf0:	60b9      	str	r1, [r7, #8]
 8002bf2:	607a      	str	r2, [r7, #4]
 8002bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	69db      	ldr	r3, [r3, #28]
 8002c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a1b      	ldr	r3, [r3, #32]
 8002c0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002c0e:	697b      	ldr	r3, [r7, #20]
 8002c10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c14:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	021b      	lsls	r3, r3, #8
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	4313      	orrs	r3, r2
 8002c1e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002c20:	697b      	ldr	r3, [r7, #20]
 8002c22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002c26:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	031b      	lsls	r3, r3, #12
 8002c2c:	b29b      	uxth	r3, r3
 8002c2e:	697a      	ldr	r2, [r7, #20]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P);
 8002c34:	693b      	ldr	r3, [r7, #16]
 8002c36:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c3a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & TIM_CCER_CC4P);
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	031b      	lsls	r3, r3, #12
 8002c40:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	4313      	orrs	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	697a      	ldr	r2, [r7, #20]
 8002c4e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	693a      	ldr	r2, [r7, #16]
 8002c54:	621a      	str	r2, [r3, #32]
}
 8002c56:	bf00      	nop
 8002c58:	371c      	adds	r7, #28
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b085      	sub	sp, #20
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c76:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c78:	683a      	ldr	r2, [r7, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f043 0307 	orr.w	r3, r3, #7
 8002c82:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	609a      	str	r2, [r3, #8]
}
 8002c8a:	bf00      	nop
 8002c8c:	3714      	adds	r7, #20
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b087      	sub	sp, #28
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	60f8      	str	r0, [r7, #12]
 8002c9c:	60b9      	str	r1, [r7, #8]
 8002c9e:	607a      	str	r2, [r7, #4]
 8002ca0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ca8:	697b      	ldr	r3, [r7, #20]
 8002caa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002cae:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	021a      	lsls	r2, r3, #8
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	431a      	orrs	r2, r3
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	697a      	ldr	r2, [r7, #20]
 8002cbe:	4313      	orrs	r3, r2
 8002cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	697a      	ldr	r2, [r7, #20]
 8002cc6:	609a      	str	r2, [r3, #8]
}
 8002cc8:	bf00      	nop
 8002cca:	371c      	adds	r7, #28
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bc80      	pop	{r7}
 8002cd0:	4770      	bx	lr
	...

08002cd4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4a22      	ldr	r2, [pc, #136]	; (8002d6c <TIM_CCxChannelCmd+0x98>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d010      	beq.n	8002d0a <TIM_CCxChannelCmd+0x36>
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cee:	d00c      	beq.n	8002d0a <TIM_CCxChannelCmd+0x36>
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	4a1f      	ldr	r2, [pc, #124]	; (8002d70 <TIM_CCxChannelCmd+0x9c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d008      	beq.n	8002d0a <TIM_CCxChannelCmd+0x36>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	4a1e      	ldr	r2, [pc, #120]	; (8002d74 <TIM_CCxChannelCmd+0xa0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d004      	beq.n	8002d0a <TIM_CCxChannelCmd+0x36>
 8002d00:	f641 11c9 	movw	r1, #6601	; 0x19c9
 8002d04:	481c      	ldr	r0, [pc, #112]	; (8002d78 <TIM_CCxChannelCmd+0xa4>)
 8002d06:	f7fd fad1 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_CHANNELS(Channel));
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d010      	beq.n	8002d32 <TIM_CCxChannelCmd+0x5e>
 8002d10:	68bb      	ldr	r3, [r7, #8]
 8002d12:	2b04      	cmp	r3, #4
 8002d14:	d00d      	beq.n	8002d32 <TIM_CCxChannelCmd+0x5e>
 8002d16:	68bb      	ldr	r3, [r7, #8]
 8002d18:	2b08      	cmp	r3, #8
 8002d1a:	d00a      	beq.n	8002d32 <TIM_CCxChannelCmd+0x5e>
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	2b0c      	cmp	r3, #12
 8002d20:	d007      	beq.n	8002d32 <TIM_CCxChannelCmd+0x5e>
 8002d22:	68bb      	ldr	r3, [r7, #8]
 8002d24:	2b3c      	cmp	r3, #60	; 0x3c
 8002d26:	d004      	beq.n	8002d32 <TIM_CCxChannelCmd+0x5e>
 8002d28:	f641 11ca 	movw	r1, #6602	; 0x19ca
 8002d2c:	4812      	ldr	r0, [pc, #72]	; (8002d78 <TIM_CCxChannelCmd+0xa4>)
 8002d2e:	f7fd fabd 	bl	80002ac <assert_failed>

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	f003 031f 	and.w	r3, r3, #31
 8002d38:	2201      	movs	r2, #1
 8002d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d3e:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	6a1a      	ldr	r2, [r3, #32]
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	43db      	mvns	r3, r3
 8002d48:	401a      	ands	r2, r3
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a1a      	ldr	r2, [r3, #32]
 8002d52:	68bb      	ldr	r3, [r7, #8]
 8002d54:	f003 031f 	and.w	r3, r3, #31
 8002d58:	6879      	ldr	r1, [r7, #4]
 8002d5a:	fa01 f303 	lsl.w	r3, r1, r3
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	621a      	str	r2, [r3, #32]
}
 8002d64:	bf00      	nop
 8002d66:	3718      	adds	r7, #24
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40012c00 	.word	0x40012c00
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	08004e44 	.word	0x08004e44

08002d7c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr2;
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a43      	ldr	r2, [pc, #268]	; (8002e98 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d013      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d98:	d00e      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8002da0:	4293      	cmp	r3, r2
 8002da2:	d009      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	4a3d      	ldr	r2, [pc, #244]	; (8002ea0 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d004      	beq.n	8002db8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>
 8002dae:	f240 6164 	movw	r1, #1636	; 0x664
 8002db2:	483c      	ldr	r0, [pc, #240]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002db4:	f7fd fa7a 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
 8002db8:	683b      	ldr	r3, [r7, #0]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d020      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2b10      	cmp	r3, #16
 8002dc6:	d01c      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b20      	cmp	r3, #32
 8002dce:	d018      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	2b30      	cmp	r3, #48	; 0x30
 8002dd6:	d014      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	2b40      	cmp	r3, #64	; 0x40
 8002dde:	d010      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	2b50      	cmp	r3, #80	; 0x50
 8002de6:	d00c      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	2b60      	cmp	r3, #96	; 0x60
 8002dee:	d008      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	2b70      	cmp	r3, #112	; 0x70
 8002df6:	d004      	beq.n	8002e02 <HAL_TIMEx_MasterConfigSynchronization+0x86>
 8002df8:	f240 6165 	movw	r1, #1637	; 0x665
 8002dfc:	4829      	ldr	r0, [pc, #164]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002dfe:	f7fd fa55 	bl	80002ac <assert_failed>
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	2b80      	cmp	r3, #128	; 0x80
 8002e08:	d008      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d004      	beq.n	8002e1c <HAL_TIMEx_MasterConfigSynchronization+0xa0>
 8002e12:	f240 6166 	movw	r1, #1638	; 0x666
 8002e16:	4823      	ldr	r0, [pc, #140]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8002e18:	f7fd fa48 	bl	80002ac <assert_failed>

  /* Check input state */
  __HAL_LOCK(htim);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e22:	2b01      	cmp	r3, #1
 8002e24:	d101      	bne.n	8002e2a <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002e26:	2302      	movs	r3, #2
 8002e28:	e032      	b.n	8002e90 <HAL_TIMEx_MasterConfigSynchronization+0x114>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2202      	movs	r2, #2
 8002e36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	689b      	ldr	r3, [r3, #8]
 8002e48:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e50:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4313      	orrs	r3, r2
 8002e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002e5c:	68bb      	ldr	r3, [r7, #8]
 8002e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e62:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	4313      	orrs	r3, r2
 8002e6c:	60bb      	str	r3, [r7, #8]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	605a      	str	r2, [r3, #4]

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	68ba      	ldr	r2, [r7, #8]
 8002e7c:	609a      	str	r2, [r3, #8]

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2201      	movs	r2, #1
 8002e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2200      	movs	r2, #0
 8002e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e8e:	2300      	movs	r3, #0
}
 8002e90:	4618      	mov	r0, r3
 8002e92:	3710      	adds	r7, #16
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	40012c00 	.word	0x40012c00
 8002e9c:	40000400 	.word	0x40000400
 8002ea0:	40000800 	.word	0x40000800
 8002ea4:	08004e7c 	.word	0x08004e7c

08002ea8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b082      	sub	sp, #8
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e092      	b.n	8002fe0 <HAL_UART_Init+0x138>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	699b      	ldr	r3, [r3, #24]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d02c      	beq.n	8002f1c <HAL_UART_Init+0x74>
  {
    /* The hardware flow control is available only for USART1, USART2 and USART3 */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a48      	ldr	r2, [pc, #288]	; (8002fe8 <HAL_UART_Init+0x140>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d00e      	beq.n	8002eea <HAL_UART_Init+0x42>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a46      	ldr	r2, [pc, #280]	; (8002fec <HAL_UART_Init+0x144>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d009      	beq.n	8002eea <HAL_UART_Init+0x42>
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4a45      	ldr	r2, [pc, #276]	; (8002ff0 <HAL_UART_Init+0x148>)
 8002edc:	4293      	cmp	r3, r2
 8002ede:	d004      	beq.n	8002eea <HAL_UART_Init+0x42>
 8002ee0:	f44f 71a3 	mov.w	r1, #326	; 0x146
 8002ee4:	4843      	ldr	r0, [pc, #268]	; (8002ff4 <HAL_UART_Init+0x14c>)
 8002ee6:	f7fd f9e1 	bl	80002ac <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d028      	beq.n	8002f44 <HAL_UART_Init+0x9c>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	699b      	ldr	r3, [r3, #24]
 8002ef6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002efa:	d023      	beq.n	8002f44 <HAL_UART_Init+0x9c>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	699b      	ldr	r3, [r3, #24]
 8002f00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f04:	d01e      	beq.n	8002f44 <HAL_UART_Init+0x9c>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002f0e:	d019      	beq.n	8002f44 <HAL_UART_Init+0x9c>
 8002f10:	f240 1147 	movw	r1, #327	; 0x147
 8002f14:	4837      	ldr	r0, [pc, #220]	; (8002ff4 <HAL_UART_Init+0x14c>)
 8002f16:	f7fd f9c9 	bl	80002ac <assert_failed>
 8002f1a:	e013      	b.n	8002f44 <HAL_UART_Init+0x9c>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a31      	ldr	r2, [pc, #196]	; (8002fe8 <HAL_UART_Init+0x140>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d00e      	beq.n	8002f44 <HAL_UART_Init+0x9c>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a30      	ldr	r2, [pc, #192]	; (8002fec <HAL_UART_Init+0x144>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d009      	beq.n	8002f44 <HAL_UART_Init+0x9c>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4a2e      	ldr	r2, [pc, #184]	; (8002ff0 <HAL_UART_Init+0x148>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d004      	beq.n	8002f44 <HAL_UART_Init+0x9c>
 8002f3a:	f240 114b 	movw	r1, #331	; 0x14b
 8002f3e:	482d      	ldr	r0, [pc, #180]	; (8002ff4 <HAL_UART_Init+0x14c>)
 8002f40:	f7fd f9b4 	bl	80002ac <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	689b      	ldr	r3, [r3, #8]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d009      	beq.n	8002f60 <HAL_UART_Init+0xb8>
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f54:	d004      	beq.n	8002f60 <HAL_UART_Init+0xb8>
 8002f56:	f240 114d 	movw	r1, #333	; 0x14d
 8002f5a:	4826      	ldr	r0, [pc, #152]	; (8002ff4 <HAL_UART_Init+0x14c>)
 8002f5c:	f7fd f9a6 	bl	80002ac <assert_failed>
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f66:	b2db      	uxtb	r3, r3
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d106      	bne.n	8002f7a <HAL_UART_Init+0xd2>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7fd fc5d 	bl	8000834 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	2224      	movs	r2, #36	; 0x24
 8002f7e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	68da      	ldr	r2, [r3, #12]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f90:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fb4a 	bl	800362c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	691a      	ldr	r2, [r3, #16]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002fa6:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	695a      	ldr	r2, [r3, #20]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002fb6:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	68da      	ldr	r2, [r3, #12]
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc6:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2220      	movs	r2, #32
 8002fd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002fde:	2300      	movs	r3, #0
}
 8002fe0:	4618      	mov	r0, r3
 8002fe2:	3708      	adds	r7, #8
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40013800 	.word	0x40013800
 8002fec:	40004400 	.word	0x40004400
 8002ff0:	40004800 	.word	0x40004800
 8002ff4:	08004eb8 	.word	0x08004eb8

08002ff8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b088      	sub	sp, #32
 8002ffc:	af02      	add	r7, sp, #8
 8002ffe:	60f8      	str	r0, [r7, #12]
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	603b      	str	r3, [r7, #0]
 8003004:	4613      	mov	r3, r2
 8003006:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003012:	b2db      	uxtb	r3, r3
 8003014:	2b20      	cmp	r3, #32
 8003016:	f040 8083 	bne.w	8003120 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800301a:	68bb      	ldr	r3, [r7, #8]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d002      	beq.n	8003026 <HAL_UART_Transmit+0x2e>
 8003020:	88fb      	ldrh	r3, [r7, #6]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d101      	bne.n	800302a <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e07b      	b.n	8003122 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003030:	2b01      	cmp	r3, #1
 8003032:	d101      	bne.n	8003038 <HAL_UART_Transmit+0x40>
 8003034:	2302      	movs	r3, #2
 8003036:	e074      	b.n	8003122 <HAL_UART_Transmit+0x12a>
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2201      	movs	r2, #1
 800303c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	2200      	movs	r2, #0
 8003044:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	2221      	movs	r2, #33	; 0x21
 800304a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800304e:	f7fd fcb1 	bl	80009b4 <HAL_GetTick>
 8003052:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	88fa      	ldrh	r2, [r7, #6]
 800305e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003060:	e042      	b.n	80030e8 <HAL_UART_Transmit+0xf0>
    {
      huart->TxXferCount--;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003066:	b29b      	uxth	r3, r3
 8003068:	3b01      	subs	r3, #1
 800306a:	b29a      	uxth	r2, r3
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003078:	d122      	bne.n	80030c0 <HAL_UART_Transmit+0xc8>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	9300      	str	r3, [sp, #0]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2200      	movs	r2, #0
 8003082:	2180      	movs	r1, #128	; 0x80
 8003084:	68f8      	ldr	r0, [r7, #12]
 8003086:	f000 f968 	bl	800335a <UART_WaitOnFlagUntilTimeout>
 800308a:	4603      	mov	r3, r0
 800308c:	2b00      	cmp	r3, #0
 800308e:	d001      	beq.n	8003094 <HAL_UART_Transmit+0x9c>
        {
          return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e046      	b.n	8003122 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8003094:	68bb      	ldr	r3, [r7, #8]
 8003096:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	881b      	ldrh	r3, [r3, #0]
 800309c:	461a      	mov	r2, r3
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80030a6:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d103      	bne.n	80030b8 <HAL_UART_Transmit+0xc0>
        {
          pData += 2U;
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	3302      	adds	r3, #2
 80030b4:	60bb      	str	r3, [r7, #8]
 80030b6:	e017      	b.n	80030e8 <HAL_UART_Transmit+0xf0>
        }
        else
        {
          pData += 1U;
 80030b8:	68bb      	ldr	r3, [r7, #8]
 80030ba:	3301      	adds	r3, #1
 80030bc:	60bb      	str	r3, [r7, #8]
 80030be:	e013      	b.n	80030e8 <HAL_UART_Transmit+0xf0>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	9300      	str	r3, [sp, #0]
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	2200      	movs	r2, #0
 80030c8:	2180      	movs	r1, #128	; 0x80
 80030ca:	68f8      	ldr	r0, [r7, #12]
 80030cc:	f000 f945 	bl	800335a <UART_WaitOnFlagUntilTimeout>
 80030d0:	4603      	mov	r3, r0
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d001      	beq.n	80030da <HAL_UART_Transmit+0xe2>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e023      	b.n	8003122 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	1c5a      	adds	r2, r3, #1
 80030de:	60ba      	str	r2, [r7, #8]
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80030ec:	b29b      	uxth	r3, r3
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d1b7      	bne.n	8003062 <HAL_UART_Transmit+0x6a>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	9300      	str	r3, [sp, #0]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	2200      	movs	r2, #0
 80030fa:	2140      	movs	r1, #64	; 0x40
 80030fc:	68f8      	ldr	r0, [r7, #12]
 80030fe:	f000 f92c 	bl	800335a <UART_WaitOnFlagUntilTimeout>
 8003102:	4603      	mov	r3, r0
 8003104:	2b00      	cmp	r3, #0
 8003106:	d001      	beq.n	800310c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8003108:	2303      	movs	r3, #3
 800310a:	e00a      	b.n	8003122 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	2200      	movs	r2, #0
 8003118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    return HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	e000      	b.n	8003122 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8003120:	2302      	movs	r3, #2
  }
}
 8003122:	4618      	mov	r0, r3
 8003124:	3718      	adds	r7, #24
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
	...

0800312c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b088      	sub	sp, #32
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	68db      	ldr	r3, [r3, #12]
 8003142:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	695b      	ldr	r3, [r3, #20]
 800314a:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 800314c:	2300      	movs	r3, #0
 800314e:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8003150:	2300      	movs	r3, #0
 8003152:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003154:	69fb      	ldr	r3, [r7, #28]
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d10d      	bne.n	800317e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	f003 0320 	and.w	r3, r3, #32
 8003168:	2b00      	cmp	r3, #0
 800316a:	d008      	beq.n	800317e <HAL_UART_IRQHandler+0x52>
 800316c:	69bb      	ldr	r3, [r7, #24]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003176:	6878      	ldr	r0, [r7, #4]
 8003178:	f000 f9d7 	bl	800352a <UART_Receive_IT>
      return;
 800317c:	e0cc      	b.n	8003318 <HAL_UART_IRQHandler+0x1ec>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80ab 	beq.w	80032dc <HAL_UART_IRQHandler+0x1b0>
 8003186:	697b      	ldr	r3, [r7, #20]
 8003188:	f003 0301 	and.w	r3, r3, #1
 800318c:	2b00      	cmp	r3, #0
 800318e:	d105      	bne.n	800319c <HAL_UART_IRQHandler+0x70>
 8003190:	69bb      	ldr	r3, [r7, #24]
 8003192:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003196:	2b00      	cmp	r3, #0
 8003198:	f000 80a0 	beq.w	80032dc <HAL_UART_IRQHandler+0x1b0>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800319c:	69fb      	ldr	r3, [r7, #28]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d00a      	beq.n	80031bc <HAL_UART_IRQHandler+0x90>
 80031a6:	69bb      	ldr	r3, [r7, #24]
 80031a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d005      	beq.n	80031bc <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b4:	f043 0201 	orr.w	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	f003 0304 	and.w	r3, r3, #4
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d00a      	beq.n	80031dc <HAL_UART_IRQHandler+0xb0>
 80031c6:	697b      	ldr	r3, [r7, #20]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d005      	beq.n	80031dc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031d4:	f043 0202 	orr.w	r2, r3, #2
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	f003 0302 	and.w	r3, r3, #2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d00a      	beq.n	80031fc <HAL_UART_IRQHandler+0xd0>
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	f003 0301 	and.w	r3, r3, #1
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d005      	beq.n	80031fc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f4:	f043 0204 	orr.w	r2, r3, #4
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <HAL_UART_IRQHandler+0xf0>
 8003206:	697b      	ldr	r3, [r7, #20]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_UART_IRQHandler+0xf0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003214:	f043 0208 	orr.w	r2, r3, #8
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003220:	2b00      	cmp	r3, #0
 8003222:	d078      	beq.n	8003316 <HAL_UART_IRQHandler+0x1ea>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003224:	69fb      	ldr	r3, [r7, #28]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d007      	beq.n	800323e <HAL_UART_IRQHandler+0x112>
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	f003 0320 	and.w	r3, r3, #32
 8003234:	2b00      	cmp	r3, #0
 8003236:	d002      	beq.n	800323e <HAL_UART_IRQHandler+0x112>
      {
        UART_Receive_IT(huart);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f976 	bl	800352a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	695b      	ldr	r3, [r3, #20]
 8003244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003248:	2b00      	cmp	r3, #0
 800324a:	bf14      	ite	ne
 800324c:	2301      	movne	r3, #1
 800324e:	2300      	moveq	r3, #0
 8003250:	b2db      	uxtb	r3, r3
 8003252:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003258:	f003 0308 	and.w	r3, r3, #8
 800325c:	2b00      	cmp	r3, #0
 800325e:	d102      	bne.n	8003266 <HAL_UART_IRQHandler+0x13a>
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d031      	beq.n	80032ca <HAL_UART_IRQHandler+0x19e>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f000 f8c1 	bl	80033ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d023      	beq.n	80032c2 <HAL_UART_IRQHandler+0x196>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	695a      	ldr	r2, [r3, #20]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003288:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800328e:	2b00      	cmp	r3, #0
 8003290:	d013      	beq.n	80032ba <HAL_UART_IRQHandler+0x18e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003296:	4a22      	ldr	r2, [pc, #136]	; (8003320 <HAL_UART_IRQHandler+0x1f4>)
 8003298:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800329e:	4618      	mov	r0, r3
 80032a0:	f7fd fcce 	bl	8000c40 <HAL_DMA_Abort_IT>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d016      	beq.n	80032d8 <HAL_UART_IRQHandler+0x1ac>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80032b4:	4610      	mov	r0, r2
 80032b6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032b8:	e00e      	b.n	80032d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f000 f844 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c0:	e00a      	b.n	80032d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 f840 	bl	8003348 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032c8:	e006      	b.n	80032d8 <HAL_UART_IRQHandler+0x1ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f000 f83c 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2200      	movs	r2, #0
 80032d4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80032d6:	e01e      	b.n	8003316 <HAL_UART_IRQHandler+0x1ea>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032d8:	bf00      	nop
    return;
 80032da:	e01c      	b.n	8003316 <HAL_UART_IRQHandler+0x1ea>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_UART_IRQHandler+0x1cc>
 80032e6:	69bb      	ldr	r3, [r7, #24]
 80032e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d003      	beq.n	80032f8 <HAL_UART_IRQHandler+0x1cc>
  {
    UART_Transmit_IT(huart);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f000 f8ad 	bl	8003450 <UART_Transmit_IT>
    return;
 80032f6:	e00f      	b.n	8003318 <HAL_UART_IRQHandler+0x1ec>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <HAL_UART_IRQHandler+0x1ec>
 8003302:	69bb      	ldr	r3, [r7, #24]
 8003304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003308:	2b00      	cmp	r3, #0
 800330a:	d005      	beq.n	8003318 <HAL_UART_IRQHandler+0x1ec>
  {
    UART_EndTransmit_IT(huart);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 f8f4 	bl	80034fa <UART_EndTransmit_IT>
    return;
 8003312:	bf00      	nop
 8003314:	e000      	b.n	8003318 <HAL_UART_IRQHandler+0x1ec>
    return;
 8003316:	bf00      	nop
  }
}
 8003318:	3720      	adds	r7, #32
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	08003429 	.word	0x08003429

08003324 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003324:	b480      	push	{r7}
 8003326:	b083      	sub	sp, #12
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800332c:	bf00      	nop
 800332e:	370c      	adds	r7, #12
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr

08003336 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	bc80      	pop	{r7}
 8003346:	4770      	bx	lr

08003348 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003348:	b480      	push	{r7}
 800334a:	b083      	sub	sp, #12
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr

0800335a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800335a:	b580      	push	{r7, lr}
 800335c:	b084      	sub	sp, #16
 800335e:	af00      	add	r7, sp, #0
 8003360:	60f8      	str	r0, [r7, #12]
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	603b      	str	r3, [r7, #0]
 8003366:	4613      	mov	r3, r2
 8003368:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800336a:	e02c      	b.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d028      	beq.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d007      	beq.n	800338a <UART_WaitOnFlagUntilTimeout+0x30>
 800337a:	f7fd fb1b 	bl	80009b4 <HAL_GetTick>
 800337e:	4602      	mov	r2, r0
 8003380:	683b      	ldr	r3, [r7, #0]
 8003382:	1ad3      	subs	r3, r2, r3
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	429a      	cmp	r2, r3
 8003388:	d21d      	bcs.n	80033c6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68da      	ldr	r2, [r3, #12]
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003398:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	695a      	ldr	r2, [r3, #20]
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f022 0201 	bic.w	r2, r2, #1
 80033a8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2220      	movs	r2, #32
 80033ae:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2220      	movs	r2, #32
 80033b6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2200      	movs	r2, #0
 80033be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e00f      	b.n	80033e6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68bb      	ldr	r3, [r7, #8]
 80033ce:	4013      	ands	r3, r2
 80033d0:	68ba      	ldr	r2, [r7, #8]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	bf0c      	ite	eq
 80033d6:	2301      	moveq	r3, #1
 80033d8:	2300      	movne	r3, #0
 80033da:	b2db      	uxtb	r3, r3
 80033dc:	461a      	mov	r2, r3
 80033de:	79fb      	ldrb	r3, [r7, #7]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d0c3      	beq.n	800336c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003404:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	695a      	ldr	r2, [r3, #20]
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f022 0201 	bic.w	r2, r2, #1
 8003414:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	2220      	movs	r2, #32
 800341a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	bc80      	pop	{r7}
 8003426:	4770      	bx	lr

08003428 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b084      	sub	sp, #16
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003434:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2200      	movs	r2, #0
 800343a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	2200      	movs	r2, #0
 8003440:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f7ff ff80 	bl	8003348 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003448:	bf00      	nop
 800344a:	3710      	adds	r7, #16
 800344c:	46bd      	mov	sp, r7
 800344e:	bd80      	pop	{r7, pc}

08003450 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b21      	cmp	r3, #33	; 0x21
 8003462:	d144      	bne.n	80034ee <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800346c:	d11a      	bne.n	80034a4 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6a1b      	ldr	r3, [r3, #32]
 8003472:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	881b      	ldrh	r3, [r3, #0]
 8003478:	461a      	mov	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003482:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	691b      	ldr	r3, [r3, #16]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d105      	bne.n	8003498 <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	6a1b      	ldr	r3, [r3, #32]
 8003490:	1c9a      	adds	r2, r3, #2
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	621a      	str	r2, [r3, #32]
 8003496:	e00e      	b.n	80034b6 <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6a1b      	ldr	r3, [r3, #32]
 800349c:	1c5a      	adds	r2, r3, #1
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	621a      	str	r2, [r3, #32]
 80034a2:	e008      	b.n	80034b6 <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6a1b      	ldr	r3, [r3, #32]
 80034a8:	1c59      	adds	r1, r3, #1
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	6211      	str	r1, [r2, #32]
 80034ae:	781a      	ldrb	r2, [r3, #0]
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	3b01      	subs	r3, #1
 80034be:	b29b      	uxth	r3, r3
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	4619      	mov	r1, r3
 80034c4:	84d1      	strh	r1, [r2, #38]	; 0x26
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d10f      	bne.n	80034ea <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68da      	ldr	r2, [r3, #12]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80034d8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	68da      	ldr	r2, [r3, #12]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80034e8:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80034ea:	2300      	movs	r3, #0
 80034ec:	e000      	b.n	80034f0 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80034ee:	2302      	movs	r3, #2
  }
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bc80      	pop	{r7}
 80034f8:	4770      	bx	lr

080034fa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80034fa:	b580      	push	{r7, lr}
 80034fc:	b082      	sub	sp, #8
 80034fe:	af00      	add	r7, sp, #0
 8003500:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003510:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7ff ff02 	bl	8003324 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3708      	adds	r7, #8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b22      	cmp	r3, #34	; 0x22
 800353c:	d171      	bne.n	8003622 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003546:	d123      	bne.n	8003590 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800354c:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	691b      	ldr	r3, [r3, #16]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d10e      	bne.n	8003574 <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	b29b      	uxth	r3, r3
 800355e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003562:	b29a      	uxth	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356c:	1c9a      	adds	r2, r3, #2
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	629a      	str	r2, [r3, #40]	; 0x28
 8003572:	e029      	b.n	80035c8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	b29b      	uxth	r3, r3
 800357c:	b2db      	uxtb	r3, r3
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003588:	1c5a      	adds	r2, r3, #1
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	629a      	str	r2, [r3, #40]	; 0x28
 800358e:	e01b      	b.n	80035c8 <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	691b      	ldr	r3, [r3, #16]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d10a      	bne.n	80035ae <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	6858      	ldr	r0, [r3, #4]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a2:	1c59      	adds	r1, r3, #1
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	6291      	str	r1, [r2, #40]	; 0x28
 80035a8:	b2c2      	uxtb	r2, r0
 80035aa:	701a      	strb	r2, [r3, #0]
 80035ac:	e00c      	b.n	80035c8 <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	685b      	ldr	r3, [r3, #4]
 80035b4:	b2da      	uxtb	r2, r3
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	1c58      	adds	r0, r3, #1
 80035bc:	6879      	ldr	r1, [r7, #4]
 80035be:	6288      	str	r0, [r1, #40]	; 0x28
 80035c0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80035c4:	b2d2      	uxtb	r2, r2
 80035c6:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80035cc:	b29b      	uxth	r3, r3
 80035ce:	3b01      	subs	r3, #1
 80035d0:	b29b      	uxth	r3, r3
 80035d2:	687a      	ldr	r2, [r7, #4]
 80035d4:	4619      	mov	r1, r3
 80035d6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d120      	bne.n	800361e <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	68da      	ldr	r2, [r3, #12]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f022 0220 	bic.w	r2, r2, #32
 80035ea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	68da      	ldr	r2, [r3, #12]
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80035fa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	695a      	ldr	r2, [r3, #20]
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f022 0201 	bic.w	r2, r2, #1
 800360a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2220      	movs	r2, #32
 8003610:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fe8e 	bl	8003336 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	e002      	b.n	8003624 <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 800361e:	2300      	movs	r3, #0
 8003620:	e000      	b.n	8003624 <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8003622:	2302      	movs	r3, #2
  }
}
 8003624:	4618      	mov	r0, r3
 8003626:	3710      	adds	r7, #16
 8003628:	46bd      	mov	sp, r7
 800362a:	bd80      	pop	{r7, pc}

0800362c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b084      	sub	sp, #16
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4a84      	ldr	r2, [pc, #528]	; (800384c <UART_SetConfig+0x220>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d904      	bls.n	8003648 <UART_SetConfig+0x1c>
 800363e:	f640 31fd 	movw	r1, #3069	; 0xbfd
 8003642:	4883      	ldr	r0, [pc, #524]	; (8003850 <UART_SetConfig+0x224>)
 8003644:	f7fc fe32 	bl	80002ac <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	68db      	ldr	r3, [r3, #12]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d009      	beq.n	8003664 <UART_SetConfig+0x38>
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003658:	d004      	beq.n	8003664 <UART_SetConfig+0x38>
 800365a:	f640 31fe 	movw	r1, #3070	; 0xbfe
 800365e:	487c      	ldr	r0, [pc, #496]	; (8003850 <UART_SetConfig+0x224>)
 8003660:	f7fc fe24 	bl	80002ac <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	691b      	ldr	r3, [r3, #16]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d00e      	beq.n	800368a <UART_SetConfig+0x5e>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	691b      	ldr	r3, [r3, #16]
 8003670:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003674:	d009      	beq.n	800368a <UART_SetConfig+0x5e>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800367e:	d004      	beq.n	800368a <UART_SetConfig+0x5e>
 8003680:	f640 31ff 	movw	r1, #3071	; 0xbff
 8003684:	4872      	ldr	r0, [pc, #456]	; (8003850 <UART_SetConfig+0x224>)
 8003686:	f7fc fe11 	bl	80002ac <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	695a      	ldr	r2, [r3, #20]
 800368e:	f64f 73f3 	movw	r3, #65523	; 0xfff3
 8003692:	4013      	ands	r3, r2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <UART_SetConfig+0x74>
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	695b      	ldr	r3, [r3, #20]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d104      	bne.n	80036aa <UART_SetConfig+0x7e>
 80036a0:	f44f 6140 	mov.w	r1, #3072	; 0xc00
 80036a4:	486a      	ldr	r0, [pc, #424]	; (8003850 <UART_SetConfig+0x224>)
 80036a6:	f7fc fe01 	bl	80002ac <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	691b      	ldr	r3, [r3, #16]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	695b      	ldr	r3, [r3, #20]
 80036ce:	4313      	orrs	r3, r2
 80036d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80036dc:	f023 030c 	bic.w	r3, r3, #12
 80036e0:	687a      	ldr	r2, [r7, #4]
 80036e2:	6812      	ldr	r2, [r2, #0]
 80036e4:	68f9      	ldr	r1, [r7, #12]
 80036e6:	430b      	orrs	r3, r1
 80036e8:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	695b      	ldr	r3, [r3, #20]
 80036f0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	699a      	ldr	r2, [r3, #24]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	615a      	str	r2, [r3, #20]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
#else
  /*-------------------------- USART BRR Configuration ---------------------*/
  if(huart->Instance == USART1)
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	4a53      	ldr	r2, [pc, #332]	; (8003854 <UART_SetConfig+0x228>)
 8003706:	4293      	cmp	r3, r2
 8003708:	d14e      	bne.n	80037a8 <UART_SetConfig+0x17c>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800370a:	f7fe fafb 	bl	8001d04 <HAL_RCC_GetPCLK2Freq>
 800370e:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003710:	68ba      	ldr	r2, [r7, #8]
 8003712:	4613      	mov	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	4413      	add	r3, r2
 8003718:	009a      	lsls	r2, r3, #2
 800371a:	441a      	add	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	009b      	lsls	r3, r3, #2
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	4a4c      	ldr	r2, [pc, #304]	; (8003858 <UART_SetConfig+0x22c>)
 8003728:	fba2 2303 	umull	r2, r3, r2, r3
 800372c:	095b      	lsrs	r3, r3, #5
 800372e:	0119      	lsls	r1, r3, #4
 8003730:	68ba      	ldr	r2, [r7, #8]
 8003732:	4613      	mov	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	4413      	add	r3, r2
 8003738:	009a      	lsls	r2, r3, #2
 800373a:	441a      	add	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	685b      	ldr	r3, [r3, #4]
 8003740:	009b      	lsls	r3, r3, #2
 8003742:	fbb2 f2f3 	udiv	r2, r2, r3
 8003746:	4b44      	ldr	r3, [pc, #272]	; (8003858 <UART_SetConfig+0x22c>)
 8003748:	fba3 0302 	umull	r0, r3, r3, r2
 800374c:	095b      	lsrs	r3, r3, #5
 800374e:	2064      	movs	r0, #100	; 0x64
 8003750:	fb00 f303 	mul.w	r3, r0, r3
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	011b      	lsls	r3, r3, #4
 8003758:	3332      	adds	r3, #50	; 0x32
 800375a:	4a3f      	ldr	r2, [pc, #252]	; (8003858 <UART_SetConfig+0x22c>)
 800375c:	fba2 2303 	umull	r2, r3, r2, r3
 8003760:	095b      	lsrs	r3, r3, #5
 8003762:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003766:	4419      	add	r1, r3
 8003768:	68ba      	ldr	r2, [r7, #8]
 800376a:	4613      	mov	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	4413      	add	r3, r2
 8003770:	009a      	lsls	r2, r3, #2
 8003772:	441a      	add	r2, r3
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	009b      	lsls	r3, r3, #2
 800377a:	fbb2 f2f3 	udiv	r2, r2, r3
 800377e:	4b36      	ldr	r3, [pc, #216]	; (8003858 <UART_SetConfig+0x22c>)
 8003780:	fba3 0302 	umull	r0, r3, r3, r2
 8003784:	095b      	lsrs	r3, r3, #5
 8003786:	2064      	movs	r0, #100	; 0x64
 8003788:	fb00 f303 	mul.w	r3, r0, r3
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	011b      	lsls	r3, r3, #4
 8003790:	3332      	adds	r3, #50	; 0x32
 8003792:	4a31      	ldr	r2, [pc, #196]	; (8003858 <UART_SetConfig+0x22c>)
 8003794:	fba2 2303 	umull	r2, r3, r2, r3
 8003798:	095b      	lsrs	r3, r3, #5
 800379a:	f003 020f 	and.w	r2, r3, #15
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	440a      	add	r2, r1
 80037a4:	609a      	str	r2, [r3, #8]
  {
    pclk = HAL_RCC_GetPCLK1Freq();
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#endif /* USART_CR1_OVER8 */
}
 80037a6:	e04d      	b.n	8003844 <UART_SetConfig+0x218>
    pclk = HAL_RCC_GetPCLK1Freq();
 80037a8:	f7fe fa98 	bl	8001cdc <HAL_RCC_GetPCLK1Freq>
 80037ac:	60b8      	str	r0, [r7, #8]
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80037ae:	68ba      	ldr	r2, [r7, #8]
 80037b0:	4613      	mov	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4413      	add	r3, r2
 80037b6:	009a      	lsls	r2, r3, #2
 80037b8:	441a      	add	r2, r3
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80037c4:	4a24      	ldr	r2, [pc, #144]	; (8003858 <UART_SetConfig+0x22c>)
 80037c6:	fba2 2303 	umull	r2, r3, r2, r3
 80037ca:	095b      	lsrs	r3, r3, #5
 80037cc:	0119      	lsls	r1, r3, #4
 80037ce:	68ba      	ldr	r2, [r7, #8]
 80037d0:	4613      	mov	r3, r2
 80037d2:	009b      	lsls	r3, r3, #2
 80037d4:	4413      	add	r3, r2
 80037d6:	009a      	lsls	r2, r3, #2
 80037d8:	441a      	add	r2, r3
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	009b      	lsls	r3, r3, #2
 80037e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80037e4:	4b1c      	ldr	r3, [pc, #112]	; (8003858 <UART_SetConfig+0x22c>)
 80037e6:	fba3 0302 	umull	r0, r3, r3, r2
 80037ea:	095b      	lsrs	r3, r3, #5
 80037ec:	2064      	movs	r0, #100	; 0x64
 80037ee:	fb00 f303 	mul.w	r3, r0, r3
 80037f2:	1ad3      	subs	r3, r2, r3
 80037f4:	011b      	lsls	r3, r3, #4
 80037f6:	3332      	adds	r3, #50	; 0x32
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <UART_SetConfig+0x22c>)
 80037fa:	fba2 2303 	umull	r2, r3, r2, r3
 80037fe:	095b      	lsrs	r3, r3, #5
 8003800:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003804:	4419      	add	r1, r3
 8003806:	68ba      	ldr	r2, [r7, #8]
 8003808:	4613      	mov	r3, r2
 800380a:	009b      	lsls	r3, r3, #2
 800380c:	4413      	add	r3, r2
 800380e:	009a      	lsls	r2, r3, #2
 8003810:	441a      	add	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	fbb2 f2f3 	udiv	r2, r2, r3
 800381c:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <UART_SetConfig+0x22c>)
 800381e:	fba3 0302 	umull	r0, r3, r3, r2
 8003822:	095b      	lsrs	r3, r3, #5
 8003824:	2064      	movs	r0, #100	; 0x64
 8003826:	fb00 f303 	mul.w	r3, r0, r3
 800382a:	1ad3      	subs	r3, r2, r3
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	3332      	adds	r3, #50	; 0x32
 8003830:	4a09      	ldr	r2, [pc, #36]	; (8003858 <UART_SetConfig+0x22c>)
 8003832:	fba2 2303 	umull	r2, r3, r2, r3
 8003836:	095b      	lsrs	r3, r3, #5
 8003838:	f003 020f 	and.w	r2, r3, #15
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	440a      	add	r2, r1
 8003842:	609a      	str	r2, [r3, #8]
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}
 800384c:	0044aa20 	.word	0x0044aa20
 8003850:	08004eb8 	.word	0x08004eb8
 8003854:	40013800 	.word	0x40013800
 8003858:	51eb851f 	.word	0x51eb851f

0800385c <siro_init>:
siro_t;

siro_t siro;

static void siro_init(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
	siro.powerPlus = 0;
 8003860:	4b07      	ldr	r3, [pc, #28]	; (8003880 <siro_init+0x24>)
 8003862:	2200      	movs	r2, #0
 8003864:	601a      	str	r2, [r3, #0]
	siro.powerMinus = 0;
 8003866:	4b06      	ldr	r3, [pc, #24]	; (8003880 <siro_init+0x24>)
 8003868:	2200      	movs	r2, #0
 800386a:	605a      	str	r2, [r3, #4]
	siro.extResist = 0;
 800386c:	4b04      	ldr	r3, [pc, #16]	; (8003880 <siro_init+0x24>)
 800386e:	2200      	movs	r2, #0
 8003870:	609a      	str	r2, [r3, #8]
	siro.intResist = 1;
 8003872:	4b03      	ldr	r3, [pc, #12]	; (8003880 <siro_init+0x24>)
 8003874:	2201      	movs	r2, #1
 8003876:	60da      	str	r2, [r3, #12]
}
 8003878:	bf00      	nop
 800387a:	46bd      	mov	sp, r7
 800387c:	bc80      	pop	{r7}
 800387e:	4770      	bx	lr
 8003880:	20000170 	.word	0x20000170

08003884 <siro_task1ms>:

static void siro_task1ms(void)
{
 8003884:	b480      	push	{r7}
 8003886:	af00      	add	r7, sp, #0
	/* process, all in unit of 256 */
	siro.exAcc_U256 = U256 * (siro.powerPlus-siro.powerMinus);
 8003888:	4b22      	ldr	r3, [pc, #136]	; (8003914 <siro_task1ms+0x90>)
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	4b21      	ldr	r3, [pc, #132]	; (8003914 <siro_task1ms+0x90>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	021b      	lsls	r3, r3, #8
 8003894:	4a1f      	ldr	r2, [pc, #124]	; (8003914 <siro_task1ms+0x90>)
 8003896:	6113      	str	r3, [r2, #16]
	siro.deAcc_U256 = siro.speed_U256 * (siro.extResist+siro.intResist) / U256;
 8003898:	4b1e      	ldr	r3, [pc, #120]	; (8003914 <siro_task1ms+0x90>)
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	4a1d      	ldr	r2, [pc, #116]	; (8003914 <siro_task1ms+0x90>)
 800389e:	6891      	ldr	r1, [r2, #8]
 80038a0:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <siro_task1ms+0x90>)
 80038a2:	68d2      	ldr	r2, [r2, #12]
 80038a4:	440a      	add	r2, r1
 80038a6:	fb02 f303 	mul.w	r3, r2, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	da00      	bge.n	80038b0 <siro_task1ms+0x2c>
 80038ae:	33ff      	adds	r3, #255	; 0xff
 80038b0:	121b      	asrs	r3, r3, #8
 80038b2:	461a      	mov	r2, r3
 80038b4:	4b17      	ldr	r3, [pc, #92]	; (8003914 <siro_task1ms+0x90>)
 80038b6:	615a      	str	r2, [r3, #20]
	siro.acc_U256 = siro.exAcc_U256 - siro.deAcc_U256;
 80038b8:	4b16      	ldr	r3, [pc, #88]	; (8003914 <siro_task1ms+0x90>)
 80038ba:	691a      	ldr	r2, [r3, #16]
 80038bc:	4b15      	ldr	r3, [pc, #84]	; (8003914 <siro_task1ms+0x90>)
 80038be:	695b      	ldr	r3, [r3, #20]
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	4a14      	ldr	r2, [pc, #80]	; (8003914 <siro_task1ms+0x90>)
 80038c4:	6193      	str	r3, [r2, #24]
	siro.speed_U256 += siro.acc_U256;
 80038c6:	4b13      	ldr	r3, [pc, #76]	; (8003914 <siro_task1ms+0x90>)
 80038c8:	69da      	ldr	r2, [r3, #28]
 80038ca:	4b12      	ldr	r3, [pc, #72]	; (8003914 <siro_task1ms+0x90>)
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	4413      	add	r3, r2
 80038d0:	4a10      	ldr	r2, [pc, #64]	; (8003914 <siro_task1ms+0x90>)
 80038d2:	61d3      	str	r3, [r2, #28]
	if( siro.speed_U256<U256 && siro.speed_U256>-U256) siro.speed_U256 = 0;
 80038d4:	4b0f      	ldr	r3, [pc, #60]	; (8003914 <siro_task1ms+0x90>)
 80038d6:	69db      	ldr	r3, [r3, #28]
 80038d8:	2bff      	cmp	r3, #255	; 0xff
 80038da:	dc07      	bgt.n	80038ec <siro_task1ms+0x68>
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <siro_task1ms+0x90>)
 80038de:	69db      	ldr	r3, [r3, #28]
 80038e0:	f113 0fff 	cmn.w	r3, #255	; 0xff
 80038e4:	db02      	blt.n	80038ec <siro_task1ms+0x68>
 80038e6:	4b0b      	ldr	r3, [pc, #44]	; (8003914 <siro_task1ms+0x90>)
 80038e8:	2200      	movs	r2, #0
 80038ea:	61da      	str	r2, [r3, #28]
	siro.pos_U256 += siro.speed_U256;
 80038ec:	4b09      	ldr	r3, [pc, #36]	; (8003914 <siro_task1ms+0x90>)
 80038ee:	6a1a      	ldr	r2, [r3, #32]
 80038f0:	4b08      	ldr	r3, [pc, #32]	; (8003914 <siro_task1ms+0x90>)
 80038f2:	69db      	ldr	r3, [r3, #28]
 80038f4:	4413      	add	r3, r2
 80038f6:	4a07      	ldr	r2, [pc, #28]	; (8003914 <siro_task1ms+0x90>)
 80038f8:	6213      	str	r3, [r2, #32]
	/* output */
	siro.pos = (uint16)(siro.pos_U256/U256);
 80038fa:	4b06      	ldr	r3, [pc, #24]	; (8003914 <siro_task1ms+0x90>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	da00      	bge.n	8003904 <siro_task1ms+0x80>
 8003902:	33ff      	adds	r3, #255	; 0xff
 8003904:	121b      	asrs	r3, r3, #8
 8003906:	b29a      	uxth	r2, r3
 8003908:	4b02      	ldr	r3, [pc, #8]	; (8003914 <siro_task1ms+0x90>)
 800390a:	849a      	strh	r2, [r3, #36]	; 0x24
}
 800390c:	bf00      	nop
 800390e:	46bd      	mov	sp, r7
 8003910:	bc80      	pop	{r7}
 8003912:	4770      	bx	lr
 8003914:	20000170 	.word	0x20000170

08003918 <rola_init>:
rola_t rola;

const uint8 phase2ledMask[8] = { 0x01u, 0x02u, 0x04u, 0x08u, 0x10u, 0x20u, 0x40u, 0x80u };

void rola_init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
	rola.step = 0;
 800391c:	4b03      	ldr	r3, [pc, #12]	; (800392c <rola_init+0x14>)
 800391e:	2200      	movs	r2, #0
 8003920:	701a      	strb	r2, [r3, #0]
	siro_init();
 8003922:	f7ff ff9b 	bl	800385c <siro_init>
}
 8003926:	bf00      	nop
 8003928:	bd80      	pop	{r7, pc}
 800392a:	bf00      	nop
 800392c:	20000198 	.word	0x20000198

08003930 <rola_getTouchKey>:

uint8 rola_getTouchKey(uint8 ch)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	4603      	mov	r3, r0
 8003938:	71fb      	strb	r3, [r7, #7]
	uint16 level = tkey_getTouchLevel(ch);
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	4618      	mov	r0, r3
 800393e:	f000 fa07 	bl	8003d50 <tkey_getTouchLevel>
 8003942:	4603      	mov	r3, r0
 8003944:	81fb      	strh	r3, [r7, #14]
	return level>200? 2: 1;
 8003946:	89fb      	ldrh	r3, [r7, #14]
 8003948:	2bc8      	cmp	r3, #200	; 0xc8
 800394a:	d901      	bls.n	8003950 <rola_getTouchKey+0x20>
 800394c:	2302      	movs	r3, #2
 800394e:	e000      	b.n	8003952 <rola_getTouchKey+0x22>
 8003950:	2301      	movs	r3, #1
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
	...

0800395c <rola_task1ms>:

void rola_task1ms(void)
{
 800395c:	b598      	push	{r3, r4, r7, lr}
 800395e:	af00      	add	r7, sp, #0
	/* rotator input */
	siro.powerPlus = rola_getTouchKey(0);
 8003960:	2000      	movs	r0, #0
 8003962:	f7ff ffe5 	bl	8003930 <rola_getTouchKey>
 8003966:	4603      	mov	r3, r0
 8003968:	461a      	mov	r2, r3
 800396a:	4b45      	ldr	r3, [pc, #276]	; (8003a80 <rola_task1ms+0x124>)
 800396c:	601a      	str	r2, [r3, #0]
	siro.powerMinus = rola_getTouchKey(1);
 800396e:	2001      	movs	r0, #1
 8003970:	f7ff ffde 	bl	8003930 <rola_getTouchKey>
 8003974:	4603      	mov	r3, r0
 8003976:	461a      	mov	r2, r3
 8003978:	4b41      	ldr	r3, [pc, #260]	; (8003a80 <rola_task1ms+0x124>)
 800397a:	605a      	str	r2, [r3, #4]
	siro.extResist = (rola_getTouchKey(2)-1)*2+(rola_getTouchKey(3)-1)*4;
 800397c:	2002      	movs	r0, #2
 800397e:	f7ff ffd7 	bl	8003930 <rola_getTouchKey>
 8003982:	4603      	mov	r3, r0
 8003984:	1e5c      	subs	r4, r3, #1
 8003986:	2003      	movs	r0, #3
 8003988:	f7ff ffd2 	bl	8003930 <rola_getTouchKey>
 800398c:	4603      	mov	r3, r0
 800398e:	3b01      	subs	r3, #1
 8003990:	005b      	lsls	r3, r3, #1
 8003992:	4423      	add	r3, r4
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4a3a      	ldr	r2, [pc, #232]	; (8003a80 <rola_task1ms+0x124>)
 8003998:	6093      	str	r3, [r2, #8]
	siro.intResist = 1;
 800399a:	4b39      	ldr	r3, [pc, #228]	; (8003a80 <rola_task1ms+0x124>)
 800399c:	2201      	movs	r2, #1
 800399e:	60da      	str	r2, [r3, #12]

	/* simulated rotator */
	siro_task1ms();
 80039a0:	f7ff ff70 	bl	8003884 <siro_task1ms>

	/* rotator - output */
	rola.phase = siro.pos>>13u;
 80039a4:	4b36      	ldr	r3, [pc, #216]	; (8003a80 <rola_task1ms+0x124>)
 80039a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80039a8:	0b5b      	lsrs	r3, r3, #13
 80039aa:	b29b      	uxth	r3, r3
 80039ac:	b2da      	uxtb	r2, r3
 80039ae:	4b35      	ldr	r3, [pc, #212]	; (8003a84 <rola_task1ms+0x128>)
 80039b0:	705a      	strb	r2, [r3, #1]
	rola.ledMask = phase2ledMask[rola.phase];
 80039b2:	4b34      	ldr	r3, [pc, #208]	; (8003a84 <rola_task1ms+0x128>)
 80039b4:	785b      	ldrb	r3, [r3, #1]
 80039b6:	461a      	mov	r2, r3
 80039b8:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <rola_task1ms+0x12c>)
 80039ba:	5c9a      	ldrb	r2, [r3, r2]
 80039bc:	4b31      	ldr	r3, [pc, #196]	; (8003a84 <rola_task1ms+0x128>)
 80039be:	709a      	strb	r2, [r3, #2]

	/* output to hardware */
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (rola.ledMask&0x01u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80039c0:	4b30      	ldr	r3, [pc, #192]	; (8003a84 <rola_task1ms+0x128>)
 80039c2:	789b      	ldrb	r3, [r3, #2]
 80039c4:	f003 0301 	and.w	r3, r3, #1
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	461a      	mov	r2, r3
 80039cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039d0:	482e      	ldr	r0, [pc, #184]	; (8003a8c <rola_task1ms+0x130>)
 80039d2:	f7fd fbe5 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (rola.ledMask&0x02u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80039d6:	4b2b      	ldr	r3, [pc, #172]	; (8003a84 <rola_task1ms+0x128>)
 80039d8:	789b      	ldrb	r3, [r3, #2]
 80039da:	085b      	lsrs	r3, r3, #1
 80039dc:	b2db      	uxtb	r3, r3
 80039de:	f003 0301 	and.w	r3, r3, #1
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	461a      	mov	r2, r3
 80039e6:	2108      	movs	r1, #8
 80039e8:	4829      	ldr	r0, [pc, #164]	; (8003a90 <rola_task1ms+0x134>)
 80039ea:	f7fd fbd9 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (rola.ledMask&0x04u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80039ee:	4b25      	ldr	r3, [pc, #148]	; (8003a84 <rola_task1ms+0x128>)
 80039f0:	789b      	ldrb	r3, [r3, #2]
 80039f2:	089b      	lsrs	r3, r3, #2
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	b2db      	uxtb	r3, r3
 80039fc:	461a      	mov	r2, r3
 80039fe:	2110      	movs	r1, #16
 8003a00:	4823      	ldr	r0, [pc, #140]	; (8003a90 <rola_task1ms+0x134>)
 8003a02:	f7fd fbcd 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (rola.ledMask&0x08u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003a06:	4b1f      	ldr	r3, [pc, #124]	; (8003a84 <rola_task1ms+0x128>)
 8003a08:	789b      	ldrb	r3, [r3, #2]
 8003a0a:	08db      	lsrs	r3, r3, #3
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	f003 0301 	and.w	r3, r3, #1
 8003a12:	b2db      	uxtb	r3, r3
 8003a14:	461a      	mov	r2, r3
 8003a16:	2120      	movs	r1, #32
 8003a18:	481d      	ldr	r0, [pc, #116]	; (8003a90 <rola_task1ms+0x134>)
 8003a1a:	f7fd fbc1 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  (rola.ledMask&0x10u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003a1e:	4b19      	ldr	r3, [pc, #100]	; (8003a84 <rola_task1ms+0x128>)
 8003a20:	789b      	ldrb	r3, [r3, #2]
 8003a22:	091b      	lsrs	r3, r3, #4
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	f003 0301 	and.w	r3, r3, #1
 8003a2a:	b2db      	uxtb	r3, r3
 8003a2c:	461a      	mov	r2, r3
 8003a2e:	2140      	movs	r1, #64	; 0x40
 8003a30:	4817      	ldr	r0, [pc, #92]	; (8003a90 <rola_task1ms+0x134>)
 8003a32:	f7fd fbb5 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  (rola.ledMask&0x20u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003a36:	4b13      	ldr	r3, [pc, #76]	; (8003a84 <rola_task1ms+0x128>)
 8003a38:	789b      	ldrb	r3, [r3, #2]
 8003a3a:	095b      	lsrs	r3, r3, #5
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	f003 0301 	and.w	r3, r3, #1
 8003a42:	b2db      	uxtb	r3, r3
 8003a44:	461a      	mov	r2, r3
 8003a46:	2180      	movs	r1, #128	; 0x80
 8003a48:	4811      	ldr	r0, [pc, #68]	; (8003a90 <rola_task1ms+0x134>)
 8003a4a:	f7fd fba9 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  (rola.ledMask&0x40u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <rola_task1ms+0x128>)
 8003a50:	789b      	ldrb	r3, [r3, #2]
 8003a52:	099b      	lsrs	r3, r3, #6
 8003a54:	b2db      	uxtb	r3, r3
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	b2db      	uxtb	r3, r3
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003a62:	480b      	ldr	r0, [pc, #44]	; (8003a90 <rola_task1ms+0x134>)
 8003a64:	f7fd fb9c 	bl	80011a0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  (rola.ledMask&0x80u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <rola_task1ms+0x128>)
 8003a6a:	789b      	ldrb	r3, [r3, #2]
 8003a6c:	09db      	lsrs	r3, r3, #7
 8003a6e:	b2db      	uxtb	r3, r3
 8003a70:	461a      	mov	r2, r3
 8003a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003a76:	4806      	ldr	r0, [pc, #24]	; (8003a90 <rola_task1ms+0x134>)
 8003a78:	f7fd fb92 	bl	80011a0 <HAL_GPIO_WritePin>
}
 8003a7c:	bf00      	nop
 8003a7e:	bd98      	pop	{r3, r4, r7, pc}
 8003a80:	20000170 	.word	0x20000170
 8003a84:	20000198 	.word	0x20000198
 8003a88:	08004f38 	.word	0x08004f38
 8003a8c:	40010800 	.word	0x40010800
 8003a90:	40010c00 	.word	0x40010c00

08003a94 <rola_task>:

void rola_task(void)
{
 8003a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af04      	add	r7, sp, #16
	rola.step++;
 8003a9a:	4b12      	ldr	r3, [pc, #72]	; (8003ae4 <rola_task+0x50>)
 8003a9c:	781b      	ldrb	r3, [r3, #0]
 8003a9e:	3301      	adds	r3, #1
 8003aa0:	b2da      	uxtb	r2, r3
 8003aa2:	4b10      	ldr	r3, [pc, #64]	; (8003ae4 <rola_task+0x50>)
 8003aa4:	701a      	strb	r2, [r3, #0]

	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
			rola.step,
 8003aa6:	4b0f      	ldr	r3, [pc, #60]	; (8003ae4 <rola_task+0x50>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
 8003aaa:	461e      	mov	r6, r3
 8003aac:	4b0e      	ldr	r3, [pc, #56]	; (8003ae8 <rola_task+0x54>)
 8003aae:	6918      	ldr	r0, [r3, #16]
 8003ab0:	4b0d      	ldr	r3, [pc, #52]	; (8003ae8 <rola_task+0x54>)
 8003ab2:	695c      	ldr	r4, [r3, #20]
 8003ab4:	4b0c      	ldr	r3, [pc, #48]	; (8003ae8 <rola_task+0x54>)
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	4a0b      	ldr	r2, [pc, #44]	; (8003ae8 <rola_task+0x54>)
 8003aba:	69d2      	ldr	r2, [r2, #28]
			siro.exAcc_U256, siro.deAcc_U256, siro.acc_U256,
			siro.speed_U256, siro.pos, rola.phase
 8003abc:	490a      	ldr	r1, [pc, #40]	; (8003ae8 <rola_task+0x54>)
 8003abe:	8c89      	ldrh	r1, [r1, #36]	; 0x24
	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
 8003ac0:	460d      	mov	r5, r1
			siro.speed_U256, siro.pos, rola.phase
 8003ac2:	4908      	ldr	r1, [pc, #32]	; (8003ae4 <rola_task+0x50>)
 8003ac4:	7849      	ldrb	r1, [r1, #1]
	printf("%d: (%ld)-(%ld)=(%ld) -> %ld -> %d, %d\r\n",
 8003ac6:	9103      	str	r1, [sp, #12]
 8003ac8:	9502      	str	r5, [sp, #8]
 8003aca:	9201      	str	r2, [sp, #4]
 8003acc:	9300      	str	r3, [sp, #0]
 8003ace:	4623      	mov	r3, r4
 8003ad0:	4602      	mov	r2, r0
 8003ad2:	4631      	mov	r1, r6
 8003ad4:	4805      	ldr	r0, [pc, #20]	; (8003aec <rola_task+0x58>)
 8003ad6:	f000 fa59 	bl	8003f8c <iprintf>
			);
}
 8003ada:	bf00      	nop
 8003adc:	3704      	adds	r7, #4
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	20000198 	.word	0x20000198
 8003ae8:	20000170 	.word	0x20000170
 8003aec:	08004ef4 	.word	0x08004ef4

08003af0 <tapp_init>:
#include "BasicSoftware/PushButton/pushbutton.h"

uint32 cnt = 0u;

void tapp_init(void)
{
 8003af0:	b480      	push	{r7}
 8003af2:	af00      	add	r7, sp, #0
	cnt = 0u;
 8003af4:	4b03      	ldr	r3, [pc, #12]	; (8003b04 <tapp_init+0x14>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	601a      	str	r2, [r3, #0]
}
 8003afa:	bf00      	nop
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bc80      	pop	{r7}
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	20000090 	.word	0x20000090

08003b08 <tapp_task>:

void tapp_task(void)
{
 8003b08:	b480      	push	{r7}
 8003b0a:	af00      	add	r7, sp, #0
	cnt++;
 8003b0c:	4b04      	ldr	r3, [pc, #16]	; (8003b20 <tapp_task+0x18>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	3301      	adds	r3, #1
 8003b12:	4a03      	ldr	r2, [pc, #12]	; (8003b20 <tapp_task+0x18>)
 8003b14:	6013      	str	r3, [r2, #0]
	printf("%u: [%u] <%u> %u:%u:%u.%u\r\n", (uint)cnt,
			(uint)syti_getBaseTime(),
			(uint)systime.day,
			(uint)systime.hour, (uint)systime.minute, (uint)systime.second, (uint)systime.miniSec);
#endif
}
 8003b16:	bf00      	nop
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	20000090 	.word	0x20000090

08003b24 <syti_init>:

systime_t systime = {0};
uint32 syti_baseTime = 0u;

void syti_init(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
	syti_baseTime = 0u;
 8003b28:	4b0a      	ldr	r3, [pc, #40]	; (8003b54 <syti_init+0x30>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
	systime.miniSec = 0u;
 8003b2e:	4b0a      	ldr	r3, [pc, #40]	; (8003b58 <syti_init+0x34>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	80da      	strh	r2, [r3, #6]
	systime.second = 0u;
 8003b34:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <syti_init+0x34>)
 8003b36:	2200      	movs	r2, #0
 8003b38:	711a      	strb	r2, [r3, #4]
	systime.minute = 0u;
 8003b3a:	4b07      	ldr	r3, [pc, #28]	; (8003b58 <syti_init+0x34>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	70da      	strb	r2, [r3, #3]
	systime.hour = 0u;
 8003b40:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <syti_init+0x34>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	709a      	strb	r2, [r3, #2]
	systime.day = 0u;
 8003b46:	4b04      	ldr	r3, [pc, #16]	; (8003b58 <syti_init+0x34>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	801a      	strh	r2, [r3, #0]
}
 8003b4c:	bf00      	nop
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bc80      	pop	{r7}
 8003b52:	4770      	bx	lr
 8003b54:	2000009c 	.word	0x2000009c
 8003b58:	20000094 	.word	0x20000094

08003b5c <syti_task>:

void syti_task(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
	syti_baseTime++;
 8003b60:	4b24      	ldr	r3, [pc, #144]	; (8003bf4 <syti_task+0x98>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	3301      	adds	r3, #1
 8003b66:	4a23      	ldr	r2, [pc, #140]	; (8003bf4 <syti_task+0x98>)
 8003b68:	6013      	str	r3, [r2, #0]
	systime.miniSec++;
 8003b6a:	4b23      	ldr	r3, [pc, #140]	; (8003bf8 <syti_task+0x9c>)
 8003b6c:	88db      	ldrh	r3, [r3, #6]
 8003b6e:	3301      	adds	r3, #1
 8003b70:	b29a      	uxth	r2, r3
 8003b72:	4b21      	ldr	r3, [pc, #132]	; (8003bf8 <syti_task+0x9c>)
 8003b74:	80da      	strh	r2, [r3, #6]
	if(systime.miniSec>=1000u)
 8003b76:	4b20      	ldr	r3, [pc, #128]	; (8003bf8 <syti_task+0x9c>)
 8003b78:	88db      	ldrh	r3, [r3, #6]
 8003b7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b7e:	d335      	bcc.n	8003bec <syti_task+0x90>
	{
		systime.miniSec = 0u;
 8003b80:	4b1d      	ldr	r3, [pc, #116]	; (8003bf8 <syti_task+0x9c>)
 8003b82:	2200      	movs	r2, #0
 8003b84:	80da      	strh	r2, [r3, #6]
		systime.second++;
 8003b86:	4b1c      	ldr	r3, [pc, #112]	; (8003bf8 <syti_task+0x9c>)
 8003b88:	791b      	ldrb	r3, [r3, #4]
 8003b8a:	3301      	adds	r3, #1
 8003b8c:	b2da      	uxtb	r2, r3
 8003b8e:	4b1a      	ldr	r3, [pc, #104]	; (8003bf8 <syti_task+0x9c>)
 8003b90:	711a      	strb	r2, [r3, #4]
		if(systime.second>=60u)
 8003b92:	4b19      	ldr	r3, [pc, #100]	; (8003bf8 <syti_task+0x9c>)
 8003b94:	791b      	ldrb	r3, [r3, #4]
 8003b96:	2b3b      	cmp	r3, #59	; 0x3b
 8003b98:	d928      	bls.n	8003bec <syti_task+0x90>
		{
			systime.second = 0u;
 8003b9a:	4b17      	ldr	r3, [pc, #92]	; (8003bf8 <syti_task+0x9c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	711a      	strb	r2, [r3, #4]
			systime.minute++;
 8003ba0:	4b15      	ldr	r3, [pc, #84]	; (8003bf8 <syti_task+0x9c>)
 8003ba2:	78db      	ldrb	r3, [r3, #3]
 8003ba4:	3301      	adds	r3, #1
 8003ba6:	b2da      	uxtb	r2, r3
 8003ba8:	4b13      	ldr	r3, [pc, #76]	; (8003bf8 <syti_task+0x9c>)
 8003baa:	70da      	strb	r2, [r3, #3]
			if(systime.minute>=60u)
 8003bac:	4b12      	ldr	r3, [pc, #72]	; (8003bf8 <syti_task+0x9c>)
 8003bae:	78db      	ldrb	r3, [r3, #3]
 8003bb0:	2b3b      	cmp	r3, #59	; 0x3b
 8003bb2:	d91b      	bls.n	8003bec <syti_task+0x90>
			{
				systime.minute = 0u;
 8003bb4:	4b10      	ldr	r3, [pc, #64]	; (8003bf8 <syti_task+0x9c>)
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	70da      	strb	r2, [r3, #3]
				systime.hour++;
 8003bba:	4b0f      	ldr	r3, [pc, #60]	; (8003bf8 <syti_task+0x9c>)
 8003bbc:	789b      	ldrb	r3, [r3, #2]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	b2da      	uxtb	r2, r3
 8003bc2:	4b0d      	ldr	r3, [pc, #52]	; (8003bf8 <syti_task+0x9c>)
 8003bc4:	709a      	strb	r2, [r3, #2]
				if(systime.hour>=24u)
 8003bc6:	4b0c      	ldr	r3, [pc, #48]	; (8003bf8 <syti_task+0x9c>)
 8003bc8:	789b      	ldrb	r3, [r3, #2]
 8003bca:	2b17      	cmp	r3, #23
 8003bcc:	d90e      	bls.n	8003bec <syti_task+0x90>
				{
					systime.hour = 0u;
 8003bce:	4b0a      	ldr	r3, [pc, #40]	; (8003bf8 <syti_task+0x9c>)
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	709a      	strb	r2, [r3, #2]
					if(systime.day<0xFFFF)
 8003bd4:	4b08      	ldr	r3, [pc, #32]	; (8003bf8 <syti_task+0x9c>)
 8003bd6:	881b      	ldrh	r3, [r3, #0]
 8003bd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d005      	beq.n	8003bec <syti_task+0x90>
					{
						systime.day++;
 8003be0:	4b05      	ldr	r3, [pc, #20]	; (8003bf8 <syti_task+0x9c>)
 8003be2:	881b      	ldrh	r3, [r3, #0]
 8003be4:	3301      	adds	r3, #1
 8003be6:	b29a      	uxth	r2, r3
 8003be8:	4b03      	ldr	r3, [pc, #12]	; (8003bf8 <syti_task+0x9c>)
 8003bea:	801a      	strh	r2, [r3, #0]
					}
				}
			}
		}
	}
}
 8003bec:	bf00      	nop
 8003bee:	46bd      	mov	sp, r7
 8003bf0:	bc80      	pop	{r7}
 8003bf2:	4770      	bx	lr
 8003bf4:	2000009c 	.word	0x2000009c
 8003bf8:	20000094 	.word	0x20000094

08003bfc <tkey_init>:
touchkey_t;

touchkey_t tkey;

void tkey_init(void)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
	tkey.cycle = 0u;
 8003c02:	4b1b      	ldr	r3, [pc, #108]	; (8003c70 <tkey_init+0x74>)
 8003c04:	2200      	movs	r2, #0
 8003c06:	701a      	strb	r2, [r3, #0]

	/* output low at beginning */
	{
		GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c08:	463b      	mov	r3, r7
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	601a      	str	r2, [r3, #0]
 8003c0e:	605a      	str	r2, [r3, #4]
 8003c10:	609a      	str	r2, [r3, #8]
 8003c12:	60da      	str	r2, [r3, #12]
		/* PA2, PA3 */
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003c14:	2200      	movs	r2, #0
 8003c16:	210c      	movs	r1, #12
 8003c18:	4816      	ldr	r0, [pc, #88]	; (8003c74 <tkey_init+0x78>)
 8003c1a:	f7fd fac1 	bl	80011a0 <HAL_GPIO_WritePin>
	    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c1e:	230c      	movs	r3, #12
 8003c20:	603b      	str	r3, [r7, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003c22:	2311      	movs	r3, #17
 8003c24:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c26:	2300      	movs	r3, #0
 8003c28:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	60fb      	str	r3, [r7, #12]
	    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c2e:	463b      	mov	r3, r7
 8003c30:	4619      	mov	r1, r3
 8003c32:	4810      	ldr	r0, [pc, #64]	; (8003c74 <tkey_init+0x78>)
 8003c34:	f7fd f87a 	bl	8000d2c <HAL_GPIO_Init>
	    /* PB0, PB1 */
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003c38:	2200      	movs	r2, #0
 8003c3a:	2103      	movs	r1, #3
 8003c3c:	480e      	ldr	r0, [pc, #56]	; (8003c78 <tkey_init+0x7c>)
 8003c3e:	f7fd faaf 	bl	80011a0 <HAL_GPIO_WritePin>
	    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003c42:	2303      	movs	r3, #3
 8003c44:	603b      	str	r3, [r7, #0]
	    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003c46:	2311      	movs	r3, #17
 8003c48:	607b      	str	r3, [r7, #4]
	    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
	    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2302      	movs	r3, #2
 8003c50:	60fb      	str	r3, [r7, #12]
	    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c52:	463b      	mov	r3, r7
 8003c54:	4619      	mov	r1, r3
 8003c56:	4808      	ldr	r0, [pc, #32]	; (8003c78 <tkey_init+0x7c>)
 8003c58:	f7fd f868 	bl	8000d2c <HAL_GPIO_Init>
	}

	/* start timers */
	HAL_TIM_Base_Start(&htim2);
 8003c5c:	4807      	ldr	r0, [pc, #28]	; (8003c7c <tkey_init+0x80>)
 8003c5e:	f7fe f909 	bl	8001e74 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim3);
 8003c62:	4807      	ldr	r0, [pc, #28]	; (8003c80 <tkey_init+0x84>)
 8003c64:	f7fe f906 	bl	8001e74 <HAL_TIM_Base_Start>
}
 8003c68:	bf00      	nop
 8003c6a:	3710      	adds	r7, #16
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	2000019c 	.word	0x2000019c
 8003c74:	40010800 	.word	0x40010800
 8003c78:	40010c00 	.word	0x40010c00
 8003c7c:	200000ec 	.word	0x200000ec
 8003c80:	200000ac 	.word	0x200000ac

08003c84 <tkey_task4ms>:

void tkey_task4ms(void)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	af00      	add	r7, sp, #0
	switch(tkey.cycle)
 8003c88:	4b2c      	ldr	r3, [pc, #176]	; (8003d3c <tkey_task4ms+0xb8>)
 8003c8a:	781b      	ldrb	r3, [r3, #0]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d002      	beq.n	8003c96 <tkey_task4ms+0x12>
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d026      	beq.n	8003ce2 <tkey_task4ms+0x5e>
 8003c94:	e04b      	b.n	8003d2e <tkey_task4ms+0xaa>
	{
		case	0:	// start new
			/* T23, PA2 */
			/* T24, PA3 */
			__HAL_TIM_SET_COUNTER(&htim2, 0);
 8003c96:	4b2a      	ldr	r3, [pc, #168]	; (8003d40 <tkey_task4ms+0xbc>)
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_3);
 8003c9e:	2108      	movs	r1, #8
 8003ca0:	4827      	ldr	r0, [pc, #156]	; (8003d40 <tkey_task4ms+0xbc>)
 8003ca2:	f7fe f9bb 	bl	800201c <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start(&htim2,TIM_CHANNEL_4);
 8003ca6:	210c      	movs	r1, #12
 8003ca8:	4825      	ldr	r0, [pc, #148]	; (8003d40 <tkey_task4ms+0xbc>)
 8003caa:	f7fe f9b7 	bl	800201c <HAL_TIM_IC_Start>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_SET);
 8003cae:	2201      	movs	r2, #1
 8003cb0:	210c      	movs	r1, #12
 8003cb2:	4824      	ldr	r0, [pc, #144]	; (8003d44 <tkey_task4ms+0xc0>)
 8003cb4:	f7fd fa74 	bl	80011a0 <HAL_GPIO_WritePin>
			/* T33, PB0 */
			/* T34, PB1 */
			__HAL_TIM_SET_COUNTER(&htim3, 0);
 8003cb8:	4b23      	ldr	r3, [pc, #140]	; (8003d48 <tkey_task4ms+0xc4>)
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	625a      	str	r2, [r3, #36]	; 0x24
			HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_3);
 8003cc0:	2108      	movs	r1, #8
 8003cc2:	4821      	ldr	r0, [pc, #132]	; (8003d48 <tkey_task4ms+0xc4>)
 8003cc4:	f7fe f9aa 	bl	800201c <HAL_TIM_IC_Start>
			HAL_TIM_IC_Start(&htim3,TIM_CHANNEL_4);
 8003cc8:	210c      	movs	r1, #12
 8003cca:	481f      	ldr	r0, [pc, #124]	; (8003d48 <tkey_task4ms+0xc4>)
 8003ccc:	f7fe f9a6 	bl	800201c <HAL_TIM_IC_Start>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_SET);
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	2103      	movs	r1, #3
 8003cd4:	481d      	ldr	r0, [pc, #116]	; (8003d4c <tkey_task4ms+0xc8>)
 8003cd6:	f7fd fa63 	bl	80011a0 <HAL_GPIO_WritePin>
			/* next */
			tkey.cycle = 1;
 8003cda:	4b18      	ldr	r3, [pc, #96]	; (8003d3c <tkey_task4ms+0xb8>)
 8003cdc:	2201      	movs	r2, #1
 8003cde:	701a      	strb	r2, [r3, #0]
			break;
 8003ce0:	e029      	b.n	8003d36 <tkey_task4ms+0xb2>
		case	1:	// get result & next
			/* store result */
			tkey.result[0] = __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_3);
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <tkey_task4ms+0xbc>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	4b14      	ldr	r3, [pc, #80]	; (8003d3c <tkey_task4ms+0xb8>)
 8003cec:	805a      	strh	r2, [r3, #2]
			tkey.result[1] = __HAL_TIM_GET_COMPARE(&htim2,TIM_CHANNEL_4);
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <tkey_task4ms+0xbc>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf4:	b29a      	uxth	r2, r3
 8003cf6:	4b11      	ldr	r3, [pc, #68]	; (8003d3c <tkey_task4ms+0xb8>)
 8003cf8:	809a      	strh	r2, [r3, #4]
			tkey.result[2] = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_3);
 8003cfa:	4b13      	ldr	r3, [pc, #76]	; (8003d48 <tkey_task4ms+0xc4>)
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	4b0e      	ldr	r3, [pc, #56]	; (8003d3c <tkey_task4ms+0xb8>)
 8003d04:	80da      	strh	r2, [r3, #6]
			tkey.result[3] = __HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_4);
 8003d06:	4b10      	ldr	r3, [pc, #64]	; (8003d48 <tkey_task4ms+0xc4>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d0c:	b29a      	uxth	r2, r3
 8003d0e:	4b0b      	ldr	r3, [pc, #44]	; (8003d3c <tkey_task4ms+0xb8>)
 8003d10:	811a      	strh	r2, [r3, #8]
			/* reset capacitor */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2|GPIO_PIN_3, GPIO_PIN_RESET);
 8003d12:	2200      	movs	r2, #0
 8003d14:	210c      	movs	r1, #12
 8003d16:	480b      	ldr	r0, [pc, #44]	; (8003d44 <tkey_task4ms+0xc0>)
 8003d18:	f7fd fa42 	bl	80011a0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2103      	movs	r1, #3
 8003d20:	480a      	ldr	r0, [pc, #40]	; (8003d4c <tkey_task4ms+0xc8>)
 8003d22:	f7fd fa3d 	bl	80011a0 <HAL_GPIO_WritePin>
			/* next */
			tkey.cycle = 0;
 8003d26:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <tkey_task4ms+0xb8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	701a      	strb	r2, [r3, #0]
			break;
 8003d2c:	e003      	b.n	8003d36 <tkey_task4ms+0xb2>
		default:
			/* next */
			tkey.cycle = 0;
 8003d2e:	4b03      	ldr	r3, [pc, #12]	; (8003d3c <tkey_task4ms+0xb8>)
 8003d30:	2200      	movs	r2, #0
 8003d32:	701a      	strb	r2, [r3, #0]
			break;
 8003d34:	bf00      	nop
	}
}
 8003d36:	bf00      	nop
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	2000019c 	.word	0x2000019c
 8003d40:	200000ec 	.word	0x200000ec
 8003d44:	40010800 	.word	0x40010800
 8003d48:	200000ac 	.word	0x200000ac
 8003d4c:	40010c00 	.word	0x40010c00

08003d50 <tkey_getTouchLevel>:

uint16 tkey_getTouchLevel(uint8 keyIndex)
{
 8003d50:	b480      	push	{r7}
 8003d52:	b083      	sub	sp, #12
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	4603      	mov	r3, r0
 8003d58:	71fb      	strb	r3, [r7, #7]
	return tkey.result[keyIndex];
 8003d5a:	79fb      	ldrb	r3, [r7, #7]
 8003d5c:	4a04      	ldr	r2, [pc, #16]	; (8003d70 <tkey_getTouchLevel+0x20>)
 8003d5e:	005b      	lsls	r3, r3, #1
 8003d60:	4413      	add	r3, r2
 8003d62:	885b      	ldrh	r3, [r3, #2]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	370c      	adds	r7, #12
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bc80      	pop	{r7}
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	2000019c 	.word	0x2000019c

08003d74 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b084      	sub	sp, #16
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
	uint8 txdata = ch;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	b2db      	uxtb	r3, r3
 8003d80:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart1, &txdata, 1, 72000);
 8003d82:	f107 010f 	add.w	r1, r7, #15
 8003d86:	4b05      	ldr	r3, [pc, #20]	; (8003d9c <__io_putchar+0x28>)
 8003d88:	2201      	movs	r2, #1
 8003d8a:	4805      	ldr	r0, [pc, #20]	; (8003da0 <__io_putchar+0x2c>)
 8003d8c:	f7ff f934 	bl	8002ff8 <HAL_UART_Transmit>
	return ch;
 8003d90:	687b      	ldr	r3, [r7, #4]
}
 8003d92:	4618      	mov	r0, r3
 8003d94:	3710      	adds	r7, #16
 8003d96:	46bd      	mov	sp, r7
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	00011940 	.word	0x00011940
 8003da0:	2000012c 	.word	0x2000012c

08003da4 <task_init>:
#include "BasicSoftware/PushButton/pushbutton.h"
#include "ApplicationSoftware/RotateLamp/rotatelamp.h"
#include "ApplicationSoftware/TestApp/testapp.h"

void task_init(void)
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
	syti_init();
 8003da8:	f7ff febc 	bl	8003b24 <syti_init>
	rola_init();
 8003dac:	f7ff fdb4 	bl	8003918 <rola_init>
	tkey_init();
 8003db0:	f7ff ff24 	bl	8003bfc <tkey_init>
	// app
	tapp_init();
 8003db4:	f7ff fe9c 	bl	8003af0 <tapp_init>
}
 8003db8:	bf00      	nop
 8003dba:	bd80      	pop	{r7, pc}

08003dbc <task_1ms>:

void task_1ms(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	af00      	add	r7, sp, #0
	syti_task();
 8003dc0:	f7ff fecc 	bl	8003b5c <syti_task>
	rola_task1ms();
 8003dc4:	f7ff fdca 	bl	800395c <rola_task1ms>
}
 8003dc8:	bf00      	nop
 8003dca:	bd80      	pop	{r7, pc}

08003dcc <task_2ms>:

void task_2ms(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr

08003dd8 <task_4ms>:

void task_4ms(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
	tkey_task4ms();
 8003ddc:	f7ff ff52 	bl	8003c84 <tkey_task4ms>
}
 8003de0:	bf00      	nop
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <task_8ms>:

void task_8ms(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
}
 8003de8:	bf00      	nop
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bc80      	pop	{r7}
 8003dee:	4770      	bx	lr

08003df0 <task_16ms>:

void task_16ms(void)
{
 8003df0:	b480      	push	{r7}
 8003df2:	af00      	add	r7, sp, #0
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bc80      	pop	{r7}
 8003dfa:	4770      	bx	lr

08003dfc <task_32ms>:

void task_32ms(void)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	af00      	add	r7, sp, #0
}
 8003e00:	bf00      	nop
 8003e02:	46bd      	mov	sp, r7
 8003e04:	bc80      	pop	{r7}
 8003e06:	4770      	bx	lr

08003e08 <task_64ms>:

void task_64ms(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
	rola_task();
 8003e0c:	f7ff fe42 	bl	8003a94 <rola_task>
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <task_128ms>:

void task_128ms(void)
{
 8003e14:	b480      	push	{r7}
 8003e16:	af00      	add	r7, sp, #0
}
 8003e18:	bf00      	nop
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bc80      	pop	{r7}
 8003e1e:	4770      	bx	lr

08003e20 <task_256ms>:

void task_256ms(void)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	af00      	add	r7, sp, #0
	tapp_task();
 8003e24:	f7ff fe70 	bl	8003b08 <tapp_task>
}
 8003e28:	bf00      	nop
 8003e2a:	bd80      	pop	{r7, pc}

08003e2c <scheduler_init>:
scheduler_t;

static scheduler_t scheduler;

void scheduler_init(void)
{
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	af00      	add	r7, sp, #0
	scheduler.input.tick = 0u;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <scheduler_init+0x20>)
 8003e32:	2200      	movs	r2, #0
 8003e34:	701a      	strb	r2, [r3, #0]
	scheduler.local.tick = 0u;
 8003e36:	4b05      	ldr	r3, [pc, #20]	; (8003e4c <scheduler_init+0x20>)
 8003e38:	2200      	movs	r2, #0
 8003e3a:	705a      	strb	r2, [r3, #1]
	scheduler.local.count = 0u;
 8003e3c:	4b03      	ldr	r3, [pc, #12]	; (8003e4c <scheduler_init+0x20>)
 8003e3e:	2200      	movs	r2, #0
 8003e40:	709a      	strb	r2, [r3, #2]

	task_init();
 8003e42:	f7ff ffaf 	bl	8003da4 <task_init>
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200000a0 	.word	0x200000a0

08003e50 <scheduler_main>:

void scheduler_main(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
	for(;;)
	{
		if( scheduler.local.tick != scheduler.input.tick )
 8003e54:	4b2c      	ldr	r3, [pc, #176]	; (8003f08 <scheduler_main+0xb8>)
 8003e56:	785a      	ldrb	r2, [r3, #1]
 8003e58:	4b2b      	ldr	r3, [pc, #172]	; (8003f08 <scheduler_main+0xb8>)
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	429a      	cmp	r2, r3
 8003e5e:	d0f9      	beq.n	8003e54 <scheduler_main+0x4>
		{
			/* sync */
			scheduler.local.tick = scheduler.input.tick;
 8003e60:	4b29      	ldr	r3, [pc, #164]	; (8003f08 <scheduler_main+0xb8>)
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	4b28      	ldr	r3, [pc, #160]	; (8003f08 <scheduler_main+0xb8>)
 8003e66:	705a      	strb	r2, [r3, #1]

			/* schedule tasks */
			                                      task_1ms();
 8003e68:	f7ff ffa8 	bl	8003dbc <task_1ms>
			     if( scheduler.local.count&0x01 ) task_2ms();
 8003e6c:	4b26      	ldr	r3, [pc, #152]	; (8003f08 <scheduler_main+0xb8>)
 8003e6e:	789b      	ldrb	r3, [r3, #2]
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d002      	beq.n	8003e7e <scheduler_main+0x2e>
 8003e78:	f7ff ffa8 	bl	8003dcc <task_2ms>
 8003e7c:	e03c      	b.n	8003ef8 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x02 ) task_4ms();
 8003e7e:	4b22      	ldr	r3, [pc, #136]	; (8003f08 <scheduler_main+0xb8>)
 8003e80:	789b      	ldrb	r3, [r3, #2]
 8003e82:	f003 0302 	and.w	r3, r3, #2
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d002      	beq.n	8003e90 <scheduler_main+0x40>
 8003e8a:	f7ff ffa5 	bl	8003dd8 <task_4ms>
 8003e8e:	e033      	b.n	8003ef8 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x04 ) task_8ms();
 8003e90:	4b1d      	ldr	r3, [pc, #116]	; (8003f08 <scheduler_main+0xb8>)
 8003e92:	789b      	ldrb	r3, [r3, #2]
 8003e94:	f003 0304 	and.w	r3, r3, #4
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d002      	beq.n	8003ea2 <scheduler_main+0x52>
 8003e9c:	f7ff ffa2 	bl	8003de4 <task_8ms>
 8003ea0:	e02a      	b.n	8003ef8 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x08 ) task_16ms();
 8003ea2:	4b19      	ldr	r3, [pc, #100]	; (8003f08 <scheduler_main+0xb8>)
 8003ea4:	789b      	ldrb	r3, [r3, #2]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <scheduler_main+0x64>
 8003eae:	f7ff ff9f 	bl	8003df0 <task_16ms>
 8003eb2:	e021      	b.n	8003ef8 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x10 ) task_32ms();
 8003eb4:	4b14      	ldr	r3, [pc, #80]	; (8003f08 <scheduler_main+0xb8>)
 8003eb6:	789b      	ldrb	r3, [r3, #2]
 8003eb8:	f003 0310 	and.w	r3, r3, #16
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d002      	beq.n	8003ec6 <scheduler_main+0x76>
 8003ec0:	f7ff ff9c 	bl	8003dfc <task_32ms>
 8003ec4:	e018      	b.n	8003ef8 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x20 ) task_64ms();
 8003ec6:	4b10      	ldr	r3, [pc, #64]	; (8003f08 <scheduler_main+0xb8>)
 8003ec8:	789b      	ldrb	r3, [r3, #2]
 8003eca:	f003 0320 	and.w	r3, r3, #32
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d002      	beq.n	8003ed8 <scheduler_main+0x88>
 8003ed2:	f7ff ff99 	bl	8003e08 <task_64ms>
 8003ed6:	e00f      	b.n	8003ef8 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x40 ) task_128ms();
 8003ed8:	4b0b      	ldr	r3, [pc, #44]	; (8003f08 <scheduler_main+0xb8>)
 8003eda:	789b      	ldrb	r3, [r3, #2]
 8003edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d002      	beq.n	8003eea <scheduler_main+0x9a>
 8003ee4:	f7ff ff96 	bl	8003e14 <task_128ms>
 8003ee8:	e006      	b.n	8003ef8 <scheduler_main+0xa8>
			else if( scheduler.local.count&0x80 ) task_256ms();
 8003eea:	4b07      	ldr	r3, [pc, #28]	; (8003f08 <scheduler_main+0xb8>)
 8003eec:	789b      	ldrb	r3, [r3, #2]
 8003eee:	b25b      	sxtb	r3, r3
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	da01      	bge.n	8003ef8 <scheduler_main+0xa8>
 8003ef4:	f7ff ff94 	bl	8003e20 <task_256ms>
			else ;

			/* count up */
			scheduler.local.count++;
 8003ef8:	4b03      	ldr	r3, [pc, #12]	; (8003f08 <scheduler_main+0xb8>)
 8003efa:	789b      	ldrb	r3, [r3, #2]
 8003efc:	3301      	adds	r3, #1
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	4b01      	ldr	r3, [pc, #4]	; (8003f08 <scheduler_main+0xb8>)
 8003f02:	709a      	strb	r2, [r3, #2]
		if( scheduler.local.tick != scheduler.input.tick )
 8003f04:	e7a6      	b.n	8003e54 <scheduler_main+0x4>
 8003f06:	bf00      	nop
 8003f08:	200000a0 	.word	0x200000a0

08003f0c <scheduler_ei_tickUp_ISR>:
		}
	}
}

void scheduler_ei_tickUp_ISR(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
	scheduler.input.tick++;
 8003f10:	4b04      	ldr	r3, [pc, #16]	; (8003f24 <scheduler_ei_tickUp_ISR+0x18>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	3301      	adds	r3, #1
 8003f16:	b2da      	uxtb	r2, r3
 8003f18:	4b02      	ldr	r3, [pc, #8]	; (8003f24 <scheduler_ei_tickUp_ISR+0x18>)
 8003f1a:	701a      	strb	r2, [r3, #0]
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bc80      	pop	{r7}
 8003f22:	4770      	bx	lr
 8003f24:	200000a0 	.word	0x200000a0

08003f28 <__errno>:
 8003f28:	4b01      	ldr	r3, [pc, #4]	; (8003f30 <__errno+0x8>)
 8003f2a:	6818      	ldr	r0, [r3, #0]
 8003f2c:	4770      	bx	lr
 8003f2e:	bf00      	nop
 8003f30:	2000000c 	.word	0x2000000c

08003f34 <__libc_init_array>:
 8003f34:	b570      	push	{r4, r5, r6, lr}
 8003f36:	2500      	movs	r5, #0
 8003f38:	4e0c      	ldr	r6, [pc, #48]	; (8003f6c <__libc_init_array+0x38>)
 8003f3a:	4c0d      	ldr	r4, [pc, #52]	; (8003f70 <__libc_init_array+0x3c>)
 8003f3c:	1ba4      	subs	r4, r4, r6
 8003f3e:	10a4      	asrs	r4, r4, #2
 8003f40:	42a5      	cmp	r5, r4
 8003f42:	d109      	bne.n	8003f58 <__libc_init_array+0x24>
 8003f44:	f000 ff10 	bl	8004d68 <_init>
 8003f48:	2500      	movs	r5, #0
 8003f4a:	4e0a      	ldr	r6, [pc, #40]	; (8003f74 <__libc_init_array+0x40>)
 8003f4c:	4c0a      	ldr	r4, [pc, #40]	; (8003f78 <__libc_init_array+0x44>)
 8003f4e:	1ba4      	subs	r4, r4, r6
 8003f50:	10a4      	asrs	r4, r4, #2
 8003f52:	42a5      	cmp	r5, r4
 8003f54:	d105      	bne.n	8003f62 <__libc_init_array+0x2e>
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f5c:	4798      	blx	r3
 8003f5e:	3501      	adds	r5, #1
 8003f60:	e7ee      	b.n	8003f40 <__libc_init_array+0xc>
 8003f62:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003f66:	4798      	blx	r3
 8003f68:	3501      	adds	r5, #1
 8003f6a:	e7f2      	b.n	8003f52 <__libc_init_array+0x1e>
 8003f6c:	08004fd8 	.word	0x08004fd8
 8003f70:	08004fd8 	.word	0x08004fd8
 8003f74:	08004fd8 	.word	0x08004fd8
 8003f78:	08004fdc 	.word	0x08004fdc

08003f7c <memset>:
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4402      	add	r2, r0
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d100      	bne.n	8003f86 <memset+0xa>
 8003f84:	4770      	bx	lr
 8003f86:	f803 1b01 	strb.w	r1, [r3], #1
 8003f8a:	e7f9      	b.n	8003f80 <memset+0x4>

08003f8c <iprintf>:
 8003f8c:	b40f      	push	{r0, r1, r2, r3}
 8003f8e:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <iprintf+0x2c>)
 8003f90:	b513      	push	{r0, r1, r4, lr}
 8003f92:	681c      	ldr	r4, [r3, #0]
 8003f94:	b124      	cbz	r4, 8003fa0 <iprintf+0x14>
 8003f96:	69a3      	ldr	r3, [r4, #24]
 8003f98:	b913      	cbnz	r3, 8003fa0 <iprintf+0x14>
 8003f9a:	4620      	mov	r0, r4
 8003f9c:	f000 f84e 	bl	800403c <__sinit>
 8003fa0:	ab05      	add	r3, sp, #20
 8003fa2:	9a04      	ldr	r2, [sp, #16]
 8003fa4:	68a1      	ldr	r1, [r4, #8]
 8003fa6:	4620      	mov	r0, r4
 8003fa8:	9301      	str	r3, [sp, #4]
 8003faa:	f000 f953 	bl	8004254 <_vfiprintf_r>
 8003fae:	b002      	add	sp, #8
 8003fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003fb4:	b004      	add	sp, #16
 8003fb6:	4770      	bx	lr
 8003fb8:	2000000c 	.word	0x2000000c

08003fbc <std>:
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	b510      	push	{r4, lr}
 8003fc0:	4604      	mov	r4, r0
 8003fc2:	e9c0 3300 	strd	r3, r3, [r0]
 8003fc6:	6083      	str	r3, [r0, #8]
 8003fc8:	8181      	strh	r1, [r0, #12]
 8003fca:	6643      	str	r3, [r0, #100]	; 0x64
 8003fcc:	81c2      	strh	r2, [r0, #14]
 8003fce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003fd2:	6183      	str	r3, [r0, #24]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	2208      	movs	r2, #8
 8003fd8:	305c      	adds	r0, #92	; 0x5c
 8003fda:	f7ff ffcf 	bl	8003f7c <memset>
 8003fde:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <std+0x38>)
 8003fe0:	6224      	str	r4, [r4, #32]
 8003fe2:	6263      	str	r3, [r4, #36]	; 0x24
 8003fe4:	4b04      	ldr	r3, [pc, #16]	; (8003ff8 <std+0x3c>)
 8003fe6:	62a3      	str	r3, [r4, #40]	; 0x28
 8003fe8:	4b04      	ldr	r3, [pc, #16]	; (8003ffc <std+0x40>)
 8003fea:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003fec:	4b04      	ldr	r3, [pc, #16]	; (8004000 <std+0x44>)
 8003fee:	6323      	str	r3, [r4, #48]	; 0x30
 8003ff0:	bd10      	pop	{r4, pc}
 8003ff2:	bf00      	nop
 8003ff4:	080047b1 	.word	0x080047b1
 8003ff8:	080047d3 	.word	0x080047d3
 8003ffc:	0800480b 	.word	0x0800480b
 8004000:	0800482f 	.word	0x0800482f

08004004 <_cleanup_r>:
 8004004:	4901      	ldr	r1, [pc, #4]	; (800400c <_cleanup_r+0x8>)
 8004006:	f000 b885 	b.w	8004114 <_fwalk_reent>
 800400a:	bf00      	nop
 800400c:	08004b09 	.word	0x08004b09

08004010 <__sfmoreglue>:
 8004010:	b570      	push	{r4, r5, r6, lr}
 8004012:	2568      	movs	r5, #104	; 0x68
 8004014:	1e4a      	subs	r2, r1, #1
 8004016:	4355      	muls	r5, r2
 8004018:	460e      	mov	r6, r1
 800401a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800401e:	f000 f897 	bl	8004150 <_malloc_r>
 8004022:	4604      	mov	r4, r0
 8004024:	b140      	cbz	r0, 8004038 <__sfmoreglue+0x28>
 8004026:	2100      	movs	r1, #0
 8004028:	e9c0 1600 	strd	r1, r6, [r0]
 800402c:	300c      	adds	r0, #12
 800402e:	60a0      	str	r0, [r4, #8]
 8004030:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004034:	f7ff ffa2 	bl	8003f7c <memset>
 8004038:	4620      	mov	r0, r4
 800403a:	bd70      	pop	{r4, r5, r6, pc}

0800403c <__sinit>:
 800403c:	6983      	ldr	r3, [r0, #24]
 800403e:	b510      	push	{r4, lr}
 8004040:	4604      	mov	r4, r0
 8004042:	bb33      	cbnz	r3, 8004092 <__sinit+0x56>
 8004044:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004048:	6503      	str	r3, [r0, #80]	; 0x50
 800404a:	4b12      	ldr	r3, [pc, #72]	; (8004094 <__sinit+0x58>)
 800404c:	4a12      	ldr	r2, [pc, #72]	; (8004098 <__sinit+0x5c>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	6282      	str	r2, [r0, #40]	; 0x28
 8004052:	4298      	cmp	r0, r3
 8004054:	bf04      	itt	eq
 8004056:	2301      	moveq	r3, #1
 8004058:	6183      	streq	r3, [r0, #24]
 800405a:	f000 f81f 	bl	800409c <__sfp>
 800405e:	6060      	str	r0, [r4, #4]
 8004060:	4620      	mov	r0, r4
 8004062:	f000 f81b 	bl	800409c <__sfp>
 8004066:	60a0      	str	r0, [r4, #8]
 8004068:	4620      	mov	r0, r4
 800406a:	f000 f817 	bl	800409c <__sfp>
 800406e:	2200      	movs	r2, #0
 8004070:	60e0      	str	r0, [r4, #12]
 8004072:	2104      	movs	r1, #4
 8004074:	6860      	ldr	r0, [r4, #4]
 8004076:	f7ff ffa1 	bl	8003fbc <std>
 800407a:	2201      	movs	r2, #1
 800407c:	2109      	movs	r1, #9
 800407e:	68a0      	ldr	r0, [r4, #8]
 8004080:	f7ff ff9c 	bl	8003fbc <std>
 8004084:	2202      	movs	r2, #2
 8004086:	2112      	movs	r1, #18
 8004088:	68e0      	ldr	r0, [r4, #12]
 800408a:	f7ff ff97 	bl	8003fbc <std>
 800408e:	2301      	movs	r3, #1
 8004090:	61a3      	str	r3, [r4, #24]
 8004092:	bd10      	pop	{r4, pc}
 8004094:	08004f40 	.word	0x08004f40
 8004098:	08004005 	.word	0x08004005

0800409c <__sfp>:
 800409c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800409e:	4b1b      	ldr	r3, [pc, #108]	; (800410c <__sfp+0x70>)
 80040a0:	4607      	mov	r7, r0
 80040a2:	681e      	ldr	r6, [r3, #0]
 80040a4:	69b3      	ldr	r3, [r6, #24]
 80040a6:	b913      	cbnz	r3, 80040ae <__sfp+0x12>
 80040a8:	4630      	mov	r0, r6
 80040aa:	f7ff ffc7 	bl	800403c <__sinit>
 80040ae:	3648      	adds	r6, #72	; 0x48
 80040b0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80040b4:	3b01      	subs	r3, #1
 80040b6:	d503      	bpl.n	80040c0 <__sfp+0x24>
 80040b8:	6833      	ldr	r3, [r6, #0]
 80040ba:	b133      	cbz	r3, 80040ca <__sfp+0x2e>
 80040bc:	6836      	ldr	r6, [r6, #0]
 80040be:	e7f7      	b.n	80040b0 <__sfp+0x14>
 80040c0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80040c4:	b16d      	cbz	r5, 80040e2 <__sfp+0x46>
 80040c6:	3468      	adds	r4, #104	; 0x68
 80040c8:	e7f4      	b.n	80040b4 <__sfp+0x18>
 80040ca:	2104      	movs	r1, #4
 80040cc:	4638      	mov	r0, r7
 80040ce:	f7ff ff9f 	bl	8004010 <__sfmoreglue>
 80040d2:	6030      	str	r0, [r6, #0]
 80040d4:	2800      	cmp	r0, #0
 80040d6:	d1f1      	bne.n	80040bc <__sfp+0x20>
 80040d8:	230c      	movs	r3, #12
 80040da:	4604      	mov	r4, r0
 80040dc:	603b      	str	r3, [r7, #0]
 80040de:	4620      	mov	r0, r4
 80040e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040e2:	4b0b      	ldr	r3, [pc, #44]	; (8004110 <__sfp+0x74>)
 80040e4:	6665      	str	r5, [r4, #100]	; 0x64
 80040e6:	e9c4 5500 	strd	r5, r5, [r4]
 80040ea:	60a5      	str	r5, [r4, #8]
 80040ec:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80040f0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80040f4:	2208      	movs	r2, #8
 80040f6:	4629      	mov	r1, r5
 80040f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80040fc:	f7ff ff3e 	bl	8003f7c <memset>
 8004100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004108:	e7e9      	b.n	80040de <__sfp+0x42>
 800410a:	bf00      	nop
 800410c:	08004f40 	.word	0x08004f40
 8004110:	ffff0001 	.word	0xffff0001

08004114 <_fwalk_reent>:
 8004114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004118:	4680      	mov	r8, r0
 800411a:	4689      	mov	r9, r1
 800411c:	2600      	movs	r6, #0
 800411e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004122:	b914      	cbnz	r4, 800412a <_fwalk_reent+0x16>
 8004124:	4630      	mov	r0, r6
 8004126:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800412a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 800412e:	3f01      	subs	r7, #1
 8004130:	d501      	bpl.n	8004136 <_fwalk_reent+0x22>
 8004132:	6824      	ldr	r4, [r4, #0]
 8004134:	e7f5      	b.n	8004122 <_fwalk_reent+0xe>
 8004136:	89ab      	ldrh	r3, [r5, #12]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d907      	bls.n	800414c <_fwalk_reent+0x38>
 800413c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004140:	3301      	adds	r3, #1
 8004142:	d003      	beq.n	800414c <_fwalk_reent+0x38>
 8004144:	4629      	mov	r1, r5
 8004146:	4640      	mov	r0, r8
 8004148:	47c8      	blx	r9
 800414a:	4306      	orrs	r6, r0
 800414c:	3568      	adds	r5, #104	; 0x68
 800414e:	e7ee      	b.n	800412e <_fwalk_reent+0x1a>

08004150 <_malloc_r>:
 8004150:	b570      	push	{r4, r5, r6, lr}
 8004152:	1ccd      	adds	r5, r1, #3
 8004154:	f025 0503 	bic.w	r5, r5, #3
 8004158:	3508      	adds	r5, #8
 800415a:	2d0c      	cmp	r5, #12
 800415c:	bf38      	it	cc
 800415e:	250c      	movcc	r5, #12
 8004160:	2d00      	cmp	r5, #0
 8004162:	4606      	mov	r6, r0
 8004164:	db01      	blt.n	800416a <_malloc_r+0x1a>
 8004166:	42a9      	cmp	r1, r5
 8004168:	d903      	bls.n	8004172 <_malloc_r+0x22>
 800416a:	230c      	movs	r3, #12
 800416c:	6033      	str	r3, [r6, #0]
 800416e:	2000      	movs	r0, #0
 8004170:	bd70      	pop	{r4, r5, r6, pc}
 8004172:	f000 fd77 	bl	8004c64 <__malloc_lock>
 8004176:	4a21      	ldr	r2, [pc, #132]	; (80041fc <_malloc_r+0xac>)
 8004178:	6814      	ldr	r4, [r2, #0]
 800417a:	4621      	mov	r1, r4
 800417c:	b991      	cbnz	r1, 80041a4 <_malloc_r+0x54>
 800417e:	4c20      	ldr	r4, [pc, #128]	; (8004200 <_malloc_r+0xb0>)
 8004180:	6823      	ldr	r3, [r4, #0]
 8004182:	b91b      	cbnz	r3, 800418c <_malloc_r+0x3c>
 8004184:	4630      	mov	r0, r6
 8004186:	f000 fb03 	bl	8004790 <_sbrk_r>
 800418a:	6020      	str	r0, [r4, #0]
 800418c:	4629      	mov	r1, r5
 800418e:	4630      	mov	r0, r6
 8004190:	f000 fafe 	bl	8004790 <_sbrk_r>
 8004194:	1c43      	adds	r3, r0, #1
 8004196:	d124      	bne.n	80041e2 <_malloc_r+0x92>
 8004198:	230c      	movs	r3, #12
 800419a:	4630      	mov	r0, r6
 800419c:	6033      	str	r3, [r6, #0]
 800419e:	f000 fd62 	bl	8004c66 <__malloc_unlock>
 80041a2:	e7e4      	b.n	800416e <_malloc_r+0x1e>
 80041a4:	680b      	ldr	r3, [r1, #0]
 80041a6:	1b5b      	subs	r3, r3, r5
 80041a8:	d418      	bmi.n	80041dc <_malloc_r+0x8c>
 80041aa:	2b0b      	cmp	r3, #11
 80041ac:	d90f      	bls.n	80041ce <_malloc_r+0x7e>
 80041ae:	600b      	str	r3, [r1, #0]
 80041b0:	18cc      	adds	r4, r1, r3
 80041b2:	50cd      	str	r5, [r1, r3]
 80041b4:	4630      	mov	r0, r6
 80041b6:	f000 fd56 	bl	8004c66 <__malloc_unlock>
 80041ba:	f104 000b 	add.w	r0, r4, #11
 80041be:	1d23      	adds	r3, r4, #4
 80041c0:	f020 0007 	bic.w	r0, r0, #7
 80041c4:	1ac3      	subs	r3, r0, r3
 80041c6:	d0d3      	beq.n	8004170 <_malloc_r+0x20>
 80041c8:	425a      	negs	r2, r3
 80041ca:	50e2      	str	r2, [r4, r3]
 80041cc:	e7d0      	b.n	8004170 <_malloc_r+0x20>
 80041ce:	684b      	ldr	r3, [r1, #4]
 80041d0:	428c      	cmp	r4, r1
 80041d2:	bf16      	itet	ne
 80041d4:	6063      	strne	r3, [r4, #4]
 80041d6:	6013      	streq	r3, [r2, #0]
 80041d8:	460c      	movne	r4, r1
 80041da:	e7eb      	b.n	80041b4 <_malloc_r+0x64>
 80041dc:	460c      	mov	r4, r1
 80041de:	6849      	ldr	r1, [r1, #4]
 80041e0:	e7cc      	b.n	800417c <_malloc_r+0x2c>
 80041e2:	1cc4      	adds	r4, r0, #3
 80041e4:	f024 0403 	bic.w	r4, r4, #3
 80041e8:	42a0      	cmp	r0, r4
 80041ea:	d005      	beq.n	80041f8 <_malloc_r+0xa8>
 80041ec:	1a21      	subs	r1, r4, r0
 80041ee:	4630      	mov	r0, r6
 80041f0:	f000 face 	bl	8004790 <_sbrk_r>
 80041f4:	3001      	adds	r0, #1
 80041f6:	d0cf      	beq.n	8004198 <_malloc_r+0x48>
 80041f8:	6025      	str	r5, [r4, #0]
 80041fa:	e7db      	b.n	80041b4 <_malloc_r+0x64>
 80041fc:	200000a4 	.word	0x200000a4
 8004200:	200000a8 	.word	0x200000a8

08004204 <__sfputc_r>:
 8004204:	6893      	ldr	r3, [r2, #8]
 8004206:	b410      	push	{r4}
 8004208:	3b01      	subs	r3, #1
 800420a:	2b00      	cmp	r3, #0
 800420c:	6093      	str	r3, [r2, #8]
 800420e:	da07      	bge.n	8004220 <__sfputc_r+0x1c>
 8004210:	6994      	ldr	r4, [r2, #24]
 8004212:	42a3      	cmp	r3, r4
 8004214:	db01      	blt.n	800421a <__sfputc_r+0x16>
 8004216:	290a      	cmp	r1, #10
 8004218:	d102      	bne.n	8004220 <__sfputc_r+0x1c>
 800421a:	bc10      	pop	{r4}
 800421c:	f000 bb0c 	b.w	8004838 <__swbuf_r>
 8004220:	6813      	ldr	r3, [r2, #0]
 8004222:	1c58      	adds	r0, r3, #1
 8004224:	6010      	str	r0, [r2, #0]
 8004226:	7019      	strb	r1, [r3, #0]
 8004228:	4608      	mov	r0, r1
 800422a:	bc10      	pop	{r4}
 800422c:	4770      	bx	lr

0800422e <__sfputs_r>:
 800422e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004230:	4606      	mov	r6, r0
 8004232:	460f      	mov	r7, r1
 8004234:	4614      	mov	r4, r2
 8004236:	18d5      	adds	r5, r2, r3
 8004238:	42ac      	cmp	r4, r5
 800423a:	d101      	bne.n	8004240 <__sfputs_r+0x12>
 800423c:	2000      	movs	r0, #0
 800423e:	e007      	b.n	8004250 <__sfputs_r+0x22>
 8004240:	463a      	mov	r2, r7
 8004242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004246:	4630      	mov	r0, r6
 8004248:	f7ff ffdc 	bl	8004204 <__sfputc_r>
 800424c:	1c43      	adds	r3, r0, #1
 800424e:	d1f3      	bne.n	8004238 <__sfputs_r+0xa>
 8004250:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004254 <_vfiprintf_r>:
 8004254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004258:	460c      	mov	r4, r1
 800425a:	b09d      	sub	sp, #116	; 0x74
 800425c:	4617      	mov	r7, r2
 800425e:	461d      	mov	r5, r3
 8004260:	4606      	mov	r6, r0
 8004262:	b118      	cbz	r0, 800426c <_vfiprintf_r+0x18>
 8004264:	6983      	ldr	r3, [r0, #24]
 8004266:	b90b      	cbnz	r3, 800426c <_vfiprintf_r+0x18>
 8004268:	f7ff fee8 	bl	800403c <__sinit>
 800426c:	4b7c      	ldr	r3, [pc, #496]	; (8004460 <_vfiprintf_r+0x20c>)
 800426e:	429c      	cmp	r4, r3
 8004270:	d158      	bne.n	8004324 <_vfiprintf_r+0xd0>
 8004272:	6874      	ldr	r4, [r6, #4]
 8004274:	89a3      	ldrh	r3, [r4, #12]
 8004276:	0718      	lsls	r0, r3, #28
 8004278:	d55e      	bpl.n	8004338 <_vfiprintf_r+0xe4>
 800427a:	6923      	ldr	r3, [r4, #16]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d05b      	beq.n	8004338 <_vfiprintf_r+0xe4>
 8004280:	2300      	movs	r3, #0
 8004282:	9309      	str	r3, [sp, #36]	; 0x24
 8004284:	2320      	movs	r3, #32
 8004286:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800428a:	2330      	movs	r3, #48	; 0x30
 800428c:	f04f 0b01 	mov.w	fp, #1
 8004290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004294:	9503      	str	r5, [sp, #12]
 8004296:	46b8      	mov	r8, r7
 8004298:	4645      	mov	r5, r8
 800429a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800429e:	b10b      	cbz	r3, 80042a4 <_vfiprintf_r+0x50>
 80042a0:	2b25      	cmp	r3, #37	; 0x25
 80042a2:	d154      	bne.n	800434e <_vfiprintf_r+0xfa>
 80042a4:	ebb8 0a07 	subs.w	sl, r8, r7
 80042a8:	d00b      	beq.n	80042c2 <_vfiprintf_r+0x6e>
 80042aa:	4653      	mov	r3, sl
 80042ac:	463a      	mov	r2, r7
 80042ae:	4621      	mov	r1, r4
 80042b0:	4630      	mov	r0, r6
 80042b2:	f7ff ffbc 	bl	800422e <__sfputs_r>
 80042b6:	3001      	adds	r0, #1
 80042b8:	f000 80c2 	beq.w	8004440 <_vfiprintf_r+0x1ec>
 80042bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042be:	4453      	add	r3, sl
 80042c0:	9309      	str	r3, [sp, #36]	; 0x24
 80042c2:	f898 3000 	ldrb.w	r3, [r8]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	f000 80ba 	beq.w	8004440 <_vfiprintf_r+0x1ec>
 80042cc:	2300      	movs	r3, #0
 80042ce:	f04f 32ff 	mov.w	r2, #4294967295
 80042d2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80042d6:	9304      	str	r3, [sp, #16]
 80042d8:	9307      	str	r3, [sp, #28]
 80042da:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80042de:	931a      	str	r3, [sp, #104]	; 0x68
 80042e0:	46a8      	mov	r8, r5
 80042e2:	2205      	movs	r2, #5
 80042e4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80042e8:	485e      	ldr	r0, [pc, #376]	; (8004464 <_vfiprintf_r+0x210>)
 80042ea:	f000 fcad 	bl	8004c48 <memchr>
 80042ee:	9b04      	ldr	r3, [sp, #16]
 80042f0:	bb78      	cbnz	r0, 8004352 <_vfiprintf_r+0xfe>
 80042f2:	06d9      	lsls	r1, r3, #27
 80042f4:	bf44      	itt	mi
 80042f6:	2220      	movmi	r2, #32
 80042f8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80042fc:	071a      	lsls	r2, r3, #28
 80042fe:	bf44      	itt	mi
 8004300:	222b      	movmi	r2, #43	; 0x2b
 8004302:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004306:	782a      	ldrb	r2, [r5, #0]
 8004308:	2a2a      	cmp	r2, #42	; 0x2a
 800430a:	d02a      	beq.n	8004362 <_vfiprintf_r+0x10e>
 800430c:	46a8      	mov	r8, r5
 800430e:	2000      	movs	r0, #0
 8004310:	250a      	movs	r5, #10
 8004312:	9a07      	ldr	r2, [sp, #28]
 8004314:	4641      	mov	r1, r8
 8004316:	f811 3b01 	ldrb.w	r3, [r1], #1
 800431a:	3b30      	subs	r3, #48	; 0x30
 800431c:	2b09      	cmp	r3, #9
 800431e:	d969      	bls.n	80043f4 <_vfiprintf_r+0x1a0>
 8004320:	b360      	cbz	r0, 800437c <_vfiprintf_r+0x128>
 8004322:	e024      	b.n	800436e <_vfiprintf_r+0x11a>
 8004324:	4b50      	ldr	r3, [pc, #320]	; (8004468 <_vfiprintf_r+0x214>)
 8004326:	429c      	cmp	r4, r3
 8004328:	d101      	bne.n	800432e <_vfiprintf_r+0xda>
 800432a:	68b4      	ldr	r4, [r6, #8]
 800432c:	e7a2      	b.n	8004274 <_vfiprintf_r+0x20>
 800432e:	4b4f      	ldr	r3, [pc, #316]	; (800446c <_vfiprintf_r+0x218>)
 8004330:	429c      	cmp	r4, r3
 8004332:	bf08      	it	eq
 8004334:	68f4      	ldreq	r4, [r6, #12]
 8004336:	e79d      	b.n	8004274 <_vfiprintf_r+0x20>
 8004338:	4621      	mov	r1, r4
 800433a:	4630      	mov	r0, r6
 800433c:	f000 fae0 	bl	8004900 <__swsetup_r>
 8004340:	2800      	cmp	r0, #0
 8004342:	d09d      	beq.n	8004280 <_vfiprintf_r+0x2c>
 8004344:	f04f 30ff 	mov.w	r0, #4294967295
 8004348:	b01d      	add	sp, #116	; 0x74
 800434a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800434e:	46a8      	mov	r8, r5
 8004350:	e7a2      	b.n	8004298 <_vfiprintf_r+0x44>
 8004352:	4a44      	ldr	r2, [pc, #272]	; (8004464 <_vfiprintf_r+0x210>)
 8004354:	4645      	mov	r5, r8
 8004356:	1a80      	subs	r0, r0, r2
 8004358:	fa0b f000 	lsl.w	r0, fp, r0
 800435c:	4318      	orrs	r0, r3
 800435e:	9004      	str	r0, [sp, #16]
 8004360:	e7be      	b.n	80042e0 <_vfiprintf_r+0x8c>
 8004362:	9a03      	ldr	r2, [sp, #12]
 8004364:	1d11      	adds	r1, r2, #4
 8004366:	6812      	ldr	r2, [r2, #0]
 8004368:	9103      	str	r1, [sp, #12]
 800436a:	2a00      	cmp	r2, #0
 800436c:	db01      	blt.n	8004372 <_vfiprintf_r+0x11e>
 800436e:	9207      	str	r2, [sp, #28]
 8004370:	e004      	b.n	800437c <_vfiprintf_r+0x128>
 8004372:	4252      	negs	r2, r2
 8004374:	f043 0302 	orr.w	r3, r3, #2
 8004378:	9207      	str	r2, [sp, #28]
 800437a:	9304      	str	r3, [sp, #16]
 800437c:	f898 3000 	ldrb.w	r3, [r8]
 8004380:	2b2e      	cmp	r3, #46	; 0x2e
 8004382:	d10e      	bne.n	80043a2 <_vfiprintf_r+0x14e>
 8004384:	f898 3001 	ldrb.w	r3, [r8, #1]
 8004388:	2b2a      	cmp	r3, #42	; 0x2a
 800438a:	d138      	bne.n	80043fe <_vfiprintf_r+0x1aa>
 800438c:	9b03      	ldr	r3, [sp, #12]
 800438e:	f108 0802 	add.w	r8, r8, #2
 8004392:	1d1a      	adds	r2, r3, #4
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	9203      	str	r2, [sp, #12]
 8004398:	2b00      	cmp	r3, #0
 800439a:	bfb8      	it	lt
 800439c:	f04f 33ff 	movlt.w	r3, #4294967295
 80043a0:	9305      	str	r3, [sp, #20]
 80043a2:	4d33      	ldr	r5, [pc, #204]	; (8004470 <_vfiprintf_r+0x21c>)
 80043a4:	2203      	movs	r2, #3
 80043a6:	f898 1000 	ldrb.w	r1, [r8]
 80043aa:	4628      	mov	r0, r5
 80043ac:	f000 fc4c 	bl	8004c48 <memchr>
 80043b0:	b140      	cbz	r0, 80043c4 <_vfiprintf_r+0x170>
 80043b2:	2340      	movs	r3, #64	; 0x40
 80043b4:	1b40      	subs	r0, r0, r5
 80043b6:	fa03 f000 	lsl.w	r0, r3, r0
 80043ba:	9b04      	ldr	r3, [sp, #16]
 80043bc:	f108 0801 	add.w	r8, r8, #1
 80043c0:	4303      	orrs	r3, r0
 80043c2:	9304      	str	r3, [sp, #16]
 80043c4:	f898 1000 	ldrb.w	r1, [r8]
 80043c8:	2206      	movs	r2, #6
 80043ca:	482a      	ldr	r0, [pc, #168]	; (8004474 <_vfiprintf_r+0x220>)
 80043cc:	f108 0701 	add.w	r7, r8, #1
 80043d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80043d4:	f000 fc38 	bl	8004c48 <memchr>
 80043d8:	2800      	cmp	r0, #0
 80043da:	d037      	beq.n	800444c <_vfiprintf_r+0x1f8>
 80043dc:	4b26      	ldr	r3, [pc, #152]	; (8004478 <_vfiprintf_r+0x224>)
 80043de:	bb1b      	cbnz	r3, 8004428 <_vfiprintf_r+0x1d4>
 80043e0:	9b03      	ldr	r3, [sp, #12]
 80043e2:	3307      	adds	r3, #7
 80043e4:	f023 0307 	bic.w	r3, r3, #7
 80043e8:	3308      	adds	r3, #8
 80043ea:	9303      	str	r3, [sp, #12]
 80043ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80043ee:	444b      	add	r3, r9
 80043f0:	9309      	str	r3, [sp, #36]	; 0x24
 80043f2:	e750      	b.n	8004296 <_vfiprintf_r+0x42>
 80043f4:	fb05 3202 	mla	r2, r5, r2, r3
 80043f8:	2001      	movs	r0, #1
 80043fa:	4688      	mov	r8, r1
 80043fc:	e78a      	b.n	8004314 <_vfiprintf_r+0xc0>
 80043fe:	2300      	movs	r3, #0
 8004400:	250a      	movs	r5, #10
 8004402:	4619      	mov	r1, r3
 8004404:	f108 0801 	add.w	r8, r8, #1
 8004408:	9305      	str	r3, [sp, #20]
 800440a:	4640      	mov	r0, r8
 800440c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004410:	3a30      	subs	r2, #48	; 0x30
 8004412:	2a09      	cmp	r2, #9
 8004414:	d903      	bls.n	800441e <_vfiprintf_r+0x1ca>
 8004416:	2b00      	cmp	r3, #0
 8004418:	d0c3      	beq.n	80043a2 <_vfiprintf_r+0x14e>
 800441a:	9105      	str	r1, [sp, #20]
 800441c:	e7c1      	b.n	80043a2 <_vfiprintf_r+0x14e>
 800441e:	fb05 2101 	mla	r1, r5, r1, r2
 8004422:	2301      	movs	r3, #1
 8004424:	4680      	mov	r8, r0
 8004426:	e7f0      	b.n	800440a <_vfiprintf_r+0x1b6>
 8004428:	ab03      	add	r3, sp, #12
 800442a:	9300      	str	r3, [sp, #0]
 800442c:	4622      	mov	r2, r4
 800442e:	4b13      	ldr	r3, [pc, #76]	; (800447c <_vfiprintf_r+0x228>)
 8004430:	a904      	add	r1, sp, #16
 8004432:	4630      	mov	r0, r6
 8004434:	f3af 8000 	nop.w
 8004438:	f1b0 3fff 	cmp.w	r0, #4294967295
 800443c:	4681      	mov	r9, r0
 800443e:	d1d5      	bne.n	80043ec <_vfiprintf_r+0x198>
 8004440:	89a3      	ldrh	r3, [r4, #12]
 8004442:	065b      	lsls	r3, r3, #25
 8004444:	f53f af7e 	bmi.w	8004344 <_vfiprintf_r+0xf0>
 8004448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800444a:	e77d      	b.n	8004348 <_vfiprintf_r+0xf4>
 800444c:	ab03      	add	r3, sp, #12
 800444e:	9300      	str	r3, [sp, #0]
 8004450:	4622      	mov	r2, r4
 8004452:	4b0a      	ldr	r3, [pc, #40]	; (800447c <_vfiprintf_r+0x228>)
 8004454:	a904      	add	r1, sp, #16
 8004456:	4630      	mov	r0, r6
 8004458:	f000 f888 	bl	800456c <_printf_i>
 800445c:	e7ec      	b.n	8004438 <_vfiprintf_r+0x1e4>
 800445e:	bf00      	nop
 8004460:	08004f64 	.word	0x08004f64
 8004464:	08004fa4 	.word	0x08004fa4
 8004468:	08004f84 	.word	0x08004f84
 800446c:	08004f44 	.word	0x08004f44
 8004470:	08004faa 	.word	0x08004faa
 8004474:	08004fae 	.word	0x08004fae
 8004478:	00000000 	.word	0x00000000
 800447c:	0800422f 	.word	0x0800422f

08004480 <_printf_common>:
 8004480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004484:	4691      	mov	r9, r2
 8004486:	461f      	mov	r7, r3
 8004488:	688a      	ldr	r2, [r1, #8]
 800448a:	690b      	ldr	r3, [r1, #16]
 800448c:	4606      	mov	r6, r0
 800448e:	4293      	cmp	r3, r2
 8004490:	bfb8      	it	lt
 8004492:	4613      	movlt	r3, r2
 8004494:	f8c9 3000 	str.w	r3, [r9]
 8004498:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800449c:	460c      	mov	r4, r1
 800449e:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044a2:	b112      	cbz	r2, 80044aa <_printf_common+0x2a>
 80044a4:	3301      	adds	r3, #1
 80044a6:	f8c9 3000 	str.w	r3, [r9]
 80044aa:	6823      	ldr	r3, [r4, #0]
 80044ac:	0699      	lsls	r1, r3, #26
 80044ae:	bf42      	ittt	mi
 80044b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80044b4:	3302      	addmi	r3, #2
 80044b6:	f8c9 3000 	strmi.w	r3, [r9]
 80044ba:	6825      	ldr	r5, [r4, #0]
 80044bc:	f015 0506 	ands.w	r5, r5, #6
 80044c0:	d107      	bne.n	80044d2 <_printf_common+0x52>
 80044c2:	f104 0a19 	add.w	sl, r4, #25
 80044c6:	68e3      	ldr	r3, [r4, #12]
 80044c8:	f8d9 2000 	ldr.w	r2, [r9]
 80044cc:	1a9b      	subs	r3, r3, r2
 80044ce:	42ab      	cmp	r3, r5
 80044d0:	dc29      	bgt.n	8004526 <_printf_common+0xa6>
 80044d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80044d6:	6822      	ldr	r2, [r4, #0]
 80044d8:	3300      	adds	r3, #0
 80044da:	bf18      	it	ne
 80044dc:	2301      	movne	r3, #1
 80044de:	0692      	lsls	r2, r2, #26
 80044e0:	d42e      	bmi.n	8004540 <_printf_common+0xc0>
 80044e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80044e6:	4639      	mov	r1, r7
 80044e8:	4630      	mov	r0, r6
 80044ea:	47c0      	blx	r8
 80044ec:	3001      	adds	r0, #1
 80044ee:	d021      	beq.n	8004534 <_printf_common+0xb4>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	68e5      	ldr	r5, [r4, #12]
 80044f4:	f003 0306 	and.w	r3, r3, #6
 80044f8:	2b04      	cmp	r3, #4
 80044fa:	bf18      	it	ne
 80044fc:	2500      	movne	r5, #0
 80044fe:	f8d9 2000 	ldr.w	r2, [r9]
 8004502:	f04f 0900 	mov.w	r9, #0
 8004506:	bf08      	it	eq
 8004508:	1aad      	subeq	r5, r5, r2
 800450a:	68a3      	ldr	r3, [r4, #8]
 800450c:	6922      	ldr	r2, [r4, #16]
 800450e:	bf08      	it	eq
 8004510:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004514:	4293      	cmp	r3, r2
 8004516:	bfc4      	itt	gt
 8004518:	1a9b      	subgt	r3, r3, r2
 800451a:	18ed      	addgt	r5, r5, r3
 800451c:	341a      	adds	r4, #26
 800451e:	454d      	cmp	r5, r9
 8004520:	d11a      	bne.n	8004558 <_printf_common+0xd8>
 8004522:	2000      	movs	r0, #0
 8004524:	e008      	b.n	8004538 <_printf_common+0xb8>
 8004526:	2301      	movs	r3, #1
 8004528:	4652      	mov	r2, sl
 800452a:	4639      	mov	r1, r7
 800452c:	4630      	mov	r0, r6
 800452e:	47c0      	blx	r8
 8004530:	3001      	adds	r0, #1
 8004532:	d103      	bne.n	800453c <_printf_common+0xbc>
 8004534:	f04f 30ff 	mov.w	r0, #4294967295
 8004538:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800453c:	3501      	adds	r5, #1
 800453e:	e7c2      	b.n	80044c6 <_printf_common+0x46>
 8004540:	2030      	movs	r0, #48	; 0x30
 8004542:	18e1      	adds	r1, r4, r3
 8004544:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004548:	1c5a      	adds	r2, r3, #1
 800454a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800454e:	4422      	add	r2, r4
 8004550:	3302      	adds	r3, #2
 8004552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004556:	e7c4      	b.n	80044e2 <_printf_common+0x62>
 8004558:	2301      	movs	r3, #1
 800455a:	4622      	mov	r2, r4
 800455c:	4639      	mov	r1, r7
 800455e:	4630      	mov	r0, r6
 8004560:	47c0      	blx	r8
 8004562:	3001      	adds	r0, #1
 8004564:	d0e6      	beq.n	8004534 <_printf_common+0xb4>
 8004566:	f109 0901 	add.w	r9, r9, #1
 800456a:	e7d8      	b.n	800451e <_printf_common+0x9e>

0800456c <_printf_i>:
 800456c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004570:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004574:	460c      	mov	r4, r1
 8004576:	7e09      	ldrb	r1, [r1, #24]
 8004578:	b085      	sub	sp, #20
 800457a:	296e      	cmp	r1, #110	; 0x6e
 800457c:	4617      	mov	r7, r2
 800457e:	4606      	mov	r6, r0
 8004580:	4698      	mov	r8, r3
 8004582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004584:	f000 80b3 	beq.w	80046ee <_printf_i+0x182>
 8004588:	d822      	bhi.n	80045d0 <_printf_i+0x64>
 800458a:	2963      	cmp	r1, #99	; 0x63
 800458c:	d036      	beq.n	80045fc <_printf_i+0x90>
 800458e:	d80a      	bhi.n	80045a6 <_printf_i+0x3a>
 8004590:	2900      	cmp	r1, #0
 8004592:	f000 80b9 	beq.w	8004708 <_printf_i+0x19c>
 8004596:	2958      	cmp	r1, #88	; 0x58
 8004598:	f000 8083 	beq.w	80046a2 <_printf_i+0x136>
 800459c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80045a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80045a4:	e032      	b.n	800460c <_printf_i+0xa0>
 80045a6:	2964      	cmp	r1, #100	; 0x64
 80045a8:	d001      	beq.n	80045ae <_printf_i+0x42>
 80045aa:	2969      	cmp	r1, #105	; 0x69
 80045ac:	d1f6      	bne.n	800459c <_printf_i+0x30>
 80045ae:	6820      	ldr	r0, [r4, #0]
 80045b0:	6813      	ldr	r3, [r2, #0]
 80045b2:	0605      	lsls	r5, r0, #24
 80045b4:	f103 0104 	add.w	r1, r3, #4
 80045b8:	d52a      	bpl.n	8004610 <_printf_i+0xa4>
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6011      	str	r1, [r2, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	da03      	bge.n	80045ca <_printf_i+0x5e>
 80045c2:	222d      	movs	r2, #45	; 0x2d
 80045c4:	425b      	negs	r3, r3
 80045c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80045ca:	486f      	ldr	r0, [pc, #444]	; (8004788 <_printf_i+0x21c>)
 80045cc:	220a      	movs	r2, #10
 80045ce:	e039      	b.n	8004644 <_printf_i+0xd8>
 80045d0:	2973      	cmp	r1, #115	; 0x73
 80045d2:	f000 809d 	beq.w	8004710 <_printf_i+0x1a4>
 80045d6:	d808      	bhi.n	80045ea <_printf_i+0x7e>
 80045d8:	296f      	cmp	r1, #111	; 0x6f
 80045da:	d020      	beq.n	800461e <_printf_i+0xb2>
 80045dc:	2970      	cmp	r1, #112	; 0x70
 80045de:	d1dd      	bne.n	800459c <_printf_i+0x30>
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	f043 0320 	orr.w	r3, r3, #32
 80045e6:	6023      	str	r3, [r4, #0]
 80045e8:	e003      	b.n	80045f2 <_printf_i+0x86>
 80045ea:	2975      	cmp	r1, #117	; 0x75
 80045ec:	d017      	beq.n	800461e <_printf_i+0xb2>
 80045ee:	2978      	cmp	r1, #120	; 0x78
 80045f0:	d1d4      	bne.n	800459c <_printf_i+0x30>
 80045f2:	2378      	movs	r3, #120	; 0x78
 80045f4:	4865      	ldr	r0, [pc, #404]	; (800478c <_printf_i+0x220>)
 80045f6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80045fa:	e055      	b.n	80046a8 <_printf_i+0x13c>
 80045fc:	6813      	ldr	r3, [r2, #0]
 80045fe:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004602:	1d19      	adds	r1, r3, #4
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	6011      	str	r1, [r2, #0]
 8004608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800460c:	2301      	movs	r3, #1
 800460e:	e08c      	b.n	800472a <_printf_i+0x1be>
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004616:	6011      	str	r1, [r2, #0]
 8004618:	bf18      	it	ne
 800461a:	b21b      	sxthne	r3, r3
 800461c:	e7cf      	b.n	80045be <_printf_i+0x52>
 800461e:	6813      	ldr	r3, [r2, #0]
 8004620:	6825      	ldr	r5, [r4, #0]
 8004622:	1d18      	adds	r0, r3, #4
 8004624:	6010      	str	r0, [r2, #0]
 8004626:	0628      	lsls	r0, r5, #24
 8004628:	d501      	bpl.n	800462e <_printf_i+0xc2>
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	e002      	b.n	8004634 <_printf_i+0xc8>
 800462e:	0668      	lsls	r0, r5, #25
 8004630:	d5fb      	bpl.n	800462a <_printf_i+0xbe>
 8004632:	881b      	ldrh	r3, [r3, #0]
 8004634:	296f      	cmp	r1, #111	; 0x6f
 8004636:	bf14      	ite	ne
 8004638:	220a      	movne	r2, #10
 800463a:	2208      	moveq	r2, #8
 800463c:	4852      	ldr	r0, [pc, #328]	; (8004788 <_printf_i+0x21c>)
 800463e:	2100      	movs	r1, #0
 8004640:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004644:	6865      	ldr	r5, [r4, #4]
 8004646:	2d00      	cmp	r5, #0
 8004648:	60a5      	str	r5, [r4, #8]
 800464a:	f2c0 8095 	blt.w	8004778 <_printf_i+0x20c>
 800464e:	6821      	ldr	r1, [r4, #0]
 8004650:	f021 0104 	bic.w	r1, r1, #4
 8004654:	6021      	str	r1, [r4, #0]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d13d      	bne.n	80046d6 <_printf_i+0x16a>
 800465a:	2d00      	cmp	r5, #0
 800465c:	f040 808e 	bne.w	800477c <_printf_i+0x210>
 8004660:	4665      	mov	r5, ip
 8004662:	2a08      	cmp	r2, #8
 8004664:	d10b      	bne.n	800467e <_printf_i+0x112>
 8004666:	6823      	ldr	r3, [r4, #0]
 8004668:	07db      	lsls	r3, r3, #31
 800466a:	d508      	bpl.n	800467e <_printf_i+0x112>
 800466c:	6923      	ldr	r3, [r4, #16]
 800466e:	6862      	ldr	r2, [r4, #4]
 8004670:	429a      	cmp	r2, r3
 8004672:	bfde      	ittt	le
 8004674:	2330      	movle	r3, #48	; 0x30
 8004676:	f805 3c01 	strble.w	r3, [r5, #-1]
 800467a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800467e:	ebac 0305 	sub.w	r3, ip, r5
 8004682:	6123      	str	r3, [r4, #16]
 8004684:	f8cd 8000 	str.w	r8, [sp]
 8004688:	463b      	mov	r3, r7
 800468a:	aa03      	add	r2, sp, #12
 800468c:	4621      	mov	r1, r4
 800468e:	4630      	mov	r0, r6
 8004690:	f7ff fef6 	bl	8004480 <_printf_common>
 8004694:	3001      	adds	r0, #1
 8004696:	d14d      	bne.n	8004734 <_printf_i+0x1c8>
 8004698:	f04f 30ff 	mov.w	r0, #4294967295
 800469c:	b005      	add	sp, #20
 800469e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80046a2:	4839      	ldr	r0, [pc, #228]	; (8004788 <_printf_i+0x21c>)
 80046a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80046a8:	6813      	ldr	r3, [r2, #0]
 80046aa:	6821      	ldr	r1, [r4, #0]
 80046ac:	1d1d      	adds	r5, r3, #4
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6015      	str	r5, [r2, #0]
 80046b2:	060a      	lsls	r2, r1, #24
 80046b4:	d50b      	bpl.n	80046ce <_printf_i+0x162>
 80046b6:	07ca      	lsls	r2, r1, #31
 80046b8:	bf44      	itt	mi
 80046ba:	f041 0120 	orrmi.w	r1, r1, #32
 80046be:	6021      	strmi	r1, [r4, #0]
 80046c0:	b91b      	cbnz	r3, 80046ca <_printf_i+0x15e>
 80046c2:	6822      	ldr	r2, [r4, #0]
 80046c4:	f022 0220 	bic.w	r2, r2, #32
 80046c8:	6022      	str	r2, [r4, #0]
 80046ca:	2210      	movs	r2, #16
 80046cc:	e7b7      	b.n	800463e <_printf_i+0xd2>
 80046ce:	064d      	lsls	r5, r1, #25
 80046d0:	bf48      	it	mi
 80046d2:	b29b      	uxthmi	r3, r3
 80046d4:	e7ef      	b.n	80046b6 <_printf_i+0x14a>
 80046d6:	4665      	mov	r5, ip
 80046d8:	fbb3 f1f2 	udiv	r1, r3, r2
 80046dc:	fb02 3311 	mls	r3, r2, r1, r3
 80046e0:	5cc3      	ldrb	r3, [r0, r3]
 80046e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80046e6:	460b      	mov	r3, r1
 80046e8:	2900      	cmp	r1, #0
 80046ea:	d1f5      	bne.n	80046d8 <_printf_i+0x16c>
 80046ec:	e7b9      	b.n	8004662 <_printf_i+0xf6>
 80046ee:	6813      	ldr	r3, [r2, #0]
 80046f0:	6825      	ldr	r5, [r4, #0]
 80046f2:	1d18      	adds	r0, r3, #4
 80046f4:	6961      	ldr	r1, [r4, #20]
 80046f6:	6010      	str	r0, [r2, #0]
 80046f8:	0628      	lsls	r0, r5, #24
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	d501      	bpl.n	8004702 <_printf_i+0x196>
 80046fe:	6019      	str	r1, [r3, #0]
 8004700:	e002      	b.n	8004708 <_printf_i+0x19c>
 8004702:	066a      	lsls	r2, r5, #25
 8004704:	d5fb      	bpl.n	80046fe <_printf_i+0x192>
 8004706:	8019      	strh	r1, [r3, #0]
 8004708:	2300      	movs	r3, #0
 800470a:	4665      	mov	r5, ip
 800470c:	6123      	str	r3, [r4, #16]
 800470e:	e7b9      	b.n	8004684 <_printf_i+0x118>
 8004710:	6813      	ldr	r3, [r2, #0]
 8004712:	1d19      	adds	r1, r3, #4
 8004714:	6011      	str	r1, [r2, #0]
 8004716:	681d      	ldr	r5, [r3, #0]
 8004718:	6862      	ldr	r2, [r4, #4]
 800471a:	2100      	movs	r1, #0
 800471c:	4628      	mov	r0, r5
 800471e:	f000 fa93 	bl	8004c48 <memchr>
 8004722:	b108      	cbz	r0, 8004728 <_printf_i+0x1bc>
 8004724:	1b40      	subs	r0, r0, r5
 8004726:	6060      	str	r0, [r4, #4]
 8004728:	6863      	ldr	r3, [r4, #4]
 800472a:	6123      	str	r3, [r4, #16]
 800472c:	2300      	movs	r3, #0
 800472e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004732:	e7a7      	b.n	8004684 <_printf_i+0x118>
 8004734:	6923      	ldr	r3, [r4, #16]
 8004736:	462a      	mov	r2, r5
 8004738:	4639      	mov	r1, r7
 800473a:	4630      	mov	r0, r6
 800473c:	47c0      	blx	r8
 800473e:	3001      	adds	r0, #1
 8004740:	d0aa      	beq.n	8004698 <_printf_i+0x12c>
 8004742:	6823      	ldr	r3, [r4, #0]
 8004744:	079b      	lsls	r3, r3, #30
 8004746:	d413      	bmi.n	8004770 <_printf_i+0x204>
 8004748:	68e0      	ldr	r0, [r4, #12]
 800474a:	9b03      	ldr	r3, [sp, #12]
 800474c:	4298      	cmp	r0, r3
 800474e:	bfb8      	it	lt
 8004750:	4618      	movlt	r0, r3
 8004752:	e7a3      	b.n	800469c <_printf_i+0x130>
 8004754:	2301      	movs	r3, #1
 8004756:	464a      	mov	r2, r9
 8004758:	4639      	mov	r1, r7
 800475a:	4630      	mov	r0, r6
 800475c:	47c0      	blx	r8
 800475e:	3001      	adds	r0, #1
 8004760:	d09a      	beq.n	8004698 <_printf_i+0x12c>
 8004762:	3501      	adds	r5, #1
 8004764:	68e3      	ldr	r3, [r4, #12]
 8004766:	9a03      	ldr	r2, [sp, #12]
 8004768:	1a9b      	subs	r3, r3, r2
 800476a:	42ab      	cmp	r3, r5
 800476c:	dcf2      	bgt.n	8004754 <_printf_i+0x1e8>
 800476e:	e7eb      	b.n	8004748 <_printf_i+0x1dc>
 8004770:	2500      	movs	r5, #0
 8004772:	f104 0919 	add.w	r9, r4, #25
 8004776:	e7f5      	b.n	8004764 <_printf_i+0x1f8>
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1ac      	bne.n	80046d6 <_printf_i+0x16a>
 800477c:	7803      	ldrb	r3, [r0, #0]
 800477e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004786:	e76c      	b.n	8004662 <_printf_i+0xf6>
 8004788:	08004fb5 	.word	0x08004fb5
 800478c:	08004fc6 	.word	0x08004fc6

08004790 <_sbrk_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	2300      	movs	r3, #0
 8004794:	4c05      	ldr	r4, [pc, #20]	; (80047ac <_sbrk_r+0x1c>)
 8004796:	4605      	mov	r5, r0
 8004798:	4608      	mov	r0, r1
 800479a:	6023      	str	r3, [r4, #0]
 800479c:	f7fb fe60 	bl	8000460 <_sbrk>
 80047a0:	1c43      	adds	r3, r0, #1
 80047a2:	d102      	bne.n	80047aa <_sbrk_r+0x1a>
 80047a4:	6823      	ldr	r3, [r4, #0]
 80047a6:	b103      	cbz	r3, 80047aa <_sbrk_r+0x1a>
 80047a8:	602b      	str	r3, [r5, #0]
 80047aa:	bd38      	pop	{r3, r4, r5, pc}
 80047ac:	200001a8 	.word	0x200001a8

080047b0 <__sread>:
 80047b0:	b510      	push	{r4, lr}
 80047b2:	460c      	mov	r4, r1
 80047b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047b8:	f000 faa2 	bl	8004d00 <_read_r>
 80047bc:	2800      	cmp	r0, #0
 80047be:	bfab      	itete	ge
 80047c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80047c2:	89a3      	ldrhlt	r3, [r4, #12]
 80047c4:	181b      	addge	r3, r3, r0
 80047c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80047ca:	bfac      	ite	ge
 80047cc:	6563      	strge	r3, [r4, #84]	; 0x54
 80047ce:	81a3      	strhlt	r3, [r4, #12]
 80047d0:	bd10      	pop	{r4, pc}

080047d2 <__swrite>:
 80047d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047d6:	461f      	mov	r7, r3
 80047d8:	898b      	ldrh	r3, [r1, #12]
 80047da:	4605      	mov	r5, r0
 80047dc:	05db      	lsls	r3, r3, #23
 80047de:	460c      	mov	r4, r1
 80047e0:	4616      	mov	r6, r2
 80047e2:	d505      	bpl.n	80047f0 <__swrite+0x1e>
 80047e4:	2302      	movs	r3, #2
 80047e6:	2200      	movs	r2, #0
 80047e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80047ec:	f000 f9b6 	bl	8004b5c <_lseek_r>
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	4632      	mov	r2, r6
 80047f4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80047f8:	81a3      	strh	r3, [r4, #12]
 80047fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80047fe:	463b      	mov	r3, r7
 8004800:	4628      	mov	r0, r5
 8004802:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004806:	f000 b869 	b.w	80048dc <_write_r>

0800480a <__sseek>:
 800480a:	b510      	push	{r4, lr}
 800480c:	460c      	mov	r4, r1
 800480e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004812:	f000 f9a3 	bl	8004b5c <_lseek_r>
 8004816:	1c43      	adds	r3, r0, #1
 8004818:	89a3      	ldrh	r3, [r4, #12]
 800481a:	bf15      	itete	ne
 800481c:	6560      	strne	r0, [r4, #84]	; 0x54
 800481e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004822:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004826:	81a3      	strheq	r3, [r4, #12]
 8004828:	bf18      	it	ne
 800482a:	81a3      	strhne	r3, [r4, #12]
 800482c:	bd10      	pop	{r4, pc}

0800482e <__sclose>:
 800482e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004832:	f000 b8d3 	b.w	80049dc <_close_r>
	...

08004838 <__swbuf_r>:
 8004838:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800483a:	460e      	mov	r6, r1
 800483c:	4614      	mov	r4, r2
 800483e:	4605      	mov	r5, r0
 8004840:	b118      	cbz	r0, 800484a <__swbuf_r+0x12>
 8004842:	6983      	ldr	r3, [r0, #24]
 8004844:	b90b      	cbnz	r3, 800484a <__swbuf_r+0x12>
 8004846:	f7ff fbf9 	bl	800403c <__sinit>
 800484a:	4b21      	ldr	r3, [pc, #132]	; (80048d0 <__swbuf_r+0x98>)
 800484c:	429c      	cmp	r4, r3
 800484e:	d12a      	bne.n	80048a6 <__swbuf_r+0x6e>
 8004850:	686c      	ldr	r4, [r5, #4]
 8004852:	69a3      	ldr	r3, [r4, #24]
 8004854:	60a3      	str	r3, [r4, #8]
 8004856:	89a3      	ldrh	r3, [r4, #12]
 8004858:	071a      	lsls	r2, r3, #28
 800485a:	d52e      	bpl.n	80048ba <__swbuf_r+0x82>
 800485c:	6923      	ldr	r3, [r4, #16]
 800485e:	b363      	cbz	r3, 80048ba <__swbuf_r+0x82>
 8004860:	6923      	ldr	r3, [r4, #16]
 8004862:	6820      	ldr	r0, [r4, #0]
 8004864:	b2f6      	uxtb	r6, r6
 8004866:	1ac0      	subs	r0, r0, r3
 8004868:	6963      	ldr	r3, [r4, #20]
 800486a:	4637      	mov	r7, r6
 800486c:	4283      	cmp	r3, r0
 800486e:	dc04      	bgt.n	800487a <__swbuf_r+0x42>
 8004870:	4621      	mov	r1, r4
 8004872:	4628      	mov	r0, r5
 8004874:	f000 f948 	bl	8004b08 <_fflush_r>
 8004878:	bb28      	cbnz	r0, 80048c6 <__swbuf_r+0x8e>
 800487a:	68a3      	ldr	r3, [r4, #8]
 800487c:	3001      	adds	r0, #1
 800487e:	3b01      	subs	r3, #1
 8004880:	60a3      	str	r3, [r4, #8]
 8004882:	6823      	ldr	r3, [r4, #0]
 8004884:	1c5a      	adds	r2, r3, #1
 8004886:	6022      	str	r2, [r4, #0]
 8004888:	701e      	strb	r6, [r3, #0]
 800488a:	6963      	ldr	r3, [r4, #20]
 800488c:	4283      	cmp	r3, r0
 800488e:	d004      	beq.n	800489a <__swbuf_r+0x62>
 8004890:	89a3      	ldrh	r3, [r4, #12]
 8004892:	07db      	lsls	r3, r3, #31
 8004894:	d519      	bpl.n	80048ca <__swbuf_r+0x92>
 8004896:	2e0a      	cmp	r6, #10
 8004898:	d117      	bne.n	80048ca <__swbuf_r+0x92>
 800489a:	4621      	mov	r1, r4
 800489c:	4628      	mov	r0, r5
 800489e:	f000 f933 	bl	8004b08 <_fflush_r>
 80048a2:	b190      	cbz	r0, 80048ca <__swbuf_r+0x92>
 80048a4:	e00f      	b.n	80048c6 <__swbuf_r+0x8e>
 80048a6:	4b0b      	ldr	r3, [pc, #44]	; (80048d4 <__swbuf_r+0x9c>)
 80048a8:	429c      	cmp	r4, r3
 80048aa:	d101      	bne.n	80048b0 <__swbuf_r+0x78>
 80048ac:	68ac      	ldr	r4, [r5, #8]
 80048ae:	e7d0      	b.n	8004852 <__swbuf_r+0x1a>
 80048b0:	4b09      	ldr	r3, [pc, #36]	; (80048d8 <__swbuf_r+0xa0>)
 80048b2:	429c      	cmp	r4, r3
 80048b4:	bf08      	it	eq
 80048b6:	68ec      	ldreq	r4, [r5, #12]
 80048b8:	e7cb      	b.n	8004852 <__swbuf_r+0x1a>
 80048ba:	4621      	mov	r1, r4
 80048bc:	4628      	mov	r0, r5
 80048be:	f000 f81f 	bl	8004900 <__swsetup_r>
 80048c2:	2800      	cmp	r0, #0
 80048c4:	d0cc      	beq.n	8004860 <__swbuf_r+0x28>
 80048c6:	f04f 37ff 	mov.w	r7, #4294967295
 80048ca:	4638      	mov	r0, r7
 80048cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80048ce:	bf00      	nop
 80048d0:	08004f64 	.word	0x08004f64
 80048d4:	08004f84 	.word	0x08004f84
 80048d8:	08004f44 	.word	0x08004f44

080048dc <_write_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	4605      	mov	r5, r0
 80048e0:	4608      	mov	r0, r1
 80048e2:	4611      	mov	r1, r2
 80048e4:	2200      	movs	r2, #0
 80048e6:	4c05      	ldr	r4, [pc, #20]	; (80048fc <_write_r+0x20>)
 80048e8:	6022      	str	r2, [r4, #0]
 80048ea:	461a      	mov	r2, r3
 80048ec:	f7fb fd6b 	bl	80003c6 <_write>
 80048f0:	1c43      	adds	r3, r0, #1
 80048f2:	d102      	bne.n	80048fa <_write_r+0x1e>
 80048f4:	6823      	ldr	r3, [r4, #0]
 80048f6:	b103      	cbz	r3, 80048fa <_write_r+0x1e>
 80048f8:	602b      	str	r3, [r5, #0]
 80048fa:	bd38      	pop	{r3, r4, r5, pc}
 80048fc:	200001a8 	.word	0x200001a8

08004900 <__swsetup_r>:
 8004900:	4b32      	ldr	r3, [pc, #200]	; (80049cc <__swsetup_r+0xcc>)
 8004902:	b570      	push	{r4, r5, r6, lr}
 8004904:	681d      	ldr	r5, [r3, #0]
 8004906:	4606      	mov	r6, r0
 8004908:	460c      	mov	r4, r1
 800490a:	b125      	cbz	r5, 8004916 <__swsetup_r+0x16>
 800490c:	69ab      	ldr	r3, [r5, #24]
 800490e:	b913      	cbnz	r3, 8004916 <__swsetup_r+0x16>
 8004910:	4628      	mov	r0, r5
 8004912:	f7ff fb93 	bl	800403c <__sinit>
 8004916:	4b2e      	ldr	r3, [pc, #184]	; (80049d0 <__swsetup_r+0xd0>)
 8004918:	429c      	cmp	r4, r3
 800491a:	d10f      	bne.n	800493c <__swsetup_r+0x3c>
 800491c:	686c      	ldr	r4, [r5, #4]
 800491e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004922:	b29a      	uxth	r2, r3
 8004924:	0715      	lsls	r5, r2, #28
 8004926:	d42c      	bmi.n	8004982 <__swsetup_r+0x82>
 8004928:	06d0      	lsls	r0, r2, #27
 800492a:	d411      	bmi.n	8004950 <__swsetup_r+0x50>
 800492c:	2209      	movs	r2, #9
 800492e:	6032      	str	r2, [r6, #0]
 8004930:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004934:	81a3      	strh	r3, [r4, #12]
 8004936:	f04f 30ff 	mov.w	r0, #4294967295
 800493a:	e03e      	b.n	80049ba <__swsetup_r+0xba>
 800493c:	4b25      	ldr	r3, [pc, #148]	; (80049d4 <__swsetup_r+0xd4>)
 800493e:	429c      	cmp	r4, r3
 8004940:	d101      	bne.n	8004946 <__swsetup_r+0x46>
 8004942:	68ac      	ldr	r4, [r5, #8]
 8004944:	e7eb      	b.n	800491e <__swsetup_r+0x1e>
 8004946:	4b24      	ldr	r3, [pc, #144]	; (80049d8 <__swsetup_r+0xd8>)
 8004948:	429c      	cmp	r4, r3
 800494a:	bf08      	it	eq
 800494c:	68ec      	ldreq	r4, [r5, #12]
 800494e:	e7e6      	b.n	800491e <__swsetup_r+0x1e>
 8004950:	0751      	lsls	r1, r2, #29
 8004952:	d512      	bpl.n	800497a <__swsetup_r+0x7a>
 8004954:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004956:	b141      	cbz	r1, 800496a <__swsetup_r+0x6a>
 8004958:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800495c:	4299      	cmp	r1, r3
 800495e:	d002      	beq.n	8004966 <__swsetup_r+0x66>
 8004960:	4630      	mov	r0, r6
 8004962:	f000 f981 	bl	8004c68 <_free_r>
 8004966:	2300      	movs	r3, #0
 8004968:	6363      	str	r3, [r4, #52]	; 0x34
 800496a:	89a3      	ldrh	r3, [r4, #12]
 800496c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004970:	81a3      	strh	r3, [r4, #12]
 8004972:	2300      	movs	r3, #0
 8004974:	6063      	str	r3, [r4, #4]
 8004976:	6923      	ldr	r3, [r4, #16]
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	89a3      	ldrh	r3, [r4, #12]
 800497c:	f043 0308 	orr.w	r3, r3, #8
 8004980:	81a3      	strh	r3, [r4, #12]
 8004982:	6923      	ldr	r3, [r4, #16]
 8004984:	b94b      	cbnz	r3, 800499a <__swsetup_r+0x9a>
 8004986:	89a3      	ldrh	r3, [r4, #12]
 8004988:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800498c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004990:	d003      	beq.n	800499a <__swsetup_r+0x9a>
 8004992:	4621      	mov	r1, r4
 8004994:	4630      	mov	r0, r6
 8004996:	f000 f917 	bl	8004bc8 <__smakebuf_r>
 800499a:	89a2      	ldrh	r2, [r4, #12]
 800499c:	f012 0301 	ands.w	r3, r2, #1
 80049a0:	d00c      	beq.n	80049bc <__swsetup_r+0xbc>
 80049a2:	2300      	movs	r3, #0
 80049a4:	60a3      	str	r3, [r4, #8]
 80049a6:	6963      	ldr	r3, [r4, #20]
 80049a8:	425b      	negs	r3, r3
 80049aa:	61a3      	str	r3, [r4, #24]
 80049ac:	6923      	ldr	r3, [r4, #16]
 80049ae:	b953      	cbnz	r3, 80049c6 <__swsetup_r+0xc6>
 80049b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049b4:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80049b8:	d1ba      	bne.n	8004930 <__swsetup_r+0x30>
 80049ba:	bd70      	pop	{r4, r5, r6, pc}
 80049bc:	0792      	lsls	r2, r2, #30
 80049be:	bf58      	it	pl
 80049c0:	6963      	ldrpl	r3, [r4, #20]
 80049c2:	60a3      	str	r3, [r4, #8]
 80049c4:	e7f2      	b.n	80049ac <__swsetup_r+0xac>
 80049c6:	2000      	movs	r0, #0
 80049c8:	e7f7      	b.n	80049ba <__swsetup_r+0xba>
 80049ca:	bf00      	nop
 80049cc:	2000000c 	.word	0x2000000c
 80049d0:	08004f64 	.word	0x08004f64
 80049d4:	08004f84 	.word	0x08004f84
 80049d8:	08004f44 	.word	0x08004f44

080049dc <_close_r>:
 80049dc:	b538      	push	{r3, r4, r5, lr}
 80049de:	2300      	movs	r3, #0
 80049e0:	4c05      	ldr	r4, [pc, #20]	; (80049f8 <_close_r+0x1c>)
 80049e2:	4605      	mov	r5, r0
 80049e4:	4608      	mov	r0, r1
 80049e6:	6023      	str	r3, [r4, #0]
 80049e8:	f7fb fd09 	bl	80003fe <_close>
 80049ec:	1c43      	adds	r3, r0, #1
 80049ee:	d102      	bne.n	80049f6 <_close_r+0x1a>
 80049f0:	6823      	ldr	r3, [r4, #0]
 80049f2:	b103      	cbz	r3, 80049f6 <_close_r+0x1a>
 80049f4:	602b      	str	r3, [r5, #0]
 80049f6:	bd38      	pop	{r3, r4, r5, pc}
 80049f8:	200001a8 	.word	0x200001a8

080049fc <__sflush_r>:
 80049fc:	898a      	ldrh	r2, [r1, #12]
 80049fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004a02:	4605      	mov	r5, r0
 8004a04:	0710      	lsls	r0, r2, #28
 8004a06:	460c      	mov	r4, r1
 8004a08:	d458      	bmi.n	8004abc <__sflush_r+0xc0>
 8004a0a:	684b      	ldr	r3, [r1, #4]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	dc05      	bgt.n	8004a1c <__sflush_r+0x20>
 8004a10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	dc02      	bgt.n	8004a1c <__sflush_r+0x20>
 8004a16:	2000      	movs	r0, #0
 8004a18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a1e:	2e00      	cmp	r6, #0
 8004a20:	d0f9      	beq.n	8004a16 <__sflush_r+0x1a>
 8004a22:	2300      	movs	r3, #0
 8004a24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004a28:	682f      	ldr	r7, [r5, #0]
 8004a2a:	6a21      	ldr	r1, [r4, #32]
 8004a2c:	602b      	str	r3, [r5, #0]
 8004a2e:	d032      	beq.n	8004a96 <__sflush_r+0x9a>
 8004a30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004a32:	89a3      	ldrh	r3, [r4, #12]
 8004a34:	075a      	lsls	r2, r3, #29
 8004a36:	d505      	bpl.n	8004a44 <__sflush_r+0x48>
 8004a38:	6863      	ldr	r3, [r4, #4]
 8004a3a:	1ac0      	subs	r0, r0, r3
 8004a3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004a3e:	b10b      	cbz	r3, 8004a44 <__sflush_r+0x48>
 8004a40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004a42:	1ac0      	subs	r0, r0, r3
 8004a44:	2300      	movs	r3, #0
 8004a46:	4602      	mov	r2, r0
 8004a48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004a4a:	6a21      	ldr	r1, [r4, #32]
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	47b0      	blx	r6
 8004a50:	1c43      	adds	r3, r0, #1
 8004a52:	89a3      	ldrh	r3, [r4, #12]
 8004a54:	d106      	bne.n	8004a64 <__sflush_r+0x68>
 8004a56:	6829      	ldr	r1, [r5, #0]
 8004a58:	291d      	cmp	r1, #29
 8004a5a:	d848      	bhi.n	8004aee <__sflush_r+0xf2>
 8004a5c:	4a29      	ldr	r2, [pc, #164]	; (8004b04 <__sflush_r+0x108>)
 8004a5e:	40ca      	lsrs	r2, r1
 8004a60:	07d6      	lsls	r6, r2, #31
 8004a62:	d544      	bpl.n	8004aee <__sflush_r+0xf2>
 8004a64:	2200      	movs	r2, #0
 8004a66:	6062      	str	r2, [r4, #4]
 8004a68:	6922      	ldr	r2, [r4, #16]
 8004a6a:	04d9      	lsls	r1, r3, #19
 8004a6c:	6022      	str	r2, [r4, #0]
 8004a6e:	d504      	bpl.n	8004a7a <__sflush_r+0x7e>
 8004a70:	1c42      	adds	r2, r0, #1
 8004a72:	d101      	bne.n	8004a78 <__sflush_r+0x7c>
 8004a74:	682b      	ldr	r3, [r5, #0]
 8004a76:	b903      	cbnz	r3, 8004a7a <__sflush_r+0x7e>
 8004a78:	6560      	str	r0, [r4, #84]	; 0x54
 8004a7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004a7c:	602f      	str	r7, [r5, #0]
 8004a7e:	2900      	cmp	r1, #0
 8004a80:	d0c9      	beq.n	8004a16 <__sflush_r+0x1a>
 8004a82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004a86:	4299      	cmp	r1, r3
 8004a88:	d002      	beq.n	8004a90 <__sflush_r+0x94>
 8004a8a:	4628      	mov	r0, r5
 8004a8c:	f000 f8ec 	bl	8004c68 <_free_r>
 8004a90:	2000      	movs	r0, #0
 8004a92:	6360      	str	r0, [r4, #52]	; 0x34
 8004a94:	e7c0      	b.n	8004a18 <__sflush_r+0x1c>
 8004a96:	2301      	movs	r3, #1
 8004a98:	4628      	mov	r0, r5
 8004a9a:	47b0      	blx	r6
 8004a9c:	1c41      	adds	r1, r0, #1
 8004a9e:	d1c8      	bne.n	8004a32 <__sflush_r+0x36>
 8004aa0:	682b      	ldr	r3, [r5, #0]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d0c5      	beq.n	8004a32 <__sflush_r+0x36>
 8004aa6:	2b1d      	cmp	r3, #29
 8004aa8:	d001      	beq.n	8004aae <__sflush_r+0xb2>
 8004aaa:	2b16      	cmp	r3, #22
 8004aac:	d101      	bne.n	8004ab2 <__sflush_r+0xb6>
 8004aae:	602f      	str	r7, [r5, #0]
 8004ab0:	e7b1      	b.n	8004a16 <__sflush_r+0x1a>
 8004ab2:	89a3      	ldrh	r3, [r4, #12]
 8004ab4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ab8:	81a3      	strh	r3, [r4, #12]
 8004aba:	e7ad      	b.n	8004a18 <__sflush_r+0x1c>
 8004abc:	690f      	ldr	r7, [r1, #16]
 8004abe:	2f00      	cmp	r7, #0
 8004ac0:	d0a9      	beq.n	8004a16 <__sflush_r+0x1a>
 8004ac2:	0793      	lsls	r3, r2, #30
 8004ac4:	bf18      	it	ne
 8004ac6:	2300      	movne	r3, #0
 8004ac8:	680e      	ldr	r6, [r1, #0]
 8004aca:	bf08      	it	eq
 8004acc:	694b      	ldreq	r3, [r1, #20]
 8004ace:	eba6 0807 	sub.w	r8, r6, r7
 8004ad2:	600f      	str	r7, [r1, #0]
 8004ad4:	608b      	str	r3, [r1, #8]
 8004ad6:	f1b8 0f00 	cmp.w	r8, #0
 8004ada:	dd9c      	ble.n	8004a16 <__sflush_r+0x1a>
 8004adc:	4643      	mov	r3, r8
 8004ade:	463a      	mov	r2, r7
 8004ae0:	6a21      	ldr	r1, [r4, #32]
 8004ae2:	4628      	mov	r0, r5
 8004ae4:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004ae6:	47b0      	blx	r6
 8004ae8:	2800      	cmp	r0, #0
 8004aea:	dc06      	bgt.n	8004afa <__sflush_r+0xfe>
 8004aec:	89a3      	ldrh	r3, [r4, #12]
 8004aee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af2:	81a3      	strh	r3, [r4, #12]
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	e78e      	b.n	8004a18 <__sflush_r+0x1c>
 8004afa:	4407      	add	r7, r0
 8004afc:	eba8 0800 	sub.w	r8, r8, r0
 8004b00:	e7e9      	b.n	8004ad6 <__sflush_r+0xda>
 8004b02:	bf00      	nop
 8004b04:	20400001 	.word	0x20400001

08004b08 <_fflush_r>:
 8004b08:	b538      	push	{r3, r4, r5, lr}
 8004b0a:	690b      	ldr	r3, [r1, #16]
 8004b0c:	4605      	mov	r5, r0
 8004b0e:	460c      	mov	r4, r1
 8004b10:	b1db      	cbz	r3, 8004b4a <_fflush_r+0x42>
 8004b12:	b118      	cbz	r0, 8004b1c <_fflush_r+0x14>
 8004b14:	6983      	ldr	r3, [r0, #24]
 8004b16:	b90b      	cbnz	r3, 8004b1c <_fflush_r+0x14>
 8004b18:	f7ff fa90 	bl	800403c <__sinit>
 8004b1c:	4b0c      	ldr	r3, [pc, #48]	; (8004b50 <_fflush_r+0x48>)
 8004b1e:	429c      	cmp	r4, r3
 8004b20:	d109      	bne.n	8004b36 <_fflush_r+0x2e>
 8004b22:	686c      	ldr	r4, [r5, #4]
 8004b24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b28:	b17b      	cbz	r3, 8004b4a <_fflush_r+0x42>
 8004b2a:	4621      	mov	r1, r4
 8004b2c:	4628      	mov	r0, r5
 8004b2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004b32:	f7ff bf63 	b.w	80049fc <__sflush_r>
 8004b36:	4b07      	ldr	r3, [pc, #28]	; (8004b54 <_fflush_r+0x4c>)
 8004b38:	429c      	cmp	r4, r3
 8004b3a:	d101      	bne.n	8004b40 <_fflush_r+0x38>
 8004b3c:	68ac      	ldr	r4, [r5, #8]
 8004b3e:	e7f1      	b.n	8004b24 <_fflush_r+0x1c>
 8004b40:	4b05      	ldr	r3, [pc, #20]	; (8004b58 <_fflush_r+0x50>)
 8004b42:	429c      	cmp	r4, r3
 8004b44:	bf08      	it	eq
 8004b46:	68ec      	ldreq	r4, [r5, #12]
 8004b48:	e7ec      	b.n	8004b24 <_fflush_r+0x1c>
 8004b4a:	2000      	movs	r0, #0
 8004b4c:	bd38      	pop	{r3, r4, r5, pc}
 8004b4e:	bf00      	nop
 8004b50:	08004f64 	.word	0x08004f64
 8004b54:	08004f84 	.word	0x08004f84
 8004b58:	08004f44 	.word	0x08004f44

08004b5c <_lseek_r>:
 8004b5c:	b538      	push	{r3, r4, r5, lr}
 8004b5e:	4605      	mov	r5, r0
 8004b60:	4608      	mov	r0, r1
 8004b62:	4611      	mov	r1, r2
 8004b64:	2200      	movs	r2, #0
 8004b66:	4c05      	ldr	r4, [pc, #20]	; (8004b7c <_lseek_r+0x20>)
 8004b68:	6022      	str	r2, [r4, #0]
 8004b6a:	461a      	mov	r2, r3
 8004b6c:	f7fb fc6b 	bl	8000446 <_lseek>
 8004b70:	1c43      	adds	r3, r0, #1
 8004b72:	d102      	bne.n	8004b7a <_lseek_r+0x1e>
 8004b74:	6823      	ldr	r3, [r4, #0]
 8004b76:	b103      	cbz	r3, 8004b7a <_lseek_r+0x1e>
 8004b78:	602b      	str	r3, [r5, #0]
 8004b7a:	bd38      	pop	{r3, r4, r5, pc}
 8004b7c:	200001a8 	.word	0x200001a8

08004b80 <__swhatbuf_r>:
 8004b80:	b570      	push	{r4, r5, r6, lr}
 8004b82:	460e      	mov	r6, r1
 8004b84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004b88:	b096      	sub	sp, #88	; 0x58
 8004b8a:	2900      	cmp	r1, #0
 8004b8c:	4614      	mov	r4, r2
 8004b8e:	461d      	mov	r5, r3
 8004b90:	da07      	bge.n	8004ba2 <__swhatbuf_r+0x22>
 8004b92:	2300      	movs	r3, #0
 8004b94:	602b      	str	r3, [r5, #0]
 8004b96:	89b3      	ldrh	r3, [r6, #12]
 8004b98:	061a      	lsls	r2, r3, #24
 8004b9a:	d410      	bmi.n	8004bbe <__swhatbuf_r+0x3e>
 8004b9c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ba0:	e00e      	b.n	8004bc0 <__swhatbuf_r+0x40>
 8004ba2:	466a      	mov	r2, sp
 8004ba4:	f000 f8be 	bl	8004d24 <_fstat_r>
 8004ba8:	2800      	cmp	r0, #0
 8004baa:	dbf2      	blt.n	8004b92 <__swhatbuf_r+0x12>
 8004bac:	9a01      	ldr	r2, [sp, #4]
 8004bae:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004bb2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004bb6:	425a      	negs	r2, r3
 8004bb8:	415a      	adcs	r2, r3
 8004bba:	602a      	str	r2, [r5, #0]
 8004bbc:	e7ee      	b.n	8004b9c <__swhatbuf_r+0x1c>
 8004bbe:	2340      	movs	r3, #64	; 0x40
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	6023      	str	r3, [r4, #0]
 8004bc4:	b016      	add	sp, #88	; 0x58
 8004bc6:	bd70      	pop	{r4, r5, r6, pc}

08004bc8 <__smakebuf_r>:
 8004bc8:	898b      	ldrh	r3, [r1, #12]
 8004bca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004bcc:	079d      	lsls	r5, r3, #30
 8004bce:	4606      	mov	r6, r0
 8004bd0:	460c      	mov	r4, r1
 8004bd2:	d507      	bpl.n	8004be4 <__smakebuf_r+0x1c>
 8004bd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004bd8:	6023      	str	r3, [r4, #0]
 8004bda:	6123      	str	r3, [r4, #16]
 8004bdc:	2301      	movs	r3, #1
 8004bde:	6163      	str	r3, [r4, #20]
 8004be0:	b002      	add	sp, #8
 8004be2:	bd70      	pop	{r4, r5, r6, pc}
 8004be4:	ab01      	add	r3, sp, #4
 8004be6:	466a      	mov	r2, sp
 8004be8:	f7ff ffca 	bl	8004b80 <__swhatbuf_r>
 8004bec:	9900      	ldr	r1, [sp, #0]
 8004bee:	4605      	mov	r5, r0
 8004bf0:	4630      	mov	r0, r6
 8004bf2:	f7ff faad 	bl	8004150 <_malloc_r>
 8004bf6:	b948      	cbnz	r0, 8004c0c <__smakebuf_r+0x44>
 8004bf8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bfc:	059a      	lsls	r2, r3, #22
 8004bfe:	d4ef      	bmi.n	8004be0 <__smakebuf_r+0x18>
 8004c00:	f023 0303 	bic.w	r3, r3, #3
 8004c04:	f043 0302 	orr.w	r3, r3, #2
 8004c08:	81a3      	strh	r3, [r4, #12]
 8004c0a:	e7e3      	b.n	8004bd4 <__smakebuf_r+0xc>
 8004c0c:	4b0d      	ldr	r3, [pc, #52]	; (8004c44 <__smakebuf_r+0x7c>)
 8004c0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8004c10:	89a3      	ldrh	r3, [r4, #12]
 8004c12:	6020      	str	r0, [r4, #0]
 8004c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c18:	81a3      	strh	r3, [r4, #12]
 8004c1a:	9b00      	ldr	r3, [sp, #0]
 8004c1c:	6120      	str	r0, [r4, #16]
 8004c1e:	6163      	str	r3, [r4, #20]
 8004c20:	9b01      	ldr	r3, [sp, #4]
 8004c22:	b15b      	cbz	r3, 8004c3c <__smakebuf_r+0x74>
 8004c24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c28:	4630      	mov	r0, r6
 8004c2a:	f000 f88d 	bl	8004d48 <_isatty_r>
 8004c2e:	b128      	cbz	r0, 8004c3c <__smakebuf_r+0x74>
 8004c30:	89a3      	ldrh	r3, [r4, #12]
 8004c32:	f023 0303 	bic.w	r3, r3, #3
 8004c36:	f043 0301 	orr.w	r3, r3, #1
 8004c3a:	81a3      	strh	r3, [r4, #12]
 8004c3c:	89a3      	ldrh	r3, [r4, #12]
 8004c3e:	431d      	orrs	r5, r3
 8004c40:	81a5      	strh	r5, [r4, #12]
 8004c42:	e7cd      	b.n	8004be0 <__smakebuf_r+0x18>
 8004c44:	08004005 	.word	0x08004005

08004c48 <memchr>:
 8004c48:	b510      	push	{r4, lr}
 8004c4a:	b2c9      	uxtb	r1, r1
 8004c4c:	4402      	add	r2, r0
 8004c4e:	4290      	cmp	r0, r2
 8004c50:	4603      	mov	r3, r0
 8004c52:	d101      	bne.n	8004c58 <memchr+0x10>
 8004c54:	2300      	movs	r3, #0
 8004c56:	e003      	b.n	8004c60 <memchr+0x18>
 8004c58:	781c      	ldrb	r4, [r3, #0]
 8004c5a:	3001      	adds	r0, #1
 8004c5c:	428c      	cmp	r4, r1
 8004c5e:	d1f6      	bne.n	8004c4e <memchr+0x6>
 8004c60:	4618      	mov	r0, r3
 8004c62:	bd10      	pop	{r4, pc}

08004c64 <__malloc_lock>:
 8004c64:	4770      	bx	lr

08004c66 <__malloc_unlock>:
 8004c66:	4770      	bx	lr

08004c68 <_free_r>:
 8004c68:	b538      	push	{r3, r4, r5, lr}
 8004c6a:	4605      	mov	r5, r0
 8004c6c:	2900      	cmp	r1, #0
 8004c6e:	d043      	beq.n	8004cf8 <_free_r+0x90>
 8004c70:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004c74:	1f0c      	subs	r4, r1, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	bfb8      	it	lt
 8004c7a:	18e4      	addlt	r4, r4, r3
 8004c7c:	f7ff fff2 	bl	8004c64 <__malloc_lock>
 8004c80:	4a1e      	ldr	r2, [pc, #120]	; (8004cfc <_free_r+0x94>)
 8004c82:	6813      	ldr	r3, [r2, #0]
 8004c84:	4610      	mov	r0, r2
 8004c86:	b933      	cbnz	r3, 8004c96 <_free_r+0x2e>
 8004c88:	6063      	str	r3, [r4, #4]
 8004c8a:	6014      	str	r4, [r2, #0]
 8004c8c:	4628      	mov	r0, r5
 8004c8e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004c92:	f7ff bfe8 	b.w	8004c66 <__malloc_unlock>
 8004c96:	42a3      	cmp	r3, r4
 8004c98:	d90b      	bls.n	8004cb2 <_free_r+0x4a>
 8004c9a:	6821      	ldr	r1, [r4, #0]
 8004c9c:	1862      	adds	r2, r4, r1
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	bf01      	itttt	eq
 8004ca2:	681a      	ldreq	r2, [r3, #0]
 8004ca4:	685b      	ldreq	r3, [r3, #4]
 8004ca6:	1852      	addeq	r2, r2, r1
 8004ca8:	6022      	streq	r2, [r4, #0]
 8004caa:	6063      	str	r3, [r4, #4]
 8004cac:	6004      	str	r4, [r0, #0]
 8004cae:	e7ed      	b.n	8004c8c <_free_r+0x24>
 8004cb0:	4613      	mov	r3, r2
 8004cb2:	685a      	ldr	r2, [r3, #4]
 8004cb4:	b10a      	cbz	r2, 8004cba <_free_r+0x52>
 8004cb6:	42a2      	cmp	r2, r4
 8004cb8:	d9fa      	bls.n	8004cb0 <_free_r+0x48>
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	1858      	adds	r0, r3, r1
 8004cbe:	42a0      	cmp	r0, r4
 8004cc0:	d10b      	bne.n	8004cda <_free_r+0x72>
 8004cc2:	6820      	ldr	r0, [r4, #0]
 8004cc4:	4401      	add	r1, r0
 8004cc6:	1858      	adds	r0, r3, r1
 8004cc8:	4282      	cmp	r2, r0
 8004cca:	6019      	str	r1, [r3, #0]
 8004ccc:	d1de      	bne.n	8004c8c <_free_r+0x24>
 8004cce:	6810      	ldr	r0, [r2, #0]
 8004cd0:	6852      	ldr	r2, [r2, #4]
 8004cd2:	4401      	add	r1, r0
 8004cd4:	6019      	str	r1, [r3, #0]
 8004cd6:	605a      	str	r2, [r3, #4]
 8004cd8:	e7d8      	b.n	8004c8c <_free_r+0x24>
 8004cda:	d902      	bls.n	8004ce2 <_free_r+0x7a>
 8004cdc:	230c      	movs	r3, #12
 8004cde:	602b      	str	r3, [r5, #0]
 8004ce0:	e7d4      	b.n	8004c8c <_free_r+0x24>
 8004ce2:	6820      	ldr	r0, [r4, #0]
 8004ce4:	1821      	adds	r1, r4, r0
 8004ce6:	428a      	cmp	r2, r1
 8004ce8:	bf01      	itttt	eq
 8004cea:	6811      	ldreq	r1, [r2, #0]
 8004cec:	6852      	ldreq	r2, [r2, #4]
 8004cee:	1809      	addeq	r1, r1, r0
 8004cf0:	6021      	streq	r1, [r4, #0]
 8004cf2:	6062      	str	r2, [r4, #4]
 8004cf4:	605c      	str	r4, [r3, #4]
 8004cf6:	e7c9      	b.n	8004c8c <_free_r+0x24>
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200000a4 	.word	0x200000a4

08004d00 <_read_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	4605      	mov	r5, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	4611      	mov	r1, r2
 8004d08:	2200      	movs	r2, #0
 8004d0a:	4c05      	ldr	r4, [pc, #20]	; (8004d20 <_read_r+0x20>)
 8004d0c:	6022      	str	r2, [r4, #0]
 8004d0e:	461a      	mov	r2, r3
 8004d10:	f7fb fb3c 	bl	800038c <_read>
 8004d14:	1c43      	adds	r3, r0, #1
 8004d16:	d102      	bne.n	8004d1e <_read_r+0x1e>
 8004d18:	6823      	ldr	r3, [r4, #0]
 8004d1a:	b103      	cbz	r3, 8004d1e <_read_r+0x1e>
 8004d1c:	602b      	str	r3, [r5, #0]
 8004d1e:	bd38      	pop	{r3, r4, r5, pc}
 8004d20:	200001a8 	.word	0x200001a8

08004d24 <_fstat_r>:
 8004d24:	b538      	push	{r3, r4, r5, lr}
 8004d26:	2300      	movs	r3, #0
 8004d28:	4c06      	ldr	r4, [pc, #24]	; (8004d44 <_fstat_r+0x20>)
 8004d2a:	4605      	mov	r5, r0
 8004d2c:	4608      	mov	r0, r1
 8004d2e:	4611      	mov	r1, r2
 8004d30:	6023      	str	r3, [r4, #0]
 8004d32:	f7fb fb6f 	bl	8000414 <_fstat>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	d102      	bne.n	8004d40 <_fstat_r+0x1c>
 8004d3a:	6823      	ldr	r3, [r4, #0]
 8004d3c:	b103      	cbz	r3, 8004d40 <_fstat_r+0x1c>
 8004d3e:	602b      	str	r3, [r5, #0]
 8004d40:	bd38      	pop	{r3, r4, r5, pc}
 8004d42:	bf00      	nop
 8004d44:	200001a8 	.word	0x200001a8

08004d48 <_isatty_r>:
 8004d48:	b538      	push	{r3, r4, r5, lr}
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	4c05      	ldr	r4, [pc, #20]	; (8004d64 <_isatty_r+0x1c>)
 8004d4e:	4605      	mov	r5, r0
 8004d50:	4608      	mov	r0, r1
 8004d52:	6023      	str	r3, [r4, #0]
 8004d54:	f7fb fb6d 	bl	8000432 <_isatty>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_isatty_r+0x1a>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_isatty_r+0x1a>
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	200001a8 	.word	0x200001a8

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr

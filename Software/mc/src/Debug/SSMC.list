
SSMC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000018a0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080019ac  080019ac  000119ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a80  08001a80  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08001a80  08001a80  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001a80  08001a80  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a80  08001a80  00011a80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001a84  08001a84  00011a84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001a88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08001a94  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08001a94  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003479  00000000  00000000  00020035  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000102b  00000000  00000000  000234ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  000244e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e8  00000000  00000000  00024990  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00012774  00000000  00000000  00024d78  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00004ec4  00000000  00000000  000374ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00063e7b  00000000  00000000  0003c3b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000a022b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000f5c  00000000  00000000  000a02a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08001994 	.word	0x08001994

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08001994 	.word	0x08001994

0800014c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b088      	sub	sp, #32
 8000150:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000152:	f107 0310 	add.w	r3, r7, #16
 8000156:	2200      	movs	r2, #0
 8000158:	601a      	str	r2, [r3, #0]
 800015a:	605a      	str	r2, [r3, #4]
 800015c:	609a      	str	r2, [r3, #8]
 800015e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000160:	4b28      	ldr	r3, [pc, #160]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000162:	699b      	ldr	r3, [r3, #24]
 8000164:	4a27      	ldr	r2, [pc, #156]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000166:	f043 0320 	orr.w	r3, r3, #32
 800016a:	6193      	str	r3, [r2, #24]
 800016c:	4b25      	ldr	r3, [pc, #148]	; (8000204 <MX_GPIO_Init+0xb8>)
 800016e:	699b      	ldr	r3, [r3, #24]
 8000170:	f003 0320 	and.w	r3, r3, #32
 8000174:	60fb      	str	r3, [r7, #12]
 8000176:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000178:	4b22      	ldr	r3, [pc, #136]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017a:	699b      	ldr	r3, [r3, #24]
 800017c:	4a21      	ldr	r2, [pc, #132]	; (8000204 <MX_GPIO_Init+0xb8>)
 800017e:	f043 0304 	orr.w	r3, r3, #4
 8000182:	6193      	str	r3, [r2, #24]
 8000184:	4b1f      	ldr	r3, [pc, #124]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000186:	699b      	ldr	r3, [r3, #24]
 8000188:	f003 0304 	and.w	r3, r3, #4
 800018c:	60bb      	str	r3, [r7, #8]
 800018e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000190:	4b1c      	ldr	r3, [pc, #112]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000192:	699b      	ldr	r3, [r3, #24]
 8000194:	4a1b      	ldr	r2, [pc, #108]	; (8000204 <MX_GPIO_Init+0xb8>)
 8000196:	f043 0308 	orr.w	r3, r3, #8
 800019a:	6193      	str	r3, [r2, #24]
 800019c:	4b19      	ldr	r3, [pc, #100]	; (8000204 <MX_GPIO_Init+0xb8>)
 800019e:	699b      	ldr	r3, [r3, #24]
 80001a0:	f003 0308 	and.w	r3, r3, #8
 80001a4:	607b      	str	r3, [r7, #4]
 80001a6:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80001a8:	2200      	movs	r2, #0
 80001aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80001ae:	4816      	ldr	r0, [pc, #88]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001b0:	f000 fcd8 	bl	8000b64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001b4:	2200      	movs	r2, #0
 80001b6:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
 80001ba:	4814      	ldr	r0, [pc, #80]	; (800020c <MX_GPIO_Init+0xc0>)
 80001bc:	f000 fcd2 	bl	8000b64 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80001c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80001c4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001c6:	2301      	movs	r3, #1
 80001c8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ca:	2300      	movs	r3, #0
 80001cc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ce:	2302      	movs	r3, #2
 80001d0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80001d2:	f107 0310 	add.w	r3, r7, #16
 80001d6:	4619      	mov	r1, r3
 80001d8:	480b      	ldr	r0, [pc, #44]	; (8000208 <MX_GPIO_Init+0xbc>)
 80001da:	f000 fa89 	bl	80006f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6 
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6 
 80001de:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80001e2:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80001e4:	2301      	movs	r3, #1
 80001e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001e8:	2300      	movs	r3, #0
 80001ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80001ec:	2302      	movs	r3, #2
 80001ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80001f0:	f107 0310 	add.w	r3, r7, #16
 80001f4:	4619      	mov	r1, r3
 80001f6:	4805      	ldr	r0, [pc, #20]	; (800020c <MX_GPIO_Init+0xc0>)
 80001f8:	f000 fa7a 	bl	80006f0 <HAL_GPIO_Init>

}
 80001fc:	bf00      	nop
 80001fe:	3720      	adds	r7, #32
 8000200:	46bd      	mov	sp, r7
 8000202:	bd80      	pop	{r7, pc}
 8000204:	40021000 	.word	0x40021000
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00

08000210 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000210:	b580      	push	{r7, lr}
 8000212:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000214:	f000 f914 	bl	8000440 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000218:	f000 f807 	bl	800022a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800021c:	f7ff ff96 	bl	800014c <MX_GPIO_Init>
 

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  scheduler_init();
 8000220:	f001 fb0e 	bl	8001840 <scheduler_init>
  scheduler_main();
 8000224:	f001 fb1e 	bl	8001864 <scheduler_main>

  while (1)
 8000228:	e7fe      	b.n	8000228 <main+0x18>

0800022a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800022a:	b580      	push	{r7, lr}
 800022c:	b090      	sub	sp, #64	; 0x40
 800022e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000230:	f107 0318 	add.w	r3, r7, #24
 8000234:	2228      	movs	r2, #40	; 0x28
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f001 fba3 	bl	8001984 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	2200      	movs	r2, #0
 8000242:	601a      	str	r2, [r3, #0]
 8000244:	605a      	str	r2, [r3, #4]
 8000246:	609a      	str	r2, [r3, #8]
 8000248:	60da      	str	r2, [r3, #12]
 800024a:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800024c:	2301      	movs	r3, #1
 800024e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000250:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000254:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000256:	2300      	movs	r3, #0
 8000258:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800025a:	2301      	movs	r3, #1
 800025c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800025e:	2302      	movs	r3, #2
 8000260:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000262:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000266:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000268:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800026c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800026e:	f107 0318 	add.w	r3, r7, #24
 8000272:	4618      	mov	r0, r3
 8000274:	f000 fca8 	bl	8000bc8 <HAL_RCC_OscConfig>
 8000278:	4603      	mov	r3, r0
 800027a:	2b00      	cmp	r3, #0
 800027c:	d001      	beq.n	8000282 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800027e:	f000 f819 	bl	80002b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000282:	230f      	movs	r3, #15
 8000284:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000286:	2302      	movs	r3, #2
 8000288:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800028a:	2300      	movs	r3, #0
 800028c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800028e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000292:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000294:	2300      	movs	r3, #0
 8000296:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000298:	1d3b      	adds	r3, r7, #4
 800029a:	2102      	movs	r1, #2
 800029c:	4618      	mov	r0, r3
 800029e:	f001 f803 	bl	80012a8 <HAL_RCC_ClockConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002a8:	f000 f804 	bl	80002b4 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3740      	adds	r7, #64	; 0x40
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80002b4:	b480      	push	{r7}
 80002b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80002b8:	bf00      	nop
 80002ba:	46bd      	mov	sp, r7
 80002bc:	bc80      	pop	{r7}
 80002be:	4770      	bx	lr

080002c0 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{ 
 80002c0:	b480      	push	{r7}
 80002c2:	b083      	sub	sp, #12
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
 80002c8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80002ca:	bf00      	nop
 80002cc:	370c      	adds	r7, #12
 80002ce:	46bd      	mov	sp, r7
 80002d0:	bc80      	pop	{r7}
 80002d2:	4770      	bx	lr

080002d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b085      	sub	sp, #20
 80002d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80002da:	4b15      	ldr	r3, [pc, #84]	; (8000330 <HAL_MspInit+0x5c>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a14      	ldr	r2, [pc, #80]	; (8000330 <HAL_MspInit+0x5c>)
 80002e0:	f043 0301 	orr.w	r3, r3, #1
 80002e4:	6193      	str	r3, [r2, #24]
 80002e6:	4b12      	ldr	r3, [pc, #72]	; (8000330 <HAL_MspInit+0x5c>)
 80002e8:	699b      	ldr	r3, [r3, #24]
 80002ea:	f003 0301 	and.w	r3, r3, #1
 80002ee:	60bb      	str	r3, [r7, #8]
 80002f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80002f2:	4b0f      	ldr	r3, [pc, #60]	; (8000330 <HAL_MspInit+0x5c>)
 80002f4:	69db      	ldr	r3, [r3, #28]
 80002f6:	4a0e      	ldr	r2, [pc, #56]	; (8000330 <HAL_MspInit+0x5c>)
 80002f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80002fc:	61d3      	str	r3, [r2, #28]
 80002fe:	4b0c      	ldr	r3, [pc, #48]	; (8000330 <HAL_MspInit+0x5c>)
 8000300:	69db      	ldr	r3, [r3, #28]
 8000302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000306:	607b      	str	r3, [r7, #4]
 8000308:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled 
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800030a:	4b0a      	ldr	r3, [pc, #40]	; (8000334 <HAL_MspInit+0x60>)
 800030c:	685b      	ldr	r3, [r3, #4]
 800030e:	60fb      	str	r3, [r7, #12]
 8000310:	68fb      	ldr	r3, [r7, #12]
 8000312:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000316:	60fb      	str	r3, [r7, #12]
 8000318:	68fb      	ldr	r3, [r7, #12]
 800031a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800031e:	60fb      	str	r3, [r7, #12]
 8000320:	4a04      	ldr	r2, [pc, #16]	; (8000334 <HAL_MspInit+0x60>)
 8000322:	68fb      	ldr	r3, [r7, #12]
 8000324:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000326:	bf00      	nop
 8000328:	3714      	adds	r7, #20
 800032a:	46bd      	mov	sp, r7
 800032c:	bc80      	pop	{r7}
 800032e:	4770      	bx	lr
 8000330:	40021000 	.word	0x40021000
 8000334:	40010000 	.word	0x40010000

08000338 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800033c:	bf00      	nop
 800033e:	46bd      	mov	sp, r7
 8000340:	bc80      	pop	{r7}
 8000342:	4770      	bx	lr

08000344 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <HardFault_Handler+0x4>

0800034a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800034e:	e7fe      	b.n	800034e <MemManage_Handler+0x4>

08000350 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000350:	b480      	push	{r7}
 8000352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000354:	e7fe      	b.n	8000354 <BusFault_Handler+0x4>

08000356 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000356:	b480      	push	{r7}
 8000358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800035a:	e7fe      	b.n	800035a <UsageFault_Handler+0x4>

0800035c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800035c:	b480      	push	{r7}
 800035e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	bc80      	pop	{r7}
 8000366:	4770      	bx	lr

08000368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000368:	b480      	push	{r7}
 800036a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800036c:	bf00      	nop
 800036e:	46bd      	mov	sp, r7
 8000370:	bc80      	pop	{r7}
 8000372:	4770      	bx	lr

08000374 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	bc80      	pop	{r7}
 800037e:	4770      	bx	lr

08000380 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000380:	b580      	push	{r7, lr}
 8000382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	scheduler_ei_tickUp_ISR();
 8000384:	f001 facc 	bl	8001920 <scheduler_ei_tickUp_ISR>
  /* USER CODE END SysTick_IRQn 0 */
  
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000388:	bf00      	nop
 800038a:	bd80      	pop	{r7, pc}

0800038c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800038c:	b480      	push	{r7}
 800038e:	af00      	add	r7, sp, #0
  /* Reset the RCC clock configuration to the default reset state(for debug purpose) */
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8000390:	4b15      	ldr	r3, [pc, #84]	; (80003e8 <SystemInit+0x5c>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a14      	ldr	r2, [pc, #80]	; (80003e8 <SystemInit+0x5c>)
 8000396:	f043 0301 	orr.w	r3, r3, #1
 800039a:	6013      	str	r3, [r2, #0]

  /* Reset SW, HPRE, PPRE1, PPRE2, ADCPRE and MCO bits */
#if !defined(STM32F105xC) && !defined(STM32F107xC)
  RCC->CFGR &= 0xF8FF0000U;
 800039c:	4b12      	ldr	r3, [pc, #72]	; (80003e8 <SystemInit+0x5c>)
 800039e:	685a      	ldr	r2, [r3, #4]
 80003a0:	4911      	ldr	r1, [pc, #68]	; (80003e8 <SystemInit+0x5c>)
 80003a2:	4b12      	ldr	r3, [pc, #72]	; (80003ec <SystemInit+0x60>)
 80003a4:	4013      	ands	r3, r2
 80003a6:	604b      	str	r3, [r1, #4]
#else
  RCC->CFGR &= 0xF0FF0000U;
#endif /* STM32F105xC */   
  
  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80003a8:	4b0f      	ldr	r3, [pc, #60]	; (80003e8 <SystemInit+0x5c>)
 80003aa:	681b      	ldr	r3, [r3, #0]
 80003ac:	4a0e      	ldr	r2, [pc, #56]	; (80003e8 <SystemInit+0x5c>)
 80003ae:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80003b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003b6:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80003b8:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <SystemInit+0x5c>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4a0a      	ldr	r2, [pc, #40]	; (80003e8 <SystemInit+0x5c>)
 80003be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80003c2:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE/OTGFSPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80003c4:	4b08      	ldr	r3, [pc, #32]	; (80003e8 <SystemInit+0x5c>)
 80003c6:	685b      	ldr	r3, [r3, #4]
 80003c8:	4a07      	ldr	r2, [pc, #28]	; (80003e8 <SystemInit+0x5c>)
 80003ca:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 80003ce:	6053      	str	r3, [r2, #4]

  /* Reset CFGR2 register */
  RCC->CFGR2 = 0x00000000U;      
#else
  /* Disable all interrupts and clear pending bits  */
  RCC->CIR = 0x009F0000U;
 80003d0:	4b05      	ldr	r3, [pc, #20]	; (80003e8 <SystemInit+0x5c>)
 80003d2:	f44f 021f 	mov.w	r2, #10420224	; 0x9f0000
 80003d6:	609a      	str	r2, [r3, #8]
#endif 

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80003d8:	4b05      	ldr	r3, [pc, #20]	; (80003f0 <SystemInit+0x64>)
 80003da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80003de:	609a      	str	r2, [r3, #8]
#endif 
}
 80003e0:	bf00      	nop
 80003e2:	46bd      	mov	sp, r7
 80003e4:	bc80      	pop	{r7}
 80003e6:	4770      	bx	lr
 80003e8:	40021000 	.word	0x40021000
 80003ec:	f8ff0000 	.word	0xf8ff0000
 80003f0:	e000ed00 	.word	0xe000ed00

080003f4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80003f4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80003f6:	e003      	b.n	8000400 <LoopCopyDataInit>

080003f8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80003f8:	4b0b      	ldr	r3, [pc, #44]	; (8000428 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80003fa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80003fc:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80003fe:	3104      	adds	r1, #4

08000400 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000400:	480a      	ldr	r0, [pc, #40]	; (800042c <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000402:	4b0b      	ldr	r3, [pc, #44]	; (8000430 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000404:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000406:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000408:	d3f6      	bcc.n	80003f8 <CopyDataInit>
  ldr r2, =_sbss
 800040a:	4a0a      	ldr	r2, [pc, #40]	; (8000434 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 800040c:	e002      	b.n	8000414 <LoopFillZerobss>

0800040e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800040e:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000410:	f842 3b04 	str.w	r3, [r2], #4

08000414 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000414:	4b08      	ldr	r3, [pc, #32]	; (8000438 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000416:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000418:	d3f9      	bcc.n	800040e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800041a:	f7ff ffb7 	bl	800038c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800041e:	f001 fa8d 	bl	800193c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000422:	f7ff fef5 	bl	8000210 <main>
  bx lr
 8000426:	4770      	bx	lr
  ldr r3, =_sidata
 8000428:	08001a88 	.word	0x08001a88
  ldr r0, =_sdata
 800042c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000430:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000434:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000438:	20000034 	.word	0x20000034

0800043c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800043c:	e7fe      	b.n	800043c <ADC1_2_IRQHandler>
	...

08000440 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000444:	4b08      	ldr	r3, [pc, #32]	; (8000468 <HAL_Init+0x28>)
 8000446:	681b      	ldr	r3, [r3, #0]
 8000448:	4a07      	ldr	r2, [pc, #28]	; (8000468 <HAL_Init+0x28>)
 800044a:	f043 0310 	orr.w	r3, r3, #16
 800044e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000450:	2003      	movs	r0, #3
 8000452:	f000 f8f5 	bl	8000640 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000456:	2000      	movs	r0, #0
 8000458:	f000 f808 	bl	800046c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800045c:	f7ff ff3a 	bl	80002d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000460:	2300      	movs	r3, #0
}
 8000462:	4618      	mov	r0, r3
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40022000 	.word	0x40022000

0800046c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b082      	sub	sp, #8
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000474:	4b12      	ldr	r3, [pc, #72]	; (80004c0 <HAL_InitTick+0x54>)
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	4b12      	ldr	r3, [pc, #72]	; (80004c4 <HAL_InitTick+0x58>)
 800047a:	781b      	ldrb	r3, [r3, #0]
 800047c:	4619      	mov	r1, r3
 800047e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000482:	fbb3 f3f1 	udiv	r3, r3, r1
 8000486:	fbb2 f3f3 	udiv	r3, r2, r3
 800048a:	4618      	mov	r0, r3
 800048c:	f000 f924 	bl	80006d8 <HAL_SYSTICK_Config>
 8000490:	4603      	mov	r3, r0
 8000492:	2b00      	cmp	r3, #0
 8000494:	d001      	beq.n	800049a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000496:	2301      	movs	r3, #1
 8000498:	e00e      	b.n	80004b8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	2b0f      	cmp	r3, #15
 800049e:	d80a      	bhi.n	80004b6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004a0:	2200      	movs	r2, #0
 80004a2:	6879      	ldr	r1, [r7, #4]
 80004a4:	f04f 30ff 	mov.w	r0, #4294967295
 80004a8:	f000 f8ea 	bl	8000680 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004ac:	4a06      	ldr	r2, [pc, #24]	; (80004c8 <HAL_InitTick+0x5c>)
 80004ae:	687b      	ldr	r3, [r7, #4]
 80004b0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80004b2:	2300      	movs	r3, #0
 80004b4:	e000      	b.n	80004b8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80004b6:	2301      	movs	r3, #1
}
 80004b8:	4618      	mov	r0, r3
 80004ba:	3708      	adds	r7, #8
 80004bc:	46bd      	mov	sp, r7
 80004be:	bd80      	pop	{r7, pc}
 80004c0:	20000000 	.word	0x20000000
 80004c4:	20000008 	.word	0x20000008
 80004c8:	20000004 	.word	0x20000004

080004cc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80004cc:	b480      	push	{r7}
 80004ce:	af00      	add	r7, sp, #0
  return uwTick;
 80004d0:	4b02      	ldr	r3, [pc, #8]	; (80004dc <HAL_GetTick+0x10>)
 80004d2:	681b      	ldr	r3, [r3, #0]
}
 80004d4:	4618      	mov	r0, r3
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bc80      	pop	{r7}
 80004da:	4770      	bx	lr
 80004dc:	2000002c 	.word	0x2000002c

080004e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	f003 0307 	and.w	r3, r3, #7
 80004ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80004f0:	4b0c      	ldr	r3, [pc, #48]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 80004f2:	68db      	ldr	r3, [r3, #12]
 80004f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80004f6:	68ba      	ldr	r2, [r7, #8]
 80004f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80004fc:	4013      	ands	r3, r2
 80004fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000508:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800050c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000510:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000512:	4a04      	ldr	r2, [pc, #16]	; (8000524 <__NVIC_SetPriorityGrouping+0x44>)
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	60d3      	str	r3, [r2, #12]
}
 8000518:	bf00      	nop
 800051a:	3714      	adds	r7, #20
 800051c:	46bd      	mov	sp, r7
 800051e:	bc80      	pop	{r7}
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	e000ed00 	.word	0xe000ed00

08000528 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000528:	b480      	push	{r7}
 800052a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800052c:	4b04      	ldr	r3, [pc, #16]	; (8000540 <__NVIC_GetPriorityGrouping+0x18>)
 800052e:	68db      	ldr	r3, [r3, #12]
 8000530:	0a1b      	lsrs	r3, r3, #8
 8000532:	f003 0307 	and.w	r3, r3, #7
}
 8000536:	4618      	mov	r0, r3
 8000538:	46bd      	mov	sp, r7
 800053a:	bc80      	pop	{r7}
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	e000ed00 	.word	0xe000ed00

08000544 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	6039      	str	r1, [r7, #0]
 800054e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000550:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000554:	2b00      	cmp	r3, #0
 8000556:	db0a      	blt.n	800056e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000558:	683b      	ldr	r3, [r7, #0]
 800055a:	b2da      	uxtb	r2, r3
 800055c:	490c      	ldr	r1, [pc, #48]	; (8000590 <__NVIC_SetPriority+0x4c>)
 800055e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000562:	0112      	lsls	r2, r2, #4
 8000564:	b2d2      	uxtb	r2, r2
 8000566:	440b      	add	r3, r1
 8000568:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800056c:	e00a      	b.n	8000584 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800056e:	683b      	ldr	r3, [r7, #0]
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4908      	ldr	r1, [pc, #32]	; (8000594 <__NVIC_SetPriority+0x50>)
 8000574:	79fb      	ldrb	r3, [r7, #7]
 8000576:	f003 030f 	and.w	r3, r3, #15
 800057a:	3b04      	subs	r3, #4
 800057c:	0112      	lsls	r2, r2, #4
 800057e:	b2d2      	uxtb	r2, r2
 8000580:	440b      	add	r3, r1
 8000582:	761a      	strb	r2, [r3, #24]
}
 8000584:	bf00      	nop
 8000586:	370c      	adds	r7, #12
 8000588:	46bd      	mov	sp, r7
 800058a:	bc80      	pop	{r7}
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop
 8000590:	e000e100 	.word	0xe000e100
 8000594:	e000ed00 	.word	0xe000ed00

08000598 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000598:	b480      	push	{r7}
 800059a:	b089      	sub	sp, #36	; 0x24
 800059c:	af00      	add	r7, sp, #0
 800059e:	60f8      	str	r0, [r7, #12]
 80005a0:	60b9      	str	r1, [r7, #8]
 80005a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	f003 0307 	and.w	r3, r3, #7
 80005aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80005ac:	69fb      	ldr	r3, [r7, #28]
 80005ae:	f1c3 0307 	rsb	r3, r3, #7
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	bf28      	it	cs
 80005b6:	2304      	movcs	r3, #4
 80005b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80005ba:	69fb      	ldr	r3, [r7, #28]
 80005bc:	3304      	adds	r3, #4
 80005be:	2b06      	cmp	r3, #6
 80005c0:	d902      	bls.n	80005c8 <NVIC_EncodePriority+0x30>
 80005c2:	69fb      	ldr	r3, [r7, #28]
 80005c4:	3b03      	subs	r3, #3
 80005c6:	e000      	b.n	80005ca <NVIC_EncodePriority+0x32>
 80005c8:	2300      	movs	r3, #0
 80005ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005cc:	f04f 32ff 	mov.w	r2, #4294967295
 80005d0:	69bb      	ldr	r3, [r7, #24]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	43da      	mvns	r2, r3
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	401a      	ands	r2, r3
 80005dc:	697b      	ldr	r3, [r7, #20]
 80005de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80005e0:	f04f 31ff 	mov.w	r1, #4294967295
 80005e4:	697b      	ldr	r3, [r7, #20]
 80005e6:	fa01 f303 	lsl.w	r3, r1, r3
 80005ea:	43d9      	mvns	r1, r3
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80005f0:	4313      	orrs	r3, r2
         );
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3724      	adds	r7, #36	; 0x24
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bc80      	pop	{r7}
 80005fa:	4770      	bx	lr

080005fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b082      	sub	sp, #8
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	3b01      	subs	r3, #1
 8000608:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800060c:	d301      	bcc.n	8000612 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800060e:	2301      	movs	r3, #1
 8000610:	e00f      	b.n	8000632 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000612:	4a0a      	ldr	r2, [pc, #40]	; (800063c <SysTick_Config+0x40>)
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	3b01      	subs	r3, #1
 8000618:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800061a:	210f      	movs	r1, #15
 800061c:	f04f 30ff 	mov.w	r0, #4294967295
 8000620:	f7ff ff90 	bl	8000544 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000624:	4b05      	ldr	r3, [pc, #20]	; (800063c <SysTick_Config+0x40>)
 8000626:	2200      	movs	r2, #0
 8000628:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800062a:	4b04      	ldr	r3, [pc, #16]	; (800063c <SysTick_Config+0x40>)
 800062c:	2207      	movs	r2, #7
 800062e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000630:	2300      	movs	r3, #0
}
 8000632:	4618      	mov	r0, r3
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	e000e010 	.word	0xe000e010

08000640 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b082      	sub	sp, #8
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2b07      	cmp	r3, #7
 800064c:	d00f      	beq.n	800066e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2b06      	cmp	r3, #6
 8000652:	d00c      	beq.n	800066e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	2b05      	cmp	r3, #5
 8000658:	d009      	beq.n	800066e <HAL_NVIC_SetPriorityGrouping+0x2e>
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b04      	cmp	r3, #4
 800065e:	d006      	beq.n	800066e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000660:	687b      	ldr	r3, [r7, #4]
 8000662:	2b03      	cmp	r3, #3
 8000664:	d003      	beq.n	800066e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8000666:	2192      	movs	r1, #146	; 0x92
 8000668:	4804      	ldr	r0, [pc, #16]	; (800067c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 800066a:	f7ff fe29 	bl	80002c0 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800066e:	6878      	ldr	r0, [r7, #4]
 8000670:	f7ff ff36 	bl	80004e0 <__NVIC_SetPriorityGrouping>
}
 8000674:	bf00      	nop
 8000676:	3708      	adds	r7, #8
 8000678:	46bd      	mov	sp, r7
 800067a:	bd80      	pop	{r7, pc}
 800067c:	080019ac 	.word	0x080019ac

08000680 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000680:	b580      	push	{r7, lr}
 8000682:	b086      	sub	sp, #24
 8000684:	af00      	add	r7, sp, #0
 8000686:	4603      	mov	r3, r0
 8000688:	60b9      	str	r1, [r7, #8]
 800068a:	607a      	str	r2, [r7, #4]
 800068c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	2b0f      	cmp	r3, #15
 8000696:	d903      	bls.n	80006a0 <HAL_NVIC_SetPriority+0x20>
 8000698:	21aa      	movs	r1, #170	; 0xaa
 800069a:	480e      	ldr	r0, [pc, #56]	; (80006d4 <HAL_NVIC_SetPriority+0x54>)
 800069c:	f7ff fe10 	bl	80002c0 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	2b0f      	cmp	r3, #15
 80006a4:	d903      	bls.n	80006ae <HAL_NVIC_SetPriority+0x2e>
 80006a6:	21ab      	movs	r1, #171	; 0xab
 80006a8:	480a      	ldr	r0, [pc, #40]	; (80006d4 <HAL_NVIC_SetPriority+0x54>)
 80006aa:	f7ff fe09 	bl	80002c0 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80006ae:	f7ff ff3b 	bl	8000528 <__NVIC_GetPriorityGrouping>
 80006b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80006b4:	687a      	ldr	r2, [r7, #4]
 80006b6:	68b9      	ldr	r1, [r7, #8]
 80006b8:	6978      	ldr	r0, [r7, #20]
 80006ba:	f7ff ff6d 	bl	8000598 <NVIC_EncodePriority>
 80006be:	4602      	mov	r2, r0
 80006c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80006c4:	4611      	mov	r1, r2
 80006c6:	4618      	mov	r0, r3
 80006c8:	f7ff ff3c 	bl	8000544 <__NVIC_SetPriority>
}
 80006cc:	bf00      	nop
 80006ce:	3718      	adds	r7, #24
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	080019ac 	.word	0x080019ac

080006d8 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006e0:	6878      	ldr	r0, [r7, #4]
 80006e2:	f7ff ff8b 	bl	80005fc <SysTick_Config>
 80006e6:	4603      	mov	r3, r0
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3708      	adds	r7, #8
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b08a      	sub	sp, #40	; 0x28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80006fa:	2300      	movs	r3, #0
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80006fe:	2300      	movs	r3, #0
 8000700:	623b      	str	r3, [r7, #32]
  __IO uint32_t *configregister; /* Store the address of CRL or CRH register based on pin number */
  uint32_t registeroffset;       /* offset used during computation of CNF and MODE bits placement inside CRL or CRH register */

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	4a9c      	ldr	r2, [pc, #624]	; (8000978 <HAL_GPIO_Init+0x288>)
 8000706:	4293      	cmp	r3, r2
 8000708:	d013      	beq.n	8000732 <HAL_GPIO_Init+0x42>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	4a9b      	ldr	r2, [pc, #620]	; (800097c <HAL_GPIO_Init+0x28c>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d00f      	beq.n	8000732 <HAL_GPIO_Init+0x42>
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	4a9a      	ldr	r2, [pc, #616]	; (8000980 <HAL_GPIO_Init+0x290>)
 8000716:	4293      	cmp	r3, r2
 8000718:	d00b      	beq.n	8000732 <HAL_GPIO_Init+0x42>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4a99      	ldr	r2, [pc, #612]	; (8000984 <HAL_GPIO_Init+0x294>)
 800071e:	4293      	cmp	r3, r2
 8000720:	d007      	beq.n	8000732 <HAL_GPIO_Init+0x42>
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	4a98      	ldr	r2, [pc, #608]	; (8000988 <HAL_GPIO_Init+0x298>)
 8000726:	4293      	cmp	r3, r2
 8000728:	d003      	beq.n	8000732 <HAL_GPIO_Init+0x42>
 800072a:	21bd      	movs	r1, #189	; 0xbd
 800072c:	4897      	ldr	r0, [pc, #604]	; (800098c <HAL_GPIO_Init+0x29c>)
 800072e:	f7ff fdc7 	bl	80002c0 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8000732:	683b      	ldr	r3, [r7, #0]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	b29b      	uxth	r3, r3
 8000738:	2b00      	cmp	r3, #0
 800073a:	d005      	beq.n	8000748 <HAL_GPIO_Init+0x58>
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	0c1b      	lsrs	r3, r3, #16
 8000742:	041b      	lsls	r3, r3, #16
 8000744:	2b00      	cmp	r3, #0
 8000746:	d003      	beq.n	8000750 <HAL_GPIO_Init+0x60>
 8000748:	21be      	movs	r1, #190	; 0xbe
 800074a:	4890      	ldr	r0, [pc, #576]	; (800098c <HAL_GPIO_Init+0x29c>)
 800074c:	f7ff fdb8 	bl	80002c0 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8000750:	683b      	ldr	r3, [r7, #0]
 8000752:	685b      	ldr	r3, [r3, #4]
 8000754:	2b00      	cmp	r3, #0
 8000756:	f000 81eb 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	685b      	ldr	r3, [r3, #4]
 800075e:	2b01      	cmp	r3, #1
 8000760:	f000 81e6 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 8000764:	683b      	ldr	r3, [r7, #0]
 8000766:	685b      	ldr	r3, [r3, #4]
 8000768:	2b11      	cmp	r3, #17
 800076a:	f000 81e1 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	685b      	ldr	r3, [r3, #4]
 8000772:	2b02      	cmp	r3, #2
 8000774:	f000 81dc 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	685b      	ldr	r3, [r3, #4]
 800077c:	2b12      	cmp	r3, #18
 800077e:	f000 81d7 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	685b      	ldr	r3, [r3, #4]
 8000786:	4a82      	ldr	r2, [pc, #520]	; (8000990 <HAL_GPIO_Init+0x2a0>)
 8000788:	4293      	cmp	r3, r2
 800078a:	f000 81d1 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 800078e:	683b      	ldr	r3, [r7, #0]
 8000790:	685b      	ldr	r3, [r3, #4]
 8000792:	4a80      	ldr	r2, [pc, #512]	; (8000994 <HAL_GPIO_Init+0x2a4>)
 8000794:	4293      	cmp	r3, r2
 8000796:	f000 81cb 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	685b      	ldr	r3, [r3, #4]
 800079e:	4a7e      	ldr	r2, [pc, #504]	; (8000998 <HAL_GPIO_Init+0x2a8>)
 80007a0:	4293      	cmp	r3, r2
 80007a2:	f000 81c5 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 80007a6:	683b      	ldr	r3, [r7, #0]
 80007a8:	685b      	ldr	r3, [r3, #4]
 80007aa:	4a7c      	ldr	r2, [pc, #496]	; (800099c <HAL_GPIO_Init+0x2ac>)
 80007ac:	4293      	cmp	r3, r2
 80007ae:	f000 81bf 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 80007b2:	683b      	ldr	r3, [r7, #0]
 80007b4:	685b      	ldr	r3, [r3, #4]
 80007b6:	4a7a      	ldr	r2, [pc, #488]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 80007b8:	4293      	cmp	r3, r2
 80007ba:	f000 81b9 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	685b      	ldr	r3, [r3, #4]
 80007c2:	4a78      	ldr	r2, [pc, #480]	; (80009a4 <HAL_GPIO_Init+0x2b4>)
 80007c4:	4293      	cmp	r3, r2
 80007c6:	f000 81b3 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 80007ca:	683b      	ldr	r3, [r7, #0]
 80007cc:	685b      	ldr	r3, [r3, #4]
 80007ce:	2b03      	cmp	r3, #3
 80007d0:	f000 81ae 	beq.w	8000b30 <HAL_GPIO_Init+0x440>
 80007d4:	21bf      	movs	r1, #191	; 0xbf
 80007d6:	486d      	ldr	r0, [pc, #436]	; (800098c <HAL_GPIO_Init+0x29c>)
 80007d8:	f7ff fd72 	bl	80002c0 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80007dc:	e1a8      	b.n	8000b30 <HAL_GPIO_Init+0x440>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80007de:	2201      	movs	r2, #1
 80007e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e2:	fa02 f303 	lsl.w	r3, r2, r3
 80007e6:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80007e8:	683b      	ldr	r3, [r7, #0]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	69fa      	ldr	r2, [r7, #28]
 80007ee:	4013      	ands	r3, r2
 80007f0:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80007f2:	69ba      	ldr	r2, [r7, #24]
 80007f4:	69fb      	ldr	r3, [r7, #28]
 80007f6:	429a      	cmp	r2, r3
 80007f8:	f040 8197 	bne.w	8000b2a <HAL_GPIO_Init+0x43a>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	4a5e      	ldr	r2, [pc, #376]	; (8000978 <HAL_GPIO_Init+0x288>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d013      	beq.n	800082c <HAL_GPIO_Init+0x13c>
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	4a5d      	ldr	r2, [pc, #372]	; (800097c <HAL_GPIO_Init+0x28c>)
 8000808:	4293      	cmp	r3, r2
 800080a:	d00f      	beq.n	800082c <HAL_GPIO_Init+0x13c>
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4a5c      	ldr	r2, [pc, #368]	; (8000980 <HAL_GPIO_Init+0x290>)
 8000810:	4293      	cmp	r3, r2
 8000812:	d00b      	beq.n	800082c <HAL_GPIO_Init+0x13c>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a5b      	ldr	r2, [pc, #364]	; (8000984 <HAL_GPIO_Init+0x294>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d007      	beq.n	800082c <HAL_GPIO_Init+0x13c>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a5a      	ldr	r2, [pc, #360]	; (8000988 <HAL_GPIO_Init+0x298>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d003      	beq.n	800082c <HAL_GPIO_Init+0x13c>
 8000824:	21cd      	movs	r1, #205	; 0xcd
 8000826:	4859      	ldr	r0, [pc, #356]	; (800098c <HAL_GPIO_Init+0x29c>)
 8000828:	f7ff fd4a 	bl	80002c0 <assert_failed>

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	2b12      	cmp	r3, #18
 8000832:	d065      	beq.n	8000900 <HAL_GPIO_Init+0x210>
 8000834:	2b12      	cmp	r3, #18
 8000836:	d80e      	bhi.n	8000856 <HAL_GPIO_Init+0x166>
 8000838:	2b02      	cmp	r3, #2
 800083a:	d04c      	beq.n	80008d6 <HAL_GPIO_Init+0x1e6>
 800083c:	2b02      	cmp	r3, #2
 800083e:	d804      	bhi.n	800084a <HAL_GPIO_Init+0x15a>
 8000840:	2b00      	cmp	r3, #0
 8000842:	d072      	beq.n	800092a <HAL_GPIO_Init+0x23a>
 8000844:	2b01      	cmp	r3, #1
 8000846:	d01d      	beq.n	8000884 <HAL_GPIO_Init+0x194>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000848:	e0b1      	b.n	80009ae <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 800084a:	2b03      	cmp	r3, #3
 800084c:	f000 80ac 	beq.w	80009a8 <HAL_GPIO_Init+0x2b8>
 8000850:	2b11      	cmp	r3, #17
 8000852:	d02b      	beq.n	80008ac <HAL_GPIO_Init+0x1bc>
          break;
 8000854:	e0ab      	b.n	80009ae <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000856:	4a4f      	ldr	r2, [pc, #316]	; (8000994 <HAL_GPIO_Init+0x2a4>)
 8000858:	4293      	cmp	r3, r2
 800085a:	d066      	beq.n	800092a <HAL_GPIO_Init+0x23a>
 800085c:	4a4d      	ldr	r2, [pc, #308]	; (8000994 <HAL_GPIO_Init+0x2a4>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d806      	bhi.n	8000870 <HAL_GPIO_Init+0x180>
 8000862:	4a4b      	ldr	r2, [pc, #300]	; (8000990 <HAL_GPIO_Init+0x2a0>)
 8000864:	4293      	cmp	r3, r2
 8000866:	d060      	beq.n	800092a <HAL_GPIO_Init+0x23a>
 8000868:	4a4c      	ldr	r2, [pc, #304]	; (800099c <HAL_GPIO_Init+0x2ac>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d05d      	beq.n	800092a <HAL_GPIO_Init+0x23a>
          break;
 800086e:	e09e      	b.n	80009ae <HAL_GPIO_Init+0x2be>
      switch (GPIO_Init->Mode)
 8000870:	4a49      	ldr	r2, [pc, #292]	; (8000998 <HAL_GPIO_Init+0x2a8>)
 8000872:	4293      	cmp	r3, r2
 8000874:	d059      	beq.n	800092a <HAL_GPIO_Init+0x23a>
 8000876:	4a4b      	ldr	r2, [pc, #300]	; (80009a4 <HAL_GPIO_Init+0x2b4>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d056      	beq.n	800092a <HAL_GPIO_Init+0x23a>
 800087c:	4a48      	ldr	r2, [pc, #288]	; (80009a0 <HAL_GPIO_Init+0x2b0>)
 800087e:	4293      	cmp	r3, r2
 8000880:	d053      	beq.n	800092a <HAL_GPIO_Init+0x23a>
          break;
 8000882:	e094      	b.n	80009ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000884:	683b      	ldr	r3, [r7, #0]
 8000886:	68db      	ldr	r3, [r3, #12]
 8000888:	2b02      	cmp	r3, #2
 800088a:	d00b      	beq.n	80008a4 <HAL_GPIO_Init+0x1b4>
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	68db      	ldr	r3, [r3, #12]
 8000890:	2b01      	cmp	r3, #1
 8000892:	d007      	beq.n	80008a4 <HAL_GPIO_Init+0x1b4>
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	68db      	ldr	r3, [r3, #12]
 8000898:	2b03      	cmp	r3, #3
 800089a:	d003      	beq.n	80008a4 <HAL_GPIO_Init+0x1b4>
 800089c:	21d5      	movs	r1, #213	; 0xd5
 800089e:	483b      	ldr	r0, [pc, #236]	; (800098c <HAL_GPIO_Init+0x29c>)
 80008a0:	f7ff fd0e 	bl	80002c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80008a4:	683b      	ldr	r3, [r7, #0]
 80008a6:	68db      	ldr	r3, [r3, #12]
 80008a8:	623b      	str	r3, [r7, #32]
          break;
 80008aa:	e080      	b.n	80009ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80008ac:	683b      	ldr	r3, [r7, #0]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	2b02      	cmp	r3, #2
 80008b2:	d00b      	beq.n	80008cc <HAL_GPIO_Init+0x1dc>
 80008b4:	683b      	ldr	r3, [r7, #0]
 80008b6:	68db      	ldr	r3, [r3, #12]
 80008b8:	2b01      	cmp	r3, #1
 80008ba:	d007      	beq.n	80008cc <HAL_GPIO_Init+0x1dc>
 80008bc:	683b      	ldr	r3, [r7, #0]
 80008be:	68db      	ldr	r3, [r3, #12]
 80008c0:	2b03      	cmp	r3, #3
 80008c2:	d003      	beq.n	80008cc <HAL_GPIO_Init+0x1dc>
 80008c4:	21dc      	movs	r1, #220	; 0xdc
 80008c6:	4831      	ldr	r0, [pc, #196]	; (800098c <HAL_GPIO_Init+0x29c>)
 80008c8:	f7ff fcfa 	bl	80002c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80008cc:	683b      	ldr	r3, [r7, #0]
 80008ce:	68db      	ldr	r3, [r3, #12]
 80008d0:	3304      	adds	r3, #4
 80008d2:	623b      	str	r3, [r7, #32]
          break;
 80008d4:	e06b      	b.n	80009ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80008d6:	683b      	ldr	r3, [r7, #0]
 80008d8:	68db      	ldr	r3, [r3, #12]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d00b      	beq.n	80008f6 <HAL_GPIO_Init+0x206>
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68db      	ldr	r3, [r3, #12]
 80008e2:	2b01      	cmp	r3, #1
 80008e4:	d007      	beq.n	80008f6 <HAL_GPIO_Init+0x206>
 80008e6:	683b      	ldr	r3, [r7, #0]
 80008e8:	68db      	ldr	r3, [r3, #12]
 80008ea:	2b03      	cmp	r3, #3
 80008ec:	d003      	beq.n	80008f6 <HAL_GPIO_Init+0x206>
 80008ee:	21e3      	movs	r1, #227	; 0xe3
 80008f0:	4826      	ldr	r0, [pc, #152]	; (800098c <HAL_GPIO_Init+0x29c>)
 80008f2:	f7ff fce5 	bl	80002c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80008f6:	683b      	ldr	r3, [r7, #0]
 80008f8:	68db      	ldr	r3, [r3, #12]
 80008fa:	3308      	adds	r3, #8
 80008fc:	623b      	str	r3, [r7, #32]
          break;
 80008fe:	e056      	b.n	80009ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	68db      	ldr	r3, [r3, #12]
 8000904:	2b02      	cmp	r3, #2
 8000906:	d00b      	beq.n	8000920 <HAL_GPIO_Init+0x230>
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	68db      	ldr	r3, [r3, #12]
 800090c:	2b01      	cmp	r3, #1
 800090e:	d007      	beq.n	8000920 <HAL_GPIO_Init+0x230>
 8000910:	683b      	ldr	r3, [r7, #0]
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	2b03      	cmp	r3, #3
 8000916:	d003      	beq.n	8000920 <HAL_GPIO_Init+0x230>
 8000918:	21ea      	movs	r1, #234	; 0xea
 800091a:	481c      	ldr	r0, [pc, #112]	; (800098c <HAL_GPIO_Init+0x29c>)
 800091c:	f7ff fcd0 	bl	80002c0 <assert_failed>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000920:	683b      	ldr	r3, [r7, #0]
 8000922:	68db      	ldr	r3, [r3, #12]
 8000924:	330c      	adds	r3, #12
 8000926:	623b      	str	r3, [r7, #32]
          break;
 8000928:	e041      	b.n	80009ae <HAL_GPIO_Init+0x2be>
          assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800092a:	683b      	ldr	r3, [r7, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00b      	beq.n	800094a <HAL_GPIO_Init+0x25a>
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	689b      	ldr	r3, [r3, #8]
 8000936:	2b01      	cmp	r3, #1
 8000938:	d007      	beq.n	800094a <HAL_GPIO_Init+0x25a>
 800093a:	683b      	ldr	r3, [r7, #0]
 800093c:	689b      	ldr	r3, [r3, #8]
 800093e:	2b02      	cmp	r3, #2
 8000940:	d003      	beq.n	800094a <HAL_GPIO_Init+0x25a>
 8000942:	21f7      	movs	r1, #247	; 0xf7
 8000944:	4811      	ldr	r0, [pc, #68]	; (800098c <HAL_GPIO_Init+0x29c>)
 8000946:	f7ff fcbb 	bl	80002c0 <assert_failed>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800094a:	683b      	ldr	r3, [r7, #0]
 800094c:	689b      	ldr	r3, [r3, #8]
 800094e:	2b00      	cmp	r3, #0
 8000950:	d102      	bne.n	8000958 <HAL_GPIO_Init+0x268>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000952:	2304      	movs	r3, #4
 8000954:	623b      	str	r3, [r7, #32]
          break;
 8000956:	e02a      	b.n	80009ae <HAL_GPIO_Init+0x2be>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	689b      	ldr	r3, [r3, #8]
 800095c:	2b01      	cmp	r3, #1
 800095e:	d105      	bne.n	800096c <HAL_GPIO_Init+0x27c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000960:	2308      	movs	r3, #8
 8000962:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	69fa      	ldr	r2, [r7, #28]
 8000968:	611a      	str	r2, [r3, #16]
          break;
 800096a:	e020      	b.n	80009ae <HAL_GPIO_Init+0x2be>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800096c:	2308      	movs	r3, #8
 800096e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	69fa      	ldr	r2, [r7, #28]
 8000974:	615a      	str	r2, [r3, #20]
          break;
 8000976:	e01a      	b.n	80009ae <HAL_GPIO_Init+0x2be>
 8000978:	40010800 	.word	0x40010800
 800097c:	40010c00 	.word	0x40010c00
 8000980:	40011000 	.word	0x40011000
 8000984:	40011400 	.word	0x40011400
 8000988:	40011800 	.word	0x40011800
 800098c:	080019e8 	.word	0x080019e8
 8000990:	10110000 	.word	0x10110000
 8000994:	10210000 	.word	0x10210000
 8000998:	10310000 	.word	0x10310000
 800099c:	10120000 	.word	0x10120000
 80009a0:	10220000 	.word	0x10220000
 80009a4:	10320000 	.word	0x10320000
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80009a8:	2300      	movs	r3, #0
 80009aa:	623b      	str	r3, [r7, #32]
          break;
 80009ac:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80009ae:	69bb      	ldr	r3, [r7, #24]
 80009b0:	2bff      	cmp	r3, #255	; 0xff
 80009b2:	d801      	bhi.n	80009b8 <HAL_GPIO_Init+0x2c8>
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	e001      	b.n	80009bc <HAL_GPIO_Init+0x2cc>
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	3304      	adds	r3, #4
 80009bc:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80009be:	69bb      	ldr	r3, [r7, #24]
 80009c0:	2bff      	cmp	r3, #255	; 0xff
 80009c2:	d802      	bhi.n	80009ca <HAL_GPIO_Init+0x2da>
 80009c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009c6:	009b      	lsls	r3, r3, #2
 80009c8:	e002      	b.n	80009d0 <HAL_GPIO_Init+0x2e0>
 80009ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009cc:	3b08      	subs	r3, #8
 80009ce:	009b      	lsls	r3, r3, #2
 80009d0:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80009d2:	697b      	ldr	r3, [r7, #20]
 80009d4:	681a      	ldr	r2, [r3, #0]
 80009d6:	210f      	movs	r1, #15
 80009d8:	693b      	ldr	r3, [r7, #16]
 80009da:	fa01 f303 	lsl.w	r3, r1, r3
 80009de:	43db      	mvns	r3, r3
 80009e0:	401a      	ands	r2, r3
 80009e2:	6a39      	ldr	r1, [r7, #32]
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	fa01 f303 	lsl.w	r3, r1, r3
 80009ea:	431a      	orrs	r2, r3
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	f000 8096 	beq.w	8000b2a <HAL_GPIO_Init+0x43a>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80009fe:	4b52      	ldr	r3, [pc, #328]	; (8000b48 <HAL_GPIO_Init+0x458>)
 8000a00:	699b      	ldr	r3, [r3, #24]
 8000a02:	4a51      	ldr	r2, [pc, #324]	; (8000b48 <HAL_GPIO_Init+0x458>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	6193      	str	r3, [r2, #24]
 8000a0a:	4b4f      	ldr	r3, [pc, #316]	; (8000b48 <HAL_GPIO_Init+0x458>)
 8000a0c:	699b      	ldr	r3, [r3, #24]
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	60bb      	str	r3, [r7, #8]
 8000a14:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000a16:	4a4d      	ldr	r2, [pc, #308]	; (8000b4c <HAL_GPIO_Init+0x45c>)
 8000a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a1a:	089b      	lsrs	r3, r3, #2
 8000a1c:	3302      	adds	r3, #2
 8000a1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a22:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a26:	f003 0303 	and.w	r3, r3, #3
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	220f      	movs	r2, #15
 8000a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a32:	43db      	mvns	r3, r3
 8000a34:	68fa      	ldr	r2, [r7, #12]
 8000a36:	4013      	ands	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4a44      	ldr	r2, [pc, #272]	; (8000b50 <HAL_GPIO_Init+0x460>)
 8000a3e:	4293      	cmp	r3, r2
 8000a40:	d013      	beq.n	8000a6a <HAL_GPIO_Init+0x37a>
 8000a42:	687b      	ldr	r3, [r7, #4]
 8000a44:	4a43      	ldr	r2, [pc, #268]	; (8000b54 <HAL_GPIO_Init+0x464>)
 8000a46:	4293      	cmp	r3, r2
 8000a48:	d00d      	beq.n	8000a66 <HAL_GPIO_Init+0x376>
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	4a42      	ldr	r2, [pc, #264]	; (8000b58 <HAL_GPIO_Init+0x468>)
 8000a4e:	4293      	cmp	r3, r2
 8000a50:	d007      	beq.n	8000a62 <HAL_GPIO_Init+0x372>
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	4a41      	ldr	r2, [pc, #260]	; (8000b5c <HAL_GPIO_Init+0x46c>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d101      	bne.n	8000a5e <HAL_GPIO_Init+0x36e>
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	e006      	b.n	8000a6c <HAL_GPIO_Init+0x37c>
 8000a5e:	2304      	movs	r3, #4
 8000a60:	e004      	b.n	8000a6c <HAL_GPIO_Init+0x37c>
 8000a62:	2302      	movs	r3, #2
 8000a64:	e002      	b.n	8000a6c <HAL_GPIO_Init+0x37c>
 8000a66:	2301      	movs	r3, #1
 8000a68:	e000      	b.n	8000a6c <HAL_GPIO_Init+0x37c>
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000a6e:	f002 0203 	and.w	r2, r2, #3
 8000a72:	0092      	lsls	r2, r2, #2
 8000a74:	4093      	lsls	r3, r2
 8000a76:	68fa      	ldr	r2, [r7, #12]
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000a7c:	4933      	ldr	r1, [pc, #204]	; (8000b4c <HAL_GPIO_Init+0x45c>)
 8000a7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000a80:	089b      	lsrs	r3, r3, #2
 8000a82:	3302      	adds	r3, #2
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a8a:	683b      	ldr	r3, [r7, #0]
 8000a8c:	685b      	ldr	r3, [r3, #4]
 8000a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d006      	beq.n	8000aa4 <HAL_GPIO_Init+0x3b4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000a96:	4b32      	ldr	r3, [pc, #200]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000a98:	681a      	ldr	r2, [r3, #0]
 8000a9a:	4931      	ldr	r1, [pc, #196]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	4313      	orrs	r3, r2
 8000aa0:	600b      	str	r3, [r1, #0]
 8000aa2:	e006      	b.n	8000ab2 <HAL_GPIO_Init+0x3c2>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000aa4:	4b2e      	ldr	r3, [pc, #184]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000aa6:	681a      	ldr	r2, [r3, #0]
 8000aa8:	69bb      	ldr	r3, [r7, #24]
 8000aaa:	43db      	mvns	r3, r3
 8000aac:	492c      	ldr	r1, [pc, #176]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000aae:	4013      	ands	r3, r2
 8000ab0:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000ab2:	683b      	ldr	r3, [r7, #0]
 8000ab4:	685b      	ldr	r3, [r3, #4]
 8000ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d006      	beq.n	8000acc <HAL_GPIO_Init+0x3dc>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000abe:	4b28      	ldr	r3, [pc, #160]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000ac0:	685a      	ldr	r2, [r3, #4]
 8000ac2:	4927      	ldr	r1, [pc, #156]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	4313      	orrs	r3, r2
 8000ac8:	604b      	str	r3, [r1, #4]
 8000aca:	e006      	b.n	8000ada <HAL_GPIO_Init+0x3ea>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000acc:	4b24      	ldr	r3, [pc, #144]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000ace:	685a      	ldr	r2, [r3, #4]
 8000ad0:	69bb      	ldr	r3, [r7, #24]
 8000ad2:	43db      	mvns	r3, r3
 8000ad4:	4922      	ldr	r1, [pc, #136]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000ad6:	4013      	ands	r3, r2
 8000ad8:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000ada:	683b      	ldr	r3, [r7, #0]
 8000adc:	685b      	ldr	r3, [r3, #4]
 8000ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d006      	beq.n	8000af4 <HAL_GPIO_Init+0x404>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000ae6:	4b1e      	ldr	r3, [pc, #120]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000ae8:	689a      	ldr	r2, [r3, #8]
 8000aea:	491d      	ldr	r1, [pc, #116]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000aec:	69bb      	ldr	r3, [r7, #24]
 8000aee:	4313      	orrs	r3, r2
 8000af0:	608b      	str	r3, [r1, #8]
 8000af2:	e006      	b.n	8000b02 <HAL_GPIO_Init+0x412>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000af6:	689a      	ldr	r2, [r3, #8]
 8000af8:	69bb      	ldr	r3, [r7, #24]
 8000afa:	43db      	mvns	r3, r3
 8000afc:	4918      	ldr	r1, [pc, #96]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000afe:	4013      	ands	r3, r2
 8000b00:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	685b      	ldr	r3, [r3, #4]
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d006      	beq.n	8000b1c <HAL_GPIO_Init+0x42c>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000b0e:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000b10:	68da      	ldr	r2, [r3, #12]
 8000b12:	4913      	ldr	r1, [pc, #76]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000b14:	69bb      	ldr	r3, [r7, #24]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	60cb      	str	r3, [r1, #12]
 8000b1a:	e006      	b.n	8000b2a <HAL_GPIO_Init+0x43a>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000b1c:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000b1e:	68da      	ldr	r2, [r3, #12]
 8000b20:	69bb      	ldr	r3, [r7, #24]
 8000b22:	43db      	mvns	r3, r3
 8000b24:	490e      	ldr	r1, [pc, #56]	; (8000b60 <HAL_GPIO_Init+0x470>)
 8000b26:	4013      	ands	r3, r2
 8000b28:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8000b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000b30:	683b      	ldr	r3, [r7, #0]
 8000b32:	681a      	ldr	r2, [r3, #0]
 8000b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b36:	fa22 f303 	lsr.w	r3, r2, r3
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	f47f ae4f 	bne.w	80007de <HAL_GPIO_Init+0xee>
  }
}
 8000b40:	bf00      	nop
 8000b42:	3728      	adds	r7, #40	; 0x28
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	40010000 	.word	0x40010000
 8000b50:	40010800 	.word	0x40010800
 8000b54:	40010c00 	.word	0x40010c00
 8000b58:	40011000 	.word	0x40011000
 8000b5c:	40011400 	.word	0x40011400
 8000b60:	40010400 	.word	0x40010400

08000b64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b082      	sub	sp, #8
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
 8000b6c:	460b      	mov	r3, r1
 8000b6e:	807b      	strh	r3, [r7, #2]
 8000b70:	4613      	mov	r3, r2
 8000b72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8000b74:	887b      	ldrh	r3, [r7, #2]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	d004      	beq.n	8000b84 <HAL_GPIO_WritePin+0x20>
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	0c1b      	lsrs	r3, r3, #16
 8000b7e:	041b      	lsls	r3, r3, #16
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d004      	beq.n	8000b8e <HAL_GPIO_WritePin+0x2a>
 8000b84:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
 8000b88:	480e      	ldr	r0, [pc, #56]	; (8000bc4 <HAL_GPIO_WritePin+0x60>)
 8000b8a:	f7ff fb99 	bl	80002c0 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8000b8e:	787b      	ldrb	r3, [r7, #1]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d007      	beq.n	8000ba4 <HAL_GPIO_WritePin+0x40>
 8000b94:	787b      	ldrb	r3, [r7, #1]
 8000b96:	2b01      	cmp	r3, #1
 8000b98:	d004      	beq.n	8000ba4 <HAL_GPIO_WritePin+0x40>
 8000b9a:	f240 11d5 	movw	r1, #469	; 0x1d5
 8000b9e:	4809      	ldr	r0, [pc, #36]	; (8000bc4 <HAL_GPIO_WritePin+0x60>)
 8000ba0:	f7ff fb8e 	bl	80002c0 <assert_failed>

  if (PinState != GPIO_PIN_RESET)
 8000ba4:	787b      	ldrb	r3, [r7, #1]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d003      	beq.n	8000bb2 <HAL_GPIO_WritePin+0x4e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000baa:	887a      	ldrh	r2, [r7, #2]
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000bb0:	e003      	b.n	8000bba <HAL_GPIO_WritePin+0x56>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	041a      	lsls	r2, r3, #16
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	611a      	str	r2, [r3, #16]
}
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	080019e8 	.word	0x080019e8

08000bc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b086      	sub	sp, #24
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d101      	bne.n	8000bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	e35c      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d01c      	beq.n	8000c1c <HAL_RCC_OscConfig+0x54>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d116      	bne.n	8000c1c <HAL_RCC_OscConfig+0x54>
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	f003 0302 	and.w	r3, r3, #2
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d110      	bne.n	8000c1c <HAL_RCC_OscConfig+0x54>
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	681b      	ldr	r3, [r3, #0]
 8000bfe:	f003 0308 	and.w	r3, r3, #8
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d10a      	bne.n	8000c1c <HAL_RCC_OscConfig+0x54>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	f003 0304 	and.w	r3, r3, #4
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d104      	bne.n	8000c1c <HAL_RCC_OscConfig+0x54>
 8000c12:	f240 1167 	movw	r1, #359	; 0x167
 8000c16:	48a5      	ldr	r0, [pc, #660]	; (8000eac <HAL_RCC_OscConfig+0x2e4>)
 8000c18:	f7ff fb52 	bl	80002c0 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	f003 0301 	and.w	r3, r3, #1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	f000 809a 	beq.w	8000d5e <HAL_RCC_OscConfig+0x196>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d00e      	beq.n	8000c50 <HAL_RCC_OscConfig+0x88>
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	685b      	ldr	r3, [r3, #4]
 8000c36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c3a:	d009      	beq.n	8000c50 <HAL_RCC_OscConfig+0x88>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c44:	d004      	beq.n	8000c50 <HAL_RCC_OscConfig+0x88>
 8000c46:	f240 116d 	movw	r1, #365	; 0x16d
 8000c4a:	4898      	ldr	r0, [pc, #608]	; (8000eac <HAL_RCC_OscConfig+0x2e4>)
 8000c4c:	f7ff fb38 	bl	80002c0 <assert_failed>

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000c50:	4b97      	ldr	r3, [pc, #604]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	f003 030c 	and.w	r3, r3, #12
 8000c58:	2b04      	cmp	r3, #4
 8000c5a:	d00c      	beq.n	8000c76 <HAL_RCC_OscConfig+0xae>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000c5c:	4b94      	ldr	r3, [pc, #592]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	f003 030c 	and.w	r3, r3, #12
 8000c64:	2b08      	cmp	r3, #8
 8000c66:	d112      	bne.n	8000c8e <HAL_RCC_OscConfig+0xc6>
 8000c68:	4b91      	ldr	r3, [pc, #580]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c74:	d10b      	bne.n	8000c8e <HAL_RCC_OscConfig+0xc6>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c76:	4b8e      	ldr	r3, [pc, #568]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d06c      	beq.n	8000d5c <HAL_RCC_OscConfig+0x194>
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	685b      	ldr	r3, [r3, #4]
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d168      	bne.n	8000d5c <HAL_RCC_OscConfig+0x194>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e302      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c96:	d106      	bne.n	8000ca6 <HAL_RCC_OscConfig+0xde>
 8000c98:	4b85      	ldr	r3, [pc, #532]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	4a84      	ldr	r2, [pc, #528]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000c9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ca2:	6013      	str	r3, [r2, #0]
 8000ca4:	e02e      	b.n	8000d04 <HAL_RCC_OscConfig+0x13c>
 8000ca6:	687b      	ldr	r3, [r7, #4]
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d10c      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x100>
 8000cae:	4b80      	ldr	r3, [pc, #512]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4a7f      	ldr	r2, [pc, #508]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cb4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cb8:	6013      	str	r3, [r2, #0]
 8000cba:	4b7d      	ldr	r3, [pc, #500]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a7c      	ldr	r2, [pc, #496]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	e01d      	b.n	8000d04 <HAL_RCC_OscConfig+0x13c>
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cd0:	d10c      	bne.n	8000cec <HAL_RCC_OscConfig+0x124>
 8000cd2:	4b77      	ldr	r3, [pc, #476]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	4a76      	ldr	r2, [pc, #472]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cdc:	6013      	str	r3, [r2, #0]
 8000cde:	4b74      	ldr	r3, [pc, #464]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	4a73      	ldr	r2, [pc, #460]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000ce4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ce8:	6013      	str	r3, [r2, #0]
 8000cea:	e00b      	b.n	8000d04 <HAL_RCC_OscConfig+0x13c>
 8000cec:	4b70      	ldr	r3, [pc, #448]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a6f      	ldr	r2, [pc, #444]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cf2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cf6:	6013      	str	r3, [r2, #0]
 8000cf8:	4b6d      	ldr	r3, [pc, #436]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	4a6c      	ldr	r2, [pc, #432]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000cfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	2b00      	cmp	r3, #0
 8000d0a:	d013      	beq.n	8000d34 <HAL_RCC_OscConfig+0x16c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d0c:	f7ff fbde 	bl	80004cc <HAL_GetTick>
 8000d10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d12:	e008      	b.n	8000d26 <HAL_RCC_OscConfig+0x15e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d14:	f7ff fbda 	bl	80004cc <HAL_GetTick>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	693b      	ldr	r3, [r7, #16]
 8000d1c:	1ad3      	subs	r3, r2, r3
 8000d1e:	2b64      	cmp	r3, #100	; 0x64
 8000d20:	d901      	bls.n	8000d26 <HAL_RCC_OscConfig+0x15e>
          {
            return HAL_TIMEOUT;
 8000d22:	2303      	movs	r3, #3
 8000d24:	e2b6      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d26:	4b62      	ldr	r3, [pc, #392]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d0f0      	beq.n	8000d14 <HAL_RCC_OscConfig+0x14c>
 8000d32:	e014      	b.n	8000d5e <HAL_RCC_OscConfig+0x196>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d34:	f7ff fbca 	bl	80004cc <HAL_GetTick>
 8000d38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d3a:	e008      	b.n	8000d4e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8000d3c:	f7ff fbc6 	bl	80004cc <HAL_GetTick>
 8000d40:	4602      	mov	r2, r0
 8000d42:	693b      	ldr	r3, [r7, #16]
 8000d44:	1ad3      	subs	r3, r2, r3
 8000d46:	2b64      	cmp	r3, #100	; 0x64
 8000d48:	d901      	bls.n	8000d4e <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	e2a2      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d4e:	4b58      	ldr	r3, [pc, #352]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d1f0      	bne.n	8000d3c <HAL_RCC_OscConfig+0x174>
 8000d5a:	e000      	b.n	8000d5e <HAL_RCC_OscConfig+0x196>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0302 	and.w	r3, r3, #2
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d079      	beq.n	8000e5e <HAL_RCC_OscConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	691b      	ldr	r3, [r3, #16]
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d008      	beq.n	8000d84 <HAL_RCC_OscConfig+0x1bc>
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	691b      	ldr	r3, [r3, #16]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d004      	beq.n	8000d84 <HAL_RCC_OscConfig+0x1bc>
 8000d7a:	f240 11a1 	movw	r1, #417	; 0x1a1
 8000d7e:	484b      	ldr	r0, [pc, #300]	; (8000eac <HAL_RCC_OscConfig+0x2e4>)
 8000d80:	f7ff fa9e 	bl	80002c0 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	695b      	ldr	r3, [r3, #20]
 8000d88:	2b1f      	cmp	r3, #31
 8000d8a:	d904      	bls.n	8000d96 <HAL_RCC_OscConfig+0x1ce>
 8000d8c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8000d90:	4846      	ldr	r0, [pc, #280]	; (8000eac <HAL_RCC_OscConfig+0x2e4>)
 8000d92:	f7ff fa95 	bl	80002c0 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d96:	4b46      	ldr	r3, [pc, #280]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f003 030c 	and.w	r3, r3, #12
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d00b      	beq.n	8000dba <HAL_RCC_OscConfig+0x1f2>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8000da2:	4b43      	ldr	r3, [pc, #268]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 030c 	and.w	r3, r3, #12
 8000daa:	2b08      	cmp	r3, #8
 8000dac:	d11c      	bne.n	8000de8 <HAL_RCC_OscConfig+0x220>
 8000dae:	4b40      	ldr	r3, [pc, #256]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d116      	bne.n	8000de8 <HAL_RCC_OscConfig+0x220>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000dba:	4b3d      	ldr	r3, [pc, #244]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000dbc:	681b      	ldr	r3, [r3, #0]
 8000dbe:	f003 0302 	and.w	r3, r3, #2
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d005      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x20a>
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	691b      	ldr	r3, [r3, #16]
 8000dca:	2b01      	cmp	r3, #1
 8000dcc:	d001      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x20a>
      {
        return HAL_ERROR;
 8000dce:	2301      	movs	r3, #1
 8000dd0:	e260      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd2:	4b37      	ldr	r3, [pc, #220]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	695b      	ldr	r3, [r3, #20]
 8000dde:	00db      	lsls	r3, r3, #3
 8000de0:	4933      	ldr	r1, [pc, #204]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000de6:	e03a      	b.n	8000e5e <HAL_RCC_OscConfig+0x296>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	691b      	ldr	r3, [r3, #16]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d020      	beq.n	8000e32 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000df0:	4b30      	ldr	r3, [pc, #192]	; (8000eb4 <HAL_RCC_OscConfig+0x2ec>)
 8000df2:	2201      	movs	r2, #1
 8000df4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000df6:	f7ff fb69 	bl	80004cc <HAL_GetTick>
 8000dfa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dfc:	e008      	b.n	8000e10 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000dfe:	f7ff fb65 	bl	80004cc <HAL_GetTick>
 8000e02:	4602      	mov	r2, r0
 8000e04:	693b      	ldr	r3, [r7, #16]
 8000e06:	1ad3      	subs	r3, r2, r3
 8000e08:	2b02      	cmp	r3, #2
 8000e0a:	d901      	bls.n	8000e10 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8000e0c:	2303      	movs	r3, #3
 8000e0e:	e241      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000e10:	4b27      	ldr	r3, [pc, #156]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f003 0302 	and.w	r3, r3, #2
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d0f0      	beq.n	8000dfe <HAL_RCC_OscConfig+0x236>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	695b      	ldr	r3, [r3, #20]
 8000e28:	00db      	lsls	r3, r3, #3
 8000e2a:	4921      	ldr	r1, [pc, #132]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	600b      	str	r3, [r1, #0]
 8000e30:	e015      	b.n	8000e5e <HAL_RCC_OscConfig+0x296>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000e32:	4b20      	ldr	r3, [pc, #128]	; (8000eb4 <HAL_RCC_OscConfig+0x2ec>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e38:	f7ff fb48 	bl	80004cc <HAL_GetTick>
 8000e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e3e:	e008      	b.n	8000e52 <HAL_RCC_OscConfig+0x28a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8000e40:	f7ff fb44 	bl	80004cc <HAL_GetTick>
 8000e44:	4602      	mov	r2, r0
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	1ad3      	subs	r3, r2, r3
 8000e4a:	2b02      	cmp	r3, #2
 8000e4c:	d901      	bls.n	8000e52 <HAL_RCC_OscConfig+0x28a>
          {
            return HAL_TIMEOUT;
 8000e4e:	2303      	movs	r3, #3
 8000e50:	e220      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e52:	4b17      	ldr	r3, [pc, #92]	; (8000eb0 <HAL_RCC_OscConfig+0x2e8>)
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	f003 0302 	and.w	r3, r3, #2
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d1f0      	bne.n	8000e40 <HAL_RCC_OscConfig+0x278>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d048      	beq.n	8000efc <HAL_RCC_OscConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	699b      	ldr	r3, [r3, #24]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d008      	beq.n	8000e84 <HAL_RCC_OscConfig+0x2bc>
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	699b      	ldr	r3, [r3, #24]
 8000e76:	2b01      	cmp	r3, #1
 8000e78:	d004      	beq.n	8000e84 <HAL_RCC_OscConfig+0x2bc>
 8000e7a:	f44f 71f1 	mov.w	r1, #482	; 0x1e2
 8000e7e:	480b      	ldr	r0, [pc, #44]	; (8000eac <HAL_RCC_OscConfig+0x2e4>)
 8000e80:	f7ff fa1e 	bl	80002c0 <assert_failed>

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	699b      	ldr	r3, [r3, #24]
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d021      	beq.n	8000ed0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e8c:	4b0a      	ldr	r3, [pc, #40]	; (8000eb8 <HAL_RCC_OscConfig+0x2f0>)
 8000e8e:	2201      	movs	r2, #1
 8000e90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e92:	f7ff fb1b 	bl	80004cc <HAL_GetTick>
 8000e96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e98:	e010      	b.n	8000ebc <HAL_RCC_OscConfig+0x2f4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000e9a:	f7ff fb17 	bl	80004cc <HAL_GetTick>
 8000e9e:	4602      	mov	r2, r0
 8000ea0:	693b      	ldr	r3, [r7, #16]
 8000ea2:	1ad3      	subs	r3, r2, r3
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d909      	bls.n	8000ebc <HAL_RCC_OscConfig+0x2f4>
        {
          return HAL_TIMEOUT;
 8000ea8:	2303      	movs	r3, #3
 8000eaa:	e1f3      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
 8000eac:	08001a24 	.word	0x08001a24
 8000eb0:	40021000 	.word	0x40021000
 8000eb4:	42420000 	.word	0x42420000
 8000eb8:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000ebc:	4b67      	ldr	r3, [pc, #412]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ec0:	f003 0302 	and.w	r3, r3, #2
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0e8      	beq.n	8000e9a <HAL_RCC_OscConfig+0x2d2>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8000ec8:	2001      	movs	r0, #1
 8000eca:	f000 fbdf 	bl	800168c <RCC_Delay>
 8000ece:	e015      	b.n	8000efc <HAL_RCC_OscConfig+0x334>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ed0:	4b63      	ldr	r3, [pc, #396]	; (8001060 <HAL_RCC_OscConfig+0x498>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ed6:	f7ff faf9 	bl	80004cc <HAL_GetTick>
 8000eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000edc:	e008      	b.n	8000ef0 <HAL_RCC_OscConfig+0x328>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8000ede:	f7ff faf5 	bl	80004cc <HAL_GetTick>
 8000ee2:	4602      	mov	r2, r0
 8000ee4:	693b      	ldr	r3, [r7, #16]
 8000ee6:	1ad3      	subs	r3, r2, r3
 8000ee8:	2b02      	cmp	r3, #2
 8000eea:	d901      	bls.n	8000ef0 <HAL_RCC_OscConfig+0x328>
        {
          return HAL_TIMEOUT;
 8000eec:	2303      	movs	r3, #3
 8000eee:	e1d1      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000ef0:	4b5a      	ldr	r3, [pc, #360]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ef4:	f003 0302 	and.w	r3, r3, #2
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	d1f0      	bne.n	8000ede <HAL_RCC_OscConfig+0x316>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0304 	and.w	r3, r3, #4
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 80c0 	beq.w	800108a <HAL_RCC_OscConfig+0x4c2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	68db      	ldr	r3, [r3, #12]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d00c      	beq.n	8000f30 <HAL_RCC_OscConfig+0x368>
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	68db      	ldr	r3, [r3, #12]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d008      	beq.n	8000f30 <HAL_RCC_OscConfig+0x368>
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	68db      	ldr	r3, [r3, #12]
 8000f22:	2b05      	cmp	r3, #5
 8000f24:	d004      	beq.n	8000f30 <HAL_RCC_OscConfig+0x368>
 8000f26:	f240 2111 	movw	r1, #529	; 0x211
 8000f2a:	484e      	ldr	r0, [pc, #312]	; (8001064 <HAL_RCC_OscConfig+0x49c>)
 8000f2c:	f7ff f9c8 	bl	80002c0 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f30:	4b4a      	ldr	r3, [pc, #296]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000f32:	69db      	ldr	r3, [r3, #28]
 8000f34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10d      	bne.n	8000f58 <HAL_RCC_OscConfig+0x390>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f3c:	4b47      	ldr	r3, [pc, #284]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	4a46      	ldr	r2, [pc, #280]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000f42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f46:	61d3      	str	r3, [r2, #28]
 8000f48:	4b44      	ldr	r3, [pc, #272]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000f4a:	69db      	ldr	r3, [r3, #28]
 8000f4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f50:	60bb      	str	r3, [r7, #8]
 8000f52:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000f54:	2301      	movs	r3, #1
 8000f56:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f58:	4b43      	ldr	r3, [pc, #268]	; (8001068 <HAL_RCC_OscConfig+0x4a0>)
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d118      	bne.n	8000f96 <HAL_RCC_OscConfig+0x3ce>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000f64:	4b40      	ldr	r3, [pc, #256]	; (8001068 <HAL_RCC_OscConfig+0x4a0>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	4a3f      	ldr	r2, [pc, #252]	; (8001068 <HAL_RCC_OscConfig+0x4a0>)
 8000f6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f6e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000f70:	f7ff faac 	bl	80004cc <HAL_GetTick>
 8000f74:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f76:	e008      	b.n	8000f8a <HAL_RCC_OscConfig+0x3c2>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000f78:	f7ff faa8 	bl	80004cc <HAL_GetTick>
 8000f7c:	4602      	mov	r2, r0
 8000f7e:	693b      	ldr	r3, [r7, #16]
 8000f80:	1ad3      	subs	r3, r2, r3
 8000f82:	2b64      	cmp	r3, #100	; 0x64
 8000f84:	d901      	bls.n	8000f8a <HAL_RCC_OscConfig+0x3c2>
        {
          return HAL_TIMEOUT;
 8000f86:	2303      	movs	r3, #3
 8000f88:	e184      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f8a:	4b37      	ldr	r3, [pc, #220]	; (8001068 <HAL_RCC_OscConfig+0x4a0>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d0f0      	beq.n	8000f78 <HAL_RCC_OscConfig+0x3b0>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	68db      	ldr	r3, [r3, #12]
 8000f9a:	2b01      	cmp	r3, #1
 8000f9c:	d106      	bne.n	8000fac <HAL_RCC_OscConfig+0x3e4>
 8000f9e:	4b2f      	ldr	r3, [pc, #188]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fa0:	6a1b      	ldr	r3, [r3, #32]
 8000fa2:	4a2e      	ldr	r2, [pc, #184]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fa4:	f043 0301 	orr.w	r3, r3, #1
 8000fa8:	6213      	str	r3, [r2, #32]
 8000faa:	e02d      	b.n	8001008 <HAL_RCC_OscConfig+0x440>
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d10c      	bne.n	8000fce <HAL_RCC_OscConfig+0x406>
 8000fb4:	4b29      	ldr	r3, [pc, #164]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fb6:	6a1b      	ldr	r3, [r3, #32]
 8000fb8:	4a28      	ldr	r2, [pc, #160]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fba:	f023 0301 	bic.w	r3, r3, #1
 8000fbe:	6213      	str	r3, [r2, #32]
 8000fc0:	4b26      	ldr	r3, [pc, #152]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fc2:	6a1b      	ldr	r3, [r3, #32]
 8000fc4:	4a25      	ldr	r2, [pc, #148]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fc6:	f023 0304 	bic.w	r3, r3, #4
 8000fca:	6213      	str	r3, [r2, #32]
 8000fcc:	e01c      	b.n	8001008 <HAL_RCC_OscConfig+0x440>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	68db      	ldr	r3, [r3, #12]
 8000fd2:	2b05      	cmp	r3, #5
 8000fd4:	d10c      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x428>
 8000fd6:	4b21      	ldr	r3, [pc, #132]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fd8:	6a1b      	ldr	r3, [r3, #32]
 8000fda:	4a20      	ldr	r2, [pc, #128]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fdc:	f043 0304 	orr.w	r3, r3, #4
 8000fe0:	6213      	str	r3, [r2, #32]
 8000fe2:	4b1e      	ldr	r3, [pc, #120]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fe4:	6a1b      	ldr	r3, [r3, #32]
 8000fe6:	4a1d      	ldr	r2, [pc, #116]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000fe8:	f043 0301 	orr.w	r3, r3, #1
 8000fec:	6213      	str	r3, [r2, #32]
 8000fee:	e00b      	b.n	8001008 <HAL_RCC_OscConfig+0x440>
 8000ff0:	4b1a      	ldr	r3, [pc, #104]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000ff2:	6a1b      	ldr	r3, [r3, #32]
 8000ff4:	4a19      	ldr	r2, [pc, #100]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	6213      	str	r3, [r2, #32]
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8000ffe:	6a1b      	ldr	r3, [r3, #32]
 8001000:	4a16      	ldr	r2, [pc, #88]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8001002:	f023 0304 	bic.w	r3, r3, #4
 8001006:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	68db      	ldr	r3, [r3, #12]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d015      	beq.n	800103c <HAL_RCC_OscConfig+0x474>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001010:	f7ff fa5c 	bl	80004cc <HAL_GetTick>
 8001014:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001016:	e00a      	b.n	800102e <HAL_RCC_OscConfig+0x466>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001018:	f7ff fa58 	bl	80004cc <HAL_GetTick>
 800101c:	4602      	mov	r2, r0
 800101e:	693b      	ldr	r3, [r7, #16]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	f241 3288 	movw	r2, #5000	; 0x1388
 8001026:	4293      	cmp	r3, r2
 8001028:	d901      	bls.n	800102e <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 800102a:	2303      	movs	r3, #3
 800102c:	e132      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800102e:	4b0b      	ldr	r3, [pc, #44]	; (800105c <HAL_RCC_OscConfig+0x494>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	f003 0302 	and.w	r3, r3, #2
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0ee      	beq.n	8001018 <HAL_RCC_OscConfig+0x450>
 800103a:	e01d      	b.n	8001078 <HAL_RCC_OscConfig+0x4b0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800103c:	f7ff fa46 	bl	80004cc <HAL_GetTick>
 8001040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001042:	e013      	b.n	800106c <HAL_RCC_OscConfig+0x4a4>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001044:	f7ff fa42 	bl	80004cc <HAL_GetTick>
 8001048:	4602      	mov	r2, r0
 800104a:	693b      	ldr	r3, [r7, #16]
 800104c:	1ad3      	subs	r3, r2, r3
 800104e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001052:	4293      	cmp	r3, r2
 8001054:	d90a      	bls.n	800106c <HAL_RCC_OscConfig+0x4a4>
        {
          return HAL_TIMEOUT;
 8001056:	2303      	movs	r3, #3
 8001058:	e11c      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
 800105a:	bf00      	nop
 800105c:	40021000 	.word	0x40021000
 8001060:	42420480 	.word	0x42420480
 8001064:	08001a24 	.word	0x08001a24
 8001068:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800106c:	4b8b      	ldr	r3, [pc, #556]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	2b00      	cmp	r3, #0
 8001076:	d1e5      	bne.n	8001044 <HAL_RCC_OscConfig+0x47c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001078:	7dfb      	ldrb	r3, [r7, #23]
 800107a:	2b01      	cmp	r3, #1
 800107c:	d105      	bne.n	800108a <HAL_RCC_OscConfig+0x4c2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800107e:	4b87      	ldr	r3, [pc, #540]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 8001080:	69db      	ldr	r3, [r3, #28]
 8001082:	4a86      	ldr	r2, [pc, #536]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 8001084:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001088:	61d3      	str	r3, [r2, #28]
  }

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69db      	ldr	r3, [r3, #28]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d00c      	beq.n	80010ac <HAL_RCC_OscConfig+0x4e4>
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	69db      	ldr	r3, [r3, #28]
 8001096:	2b01      	cmp	r3, #1
 8001098:	d008      	beq.n	80010ac <HAL_RCC_OscConfig+0x4e4>
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	69db      	ldr	r3, [r3, #28]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d004      	beq.n	80010ac <HAL_RCC_OscConfig+0x4e4>
 80010a2:	f240 21af 	movw	r1, #687	; 0x2af
 80010a6:	487e      	ldr	r0, [pc, #504]	; (80012a0 <HAL_RCC_OscConfig+0x6d8>)
 80010a8:	f7ff f90a 	bl	80002c0 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	f000 80ee 	beq.w	8001292 <HAL_RCC_OscConfig+0x6ca>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80010b6:	4b79      	ldr	r3, [pc, #484]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 030c 	and.w	r3, r3, #12
 80010be:	2b08      	cmp	r3, #8
 80010c0:	f000 80ce 	beq.w	8001260 <HAL_RCC_OscConfig+0x698>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	69db      	ldr	r3, [r3, #28]
 80010c8:	2b02      	cmp	r3, #2
 80010ca:	f040 80b2 	bne.w	8001232 <HAL_RCC_OscConfig+0x66a>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6a1b      	ldr	r3, [r3, #32]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d009      	beq.n	80010ea <HAL_RCC_OscConfig+0x522>
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6a1b      	ldr	r3, [r3, #32]
 80010da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010de:	d004      	beq.n	80010ea <HAL_RCC_OscConfig+0x522>
 80010e0:	f44f 712e 	mov.w	r1, #696	; 0x2b8
 80010e4:	486e      	ldr	r0, [pc, #440]	; (80012a0 <HAL_RCC_OscConfig+0x6d8>)
 80010e6:	f7ff f8eb 	bl	80002c0 <assert_failed>
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d04a      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80010fa:	d045      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001100:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001104:	d040      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800110a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800110e:	d03b      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001114:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001118:	d036      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800111e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8001122:	d031      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001128:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800112c:	d02c      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001132:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8001136:	d027      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800113c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001140:	d022      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001146:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800114a:	d01d      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001150:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8001154:	d018      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800115a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800115e:	d013      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001168:	d00e      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800116e:	f5b3 1f50 	cmp.w	r3, #3407872	; 0x340000
 8001172:	d009      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001178:	f5b3 1f60 	cmp.w	r3, #3670016	; 0x380000
 800117c:	d004      	beq.n	8001188 <HAL_RCC_OscConfig+0x5c0>
 800117e:	f240 21b9 	movw	r1, #697	; 0x2b9
 8001182:	4847      	ldr	r0, [pc, #284]	; (80012a0 <HAL_RCC_OscConfig+0x6d8>)
 8001184:	f7ff f89c 	bl	80002c0 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001188:	4b46      	ldr	r3, [pc, #280]	; (80012a4 <HAL_RCC_OscConfig+0x6dc>)
 800118a:	2200      	movs	r2, #0
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff f99d 	bl	80004cc <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x5e0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001196:	f7ff f999 	bl	80004cc <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x5e0>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e075      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80011a8:	4b3c      	ldr	r3, [pc, #240]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d1f0      	bne.n	8001196 <HAL_RCC_OscConfig+0x5ce>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	6a1b      	ldr	r3, [r3, #32]
 80011b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011bc:	d116      	bne.n	80011ec <HAL_RCC_OscConfig+0x624>
        {
          /* Check the parameter */
          assert_param(IS_RCC_HSE_PREDIV(RCC_OscInitStruct->HSEPredivValue));
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d009      	beq.n	80011da <HAL_RCC_OscConfig+0x612>
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80011ce:	d004      	beq.n	80011da <HAL_RCC_OscConfig+0x612>
 80011d0:	f240 21cf 	movw	r1, #719	; 0x2cf
 80011d4:	4832      	ldr	r0, [pc, #200]	; (80012a0 <HAL_RCC_OscConfig+0x6d8>)
 80011d6:	f7ff f873 	bl	80002c0 <assert_failed>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80011da:	4b30      	ldr	r3, [pc, #192]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	689b      	ldr	r3, [r3, #8]
 80011e6:	492d      	ldr	r1, [pc, #180]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 80011e8:	4313      	orrs	r3, r2
 80011ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80011ec:	4b2b      	ldr	r3, [pc, #172]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6a19      	ldr	r1, [r3, #32]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011fc:	430b      	orrs	r3, r1
 80011fe:	4927      	ldr	r1, [pc, #156]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 8001200:	4313      	orrs	r3, r2
 8001202:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001204:	4b27      	ldr	r3, [pc, #156]	; (80012a4 <HAL_RCC_OscConfig+0x6dc>)
 8001206:	2201      	movs	r2, #1
 8001208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800120a:	f7ff f95f 	bl	80004cc <HAL_GetTick>
 800120e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001210:	e008      	b.n	8001224 <HAL_RCC_OscConfig+0x65c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001212:	f7ff f95b 	bl	80004cc <HAL_GetTick>
 8001216:	4602      	mov	r2, r0
 8001218:	693b      	ldr	r3, [r7, #16]
 800121a:	1ad3      	subs	r3, r2, r3
 800121c:	2b02      	cmp	r3, #2
 800121e:	d901      	bls.n	8001224 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001220:	2303      	movs	r3, #3
 8001222:	e037      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001224:	4b1d      	ldr	r3, [pc, #116]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800122c:	2b00      	cmp	r3, #0
 800122e:	d0f0      	beq.n	8001212 <HAL_RCC_OscConfig+0x64a>
 8001230:	e02f      	b.n	8001292 <HAL_RCC_OscConfig+0x6ca>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <HAL_RCC_OscConfig+0x6dc>)
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001238:	f7ff f948 	bl	80004cc <HAL_GetTick>
 800123c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800123e:	e008      	b.n	8001252 <HAL_RCC_OscConfig+0x68a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001240:	f7ff f944 	bl	80004cc <HAL_GetTick>
 8001244:	4602      	mov	r2, r0
 8001246:	693b      	ldr	r3, [r7, #16]
 8001248:	1ad3      	subs	r3, r2, r3
 800124a:	2b02      	cmp	r3, #2
 800124c:	d901      	bls.n	8001252 <HAL_RCC_OscConfig+0x68a>
          {
            return HAL_TIMEOUT;
 800124e:	2303      	movs	r3, #3
 8001250:	e020      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001252:	4b12      	ldr	r3, [pc, #72]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d1f0      	bne.n	8001240 <HAL_RCC_OscConfig+0x678>
 800125e:	e018      	b.n	8001292 <HAL_RCC_OscConfig+0x6ca>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	69db      	ldr	r3, [r3, #28]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d101      	bne.n	800126c <HAL_RCC_OscConfig+0x6a4>
      {
        return HAL_ERROR;
 8001268:	2301      	movs	r3, #1
 800126a:	e013      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800126c:	4b0b      	ldr	r3, [pc, #44]	; (800129c <HAL_RCC_OscConfig+0x6d4>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6a1b      	ldr	r3, [r3, #32]
 800127c:	429a      	cmp	r2, r3
 800127e:	d106      	bne.n	800128e <HAL_RCC_OscConfig+0x6c6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800128a:	429a      	cmp	r2, r3
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x6ca>
        {
          return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e000      	b.n	8001294 <HAL_RCC_OscConfig+0x6cc>
        }
      }
    }
  }

  return HAL_OK;
 8001292:	2300      	movs	r3, #0
}
 8001294:	4618      	mov	r0, r3
 8001296:	3718      	adds	r7, #24
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40021000 	.word	0x40021000
 80012a0:	08001a24 	.word	0x08001a24
 80012a4:	42420060 	.word	0x42420060

080012a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d101      	bne.n	80012bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80012b8:	2301      	movs	r3, #1
 80012ba:	e176      	b.n	80015aa <HAL_RCC_ClockConfig+0x302>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0301 	and.w	r3, r3, #1
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d116      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x4e>
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0302 	and.w	r3, r3, #2
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d110      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x4e>
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	f003 0304 	and.w	r3, r3, #4
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d10a      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x4e>
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0308 	and.w	r3, r3, #8
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d104      	bne.n	80012f6 <HAL_RCC_ClockConfig+0x4e>
 80012ec:	f44f 714e 	mov.w	r1, #824	; 0x338
 80012f0:	4874      	ldr	r0, [pc, #464]	; (80014c4 <HAL_RCC_ClockConfig+0x21c>)
 80012f2:	f7fe ffe5 	bl	80002c0 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d00a      	beq.n	8001312 <HAL_RCC_ClockConfig+0x6a>
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	2b01      	cmp	r3, #1
 8001300:	d007      	beq.n	8001312 <HAL_RCC_ClockConfig+0x6a>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d004      	beq.n	8001312 <HAL_RCC_ClockConfig+0x6a>
 8001308:	f240 3139 	movw	r1, #825	; 0x339
 800130c:	486d      	ldr	r0, [pc, #436]	; (80014c4 <HAL_RCC_ClockConfig+0x21c>)
 800130e:	f7fe ffd7 	bl	80002c0 <assert_failed>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001312:	4b6d      	ldr	r3, [pc, #436]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0307 	and.w	r3, r3, #7
 800131a:	683a      	ldr	r2, [r7, #0]
 800131c:	429a      	cmp	r2, r3
 800131e:	d910      	bls.n	8001342 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001320:	4b69      	ldr	r3, [pc, #420]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f023 0207 	bic.w	r2, r3, #7
 8001328:	4967      	ldr	r1, [pc, #412]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	4313      	orrs	r3, r2
 800132e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001330:	4b65      	ldr	r3, [pc, #404]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	f003 0307 	and.w	r3, r3, #7
 8001338:	683a      	ldr	r2, [r7, #0]
 800133a:	429a      	cmp	r2, r3
 800133c:	d001      	beq.n	8001342 <HAL_RCC_ClockConfig+0x9a>
  {
    return HAL_ERROR;
 800133e:	2301      	movs	r3, #1
 8001340:	e133      	b.n	80015aa <HAL_RCC_ClockConfig+0x302>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f003 0302 	and.w	r3, r3, #2
 800134a:	2b00      	cmp	r3, #0
 800134c:	d049      	beq.n	80013e2 <HAL_RCC_ClockConfig+0x13a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0304 	and.w	r3, r3, #4
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_RCC_ClockConfig+0xbe>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 800135c:	685b      	ldr	r3, [r3, #4]
 800135e:	4a5b      	ldr	r2, [pc, #364]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 8001360:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8001364:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f003 0308 	and.w	r3, r3, #8
 800136e:	2b00      	cmp	r3, #0
 8001370:	d005      	beq.n	800137e <HAL_RCC_ClockConfig+0xd6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001372:	4b56      	ldr	r3, [pc, #344]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a55      	ldr	r2, [pc, #340]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 8001378:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800137c:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d024      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b80      	cmp	r3, #128	; 0x80
 800138c:	d020      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	689b      	ldr	r3, [r3, #8]
 8001392:	2b90      	cmp	r3, #144	; 0x90
 8001394:	d01c      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	689b      	ldr	r3, [r3, #8]
 800139a:	2ba0      	cmp	r3, #160	; 0xa0
 800139c:	d018      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	2bb0      	cmp	r3, #176	; 0xb0
 80013a4:	d014      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	689b      	ldr	r3, [r3, #8]
 80013aa:	2bc0      	cmp	r3, #192	; 0xc0
 80013ac:	d010      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	2bd0      	cmp	r3, #208	; 0xd0
 80013b4:	d00c      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	689b      	ldr	r3, [r3, #8]
 80013ba:	2be0      	cmp	r3, #224	; 0xe0
 80013bc:	d008      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2bf0      	cmp	r3, #240	; 0xf0
 80013c4:	d004      	beq.n	80013d0 <HAL_RCC_ClockConfig+0x128>
 80013c6:	f240 315f 	movw	r1, #863	; 0x35f
 80013ca:	483e      	ldr	r0, [pc, #248]	; (80014c4 <HAL_RCC_ClockConfig+0x21c>)
 80013cc:	f7fe ff78 	bl	80002c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80013d0:	4b3e      	ldr	r3, [pc, #248]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	493b      	ldr	r1, [pc, #236]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 80013de:	4313      	orrs	r3, r2
 80013e0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d051      	beq.n	8001492 <HAL_RCC_ClockConfig+0x1ea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	685b      	ldr	r3, [r3, #4]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d00c      	beq.n	8001410 <HAL_RCC_ClockConfig+0x168>
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d008      	beq.n	8001410 <HAL_RCC_ClockConfig+0x168>
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	685b      	ldr	r3, [r3, #4]
 8001402:	2b02      	cmp	r3, #2
 8001404:	d004      	beq.n	8001410 <HAL_RCC_ClockConfig+0x168>
 8001406:	f240 3166 	movw	r1, #870	; 0x366
 800140a:	482e      	ldr	r0, [pc, #184]	; (80014c4 <HAL_RCC_ClockConfig+0x21c>)
 800140c:	f7fe ff58 	bl	80002c0 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	2b01      	cmp	r3, #1
 8001416:	d107      	bne.n	8001428 <HAL_RCC_ClockConfig+0x180>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d115      	bne.n	8001450 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 8001424:	2301      	movs	r3, #1
 8001426:	e0c0      	b.n	80015aa <HAL_RCC_ClockConfig+0x302>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	685b      	ldr	r3, [r3, #4]
 800142c:	2b02      	cmp	r3, #2
 800142e:	d107      	bne.n	8001440 <HAL_RCC_ClockConfig+0x198>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001430:	4b26      	ldr	r3, [pc, #152]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001438:	2b00      	cmp	r3, #0
 800143a:	d109      	bne.n	8001450 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800143c:	2301      	movs	r3, #1
 800143e:	e0b4      	b.n	80015aa <HAL_RCC_ClockConfig+0x302>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001440:	4b22      	ldr	r3, [pc, #136]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f003 0302 	and.w	r3, r3, #2
 8001448:	2b00      	cmp	r3, #0
 800144a:	d101      	bne.n	8001450 <HAL_RCC_ClockConfig+0x1a8>
      {
        return HAL_ERROR;
 800144c:	2301      	movs	r3, #1
 800144e:	e0ac      	b.n	80015aa <HAL_RCC_ClockConfig+0x302>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001450:	4b1e      	ldr	r3, [pc, #120]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f023 0203 	bic.w	r2, r3, #3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	491b      	ldr	r1, [pc, #108]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001462:	f7ff f833 	bl	80004cc <HAL_GetTick>
 8001466:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001468:	e00a      	b.n	8001480 <HAL_RCC_ClockConfig+0x1d8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800146a:	f7ff f82f 	bl	80004cc <HAL_GetTick>
 800146e:	4602      	mov	r2, r0
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	f241 3288 	movw	r2, #5000	; 0x1388
 8001478:	4293      	cmp	r3, r2
 800147a:	d901      	bls.n	8001480 <HAL_RCC_ClockConfig+0x1d8>
      {
        return HAL_TIMEOUT;
 800147c:	2303      	movs	r3, #3
 800147e:	e094      	b.n	80015aa <HAL_RCC_ClockConfig+0x302>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001480:	4b12      	ldr	r3, [pc, #72]	; (80014cc <HAL_RCC_ClockConfig+0x224>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 020c 	and.w	r2, r3, #12
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	685b      	ldr	r3, [r3, #4]
 800148c:	009b      	lsls	r3, r3, #2
 800148e:	429a      	cmp	r2, r3
 8001490:	d1eb      	bne.n	800146a <HAL_RCC_ClockConfig+0x1c2>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	683a      	ldr	r2, [r7, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d217      	bcs.n	80014d0 <HAL_RCC_ClockConfig+0x228>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f023 0207 	bic.w	r2, r3, #7
 80014a8:	4907      	ldr	r1, [pc, #28]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80014b0:	4b05      	ldr	r3, [pc, #20]	; (80014c8 <HAL_RCC_ClockConfig+0x220>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0307 	and.w	r3, r3, #7
 80014b8:	683a      	ldr	r2, [r7, #0]
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d008      	beq.n	80014d0 <HAL_RCC_ClockConfig+0x228>
  {
    return HAL_ERROR;
 80014be:	2301      	movs	r3, #1
 80014c0:	e073      	b.n	80015aa <HAL_RCC_ClockConfig+0x302>
 80014c2:	bf00      	nop
 80014c4:	08001a24 	.word	0x08001a24
 80014c8:	40022000 	.word	0x40022000
 80014cc:	40021000 	.word	0x40021000
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d025      	beq.n	8001528 <HAL_RCC_ClockConfig+0x280>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	68db      	ldr	r3, [r3, #12]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d018      	beq.n	8001516 <HAL_RCC_ClockConfig+0x26e>
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	68db      	ldr	r3, [r3, #12]
 80014e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80014ec:	d013      	beq.n	8001516 <HAL_RCC_ClockConfig+0x26e>
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	68db      	ldr	r3, [r3, #12]
 80014f2:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 80014f6:	d00e      	beq.n	8001516 <HAL_RCC_ClockConfig+0x26e>
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	68db      	ldr	r3, [r3, #12]
 80014fc:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001500:	d009      	beq.n	8001516 <HAL_RCC_ClockConfig+0x26e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800150a:	d004      	beq.n	8001516 <HAL_RCC_ClockConfig+0x26e>
 800150c:	f44f 7169 	mov.w	r1, #932	; 0x3a4
 8001510:	4828      	ldr	r0, [pc, #160]	; (80015b4 <HAL_RCC_ClockConfig+0x30c>)
 8001512:	f7fe fed5 	bl	80002c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001516:	4b28      	ldr	r3, [pc, #160]	; (80015b8 <HAL_RCC_ClockConfig+0x310>)
 8001518:	685b      	ldr	r3, [r3, #4]
 800151a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	68db      	ldr	r3, [r3, #12]
 8001522:	4925      	ldr	r1, [pc, #148]	; (80015b8 <HAL_RCC_ClockConfig+0x310>)
 8001524:	4313      	orrs	r3, r2
 8001526:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0308 	and.w	r3, r3, #8
 8001530:	2b00      	cmp	r3, #0
 8001532:	d026      	beq.n	8001582 <HAL_RCC_ClockConfig+0x2da>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	691b      	ldr	r3, [r3, #16]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d018      	beq.n	800156e <HAL_RCC_ClockConfig+0x2c6>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	691b      	ldr	r3, [r3, #16]
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d013      	beq.n	800156e <HAL_RCC_ClockConfig+0x2c6>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	691b      	ldr	r3, [r3, #16]
 800154a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
 800154e:	d00e      	beq.n	800156e <HAL_RCC_ClockConfig+0x2c6>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	691b      	ldr	r3, [r3, #16]
 8001554:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8001558:	d009      	beq.n	800156e <HAL_RCC_ClockConfig+0x2c6>
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	691b      	ldr	r3, [r3, #16]
 800155e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001562:	d004      	beq.n	800156e <HAL_RCC_ClockConfig+0x2c6>
 8001564:	f240 31ab 	movw	r1, #939	; 0x3ab
 8001568:	4812      	ldr	r0, [pc, #72]	; (80015b4 <HAL_RCC_ClockConfig+0x30c>)
 800156a:	f7fe fea9 	bl	80002c0 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800156e:	4b12      	ldr	r3, [pc, #72]	; (80015b8 <HAL_RCC_ClockConfig+0x310>)
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	691b      	ldr	r3, [r3, #16]
 800157a:	00db      	lsls	r3, r3, #3
 800157c:	490e      	ldr	r1, [pc, #56]	; (80015b8 <HAL_RCC_ClockConfig+0x310>)
 800157e:	4313      	orrs	r3, r2
 8001580:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001582:	f000 f821 	bl	80015c8 <HAL_RCC_GetSysClockFreq>
 8001586:	4601      	mov	r1, r0
 8001588:	4b0b      	ldr	r3, [pc, #44]	; (80015b8 <HAL_RCC_ClockConfig+0x310>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	091b      	lsrs	r3, r3, #4
 800158e:	f003 030f 	and.w	r3, r3, #15
 8001592:	4a0a      	ldr	r2, [pc, #40]	; (80015bc <HAL_RCC_ClockConfig+0x314>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	fa21 f303 	lsr.w	r3, r1, r3
 800159a:	4a09      	ldr	r2, [pc, #36]	; (80015c0 <HAL_RCC_ClockConfig+0x318>)
 800159c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800159e:	4b09      	ldr	r3, [pc, #36]	; (80015c4 <HAL_RCC_ClockConfig+0x31c>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4618      	mov	r0, r3
 80015a4:	f7fe ff62 	bl	800046c <HAL_InitTick>

  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	3710      	adds	r7, #16
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bd80      	pop	{r7, pc}
 80015b2:	bf00      	nop
 80015b4:	08001a24 	.word	0x08001a24
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08001a70 	.word	0x08001a70
 80015c0:	20000000 	.word	0x20000000
 80015c4:	20000004 	.word	0x20000004

080015c8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80015c8:	b490      	push	{r4, r7}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80015ce:	4b2a      	ldr	r3, [pc, #168]	; (8001678 <HAL_RCC_GetSysClockFreq+0xb0>)
 80015d0:	1d3c      	adds	r4, r7, #4
 80015d2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80015d4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80015d8:	4b28      	ldr	r3, [pc, #160]	; (800167c <HAL_RCC_GetSysClockFreq+0xb4>)
 80015da:	881b      	ldrh	r3, [r3, #0]
 80015dc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
 80015e6:	2300      	movs	r3, #0
 80015e8:	627b      	str	r3, [r7, #36]	; 0x24
 80015ea:	2300      	movs	r3, #0
 80015ec:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80015ee:	2300      	movs	r3, #0
 80015f0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80015f2:	4b23      	ldr	r3, [pc, #140]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb8>)
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	f003 030c 	and.w	r3, r3, #12
 80015fe:	2b04      	cmp	r3, #4
 8001600:	d002      	beq.n	8001608 <HAL_RCC_GetSysClockFreq+0x40>
 8001602:	2b08      	cmp	r3, #8
 8001604:	d003      	beq.n	800160e <HAL_RCC_GetSysClockFreq+0x46>
 8001606:	e02d      	b.n	8001664 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001608:	4b1e      	ldr	r3, [pc, #120]	; (8001684 <HAL_RCC_GetSysClockFreq+0xbc>)
 800160a:	623b      	str	r3, [r7, #32]
      break;
 800160c:	e02d      	b.n	800166a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800160e:	69fb      	ldr	r3, [r7, #28]
 8001610:	0c9b      	lsrs	r3, r3, #18
 8001612:	f003 030f 	and.w	r3, r3, #15
 8001616:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800161a:	4413      	add	r3, r2
 800161c:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001620:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001622:	69fb      	ldr	r3, [r7, #28]
 8001624:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001628:	2b00      	cmp	r3, #0
 800162a:	d013      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800162c:	4b14      	ldr	r3, [pc, #80]	; (8001680 <HAL_RCC_GetSysClockFreq+0xb8>)
 800162e:	685b      	ldr	r3, [r3, #4]
 8001630:	0c5b      	lsrs	r3, r3, #17
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800163a:	4413      	add	r3, r2
 800163c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001640:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	4a0f      	ldr	r2, [pc, #60]	; (8001684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001646:	fb02 f203 	mul.w	r2, r2, r3
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001650:	627b      	str	r3, [r7, #36]	; 0x24
 8001652:	e004      	b.n	800165e <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001654:	697b      	ldr	r3, [r7, #20]
 8001656:	4a0c      	ldr	r2, [pc, #48]	; (8001688 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001658:	fb02 f303 	mul.w	r3, r2, r3
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800165e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001660:	623b      	str	r3, [r7, #32]
      break;
 8001662:	e002      	b.n	800166a <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001666:	623b      	str	r3, [r7, #32]
      break;
 8001668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800166a:	6a3b      	ldr	r3, [r7, #32]
}
 800166c:	4618      	mov	r0, r3
 800166e:	3728      	adds	r7, #40	; 0x28
 8001670:	46bd      	mov	sp, r7
 8001672:	bc90      	pop	{r4, r7}
 8001674:	4770      	bx	lr
 8001676:	bf00      	nop
 8001678:	08001a5c 	.word	0x08001a5c
 800167c:	08001a6c 	.word	0x08001a6c
 8001680:	40021000 	.word	0x40021000
 8001684:	007a1200 	.word	0x007a1200
 8001688:	003d0900 	.word	0x003d0900

0800168c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001694:	4b0a      	ldr	r3, [pc, #40]	; (80016c0 <RCC_Delay+0x34>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a0a      	ldr	r2, [pc, #40]	; (80016c4 <RCC_Delay+0x38>)
 800169a:	fba2 2303 	umull	r2, r3, r2, r3
 800169e:	0a5b      	lsrs	r3, r3, #9
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	fb02 f303 	mul.w	r3, r2, r3
 80016a6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80016a8:	bf00      	nop
  }
  while (Delay --);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	1e5a      	subs	r2, r3, #1
 80016ae:	60fa      	str	r2, [r7, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d1f9      	bne.n	80016a8 <RCC_Delay+0x1c>
}
 80016b4:	bf00      	nop
 80016b6:	3714      	adds	r7, #20
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bc80      	pop	{r7}
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	20000000 	.word	0x20000000
 80016c4:	10624dd3 	.word	0x10624dd3

080016c8 <rola_task1ms>:
	rola.out = 0u;
	rola.step = 0u;
}

void rola_task1ms(void)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, (rola.out&0x01u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80016cc:	4b2f      	ldr	r3, [pc, #188]	; (800178c <rola_task1ms+0xc4>)
 80016ce:	781b      	ldrb	r3, [r3, #0]
 80016d0:	f003 0301 	and.w	r3, r3, #1
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	461a      	mov	r2, r3
 80016d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80016dc:	482c      	ldr	r0, [pc, #176]	; (8001790 <rola_task1ms+0xc8>)
 80016de:	f7ff fa41 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3,  (rola.out&0x02u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80016e2:	4b2a      	ldr	r3, [pc, #168]	; (800178c <rola_task1ms+0xc4>)
 80016e4:	781b      	ldrb	r3, [r3, #0]
 80016e6:	085b      	lsrs	r3, r3, #1
 80016e8:	b2db      	uxtb	r3, r3
 80016ea:	f003 0301 	and.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	461a      	mov	r2, r3
 80016f2:	2108      	movs	r1, #8
 80016f4:	4827      	ldr	r0, [pc, #156]	; (8001794 <rola_task1ms+0xcc>)
 80016f6:	f7ff fa35 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4,  (rola.out&0x04u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <rola_task1ms+0xc4>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	089b      	lsrs	r3, r3, #2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	f003 0301 	and.w	r3, r3, #1
 8001706:	b2db      	uxtb	r3, r3
 8001708:	461a      	mov	r2, r3
 800170a:	2110      	movs	r1, #16
 800170c:	4821      	ldr	r0, [pc, #132]	; (8001794 <rola_task1ms+0xcc>)
 800170e:	f7ff fa29 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5,  (rola.out&0x08u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001712:	4b1e      	ldr	r3, [pc, #120]	; (800178c <rola_task1ms+0xc4>)
 8001714:	781b      	ldrb	r3, [r3, #0]
 8001716:	08db      	lsrs	r3, r3, #3
 8001718:	b2db      	uxtb	r3, r3
 800171a:	f003 0301 	and.w	r3, r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	461a      	mov	r2, r3
 8001722:	2120      	movs	r1, #32
 8001724:	481b      	ldr	r0, [pc, #108]	; (8001794 <rola_task1ms+0xcc>)
 8001726:	f7ff fa1d 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6,  (rola.out&0x10u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800172a:	4b18      	ldr	r3, [pc, #96]	; (800178c <rola_task1ms+0xc4>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	091b      	lsrs	r3, r3, #4
 8001730:	b2db      	uxtb	r3, r3
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	b2db      	uxtb	r3, r3
 8001738:	461a      	mov	r2, r3
 800173a:	2140      	movs	r1, #64	; 0x40
 800173c:	4815      	ldr	r0, [pc, #84]	; (8001794 <rola_task1ms+0xcc>)
 800173e:	f7ff fa11 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_7,  (rola.out&0x20u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001742:	4b12      	ldr	r3, [pc, #72]	; (800178c <rola_task1ms+0xc4>)
 8001744:	781b      	ldrb	r3, [r3, #0]
 8001746:	095b      	lsrs	r3, r3, #5
 8001748:	b2db      	uxtb	r3, r3
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	b2db      	uxtb	r3, r3
 8001750:	461a      	mov	r2, r3
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	480f      	ldr	r0, [pc, #60]	; (8001794 <rola_task1ms+0xcc>)
 8001756:	f7ff fa05 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8,  (rola.out&0x40u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 800175a:	4b0c      	ldr	r3, [pc, #48]	; (800178c <rola_task1ms+0xc4>)
 800175c:	781b      	ldrb	r3, [r3, #0]
 800175e:	099b      	lsrs	r3, r3, #6
 8001760:	b2db      	uxtb	r3, r3
 8001762:	f003 0301 	and.w	r3, r3, #1
 8001766:	b2db      	uxtb	r3, r3
 8001768:	461a      	mov	r2, r3
 800176a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800176e:	4809      	ldr	r0, [pc, #36]	; (8001794 <rola_task1ms+0xcc>)
 8001770:	f7ff f9f8 	bl	8000b64 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9,  (rola.out&0x80u)?GPIO_PIN_SET:GPIO_PIN_RESET);
 8001774:	4b05      	ldr	r3, [pc, #20]	; (800178c <rola_task1ms+0xc4>)
 8001776:	781b      	ldrb	r3, [r3, #0]
 8001778:	09db      	lsrs	r3, r3, #7
 800177a:	b2db      	uxtb	r3, r3
 800177c:	461a      	mov	r2, r3
 800177e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001782:	4804      	ldr	r0, [pc, #16]	; (8001794 <rola_task1ms+0xcc>)
 8001784:	f7ff f9ee 	bl	8000b64 <HAL_GPIO_WritePin>
}
 8001788:	bf00      	nop
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20000030 	.word	0x20000030
 8001790:	40010800 	.word	0x40010800
 8001794:	40010c00 	.word	0x40010c00

08001798 <rola_task>:

void rola_task(void)
{
 8001798:	b480      	push	{r7}
 800179a:	af00      	add	r7, sp, #0
	rola.step++;
 800179c:	4b0c      	ldr	r3, [pc, #48]	; (80017d0 <rola_task+0x38>)
 800179e:	785b      	ldrb	r3, [r3, #1]
 80017a0:	3301      	adds	r3, #1
 80017a2:	b2da      	uxtb	r2, r3
 80017a4:	4b0a      	ldr	r3, [pc, #40]	; (80017d0 <rola_task+0x38>)
 80017a6:	705a      	strb	r2, [r3, #1]
	rola.step &= 0x07;
 80017a8:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <rola_task+0x38>)
 80017aa:	785b      	ldrb	r3, [r3, #1]
 80017ac:	f003 0307 	and.w	r3, r3, #7
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4b07      	ldr	r3, [pc, #28]	; (80017d0 <rola_task+0x38>)
 80017b4:	705a      	strb	r2, [r3, #1]
	rola.out = (0x01u << rola.step);
 80017b6:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <rola_task+0x38>)
 80017b8:	785b      	ldrb	r3, [r3, #1]
 80017ba:	461a      	mov	r2, r3
 80017bc:	2301      	movs	r3, #1
 80017be:	4093      	lsls	r3, r2
 80017c0:	b2da      	uxtb	r2, r3
 80017c2:	4b03      	ldr	r3, [pc, #12]	; (80017d0 <rola_task+0x38>)
 80017c4:	701a      	strb	r2, [r3, #0]
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bc80      	pop	{r7}
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	20000030 	.word	0x20000030

080017d4 <task_2pow0>:

#include "Framework/Scheduler/scheduler.h"
#include "ApplicationSoftware/RotateLamp/rotatelamp.h"

void task_2pow0(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0
	rola_task1ms();
 80017d8:	f7ff ff76 	bl	80016c8 <rola_task1ms>
}
 80017dc:	bf00      	nop
 80017de:	bd80      	pop	{r7, pc}

080017e0 <task_2pow1>:

void task_2pow1(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <task_2pow2>:

void task_2pow2(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
}
 80017f0:	bf00      	nop
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <task_2pow3>:

void task_2pow3(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr

08001804 <task_2pow4>:

void task_2pow4(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <task_2pow5>:

void task_2pow5(void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <task_2pow6>:

void task_2pow6(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	af00      	add	r7, sp, #0
	rola_task();
 8001820:	f7ff ffba 	bl	8001798 <rola_task>
}
 8001824:	bf00      	nop
 8001826:	bd80      	pop	{r7, pc}

08001828 <task_2pow7>:

void task_2pow7(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	bc80      	pop	{r7}
 8001832:	4770      	bx	lr

08001834 <task_2pow8>:

void task_2pow8(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
}
 8001838:	bf00      	nop
 800183a:	46bd      	mov	sp, r7
 800183c:	bc80      	pop	{r7}
 800183e:	4770      	bx	lr

08001840 <scheduler_init>:
scheduler_t;

static scheduler_t scheduler;

void scheduler_init(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
	scheduler.input.tick = 0u;
 8001844:	4b06      	ldr	r3, [pc, #24]	; (8001860 <scheduler_init+0x20>)
 8001846:	2200      	movs	r2, #0
 8001848:	701a      	strb	r2, [r3, #0]
	scheduler.local.tick = 0u;
 800184a:	4b05      	ldr	r3, [pc, #20]	; (8001860 <scheduler_init+0x20>)
 800184c:	2200      	movs	r2, #0
 800184e:	705a      	strb	r2, [r3, #1]
	scheduler.local.count = 0u;
 8001850:	4b03      	ldr	r3, [pc, #12]	; (8001860 <scheduler_init+0x20>)
 8001852:	2200      	movs	r2, #0
 8001854:	709a      	strb	r2, [r3, #2]
}
 8001856:	bf00      	nop
 8001858:	46bd      	mov	sp, r7
 800185a:	bc80      	pop	{r7}
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop
 8001860:	20000028 	.word	0x20000028

08001864 <scheduler_main>:

void scheduler_main(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	af00      	add	r7, sp, #0
	for(;;)
	{
		if( scheduler.local.tick != scheduler.input.tick )
 8001868:	4b2c      	ldr	r3, [pc, #176]	; (800191c <scheduler_main+0xb8>)
 800186a:	785a      	ldrb	r2, [r3, #1]
 800186c:	4b2b      	ldr	r3, [pc, #172]	; (800191c <scheduler_main+0xb8>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	429a      	cmp	r2, r3
 8001872:	d0f9      	beq.n	8001868 <scheduler_main+0x4>
		{
			/* sync */
			scheduler.local.tick = scheduler.input.tick;
 8001874:	4b29      	ldr	r3, [pc, #164]	; (800191c <scheduler_main+0xb8>)
 8001876:	781a      	ldrb	r2, [r3, #0]
 8001878:	4b28      	ldr	r3, [pc, #160]	; (800191c <scheduler_main+0xb8>)
 800187a:	705a      	strb	r2, [r3, #1]

			/* schedule tasks */
			                                      task_2pow0();
 800187c:	f7ff ffaa 	bl	80017d4 <task_2pow0>
			if( scheduler.local.count&0x01 )      task_2pow1();
 8001880:	4b26      	ldr	r3, [pc, #152]	; (800191c <scheduler_main+0xb8>)
 8001882:	789b      	ldrb	r3, [r3, #2]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b00      	cmp	r3, #0
 800188a:	d002      	beq.n	8001892 <scheduler_main+0x2e>
 800188c:	f7ff ffa8 	bl	80017e0 <task_2pow1>
 8001890:	e03c      	b.n	800190c <scheduler_main+0xa8>
			else if( scheduler.local.count&0x02 ) task_2pow2();
 8001892:	4b22      	ldr	r3, [pc, #136]	; (800191c <scheduler_main+0xb8>)
 8001894:	789b      	ldrb	r3, [r3, #2]
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <scheduler_main+0x40>
 800189e:	f7ff ffa5 	bl	80017ec <task_2pow2>
 80018a2:	e033      	b.n	800190c <scheduler_main+0xa8>
			else if( scheduler.local.count&0x04 ) task_2pow3();
 80018a4:	4b1d      	ldr	r3, [pc, #116]	; (800191c <scheduler_main+0xb8>)
 80018a6:	789b      	ldrb	r3, [r3, #2]
 80018a8:	f003 0304 	and.w	r3, r3, #4
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d002      	beq.n	80018b6 <scheduler_main+0x52>
 80018b0:	f7ff ffa2 	bl	80017f8 <task_2pow3>
 80018b4:	e02a      	b.n	800190c <scheduler_main+0xa8>
			else if( scheduler.local.count&0x08 ) task_2pow4();
 80018b6:	4b19      	ldr	r3, [pc, #100]	; (800191c <scheduler_main+0xb8>)
 80018b8:	789b      	ldrb	r3, [r3, #2]
 80018ba:	f003 0308 	and.w	r3, r3, #8
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d002      	beq.n	80018c8 <scheduler_main+0x64>
 80018c2:	f7ff ff9f 	bl	8001804 <task_2pow4>
 80018c6:	e021      	b.n	800190c <scheduler_main+0xa8>
			else if( scheduler.local.count&0x10 ) task_2pow5();
 80018c8:	4b14      	ldr	r3, [pc, #80]	; (800191c <scheduler_main+0xb8>)
 80018ca:	789b      	ldrb	r3, [r3, #2]
 80018cc:	f003 0310 	and.w	r3, r3, #16
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <scheduler_main+0x76>
 80018d4:	f7ff ff9c 	bl	8001810 <task_2pow5>
 80018d8:	e018      	b.n	800190c <scheduler_main+0xa8>
			else if( scheduler.local.count&0x20 ) task_2pow6();
 80018da:	4b10      	ldr	r3, [pc, #64]	; (800191c <scheduler_main+0xb8>)
 80018dc:	789b      	ldrb	r3, [r3, #2]
 80018de:	f003 0320 	and.w	r3, r3, #32
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d002      	beq.n	80018ec <scheduler_main+0x88>
 80018e6:	f7ff ff99 	bl	800181c <task_2pow6>
 80018ea:	e00f      	b.n	800190c <scheduler_main+0xa8>
			else if( scheduler.local.count&0x40 ) task_2pow7();
 80018ec:	4b0b      	ldr	r3, [pc, #44]	; (800191c <scheduler_main+0xb8>)
 80018ee:	789b      	ldrb	r3, [r3, #2]
 80018f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d002      	beq.n	80018fe <scheduler_main+0x9a>
 80018f8:	f7ff ff96 	bl	8001828 <task_2pow7>
 80018fc:	e006      	b.n	800190c <scheduler_main+0xa8>
			else if( scheduler.local.count&0x80 ) task_2pow8();
 80018fe:	4b07      	ldr	r3, [pc, #28]	; (800191c <scheduler_main+0xb8>)
 8001900:	789b      	ldrb	r3, [r3, #2]
 8001902:	b25b      	sxtb	r3, r3
 8001904:	2b00      	cmp	r3, #0
 8001906:	da01      	bge.n	800190c <scheduler_main+0xa8>
 8001908:	f7ff ff94 	bl	8001834 <task_2pow8>
			else ;

			/* count up */
			scheduler.local.count++;
 800190c:	4b03      	ldr	r3, [pc, #12]	; (800191c <scheduler_main+0xb8>)
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	3301      	adds	r3, #1
 8001912:	b2da      	uxtb	r2, r3
 8001914:	4b01      	ldr	r3, [pc, #4]	; (800191c <scheduler_main+0xb8>)
 8001916:	709a      	strb	r2, [r3, #2]
		if( scheduler.local.tick != scheduler.input.tick )
 8001918:	e7a6      	b.n	8001868 <scheduler_main+0x4>
 800191a:	bf00      	nop
 800191c:	20000028 	.word	0x20000028

08001920 <scheduler_ei_tickUp_ISR>:
		}
	}
}

void scheduler_ei_tickUp_ISR(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
	scheduler.input.tick++;
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <scheduler_ei_tickUp_ISR+0x18>)
 8001926:	781b      	ldrb	r3, [r3, #0]
 8001928:	3301      	adds	r3, #1
 800192a:	b2da      	uxtb	r2, r3
 800192c:	4b02      	ldr	r3, [pc, #8]	; (8001938 <scheduler_ei_tickUp_ISR+0x18>)
 800192e:	701a      	strb	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	bc80      	pop	{r7}
 8001936:	4770      	bx	lr
 8001938:	20000028 	.word	0x20000028

0800193c <__libc_init_array>:
 800193c:	b570      	push	{r4, r5, r6, lr}
 800193e:	2500      	movs	r5, #0
 8001940:	4e0c      	ldr	r6, [pc, #48]	; (8001974 <__libc_init_array+0x38>)
 8001942:	4c0d      	ldr	r4, [pc, #52]	; (8001978 <__libc_init_array+0x3c>)
 8001944:	1ba4      	subs	r4, r4, r6
 8001946:	10a4      	asrs	r4, r4, #2
 8001948:	42a5      	cmp	r5, r4
 800194a:	d109      	bne.n	8001960 <__libc_init_array+0x24>
 800194c:	f000 f822 	bl	8001994 <_init>
 8001950:	2500      	movs	r5, #0
 8001952:	4e0a      	ldr	r6, [pc, #40]	; (800197c <__libc_init_array+0x40>)
 8001954:	4c0a      	ldr	r4, [pc, #40]	; (8001980 <__libc_init_array+0x44>)
 8001956:	1ba4      	subs	r4, r4, r6
 8001958:	10a4      	asrs	r4, r4, #2
 800195a:	42a5      	cmp	r5, r4
 800195c:	d105      	bne.n	800196a <__libc_init_array+0x2e>
 800195e:	bd70      	pop	{r4, r5, r6, pc}
 8001960:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001964:	4798      	blx	r3
 8001966:	3501      	adds	r5, #1
 8001968:	e7ee      	b.n	8001948 <__libc_init_array+0xc>
 800196a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800196e:	4798      	blx	r3
 8001970:	3501      	adds	r5, #1
 8001972:	e7f2      	b.n	800195a <__libc_init_array+0x1e>
 8001974:	08001a80 	.word	0x08001a80
 8001978:	08001a80 	.word	0x08001a80
 800197c:	08001a80 	.word	0x08001a80
 8001980:	08001a84 	.word	0x08001a84

08001984 <memset>:
 8001984:	4603      	mov	r3, r0
 8001986:	4402      	add	r2, r0
 8001988:	4293      	cmp	r3, r2
 800198a:	d100      	bne.n	800198e <memset+0xa>
 800198c:	4770      	bx	lr
 800198e:	f803 1b01 	strb.w	r1, [r3], #1
 8001992:	e7f9      	b.n	8001988 <memset+0x4>

08001994 <_init>:
 8001994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001996:	bf00      	nop
 8001998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800199a:	bc08      	pop	{r3}
 800199c:	469e      	mov	lr, r3
 800199e:	4770      	bx	lr

080019a0 <_fini>:
 80019a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019a2:	bf00      	nop
 80019a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80019a6:	bc08      	pop	{r3}
 80019a8:	469e      	mov	lr, r3
 80019aa:	4770      	bx	lr
